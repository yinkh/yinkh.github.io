{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u90ae\u7bb1\uff1ayin-kh@qq.com","title":"\u4e3b\u9875"},{"location":"index2/","tags":["HTML5","JavaScript","CSS","Other"],"text":"\u90ae\u7bb1\uff1a614457662@qq.com","title":"Selenium"},{"location":"mkdocs/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"mkdocs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"tags/","text":"\u6807\u7b7e \u6587\u7ae0\u5217\u8868: CSS Selenium HTML5 Selenium JavaScript Selenium Other Selenium","title":"\u6807\u7b7e"},{"location":"tags/#_1","text":"\u6587\u7ae0\u5217\u8868:","title":"\u6807\u7b7e"},{"location":"tags/#css","text":"Selenium","title":"CSS"},{"location":"tags/#html5","text":"Selenium","title":"HTML5"},{"location":"tags/#javascript","text":"Selenium","title":"JavaScript"},{"location":"tags/#other","text":"Selenium","title":"Other"},{"location":"cache/redis/zset/","text":"1\u3001\u4f7f\u7528\u573a\u5408 \u6709\u5927\u91cf\u5b9e\u65f6\u66f4\u65b0\u7684\u6570\u636e\u5f85\u6392\u5e8f\uff0c\u4f7f\u7528Redis\u4e2d\u7684SortedSet\u964d\u4f4e\u4ee3\u7801\u590d\u6742\u5ea6\u5e76\u83b7\u5f97\u8f83\u597d\u7684\u6392\u5e8f\u65f6\u6548\u6027\u3002 2\u3001Redis \u5b89\u88c5 windows:\u524d\u5f80 github \u4e0b\u8f7d\u6700\u65b0\u7684msi\u6587\u4ef6\u8fdb\u884c\u5b89\u88c5\u5373\u53ef\u3002 ubuntu: sudo apt-get install redis-server 2\u3001django-redis \u5b89\u88c5 pip install django-redis==4.8.0 \u8bbe\u7f6e settings.py # \u7f13\u5b58 CACHES = { \"default\" : { \"BACKEND\" : \"django_redis.cache.RedisCache\" , \"LOCATION\" : \"redis://127.0.0.1:6379/1\" , \"OPTIONS\" : { \"CLIENT_CLASS\" : \"django_redis.client.DefaultClient\" , } } } \u6587\u6863 Django-Redis\u4e2d\u6587\u6587\u6863 \u83b7\u53d6\u539f\u751fRedis\u8fde\u63a5 \u5173\u4e8e SortedSet \u7684\u76f8\u5173\u64cd\u4f5c\uff0c django-redis \u4e0d\u63d0\u4f9b\u4efb\u4f55\u652f\u6491\uff0c\u4f46\u662f django-redis \u63d0\u4f9b\u4e86\u63a5\u53e3\u53ef\u6362\u53d6\u5230\u539f\u751f redis \u5ba2\u6237\u7aef\uff1a from django_redis import get_redis_connection redis = get_redis_connection(\"default\") 3\u3001\u5e38\u7528\u547d\u4ee4 zadd total_point \u4e3a\u6709\u5e8f\u96c6\u540d\u79f0\uff0c user.point \u4e3a\u503c\uff0c user.id \u4e3a\u952e\u3002 redis.zadd('total_point', user.point, user.id) \u540c\u65f6\u6dfb\u52a0\u591a\u4e2a\u952e\u503c\u5bf9\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c1\u662f\u4f7f\u7528 *args : score1, name1, score2, name2, ... \uff0c2\u662f\u4f7f\u7528 **kwargs : name1=score1, name2=score2, ... \u3002 redis.zadd('my-key', 1.1, 'name1', 2.2, 'name2', name3=3.3, name4=4.4) zscore \u6839\u636e\u952e\u53bb\u5bf9\u5e94\u6709\u5e8f\u96c6\u67e5\u627e\u503c\u3002 redis.zscore('total_point', user.id) zrank \u6839\u636e\u952e\u53bb\u5bf9\u5e94\u6709\u5e8f\u96c6\u83b7\u53d6\u6392\u540d\uff0c\u503c\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u7b2c\u4e00\u540d\u6392\u540d\u4e3a0\u3002 redis.zrank('total_point', user.id) + 1 zrevrank \u6839\u636e\u952e\u53bb\u5bf9\u5e94\u6709\u5e8f\u96c6\u83b7\u53d6\u6392\u540d\uff0c\u503c\u4ece\u5927\u5230\u5c0f\u8fdb\u884c\u6392\u5e8f\uff0c\u7b2c\u4e00\u540d\u6392\u540d\u4e3a0\u3002 redis.zrevrank('total_point', user.id) + 1 zremrangebyrank \u79fb\u9664\u6709\u5e8f\u96c6\u4e2d\u6307\u5b9a\u6392\u540d\u533a\u95f4\u7684\u6240\u6709\u6210\u5458\uff0c0\u8868\u793a\u7b2c\u4e00\u4e2a\u6210\u5458\uff0c-1\u8868\u793a\u6700\u540e\u4e00\u4e2a\u6210\u5458\u3002 # \u6e05\u7a7a\u6709\u7eed\u96c6yesterday_point redis.zremrangebyrank('yesterday_point', 0, -1) Redis\u547d\u4ee4\u53c2\u8003","title":"Redis SortedSet(\u6709\u5e8f\u96c6\u5408)\u4f7f\u7528\u7b14\u8bb0"},{"location":"cache/redis/zset/#1","text":"\u6709\u5927\u91cf\u5b9e\u65f6\u66f4\u65b0\u7684\u6570\u636e\u5f85\u6392\u5e8f\uff0c\u4f7f\u7528Redis\u4e2d\u7684SortedSet\u964d\u4f4e\u4ee3\u7801\u590d\u6742\u5ea6\u5e76\u83b7\u5f97\u8f83\u597d\u7684\u6392\u5e8f\u65f6\u6548\u6027\u3002","title":"1\u3001\u4f7f\u7528\u573a\u5408"},{"location":"cache/redis/zset/#2redis","text":"\u5b89\u88c5 windows:\u524d\u5f80 github \u4e0b\u8f7d\u6700\u65b0\u7684msi\u6587\u4ef6\u8fdb\u884c\u5b89\u88c5\u5373\u53ef\u3002 ubuntu: sudo apt-get install redis-server","title":"2\u3001Redis"},{"location":"cache/redis/zset/#2django-redis","text":"\u5b89\u88c5 pip install django-redis==4.8.0 \u8bbe\u7f6e settings.py # \u7f13\u5b58 CACHES = { \"default\" : { \"BACKEND\" : \"django_redis.cache.RedisCache\" , \"LOCATION\" : \"redis://127.0.0.1:6379/1\" , \"OPTIONS\" : { \"CLIENT_CLASS\" : \"django_redis.client.DefaultClient\" , } } } \u6587\u6863 Django-Redis\u4e2d\u6587\u6587\u6863 \u83b7\u53d6\u539f\u751fRedis\u8fde\u63a5 \u5173\u4e8e SortedSet \u7684\u76f8\u5173\u64cd\u4f5c\uff0c django-redis \u4e0d\u63d0\u4f9b\u4efb\u4f55\u652f\u6491\uff0c\u4f46\u662f django-redis \u63d0\u4f9b\u4e86\u63a5\u53e3\u53ef\u6362\u53d6\u5230\u539f\u751f redis \u5ba2\u6237\u7aef\uff1a from django_redis import get_redis_connection redis = get_redis_connection(\"default\")","title":"2\u3001django-redis"},{"location":"cache/redis/zset/#3","text":"zadd total_point \u4e3a\u6709\u5e8f\u96c6\u540d\u79f0\uff0c user.point \u4e3a\u503c\uff0c user.id \u4e3a\u952e\u3002 redis.zadd('total_point', user.point, user.id) \u540c\u65f6\u6dfb\u52a0\u591a\u4e2a\u952e\u503c\u5bf9\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c1\u662f\u4f7f\u7528 *args : score1, name1, score2, name2, ... \uff0c2\u662f\u4f7f\u7528 **kwargs : name1=score1, name2=score2, ... \u3002 redis.zadd('my-key', 1.1, 'name1', 2.2, 'name2', name3=3.3, name4=4.4) zscore \u6839\u636e\u952e\u53bb\u5bf9\u5e94\u6709\u5e8f\u96c6\u67e5\u627e\u503c\u3002 redis.zscore('total_point', user.id) zrank \u6839\u636e\u952e\u53bb\u5bf9\u5e94\u6709\u5e8f\u96c6\u83b7\u53d6\u6392\u540d\uff0c\u503c\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u7b2c\u4e00\u540d\u6392\u540d\u4e3a0\u3002 redis.zrank('total_point', user.id) + 1 zrevrank \u6839\u636e\u952e\u53bb\u5bf9\u5e94\u6709\u5e8f\u96c6\u83b7\u53d6\u6392\u540d\uff0c\u503c\u4ece\u5927\u5230\u5c0f\u8fdb\u884c\u6392\u5e8f\uff0c\u7b2c\u4e00\u540d\u6392\u540d\u4e3a0\u3002 redis.zrevrank('total_point', user.id) + 1 zremrangebyrank \u79fb\u9664\u6709\u5e8f\u96c6\u4e2d\u6307\u5b9a\u6392\u540d\u533a\u95f4\u7684\u6240\u6709\u6210\u5458\uff0c0\u8868\u793a\u7b2c\u4e00\u4e2a\u6210\u5458\uff0c-1\u8868\u793a\u6700\u540e\u4e00\u4e2a\u6210\u5458\u3002 # \u6e05\u7a7a\u6709\u7eed\u96c6yesterday_point redis.zremrangebyrank('yesterday_point', 0, -1) Redis\u547d\u4ee4\u53c2\u8003","title":"3\u3001\u5e38\u7528\u547d\u4ee4"},{"location":"front/javascript/javascript-note/","text":"JavaScripts: \ufefflocation.replace(location.href) \u53ea\u5237\u65b0\u9875\u9762\uff0c\u4e0d\u5237\u65b0\u9759\u6001\u6587\u4ef6\uff0c\u76f8\u5f53\u4e8eF5. loaction.reload(true) \u5237\u65b0\u9875\u9762\u53ca\u9759\u6001\u6587\u4ef6\uff0c\u76f8\u5f53\u4e8ectrl+F5. \u5728ajax\u7684success\u4e2dhistory.back()\\history.go(-1)\u4e0d\u751f\u6548,\u9700\u8981\u4f7f\u7528hostory.go(-2) Html: <input type=\"file\" name=\"excel\" accept=\".xls\" required> \u4ee3\u8868\u8f93\u5165\u7c7b\u578b\u4e3afile \u683c\u5f0f\u4e3a.xls \u5728POST\u4e2d\u53c2\u6570\u540d\u4e3aexcel \u5fc5\u586b <input type=\"number\" step=\"any\"> \u8bbe\u7f6e\u8f93\u5165\u6570\u5b57\u5c0f\u6570\u70b9\u4e0d\u9650 colgroup col\u6807\u7b7e\u53ef\u4ee5\u63a7\u5236\u8868\u683c\u663e\u793a\u7684\u6bd4\u4f8b\uff0ccol\u4e3a\u7a7a\u65f6\u8868\u793a\u8be5\u884c\u5360\u636e\u5269\u4e0b\u7684\u6240\u6709\u5bbd\u5ea6\uff0c\u4f46\u5fc5\u987b\u914d\u5408 tbody \u6807\u7b7e\u4f7f\u7528\u4f7f\u7528\u3002eg\uff1a < table class = \"layui-table\" style = \"margin-top: 10px\" > < colgroup > < col width = \"50\" > < col width = \"100\" > < col > < col width = \"200\" > < col width = \"200\" > </ colgroup > < thead > < tr > < th >< input type = \"checkbox\" name = \"\" lay-skin = \"primary\" lay-filter = \"allChoose\" id = \"allChoose\" ></ th > < th style = \"text-align: center\" > ID </ th > < th > \u6807\u9898 </ th > < th style = \"text-align: center\" > \u8bed\u8a00 </ th > < th style = \"text-align: center\" > \u64cd\u4f5c </ th > </ tr > </ thead > < tbody > < tr ></ tr > </ tbody > </ table > </ div > \u5faa\u73af\u6e32\u67d3\u5217\u8868\u65f6\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u7684id\u7ed1\u5b9a\u7ed9tr\u7684id,\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528dom\u8282\u70b9\u6d3b\u52a8tr\u540e\uff0c\u4f7f\u7528 .attr \u65b9\u6cd5\u83b7\u53d6\u5230\u6570\u636eid\u3002 \u5faa\u73af\u6e32\u67d3\u5217\u8868\u65f6\uff0c\u9700\u8981\u5c06\u5faa\u73af\u751f\u6210\u7684js\u4ee3\u7801\u653e\u7f6e\u5230tr\u533a\u5757\u4e2d\uff0c\u4e0d\u7136\u53bb\u53d6index\u7684\u65f6\u5019\u56de\u51fa\u73b0\u8fd4\u56de0 2 4 6 8 \u7684\u60c5\u51b5\u3002 Django\u7684\u6a21\u677f\u8bed\u8a00\u8fd0\u884c\u5728\u540e\u7aef\uff0cjs\u8fd0\u884c\u5728\u524d\u7aef\uff0c\u6240\u4ee5django\u6a21\u677f\u8bed\u8a00\u4e2d\u7684\u53d8\u91cf\u4e0d\u53ef\u4ee5\u51fa\u73b0\u5728js\u4e2d\uff0c\u53ea\u53ef\u4ee5\u4f7f\u7528url\u53cd\u5411\u68c0\u7d22\u6216\u8005\u5c06js\u4e2d\u7684\u5bf9\u8c61\u8f6c\u6362\u6210str,\u4e0d\u53ef\u4ee5\u5728js\u4e2d\u5c06django\u6a21\u677f\u53d8\u91cf\u4f5c\u4e3a\u4e00\u4e2a\u53d8\u91cf\u6765\u4f7f\u7528\uff0c\u53ea\u53ef\u4ee5\u4f5c\u4e3a\u5e38\u91cf\u6765\u4f7f\u7528\uff0c\u56e0\u4e3a\u4e00\u7ecf\u8fc7\u540e\u53f0\u6e32\u67d3\u540e\uff0cdjango\u7684\u6a21\u677f\u53d8\u91cf\u5c31\u53d8\u6210\u4e86\u5e38\u91cf\u5b58\u5728js\u4e2d\u4e86\u3002 \u5728js\u4e2d\u4f7f\u7528Django \u6a21\u677f\u53d8\u91cf\u65f6\uff0c\u9700\u8981\u5728\u4e24\u7aef\u52a0\u4e0a\u201c\u201d,\u5c06\u53d8\u91cf\u8f6c\u5316\u4e3a\u5f53\u524d\u72b6\u6001\u5bf9\u5e94\u7684str,\u5982 news_list(Queryset[1,2]),\u5f15\u7528\u683c\u5f0f\u4e3a\u201c{{news_list}}\u201d\uff0cjs\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\u4e3a\u201cQueryset[1,2]\u201d,\u5176\u7c7b\u578bstr\u800c\u975eQueryset\u3002 jquery.js\u8981\u5728bootstrap.js\u4e4b\u524d\u5f15\u7528\uff0c\u56e0\u4e3abootstarp.js\u9700\u8981jquery.js\u7684\u652f\u6301\u3002 form\u4e2d\u6dfb\u52a0novalidate\u53ef\u4ee5\u7981\u7528\u672c\u5730\u7684\u9884\u68c0\u6d4b\u7a0b\u5e8f {% if field.field.required %} # \u5b57\u6bb5\u662f\u5426\u5fc5\u586b \ufeff","title":"JavaScript\u7b14\u8bb0"},{"location":"front/javascript/javascript-note/#javascripts","text":"\ufefflocation.replace(location.href) \u53ea\u5237\u65b0\u9875\u9762\uff0c\u4e0d\u5237\u65b0\u9759\u6001\u6587\u4ef6\uff0c\u76f8\u5f53\u4e8eF5. loaction.reload(true) \u5237\u65b0\u9875\u9762\u53ca\u9759\u6001\u6587\u4ef6\uff0c\u76f8\u5f53\u4e8ectrl+F5. \u5728ajax\u7684success\u4e2dhistory.back()\\history.go(-1)\u4e0d\u751f\u6548,\u9700\u8981\u4f7f\u7528hostory.go(-2)","title":"JavaScripts:"},{"location":"front/javascript/javascript-note/#html","text":"<input type=\"file\" name=\"excel\" accept=\".xls\" required> \u4ee3\u8868\u8f93\u5165\u7c7b\u578b\u4e3afile \u683c\u5f0f\u4e3a.xls \u5728POST\u4e2d\u53c2\u6570\u540d\u4e3aexcel \u5fc5\u586b <input type=\"number\" step=\"any\"> \u8bbe\u7f6e\u8f93\u5165\u6570\u5b57\u5c0f\u6570\u70b9\u4e0d\u9650 colgroup col\u6807\u7b7e\u53ef\u4ee5\u63a7\u5236\u8868\u683c\u663e\u793a\u7684\u6bd4\u4f8b\uff0ccol\u4e3a\u7a7a\u65f6\u8868\u793a\u8be5\u884c\u5360\u636e\u5269\u4e0b\u7684\u6240\u6709\u5bbd\u5ea6\uff0c\u4f46\u5fc5\u987b\u914d\u5408 tbody \u6807\u7b7e\u4f7f\u7528\u4f7f\u7528\u3002eg\uff1a < table class = \"layui-table\" style = \"margin-top: 10px\" > < colgroup > < col width = \"50\" > < col width = \"100\" > < col > < col width = \"200\" > < col width = \"200\" > </ colgroup > < thead > < tr > < th >< input type = \"checkbox\" name = \"\" lay-skin = \"primary\" lay-filter = \"allChoose\" id = \"allChoose\" ></ th > < th style = \"text-align: center\" > ID </ th > < th > \u6807\u9898 </ th > < th style = \"text-align: center\" > \u8bed\u8a00 </ th > < th style = \"text-align: center\" > \u64cd\u4f5c </ th > </ tr > </ thead > < tbody > < tr ></ tr > </ tbody > </ table > </ div > \u5faa\u73af\u6e32\u67d3\u5217\u8868\u65f6\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u7684id\u7ed1\u5b9a\u7ed9tr\u7684id,\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528dom\u8282\u70b9\u6d3b\u52a8tr\u540e\uff0c\u4f7f\u7528 .attr \u65b9\u6cd5\u83b7\u53d6\u5230\u6570\u636eid\u3002 \u5faa\u73af\u6e32\u67d3\u5217\u8868\u65f6\uff0c\u9700\u8981\u5c06\u5faa\u73af\u751f\u6210\u7684js\u4ee3\u7801\u653e\u7f6e\u5230tr\u533a\u5757\u4e2d\uff0c\u4e0d\u7136\u53bb\u53d6index\u7684\u65f6\u5019\u56de\u51fa\u73b0\u8fd4\u56de0 2 4 6 8 \u7684\u60c5\u51b5\u3002 Django\u7684\u6a21\u677f\u8bed\u8a00\u8fd0\u884c\u5728\u540e\u7aef\uff0cjs\u8fd0\u884c\u5728\u524d\u7aef\uff0c\u6240\u4ee5django\u6a21\u677f\u8bed\u8a00\u4e2d\u7684\u53d8\u91cf\u4e0d\u53ef\u4ee5\u51fa\u73b0\u5728js\u4e2d\uff0c\u53ea\u53ef\u4ee5\u4f7f\u7528url\u53cd\u5411\u68c0\u7d22\u6216\u8005\u5c06js\u4e2d\u7684\u5bf9\u8c61\u8f6c\u6362\u6210str,\u4e0d\u53ef\u4ee5\u5728js\u4e2d\u5c06django\u6a21\u677f\u53d8\u91cf\u4f5c\u4e3a\u4e00\u4e2a\u53d8\u91cf\u6765\u4f7f\u7528\uff0c\u53ea\u53ef\u4ee5\u4f5c\u4e3a\u5e38\u91cf\u6765\u4f7f\u7528\uff0c\u56e0\u4e3a\u4e00\u7ecf\u8fc7\u540e\u53f0\u6e32\u67d3\u540e\uff0cdjango\u7684\u6a21\u677f\u53d8\u91cf\u5c31\u53d8\u6210\u4e86\u5e38\u91cf\u5b58\u5728js\u4e2d\u4e86\u3002 \u5728js\u4e2d\u4f7f\u7528Django \u6a21\u677f\u53d8\u91cf\u65f6\uff0c\u9700\u8981\u5728\u4e24\u7aef\u52a0\u4e0a\u201c\u201d,\u5c06\u53d8\u91cf\u8f6c\u5316\u4e3a\u5f53\u524d\u72b6\u6001\u5bf9\u5e94\u7684str,\u5982 news_list(Queryset[1,2]),\u5f15\u7528\u683c\u5f0f\u4e3a\u201c{{news_list}}\u201d\uff0cjs\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\u4e3a\u201cQueryset[1,2]\u201d,\u5176\u7c7b\u578bstr\u800c\u975eQueryset\u3002 jquery.js\u8981\u5728bootstrap.js\u4e4b\u524d\u5f15\u7528\uff0c\u56e0\u4e3abootstarp.js\u9700\u8981jquery.js\u7684\u652f\u6301\u3002 form\u4e2d\u6dfb\u52a0novalidate\u53ef\u4ee5\u7981\u7528\u672c\u5730\u7684\u9884\u68c0\u6d4b\u7a0b\u5e8f {% if field.field.required %} # \u5b57\u6bb5\u662f\u5426\u5fc5\u586b \ufeff","title":"Html:"},{"location":"java/android/android-activity/","text":"1\u3001\u81ea\u5b9a\u4e49\u7684model Project \u8981\u7ee7\u627fSerializable\u63a5\u53e3,Project \u7684\u6210\u5458\u53d8\u91cf\u4e2d\u82e5\u6709\u81ea\u5b9a\u4e49\u7684\u6210\u5458\u53d8\u91cf\u7c7b\u578b\uff0c\u8be5\u6210\u5458\u53d8\u91cf\u7c7b\u578b\u7c7b\u4e5f\u9700\u8981\u7ee7\u627fSerializable\u63a5\u53e3\u3002 public class Project implements Serializable { } 2\u3001\u7531MainActivity\u8df3\u8f6c\u81f3XXXActivity Intent intent = new Intent (); intent . putExtra ( \"project\" , workedList . get ( position )); intent . setClass ( MainActivity . this , XXX . class ); startActivity ( intent ); 3\u3001XXX.java\u4e2d Project project = ( Project ) getIntent (). getSerializableExtra ( \"project\" );","title":"Android Activity\u95f4\u4f20\u9012\u5bf9\u8c61"},{"location":"java/android/android-amap/","text":"\u83b7\u53d6\u5f00\u53d1SHA1\uff0c\u5728AS\u4e2d\u7684Terminal\u4e2d\u8f93\u5165\u547d\u4ee4\uff1a \"C:Program Files\\Java\\jdk1.8.0_101\\bin\\keytool\" -list -v -keystore D:\\ykh_key.jks \u5176\u4e2d\"C:Program Files\\Java\\jdk1.8.0_101\\\" \u4e3a\u4f60\u7684Java\u5b89\u88c5\u8def\u5f84\u3002\u83b7\u53d6\u6d4b\u8bd5SHA1\uff0c\u76f4\u63a5\u5728Eclipse\u4e2dWindow->Preferences->Android->Build->SHA1 fingerprint\u67e5\u770b\u3002 \u62f7\u8d1dso\u652f\u6301\u5e93\u7684\u4f4d\u7f6e\u4e3asrc/main/jniLibs\u6587\u4ef6\u5939\u4e0b\uff0cjniLibs\u6587\u4ef6\u5939\u9700\u8981\u65b0\u5efa\uff0c\u62f7\u8d1d\u7684\u652f\u6301\u5e93\u6709armeabi\u548carm64-v8a","title":"\u9ad8\u5fb7\u5730\u56fe\u76f8\u5173\u7b14\u8bb0"},{"location":"java/android/android-note/","text":"\u754c\u9762\u5e03\u5c40 AppBarLayout\u4e2d\u5d4c\u5957ToolBar\u53ef\u4ee5\u4e3aToolBar\u6dfb\u52a0\u9634\u5f71\u6548\u679c \u903b\u8f91\u63a7\u5236 intent\u6e05\u7a7a\u4efb\u52a1\u5806\u6808 // \u6e05\u7a7a\u4efb\u52a1\u5806\u6808 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK); \u6253\u5370Json\u4e2d\u6240\u6709\u7684\u5185\u5bb9 Iterator < String > iter = dataJson . keys (); while ( iter . hasNext ()) { String key = iter . next (); try { Object value = dataJson . get ( key ); Log . e ( \"Http\" , key + \" : \" + value ); } catch ( JSONException e ) { // Something went wrong! } } \u8bbe\u7f6e\u6587\u672c\u5185\u5bb9\u53ef\u88ab\u9009\u4e2d show . setTextIsSelectable ( true ); android : textIsSelectable = \"true\" \u83b7\u53d6\u6388\u6743\u7ed3\u679c Activity : ActivityCompat . requestPermissions ( this , new String [] { Manifest . permission . ACCESS_FINE_LOCATION }, YOUR_REQUEST_CODE ); Fragment : requestPermissions ( new String [] { Manifest . permission . ACCESS_FINE_LOCATION }, YOUR_REQUEST_CODE ); \u7a81\u7834heap size\u4e3a128\u7684\u9650\u5236 \u5728Application\u6807\u7b7e\u4e2d\u4f7f\u7528android:largeHeap=\"true\"\u53ef\u4ee5\u7a81\u7834heap size\u4e3a128\u7684\u9650\u5236 \u67e5\u770b\u5f53\u524dheap size: ActivityManager manager = ( ActivityManager ) getSystemService ( Context . ACTIVITY_SERVICE ); int heapsize = manager . getMemoryClass (); LogUtils . e ( \"heap size is \" + heapsize ); ExpandableListView\u6ce8\u610f\u4e8b\u9879 ExpandableListView \u82e5 group \u4e2a\u6570\u53d8\u5316\u65f6\uff0c\u4fee\u6539 adapter \u4e2d\u6570\u636e\u548c\u5237\u65b0 expandableListView \u754c\u9762\u9700\u8981\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\u4f9d\u6b21\u8fdb\u884c\uff0c\u82e5\u5728\u4e3b\u754c\u9762\u4e2d\u4fee\u6539\u6570\u636e\uff0c\u5728\u65b0\u8fdb\u7a0b\u4e2d\u5237\u65b0\u754c\u9762\u4f1a\u5bfc\u81f4\u5237\u65b0\u754c\u9762\u65f6\u53d1\u751f\u6570\u7ec4\u6ea2\u51fa\u7684\u9519\u8bef\uff0ceg:\u4e00\u4e2a group1 \u65f6\uff0c\u8be5 group1 \u6709\u4e24\u4e2a child \uff0c\u52a8\u6001\u52a0\u5165\u4e00\u4e2a\u65b0 group2 \uff08\u65e0 child \uff09\u65f6\uff0c\u4f1a\u51fa\u73b0 group1 \u4e2d child \u4e2a\u6570\u6b21\u6570\u7ec4\u6ea2\u51fa\u9519\u8bef\uff0c\u521d\u6b65\u4f30\u8ba1\u539f\u56e0\u662f\u5237\u65b0\u754c\u9762\u65f6\u4f9d\u65e7\u4ee5\u4e3a group1 \u6709\u4e24\u4e2a child \u800c\u6570\u636e\u6e90\u5df2\u6539\u53d8\u4e3a\u7a7a\u7684 List \u800c\u51fa\u73b0\u6570\u7ec4\u6ea2\u51fa\u3002 \u6b63\u786e\u4ee3\u7801\uff1a lv_handler . post ( new Runnable () { @Override public void run () { //\u6b64\u5904\u5217\u8868\u4e2a\u6570\u53d8\u5316 \u6570\u636e\u66f4\u65b0\u548c\u754c\u9762\u53d8\u5316\u5fc5\u987b\u5728\u540c\u4e00\u7ebf\u7a0b\u4f9d\u6b21\u8fdb\u884c scanAdapter . is_ble_open = true ; scanAdapter . setGroupStringsByBle (); scanAdapter . notifyDataSetChanged (); scanAdapter . notifyDataSetInvalidated (); ble_scan_expand . invalidateViews (); expandAllGroup ( ble_scan_expand ); } }); \u4f1a\u53d1\u751f\u9519\u8bef\u4ee3\u7801\uff1a scanAdapter . is_ble_open = true ; scanAdapter . setGroupStringsByBle (); lv_handler . post ( new Runnable () { @Override public void run () { scanAdapter . notifyDataSetChanged (); scanAdapter . notifyDataSetInvalidated (); ble_scan_expand . invalidateViews (); } }); expandAllGroup ( ble_scan_expand ); Fragment \u4e2d\u4f7f\u7528 startActivityForResult Fragement ` \u5fc5\u987b\u4f7f\u7528 ` startActivityForResult ( intent , code ); ` \u800c\u4e0d\u662f ` getActivity (). startActivityForResult ( intent , 111 ); Fragment \u6240\u5728\u7684\u7236 activity \u5fc5\u987b\u91cd\u5199\uff08\u5fc5\u987b\u8c03\u7528super\uff09\uff1a @Override public void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); } \u83b7\u53d6\u989c\u8272 ContextCompat . getColor ( getContext (), R . color . color_xxx ) onDraw() \u65b9\u6cd5\u4e2d new \u5bf9\u8c61 onDraw () \u65b9\u6cd5\u4e0d\u63a8\u8350new\u5bf9\u8c61 \uff0c \u56e0\u4e3a\u8be5\u65b9\u6cd5\u4f1a\u88ab\u7cfb\u7edf\u591a\u6b21\u8c03\u7528 \uff0c \u53ef\u80fd\u4f1a\u5bfc\u81f4\u5185\u5bb9\u6cc4\u9732 \u3002 > [ Object allocation during draw / layout ?] ( https : //stackoverflow.com/questions/16472529/object-allocation-during-draw-layout#) java.util.ConcurrentModificationException \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d`remove`\u6570\u7ec4\u5143\u7d20\u540e\u6ca1\u6709`break`\u8fed\u4ee3\uff0c\u4f1a\u629b\u51fa\u8be5\u9519\u8bef\u3002\u4e3e\u4f8b\uff1a\u82e5\u6570\u7ec4\u4e2d\u67093\u4e2a\u5143\u7d20\uff0c\u5728\u5faa\u73af\u8bfb\u53d6\u5230\u7b2c2\u4e2a\u5143\u7d20\u65f6\uff0c`remove`\u4e86\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4f46\u662f\u5e76\u672a\u9000\u51fa\u5faa\u73af\uff0c\u8bfb\u53d6\u7b2c3\u4e2a\u5143\u7d20\u65f6\u4f1a\u53d1\u751f\u8be5\u9519\u8bef\u3002\u89e3\u51b3\u65b9\u6cd5\u4e3a`remove`\u540e\u7acb\u5373\u9000\u51fa\u8fed\u4ee3\u3002 RecycleView Item\u70b9\u51fb\u4e8b\u4ef6\u65e0\u6548 RecycleView \u5728 RelatedView \u4e2d\u5207\u6362\u663e\u793a\u65f6\uff0c\u8981\u4e3a\u5176\u8bbe OnItemClick \u65f6\u8981\u786e\u4fdd\u5176\u4e0a\u4f20\u65e0\u5e03\u5c40\u3002 \u5217\u8868item\u4e2d\u5185\u5c42 LinearLayout \u8bbe\u7f6e clickable=\"true\" \u5e76\u5c06ID\u8d4b\u7ed9\u5916\u5c42 LinearLayout \u4f1a\u5bfc\u81f4 onclick \u4e8b\u4ef6\u65e0\u6cd5\u89e6\u53d1\u7684bug,\u89e3\u51b3\u65b9\u6cd5\u4e3a\u5c06 clickable=\"true\" \u6539\u4e3a focusable=\"true\" \u6216\u8005\u5c06ID\u8d4b\u7ed9\u5185\u5c42 LinearLayout \u3002 \u81ea\u5b9a\u4e49 attr \u4e2d\u7684 colorPrimaryLight \u52a0 attr \u6587\u4ef6 \u5728\u4e3b style \u58f0\u660e\u8be5\u989c\u8272 \u4f7f\u7528 ?attr/colorPrimaryLight \u914d\u7f6e\u76f8\u5173 Android SDK\u66f4\u65b0 setting->\u641c\u7d22SDK->\u9009\u62e9SDK tools\u8fdb\u884c\u66f4\u65b0 \u66f4\u65b0\u5b8c\u6210\u5237\u65b0\u9879\u76ee\u5373\u53ef Error:Failed to open zip file. Gradle's dependency cache may be corrupt * \u524d\u5f80\u4e0b\u8f7d\u5bf9\u5e94\u7684gradle\u6587\u4ef6\uff0c\u76f4\u63a5\u66ff\u6362url\u4e2d\u7684\u7248\u672c\u53f7\u5373\u53ef\uff0c\u5bf9\u5e94\u7684\u7248\u672c\u53f7\u53ef\u5728`gradle/gradle-wrapper.properties`\u6587\u4ef6\u4e2d\u67e5\u770b\uff0chttp://downloads.gradle.org/distributions/gradle-4.1-all.zip \u3002 * \u4e0b\u8f7d\u5e76\u89e3\u538b\u538b\u7f29\u6587\u4ef6\u81f3 `C:\\Users\\ykh\\.gradle\\wrapper\\dists\\gradle-4.1-all` * File->setting->Build,Execution,Deployment->Gradle,\u9009\u62e9`Use locale gradle distribution->Gradle home`\uff0c\u9009\u4e2d\u4e4b\u524d\u89e3\u538b\u7684\u6587\u4ef6\u5939\u3002 * File->Synchronize Please select Android SDK File -> Sync Project with Gradle Files \u5361\u5728 Grade \u66f4\u65b0 `File\\Settings\\Build, Execution, Deployment\\Build tools\\Gradle`\uff0c\u91cd\u9009`Grade Home`\u81f3`C:\\android-studio\\gradle\\gradle-4.1.`\u3002 Author Info \u6253\u5f00 Settings -> Editor -> File and Code Templates -> Includes -> File Header /** * Created by ${USER} on ${DATE}. */ \u6216\u8005 #set ($USER = \"Name name\") #set ($COMPANY = \"company Ltd\") #set ($EMAIL = \"example@gmail.com\") /** * Created by ${USER} on ${DATE}. * ${COMPANY} * ${EMAIL} */ \u5b9e\u65f6\u9884\u89c8Preview\u4e0d\u751f\u6548 SDK\u7684image\u672a\u5b8c\u5168\u5b89\u88c5\u6210\u529f\u53ef\u80fd\u5bfc\u81f4preview\u5931\u8d25\uff0c\u89e3\u51b3\u65b9\u6cd5\u662f\u91cd\u65b0\u9009\u62e9preview\u4f7f\u7528\u7684SDK\u7248\u672c\u6216\u8005\u5b8c\u5168\u5b89\u88c5\u8be5SDK\u5bf9\u5e94\u7684image\u3002 \u751f\u6210JavaDoc\u6587\u6863 Tools->Generate JavaDoc Locale \u8bbe\u7f6e\u4e3a en , Other command line arguments \u8bbe\u7f6e\u4e3a -encoding utf-8 -charset utf-8 \u9632\u6b62\u4e2d\u6587\u6ce8\u91ca\u62a5 \u9519\u8bef: \u7f16\u7801GBK\u7684\u4e0d\u53ef\u6620\u5c04\u5b57\u7b26\u3002 cannot resolve symbol after update \u65b9\u6cd5\u4e00\uff1aYou can do \"File\" -> \"Invalidate Caches...\", and select \"Invalidate and Restart\" option to fix this.\uff08\u65e0\u6548\uff09 \u65b9\u6cd5\u4e8c\uff1a 1 Exit from Studio 2 Delete .idea/, build/, app/build/ directories. 3 Start Studio. 4 Re-setup Settings->Build tools->Gradle to use local distribution (last stable Gradle locally installed) 5 app run failed, user File -> Sync Project with Gradle Files. Command Pattern public interface Command { public void execute ( Object data ); } public class PrintCommand implements Command { public void execute ( Object data ) { showToast ( data . toString ()); } } public static void callCommand ( Command command , Object data ) { command . execute ( data ); } callCommand ( new PrintCommand (), \"hello world\" ); Java8 can be replaced with method reference sendLoop ( new SendLoopInterface () { @Override public void onSend () { PATCH (); } }); sendLoop ( this :: PATCH );","title":"Android\u7b14\u8bb0"},{"location":"java/android/android-note/#_1","text":"","title":"\u754c\u9762\u5e03\u5c40"},{"location":"java/android/android-note/#appbarlayouttoolbartoolbar","text":"","title":"AppBarLayout\u4e2d\u5d4c\u5957ToolBar\u53ef\u4ee5\u4e3aToolBar\u6dfb\u52a0\u9634\u5f71\u6548\u679c"},{"location":"java/android/android-note/#_2","text":"","title":"\u903b\u8f91\u63a7\u5236"},{"location":"java/android/android-note/#intent","text":"// \u6e05\u7a7a\u4efb\u52a1\u5806\u6808 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);","title":"intent\u6e05\u7a7a\u4efb\u52a1\u5806\u6808"},{"location":"java/android/android-note/#json","text":"Iterator < String > iter = dataJson . keys (); while ( iter . hasNext ()) { String key = iter . next (); try { Object value = dataJson . get ( key ); Log . e ( \"Http\" , key + \" : \" + value ); } catch ( JSONException e ) { // Something went wrong! } }","title":"\u6253\u5370Json\u4e2d\u6240\u6709\u7684\u5185\u5bb9"},{"location":"java/android/android-note/#_3","text":"show . setTextIsSelectable ( true ); android : textIsSelectable = \"true\"","title":"\u8bbe\u7f6e\u6587\u672c\u5185\u5bb9\u53ef\u88ab\u9009\u4e2d"},{"location":"java/android/android-note/#_4","text":"Activity : ActivityCompat . requestPermissions ( this , new String [] { Manifest . permission . ACCESS_FINE_LOCATION }, YOUR_REQUEST_CODE ); Fragment : requestPermissions ( new String [] { Manifest . permission . ACCESS_FINE_LOCATION }, YOUR_REQUEST_CODE );","title":"\u83b7\u53d6\u6388\u6743\u7ed3\u679c"},{"location":"java/android/android-note/#heap-size128","text":"\u5728Application\u6807\u7b7e\u4e2d\u4f7f\u7528android:largeHeap=\"true\"\u53ef\u4ee5\u7a81\u7834heap size\u4e3a128\u7684\u9650\u5236 \u67e5\u770b\u5f53\u524dheap size: ActivityManager manager = ( ActivityManager ) getSystemService ( Context . ACTIVITY_SERVICE ); int heapsize = manager . getMemoryClass (); LogUtils . e ( \"heap size is \" + heapsize );","title":"\u7a81\u7834heap size\u4e3a128\u7684\u9650\u5236"},{"location":"java/android/android-note/#expandablelistview","text":"ExpandableListView \u82e5 group \u4e2a\u6570\u53d8\u5316\u65f6\uff0c\u4fee\u6539 adapter \u4e2d\u6570\u636e\u548c\u5237\u65b0 expandableListView \u754c\u9762\u9700\u8981\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\u4f9d\u6b21\u8fdb\u884c\uff0c\u82e5\u5728\u4e3b\u754c\u9762\u4e2d\u4fee\u6539\u6570\u636e\uff0c\u5728\u65b0\u8fdb\u7a0b\u4e2d\u5237\u65b0\u754c\u9762\u4f1a\u5bfc\u81f4\u5237\u65b0\u754c\u9762\u65f6\u53d1\u751f\u6570\u7ec4\u6ea2\u51fa\u7684\u9519\u8bef\uff0ceg:\u4e00\u4e2a group1 \u65f6\uff0c\u8be5 group1 \u6709\u4e24\u4e2a child \uff0c\u52a8\u6001\u52a0\u5165\u4e00\u4e2a\u65b0 group2 \uff08\u65e0 child \uff09\u65f6\uff0c\u4f1a\u51fa\u73b0 group1 \u4e2d child \u4e2a\u6570\u6b21\u6570\u7ec4\u6ea2\u51fa\u9519\u8bef\uff0c\u521d\u6b65\u4f30\u8ba1\u539f\u56e0\u662f\u5237\u65b0\u754c\u9762\u65f6\u4f9d\u65e7\u4ee5\u4e3a group1 \u6709\u4e24\u4e2a child \u800c\u6570\u636e\u6e90\u5df2\u6539\u53d8\u4e3a\u7a7a\u7684 List \u800c\u51fa\u73b0\u6570\u7ec4\u6ea2\u51fa\u3002 \u6b63\u786e\u4ee3\u7801\uff1a lv_handler . post ( new Runnable () { @Override public void run () { //\u6b64\u5904\u5217\u8868\u4e2a\u6570\u53d8\u5316 \u6570\u636e\u66f4\u65b0\u548c\u754c\u9762\u53d8\u5316\u5fc5\u987b\u5728\u540c\u4e00\u7ebf\u7a0b\u4f9d\u6b21\u8fdb\u884c scanAdapter . is_ble_open = true ; scanAdapter . setGroupStringsByBle (); scanAdapter . notifyDataSetChanged (); scanAdapter . notifyDataSetInvalidated (); ble_scan_expand . invalidateViews (); expandAllGroup ( ble_scan_expand ); } }); \u4f1a\u53d1\u751f\u9519\u8bef\u4ee3\u7801\uff1a scanAdapter . is_ble_open = true ; scanAdapter . setGroupStringsByBle (); lv_handler . post ( new Runnable () { @Override public void run () { scanAdapter . notifyDataSetChanged (); scanAdapter . notifyDataSetInvalidated (); ble_scan_expand . invalidateViews (); } }); expandAllGroup ( ble_scan_expand );","title":"ExpandableListView\u6ce8\u610f\u4e8b\u9879"},{"location":"java/android/android-note/#fragmentstartactivityforresult","text":"Fragement ` \u5fc5\u987b\u4f7f\u7528 ` startActivityForResult ( intent , code ); ` \u800c\u4e0d\u662f ` getActivity (). startActivityForResult ( intent , 111 ); Fragment \u6240\u5728\u7684\u7236 activity \u5fc5\u987b\u91cd\u5199\uff08\u5fc5\u987b\u8c03\u7528super\uff09\uff1a @Override public void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); }","title":"Fragment\u4e2d\u4f7f\u7528startActivityForResult"},{"location":"java/android/android-note/#_5","text":"ContextCompat . getColor ( getContext (), R . color . color_xxx )","title":"\u83b7\u53d6\u989c\u8272"},{"location":"java/android/android-note/#ondrawnew","text":"onDraw () \u65b9\u6cd5\u4e0d\u63a8\u8350new\u5bf9\u8c61 \uff0c \u56e0\u4e3a\u8be5\u65b9\u6cd5\u4f1a\u88ab\u7cfb\u7edf\u591a\u6b21\u8c03\u7528 \uff0c \u53ef\u80fd\u4f1a\u5bfc\u81f4\u5185\u5bb9\u6cc4\u9732 \u3002 > [ Object allocation during draw / layout ?] ( https : //stackoverflow.com/questions/16472529/object-allocation-during-draw-layout#)","title":"onDraw()\u65b9\u6cd5\u4e2dnew\u5bf9\u8c61"},{"location":"java/android/android-note/#javautilconcurrentmodificationexception","text":"\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d`remove`\u6570\u7ec4\u5143\u7d20\u540e\u6ca1\u6709`break`\u8fed\u4ee3\uff0c\u4f1a\u629b\u51fa\u8be5\u9519\u8bef\u3002\u4e3e\u4f8b\uff1a\u82e5\u6570\u7ec4\u4e2d\u67093\u4e2a\u5143\u7d20\uff0c\u5728\u5faa\u73af\u8bfb\u53d6\u5230\u7b2c2\u4e2a\u5143\u7d20\u65f6\uff0c`remove`\u4e86\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4f46\u662f\u5e76\u672a\u9000\u51fa\u5faa\u73af\uff0c\u8bfb\u53d6\u7b2c3\u4e2a\u5143\u7d20\u65f6\u4f1a\u53d1\u751f\u8be5\u9519\u8bef\u3002\u89e3\u51b3\u65b9\u6cd5\u4e3a`remove`\u540e\u7acb\u5373\u9000\u51fa\u8fed\u4ee3\u3002","title":"java.util.ConcurrentModificationException"},{"location":"java/android/android-note/#recycleview-item","text":"RecycleView \u5728 RelatedView \u4e2d\u5207\u6362\u663e\u793a\u65f6\uff0c\u8981\u4e3a\u5176\u8bbe OnItemClick \u65f6\u8981\u786e\u4fdd\u5176\u4e0a\u4f20\u65e0\u5e03\u5c40\u3002 \u5217\u8868item\u4e2d\u5185\u5c42 LinearLayout \u8bbe\u7f6e clickable=\"true\" \u5e76\u5c06ID\u8d4b\u7ed9\u5916\u5c42 LinearLayout \u4f1a\u5bfc\u81f4 onclick \u4e8b\u4ef6\u65e0\u6cd5\u89e6\u53d1\u7684bug,\u89e3\u51b3\u65b9\u6cd5\u4e3a\u5c06 clickable=\"true\" \u6539\u4e3a focusable=\"true\" \u6216\u8005\u5c06ID\u8d4b\u7ed9\u5185\u5c42 LinearLayout \u3002","title":"RecycleView Item\u70b9\u51fb\u4e8b\u4ef6\u65e0\u6548"},{"location":"java/android/android-note/#attrcolorprimarylight","text":"\u52a0 attr \u6587\u4ef6 \u5728\u4e3b style \u58f0\u660e\u8be5\u989c\u8272 \u4f7f\u7528 ?attr/colorPrimaryLight","title":"\u81ea\u5b9a\u4e49attr\u4e2d\u7684colorPrimaryLight"},{"location":"java/android/android-note/#_6","text":"","title":"\u914d\u7f6e\u76f8\u5173"},{"location":"java/android/android-note/#android-sdk","text":"setting->\u641c\u7d22SDK->\u9009\u62e9SDK tools\u8fdb\u884c\u66f4\u65b0 \u66f4\u65b0\u5b8c\u6210\u5237\u65b0\u9879\u76ee\u5373\u53ef","title":"Android SDK\u66f4\u65b0"},{"location":"java/android/android-note/#errorfailed-to-open-zip-file-gradles-dependency-cache-may-be-corrupt","text":"* \u524d\u5f80\u4e0b\u8f7d\u5bf9\u5e94\u7684gradle\u6587\u4ef6\uff0c\u76f4\u63a5\u66ff\u6362url\u4e2d\u7684\u7248\u672c\u53f7\u5373\u53ef\uff0c\u5bf9\u5e94\u7684\u7248\u672c\u53f7\u53ef\u5728`gradle/gradle-wrapper.properties`\u6587\u4ef6\u4e2d\u67e5\u770b\uff0chttp://downloads.gradle.org/distributions/gradle-4.1-all.zip \u3002 * \u4e0b\u8f7d\u5e76\u89e3\u538b\u538b\u7f29\u6587\u4ef6\u81f3 `C:\\Users\\ykh\\.gradle\\wrapper\\dists\\gradle-4.1-all` * File->setting->Build,Execution,Deployment->Gradle,\u9009\u62e9`Use locale gradle distribution->Gradle home`\uff0c\u9009\u4e2d\u4e4b\u524d\u89e3\u538b\u7684\u6587\u4ef6\u5939\u3002 * File->Synchronize","title":"Error:Failed to open zip file. Gradle's dependency cache may be corrupt"},{"location":"java/android/android-note/#please-select-android-sdk","text":"File -> Sync Project with Gradle Files","title":"Please select Android SDK"},{"location":"java/android/android-note/#grade","text":"`File\\Settings\\Build, Execution, Deployment\\Build tools\\Gradle`\uff0c\u91cd\u9009`Grade Home`\u81f3`C:\\android-studio\\gradle\\gradle-4.1.`\u3002","title":"\u5361\u5728Grade\u66f4\u65b0"},{"location":"java/android/android-note/#author-info","text":"\u6253\u5f00 Settings -> Editor -> File and Code Templates -> Includes -> File Header /** * Created by ${USER} on ${DATE}. */ \u6216\u8005 #set ($USER = \"Name name\") #set ($COMPANY = \"company Ltd\") #set ($EMAIL = \"example@gmail.com\") /** * Created by ${USER} on ${DATE}. * ${COMPANY} * ${EMAIL} */","title":"Author Info"},{"location":"java/android/android-note/#preview","text":"SDK\u7684image\u672a\u5b8c\u5168\u5b89\u88c5\u6210\u529f\u53ef\u80fd\u5bfc\u81f4preview\u5931\u8d25\uff0c\u89e3\u51b3\u65b9\u6cd5\u662f\u91cd\u65b0\u9009\u62e9preview\u4f7f\u7528\u7684SDK\u7248\u672c\u6216\u8005\u5b8c\u5168\u5b89\u88c5\u8be5SDK\u5bf9\u5e94\u7684image\u3002","title":"\u5b9e\u65f6\u9884\u89c8Preview\u4e0d\u751f\u6548"},{"location":"java/android/android-note/#javadoc","text":"Tools->Generate JavaDoc Locale \u8bbe\u7f6e\u4e3a en , Other command line arguments \u8bbe\u7f6e\u4e3a -encoding utf-8 -charset utf-8 \u9632\u6b62\u4e2d\u6587\u6ce8\u91ca\u62a5 \u9519\u8bef: \u7f16\u7801GBK\u7684\u4e0d\u53ef\u6620\u5c04\u5b57\u7b26\u3002","title":"\u751f\u6210JavaDoc\u6587\u6863"},{"location":"java/android/android-note/#cannot-resolve-symbol-after-update","text":"\u65b9\u6cd5\u4e00\uff1aYou can do \"File\" -> \"Invalidate Caches...\", and select \"Invalidate and Restart\" option to fix this.\uff08\u65e0\u6548\uff09 \u65b9\u6cd5\u4e8c\uff1a 1 Exit from Studio 2 Delete .idea/, build/, app/build/ directories. 3 Start Studio. 4 Re-setup Settings->Build tools->Gradle to use local distribution (last stable Gradle locally installed) 5 app run failed, user File -> Sync Project with Gradle Files.","title":"cannot resolve symbol after update"},{"location":"java/android/android-note/#command-pattern","text":"public interface Command { public void execute ( Object data ); } public class PrintCommand implements Command { public void execute ( Object data ) { showToast ( data . toString ()); } } public static void callCommand ( Command command , Object data ) { command . execute ( data ); } callCommand ( new PrintCommand (), \"hello world\" );","title":"Command Pattern"},{"location":"java/android/android-note/#java8","text":"","title":"Java8"},{"location":"java/android/android-note/#can-be-replaced-with-method-reference","text":"sendLoop ( new SendLoopInterface () { @Override public void onSend () { PATCH (); } }); sendLoop ( this :: PATCH );","title":"can be replaced with method reference"},{"location":"java/android/android-toolbar/","text":"\u8981\u6c42\u6700\u4f4e\u7684API\u4e3aandroid4.4(API19)\uff0c\u8bbe\u7f6eActivity\u7684Style\u4e3a <style name= \"AppTheme.ActionBar.Transparent\" parent= \"AppTheme\" > <item name= \"windowActionBar\" > false </item> <item name= \"windowNoTitle\" > true </item> <item name= \"colorPrimaryDark\" > @android:color/transparent </item> <item name= \"colorPrimary\" > @android:color/transparent </item> <item name= \"android:windowTranslucentStatus\" > true </item> </style> Activity\u5bf9\u5e94\u7684\u754c\u9762\u6700\u5916\u5c42\u7684Linearlayout\u8bbe\u7f6e android:fitsSystemWindows=\"false\" \u6548\u679c\u5982\u56fe\uff1a","title":"Android\u72b6\u6001\u680f\u900f\u660e"},{"location":"java/android/language/","text":"\u65b9\u6848 \u7ed3\u5408\u4e4b\u524d\u505a\u8fc7\u7684\u4e24\u6b21\u4e0d\u91cd\u542fApp\u8fdb\u884c\u8bed\u8a00\u5207\u6362\u7ed9\u51fa\u5f53\u524d\u6700\u4f18\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4e3b\u8981\u601d\u8def\u662f\u5728 SharedPreference \u4e2d\u5b58\u50a8\u5f53\u524d\u7684\u8bed\u8a00\u73af\u5883\uff0c\u4e00\u65e6\u5207\u6362\u8bed\u8a00\uff0c\u5219\u8df3\u56de\u4e3b\u754c\u9762\uff08\u4e3b\u754c\u9762\u7684 launchMode \u4e3a singleTask \uff09\uff0c\u5728onCreate\u4e2d\u5148\u8bbe\u7f6e\u8bed\u8a00\u73af\u5883\u518d\u6e32\u67d3\u9875\u9762\uff0c\u5728 onResume \u5224\u65ad\u662f\u5426\u5237\u65b0\u8bed\u8a00\uff0c\u82e5\u5237\u65b0\u8bed\u8a00\u5219\u8c03\u7528 recreate() \u65b9\u6cd5\u91cd\u65b0\u6e32\u67d3\u5bf9\u5e94\u8bed\u8a00\u73af\u5883\u7684\u754c\u9762\u3002 \u5199 BaseActivity \u57fa\u7c7b /** * Created by ykh on 2017/9/8. * \u57fa\u7c7b */ public class BaseActivity extends AppCompatActivity { protected Activity context ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); context = this ; } /** * load the language user selected * 0 CHINESE 1 ENGLISH other SYSTEM */ public void setLanguage () { if ( Utils . hasValue ( context , \"Language\" )){ int current_language = Utils . getIntValue ( context , \"Language\" ); if ( current_language == 0 ){ setLang ( Locale . SIMPLIFIED_CHINESE ); } else if ( current_language == 1 ) { setLang ( Locale . ENGLISH ); } else { setLang ( Locale . getDefault ()); } } } /** * set language locale * @param locale locale */ private void setLang ( Locale locale ) { // \u83b7\u5f97res\u8d44\u6e90\u5bf9\u8c61 Resources resources = getResources (); // \u83b7\u5f97\u8bbe\u7f6e\u5bf9\u8c61 Configuration config = resources . getConfiguration (); // \u83b7\u5f97\u5c4f\u5e55\u53c2\u6570\uff1a\u4e3b\u8981\u662f\u5206\u8fa8\u7387\uff0c\u50cf\u7d20\u7b49\u3002 DisplayMetrics dm = resources . getDisplayMetrics (); // \u8bed\u8a00 config . locale = locale ; resources . updateConfiguration ( config , dm ); } } \u6240\u6709\u754c\u9762\u7684\u7c7b\u5747\u7ee7\u627f BaseActivity ,\u89c9\u5f97\u9ebb\u70e6\u53ef\u4ee5\u76f4\u63a5\u5c06 BaseActivity \u4e2d\u7684 setLanguage \u548c setLang \u65b9\u6cd5\u62f7\u8d1d\u81f3Util\u4e2d\u8c03\u7528\u3002 \u5728 AndroidManifest.xm l\u4e2d\u8bbe\u7f6e MainActivity \u7684 launchMode \u4e3a singleTask < activity android : name = \".ui.MainActivity\" android : screenOrientation = \"portrait\" android : launchMode = \"singleTask\" > ... MainActivity \u7ee7\u627f BaseActivity ,\u5e76\u8bbe\u7f6e onCreate \u65f6\uff0c \u5728\u754c\u9762\u52a0\u8f7d\u524d\u8bbe\u7f6e\u8bed\u8a00\u73af\u5883 \u3002 @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // \u5728\u754c\u9762\u52a0\u8f7d(setContentView\u65b9\u6cd5\u8c03\u7528\u524d)\u524d\u8bbe\u7f6e\u8bed\u8a00\u73af\u5883 setLanguage (); setContentView ( R . layout . activity_main ); } LanguageActivity \u4e2d\u5207\u6362\u8bed\u8a00\uff0c SharedPreference \u4e2d Language \u5b580\u65f6\u4e3a\u4e2d\u6587\uff0c Language \u5b581\u65f6\u4e3a\u82f1\u6587 @OnClick ( R . id . setting_ll_language_chinese ) void language_chinese () { Utils . putIntValue ( context , \"Language\" , 0 ); Utils . putBooleanValue ( context , \"reset_language\" , true ); startActivity ( new Intent ( LanguageActivity . this , MainActivity . class )); } @OnClick ( R . id . setting_ll_language_english ) void language_english () { Utils . putIntValue ( context , \"Language\" , 1 ); Utils . putBooleanValue ( context , \"reset_language\" , true ); startActivity ( new Intent ( LanguageActivity . this , MainActivity . class )); } MainActivity onResume \u4e2d\u6839\u636e SharedPreference \u5224\u65ad\u662f\u5426\u5207\u6362\u8bed\u8a00\u4ee5\u53ca\u5207\u6362\u81f3\u4ec0\u4e48\u8bed\u8a00\u3002 @Override protected void onResume () { super . onResume (); if ( Utils . getBooleanValue ( context , \"reset_language\" )) { Utils . putBooleanValue ( context , \"reset_language\" , false ); //\u91cd\u65b0\u6e32\u67d3\u754c\u9762 recreate (); } } recreate(); \u65b9\u6cd5\u4f1a\u91cd\u65b0\u6e32\u67d3\u672c\u754c\u9762\uff0c\u4f1a\u91cd\u65b0\u8c03\u7528 MainActivity \u7684 onCreate \u65b9\u6cd5\uff0c\u7531\u4e8e\u8bbe\u7f6e\u8bed\u8a00\u73af\u5883\u5728\u524d\uff0c\u6e32\u67d3\u754c\u9762\u5728\u540e\uff0c\u90a3\u4e48MainActivity\u7684\u754c\u9762\u5c31\u5c06\u7acb\u5373\u53d8\u4e3a\u8bbe\u7f6e\u7684\u8bed\u8a00\u73af\u5883\u5bf9\u5e94\u7684\u754c\u9762\u3002 \u81f3\u6b64\u70ed\u66f4\u65b0Android App\u8bed\u8a00\u73af\u5883\u4ecb\u7ecd\u5b8c\u6210 ISO 639-1 \u5bf9\u7167\u8868 Language / Locale Supported since version English, US (en_US) 1.1 German, Germany (de_DE) 1.1 Chinese, PRC (zh_CN) 1.5 Chinese, Taiwan (zh_TW) 1.5 Czech, Czech Republic (cs_CZ) 1.5 Dutch, Belgium (nl_BE) 1.5 Dutch, Netherlands (nl_NL) 1.5 English, Australia (en_AU) 1.5 English, Britain (en_GB) 1.5 English, Canada (en_CA) 1.5 English, New Zealand (en_NZ) 1.5 English, Singapore(en_SG) 1.5 French, Belgium (fr_BE) 1.5 French, Canada (fr_CA) 1.5 French, France (fr_FR) 1.5 French, Switzerland (fr_CH) 1.5 German, Austria (de_AT) 1.5 German, Liechtenstein (de_LI) 1.5 German, Switzerland (de_CH) 1.5 Italian, Italy (it_IT) 1.5 Italian, Switzerland (it_CH) 1.5 Japanese (ja_JP) 1.5 Korean (ko_KR) 1.5 Polish (pl_PL) 1.5 Russian (ru_RU) 1.5 Spanish (es_ES) 1.5 Arabic, Egypt (ar_EG) 2.3 Arabic, Israel (ar_IL) 2.3 Bulgarian, Bulgaria (bg_BG) 2.3 Catalan, Spain (ca_ES) 2.3 Croatian, Croatia (hr_HR) 2.3 Danish, Denmark(da_DK) 2.3 English, India (en_IN) 2.3 English, Ireland (en_IE) 2.3 English, Zimbabwe (en_ZA) 2.3 Finnish, Finland (fi_FI) 2.3 Greek, Greece (el_GR) 2.3 Hebrew, Israel (iw_IL)* 2.3 Hindi, India (hi_IN) 2.3 Hungarian, Hungary (hu_HU) 2.3 Indonesian, Indonesia (in_ID)* 2.3 Latvian, Latvia (lv_LV) 2.3 Lithuanian, Lithuania (lt_LT) 2.3 Norwegian-Bokm\u00e5l, Norway(nb_NO) 2.3 Portuguese, Brazil (pt_BR) 2.3 Portuguese, Portugal (pt_PT) 2.3 Romanian, Romania (ro_RO) 2.3 Serbian (sr_RS) 2.3 Slovak, Slovakia (sk_SK) 2.3 Slovenian, Slovenia (sl_SI) 2.3 Spanish, US (es_US) 2.3 Swedish, Sweden (sv_SE) 2.3 Tagalog, Philippines (tl_PH) 2.3 Thai, Thailand (th_TH) 2.3 Turkish, Turkey (tr_TR) 2.3 Ukrainian, Ukraine (uk_UA) 2.3 Vietnamese, Vietnam (vi_VN) 2.3 \u4ee5 English \u4e3a\u4f8b\uff0c code \u4e3a en_US \uff0c\u8bed\u8a00\u6587\u4ef6\u5939\u540d\u79f0\u5e94\u4e3a values-en \uff0c\u83b7\u53d6 Locale \u65b9\u6cd5\u5982\u4e0b\uff1a Locale english = new Locale ( \"en\" , \"US\" );","title":"Android\u8bed\u8a00\u70ed\u5207\u6362\u65b9\u6848"},{"location":"java/android/language/#_1","text":"\u7ed3\u5408\u4e4b\u524d\u505a\u8fc7\u7684\u4e24\u6b21\u4e0d\u91cd\u542fApp\u8fdb\u884c\u8bed\u8a00\u5207\u6362\u7ed9\u51fa\u5f53\u524d\u6700\u4f18\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4e3b\u8981\u601d\u8def\u662f\u5728 SharedPreference \u4e2d\u5b58\u50a8\u5f53\u524d\u7684\u8bed\u8a00\u73af\u5883\uff0c\u4e00\u65e6\u5207\u6362\u8bed\u8a00\uff0c\u5219\u8df3\u56de\u4e3b\u754c\u9762\uff08\u4e3b\u754c\u9762\u7684 launchMode \u4e3a singleTask \uff09\uff0c\u5728onCreate\u4e2d\u5148\u8bbe\u7f6e\u8bed\u8a00\u73af\u5883\u518d\u6e32\u67d3\u9875\u9762\uff0c\u5728 onResume \u5224\u65ad\u662f\u5426\u5237\u65b0\u8bed\u8a00\uff0c\u82e5\u5237\u65b0\u8bed\u8a00\u5219\u8c03\u7528 recreate() \u65b9\u6cd5\u91cd\u65b0\u6e32\u67d3\u5bf9\u5e94\u8bed\u8a00\u73af\u5883\u7684\u754c\u9762\u3002 \u5199 BaseActivity \u57fa\u7c7b /** * Created by ykh on 2017/9/8. * \u57fa\u7c7b */ public class BaseActivity extends AppCompatActivity { protected Activity context ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); context = this ; } /** * load the language user selected * 0 CHINESE 1 ENGLISH other SYSTEM */ public void setLanguage () { if ( Utils . hasValue ( context , \"Language\" )){ int current_language = Utils . getIntValue ( context , \"Language\" ); if ( current_language == 0 ){ setLang ( Locale . SIMPLIFIED_CHINESE ); } else if ( current_language == 1 ) { setLang ( Locale . ENGLISH ); } else { setLang ( Locale . getDefault ()); } } } /** * set language locale * @param locale locale */ private void setLang ( Locale locale ) { // \u83b7\u5f97res\u8d44\u6e90\u5bf9\u8c61 Resources resources = getResources (); // \u83b7\u5f97\u8bbe\u7f6e\u5bf9\u8c61 Configuration config = resources . getConfiguration (); // \u83b7\u5f97\u5c4f\u5e55\u53c2\u6570\uff1a\u4e3b\u8981\u662f\u5206\u8fa8\u7387\uff0c\u50cf\u7d20\u7b49\u3002 DisplayMetrics dm = resources . getDisplayMetrics (); // \u8bed\u8a00 config . locale = locale ; resources . updateConfiguration ( config , dm ); } } \u6240\u6709\u754c\u9762\u7684\u7c7b\u5747\u7ee7\u627f BaseActivity ,\u89c9\u5f97\u9ebb\u70e6\u53ef\u4ee5\u76f4\u63a5\u5c06 BaseActivity \u4e2d\u7684 setLanguage \u548c setLang \u65b9\u6cd5\u62f7\u8d1d\u81f3Util\u4e2d\u8c03\u7528\u3002 \u5728 AndroidManifest.xm l\u4e2d\u8bbe\u7f6e MainActivity \u7684 launchMode \u4e3a singleTask < activity android : name = \".ui.MainActivity\" android : screenOrientation = \"portrait\" android : launchMode = \"singleTask\" > ... MainActivity \u7ee7\u627f BaseActivity ,\u5e76\u8bbe\u7f6e onCreate \u65f6\uff0c \u5728\u754c\u9762\u52a0\u8f7d\u524d\u8bbe\u7f6e\u8bed\u8a00\u73af\u5883 \u3002 @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // \u5728\u754c\u9762\u52a0\u8f7d(setContentView\u65b9\u6cd5\u8c03\u7528\u524d)\u524d\u8bbe\u7f6e\u8bed\u8a00\u73af\u5883 setLanguage (); setContentView ( R . layout . activity_main ); } LanguageActivity \u4e2d\u5207\u6362\u8bed\u8a00\uff0c SharedPreference \u4e2d Language \u5b580\u65f6\u4e3a\u4e2d\u6587\uff0c Language \u5b581\u65f6\u4e3a\u82f1\u6587 @OnClick ( R . id . setting_ll_language_chinese ) void language_chinese () { Utils . putIntValue ( context , \"Language\" , 0 ); Utils . putBooleanValue ( context , \"reset_language\" , true ); startActivity ( new Intent ( LanguageActivity . this , MainActivity . class )); } @OnClick ( R . id . setting_ll_language_english ) void language_english () { Utils . putIntValue ( context , \"Language\" , 1 ); Utils . putBooleanValue ( context , \"reset_language\" , true ); startActivity ( new Intent ( LanguageActivity . this , MainActivity . class )); } MainActivity onResume \u4e2d\u6839\u636e SharedPreference \u5224\u65ad\u662f\u5426\u5207\u6362\u8bed\u8a00\u4ee5\u53ca\u5207\u6362\u81f3\u4ec0\u4e48\u8bed\u8a00\u3002 @Override protected void onResume () { super . onResume (); if ( Utils . getBooleanValue ( context , \"reset_language\" )) { Utils . putBooleanValue ( context , \"reset_language\" , false ); //\u91cd\u65b0\u6e32\u67d3\u754c\u9762 recreate (); } } recreate(); \u65b9\u6cd5\u4f1a\u91cd\u65b0\u6e32\u67d3\u672c\u754c\u9762\uff0c\u4f1a\u91cd\u65b0\u8c03\u7528 MainActivity \u7684 onCreate \u65b9\u6cd5\uff0c\u7531\u4e8e\u8bbe\u7f6e\u8bed\u8a00\u73af\u5883\u5728\u524d\uff0c\u6e32\u67d3\u754c\u9762\u5728\u540e\uff0c\u90a3\u4e48MainActivity\u7684\u754c\u9762\u5c31\u5c06\u7acb\u5373\u53d8\u4e3a\u8bbe\u7f6e\u7684\u8bed\u8a00\u73af\u5883\u5bf9\u5e94\u7684\u754c\u9762\u3002 \u81f3\u6b64\u70ed\u66f4\u65b0Android App\u8bed\u8a00\u73af\u5883\u4ecb\u7ecd\u5b8c\u6210","title":"\u65b9\u6848"},{"location":"java/android/language/#iso-639-1","text":"Language / Locale Supported since version English, US (en_US) 1.1 German, Germany (de_DE) 1.1 Chinese, PRC (zh_CN) 1.5 Chinese, Taiwan (zh_TW) 1.5 Czech, Czech Republic (cs_CZ) 1.5 Dutch, Belgium (nl_BE) 1.5 Dutch, Netherlands (nl_NL) 1.5 English, Australia (en_AU) 1.5 English, Britain (en_GB) 1.5 English, Canada (en_CA) 1.5 English, New Zealand (en_NZ) 1.5 English, Singapore(en_SG) 1.5 French, Belgium (fr_BE) 1.5 French, Canada (fr_CA) 1.5 French, France (fr_FR) 1.5 French, Switzerland (fr_CH) 1.5 German, Austria (de_AT) 1.5 German, Liechtenstein (de_LI) 1.5 German, Switzerland (de_CH) 1.5 Italian, Italy (it_IT) 1.5 Italian, Switzerland (it_CH) 1.5 Japanese (ja_JP) 1.5 Korean (ko_KR) 1.5 Polish (pl_PL) 1.5 Russian (ru_RU) 1.5 Spanish (es_ES) 1.5 Arabic, Egypt (ar_EG) 2.3 Arabic, Israel (ar_IL) 2.3 Bulgarian, Bulgaria (bg_BG) 2.3 Catalan, Spain (ca_ES) 2.3 Croatian, Croatia (hr_HR) 2.3 Danish, Denmark(da_DK) 2.3 English, India (en_IN) 2.3 English, Ireland (en_IE) 2.3 English, Zimbabwe (en_ZA) 2.3 Finnish, Finland (fi_FI) 2.3 Greek, Greece (el_GR) 2.3 Hebrew, Israel (iw_IL)* 2.3 Hindi, India (hi_IN) 2.3 Hungarian, Hungary (hu_HU) 2.3 Indonesian, Indonesia (in_ID)* 2.3 Latvian, Latvia (lv_LV) 2.3 Lithuanian, Lithuania (lt_LT) 2.3 Norwegian-Bokm\u00e5l, Norway(nb_NO) 2.3 Portuguese, Brazil (pt_BR) 2.3 Portuguese, Portugal (pt_PT) 2.3 Romanian, Romania (ro_RO) 2.3 Serbian (sr_RS) 2.3 Slovak, Slovakia (sk_SK) 2.3 Slovenian, Slovenia (sl_SI) 2.3 Spanish, US (es_US) 2.3 Swedish, Sweden (sv_SE) 2.3 Tagalog, Philippines (tl_PH) 2.3 Thai, Thailand (th_TH) 2.3 Turkish, Turkey (tr_TR) 2.3 Ukrainian, Ukraine (uk_UA) 2.3 Vietnamese, Vietnam (vi_VN) 2.3 \u4ee5 English \u4e3a\u4f8b\uff0c code \u4e3a en_US \uff0c\u8bed\u8a00\u6587\u4ef6\u5939\u540d\u79f0\u5e94\u4e3a values-en \uff0c\u83b7\u53d6 Locale \u65b9\u6cd5\u5982\u4e0b\uff1a Locale english = new Locale ( \"en\" , \"US\" );","title":"ISO 639-1 \u5bf9\u7167\u8868"},{"location":"java/android/okhttp3/","text":"\u8bf7\u6c42\u53c2\u6570 \u56fa\u5b9a\u6dfb\u52a0 RequestBody requestBody = new FormBody . Builder () . add ( \"key1\" , value1 ) . build (); \u52a8\u6001\u6dfb\u52a0 FormBody . Builder builder = new FormBody . Builder (); builder . add ( \"key1\" , value1 ); // \u6839\u636e\u8f93\u5165\u662f\u5426\u4e3a\u7a7a\u5224\u65ad\u662f\u5426\u4f20\u9012\u53c2\u6570 if ( ! TextUtils . isEmpty ( edittext . getText (). toString ())) { builder . add ( \"key2\" , edittext . getText (). toString ()); } \u6dfb\u52a0\u6587\u4ef6 MultipartBody . Builder builder = new MultipartBody . Builder (); builder . addFormDataPart ( \"key1\" , value1 ); File file = new File ( path ); builder . addFormDataPart ( \"file_key\" , file . getName (), RequestBody . create ( MediaType . parse ( \"application/octet-stream\" ), file )); //\u6ce8\u610f \u5728build\u524d\u8981setType\u4e3aMultipartBody.FORM \u4e0d\u7136\u4f1a\u53d1\u751f\u5a92\u4f53\u7c7b\u578b\u4e0d\u6b63\u786e\u9519\u8bef RequestBody requestBody = builder . setType ( MultipartBody . FORM ). build (); \u8bf7\u6c42\u65b9\u6cd5 \u53ef\u4f7f\u7528 addHeader(\"key\", value) \u6765\u52a8\u6001\u6dfb\u52a0 Header \uff0c\u82e5\u53c2\u6570\u52a8\u6001\u6dfb\u52a0\uff0c\u5219\u4f7f\u7528 builder.build() \u66ff\u4ee3 requestBody \u5373\u53ef\u3002 GET Request requestGet = new Request . Builder () . get () . url ( getUrl ()) . build (); POST Request request = new Request . Builder () . post ( requestBody ) . addHeader ( \"key\" , value ) . url ( getUrl ()) . build (); DELETE Request request = new Request . Builder () . delete () . url ( getUrl ()) . build (); PUT Request request = new Request . Builder () . put ( requestBody ) . url ( getUrl ()) . build (); \u53d1\u8d77\u8bf7\u6c42 \u5728 Activity \u4e2d\uff1a OkHttpClient okHttpClient = new OkHttpClient (); okHttpClient . newCall ( request ). enqueue ( new Callback () { @Override public void onFailure ( Call call , IOException e ) { runOnUiThread ( new Runnable () { @Override public void run () { showToast ( \"Network failure\" ); } }); } @Override public void onResponse ( Call call , final Response response ) throws IOException { final String data = response . body (). string (); runOnUiThread ( new Runnable () { @Override public void run () { switch ( response . code ()) { case 200 : showToast ( \"Success\" ); break ; default : showToast ( \"Network success but this is some logic error\" ); break ; } } }); } }); \u5728 Fragment \u4e2d\uff1a public Handler handler = new Handler ( Looper . getMainLooper ()); OkHttpClient okHttpClient = new OkHttpClient (); okHttpClient . newCall ( request ). enqueue ( new Callback () { @Override public void onFailure ( Call call , IOException e ) { handler . post ( new Runnable () { @Override public void run () { showToast ( \"Network failure\" ); } }); } @Override public void onResponse ( Call call , final Response response ) throws IOException { final String data = response . body (). string (); handler . post ( new Runnable () { @Override public void run () { switch ( response . code ()) { case 200 : showToast ( \"Success\" ); break ; default : showToast ( \"Network success but this is some logic error\" ); break ; } } }); } }); \u5168\u5c40Header HttpClient.java : import okhttp3.Interceptor ; import okhttp3.OkHttpClient ; import okhttp3.Request ; import okhttp3.Response ; public class HttpClient { private static String token = null ; private static OkHttpClient client = new OkHttpClient . Builder () . connectTimeout ( Constants . TTL , TimeUnit . MILLISECONDS ) //\u8bbe\u7f6e10s\u949f\u8d85\u65f6 . addInterceptor ( new Interceptor () { //\u62e6\u622a\u5668 \u7528\u4e8e\u4e3a\u6bcf\u4e2arequest\u6dfb\u52a0\"Authorization\", \"Token \"+token \u4fe1\u606f\u7528\u4e8e\u670d\u52a1\u5668\u533a\u5206\u5408\u6cd5\u7528\u6237 @Override public Response intercept ( Chain chain ) throws IOException { Request request = chain . request (); if ( token != null ) { request = request . newBuilder () . addHeader ( \"Authorization\" , \"Token \" + token ). build (); //\u9a8c\u8bc1\u4fe1\u606f } return chain . proceed ( request ); } }). build (); public static void setToken ( String new_token ) { token = new_token ; } public static String getToken () { return token ; } public static OkHttpClient getClient () { return client ; } } \u8bbe\u7f6eToken: //\u4e3aOkHttp\u7684\u5934\u90e8\u6dfb\u52a0Token HttpClient . setToken ( access_token ); \u4e4b\u540e\u9700\u8981\u4f7f\u7528\u6709\u8be5Header\u7684\u8bf7\u6c42\u76f4\u63a5\u8c03\u7528\uff1a HttpClient . getClient (). newCall ( request ). enqueue ( new Callback () {....} \u4e0d\u4f7f\u7528\u6709\u8be5Header\u7684\u8bf7\u6c42\uff1a OkHttpClient okHttpClient = new OkHttpClient (); okHttpClient . newCall ( request ). enqueue ( new Callback () {...}","title":"Android OkHttp3"},{"location":"java/android/okhttp3/#_1","text":"","title":"\u8bf7\u6c42\u53c2\u6570"},{"location":"java/android/okhttp3/#_2","text":"RequestBody requestBody = new FormBody . Builder () . add ( \"key1\" , value1 ) . build ();","title":"\u56fa\u5b9a\u6dfb\u52a0"},{"location":"java/android/okhttp3/#_3","text":"FormBody . Builder builder = new FormBody . Builder (); builder . add ( \"key1\" , value1 ); // \u6839\u636e\u8f93\u5165\u662f\u5426\u4e3a\u7a7a\u5224\u65ad\u662f\u5426\u4f20\u9012\u53c2\u6570 if ( ! TextUtils . isEmpty ( edittext . getText (). toString ())) { builder . add ( \"key2\" , edittext . getText (). toString ()); }","title":"\u52a8\u6001\u6dfb\u52a0"},{"location":"java/android/okhttp3/#_4","text":"MultipartBody . Builder builder = new MultipartBody . Builder (); builder . addFormDataPart ( \"key1\" , value1 ); File file = new File ( path ); builder . addFormDataPart ( \"file_key\" , file . getName (), RequestBody . create ( MediaType . parse ( \"application/octet-stream\" ), file )); //\u6ce8\u610f \u5728build\u524d\u8981setType\u4e3aMultipartBody.FORM \u4e0d\u7136\u4f1a\u53d1\u751f\u5a92\u4f53\u7c7b\u578b\u4e0d\u6b63\u786e\u9519\u8bef RequestBody requestBody = builder . setType ( MultipartBody . FORM ). build ();","title":"\u6dfb\u52a0\u6587\u4ef6"},{"location":"java/android/okhttp3/#_5","text":"\u53ef\u4f7f\u7528 addHeader(\"key\", value) \u6765\u52a8\u6001\u6dfb\u52a0 Header \uff0c\u82e5\u53c2\u6570\u52a8\u6001\u6dfb\u52a0\uff0c\u5219\u4f7f\u7528 builder.build() \u66ff\u4ee3 requestBody \u5373\u53ef\u3002","title":"\u8bf7\u6c42\u65b9\u6cd5"},{"location":"java/android/okhttp3/#get","text":"Request requestGet = new Request . Builder () . get () . url ( getUrl ()) . build ();","title":"GET"},{"location":"java/android/okhttp3/#post","text":"Request request = new Request . Builder () . post ( requestBody ) . addHeader ( \"key\" , value ) . url ( getUrl ()) . build ();","title":"POST"},{"location":"java/android/okhttp3/#delete","text":"Request request = new Request . Builder () . delete () . url ( getUrl ()) . build ();","title":"DELETE"},{"location":"java/android/okhttp3/#put","text":"Request request = new Request . Builder () . put ( requestBody ) . url ( getUrl ()) . build ();","title":"PUT"},{"location":"java/android/okhttp3/#_6","text":"\u5728 Activity \u4e2d\uff1a OkHttpClient okHttpClient = new OkHttpClient (); okHttpClient . newCall ( request ). enqueue ( new Callback () { @Override public void onFailure ( Call call , IOException e ) { runOnUiThread ( new Runnable () { @Override public void run () { showToast ( \"Network failure\" ); } }); } @Override public void onResponse ( Call call , final Response response ) throws IOException { final String data = response . body (). string (); runOnUiThread ( new Runnable () { @Override public void run () { switch ( response . code ()) { case 200 : showToast ( \"Success\" ); break ; default : showToast ( \"Network success but this is some logic error\" ); break ; } } }); } }); \u5728 Fragment \u4e2d\uff1a public Handler handler = new Handler ( Looper . getMainLooper ()); OkHttpClient okHttpClient = new OkHttpClient (); okHttpClient . newCall ( request ). enqueue ( new Callback () { @Override public void onFailure ( Call call , IOException e ) { handler . post ( new Runnable () { @Override public void run () { showToast ( \"Network failure\" ); } }); } @Override public void onResponse ( Call call , final Response response ) throws IOException { final String data = response . body (). string (); handler . post ( new Runnable () { @Override public void run () { switch ( response . code ()) { case 200 : showToast ( \"Success\" ); break ; default : showToast ( \"Network success but this is some logic error\" ); break ; } } }); } });","title":"\u53d1\u8d77\u8bf7\u6c42"},{"location":"java/android/okhttp3/#header","text":"HttpClient.java : import okhttp3.Interceptor ; import okhttp3.OkHttpClient ; import okhttp3.Request ; import okhttp3.Response ; public class HttpClient { private static String token = null ; private static OkHttpClient client = new OkHttpClient . Builder () . connectTimeout ( Constants . TTL , TimeUnit . MILLISECONDS ) //\u8bbe\u7f6e10s\u949f\u8d85\u65f6 . addInterceptor ( new Interceptor () { //\u62e6\u622a\u5668 \u7528\u4e8e\u4e3a\u6bcf\u4e2arequest\u6dfb\u52a0\"Authorization\", \"Token \"+token \u4fe1\u606f\u7528\u4e8e\u670d\u52a1\u5668\u533a\u5206\u5408\u6cd5\u7528\u6237 @Override public Response intercept ( Chain chain ) throws IOException { Request request = chain . request (); if ( token != null ) { request = request . newBuilder () . addHeader ( \"Authorization\" , \"Token \" + token ). build (); //\u9a8c\u8bc1\u4fe1\u606f } return chain . proceed ( request ); } }). build (); public static void setToken ( String new_token ) { token = new_token ; } public static String getToken () { return token ; } public static OkHttpClient getClient () { return client ; } } \u8bbe\u7f6eToken: //\u4e3aOkHttp\u7684\u5934\u90e8\u6dfb\u52a0Token HttpClient . setToken ( access_token ); \u4e4b\u540e\u9700\u8981\u4f7f\u7528\u6709\u8be5Header\u7684\u8bf7\u6c42\u76f4\u63a5\u8c03\u7528\uff1a HttpClient . getClient (). newCall ( request ). enqueue ( new Callback () {....} \u4e0d\u4f7f\u7528\u6709\u8be5Header\u7684\u8bf7\u6c42\uff1a OkHttpClient okHttpClient = new OkHttpClient (); okHttpClient . newCall ( request ). enqueue ( new Callback () {...}","title":"\u5168\u5c40Header"},{"location":"java/android/pda-keyboard/","text":"\u9884\u671f\u6548\u679c \u7531\u4e8ePDA\u4e0a\u6709\u5b9e\u4f53\u952e\u76d8\uff0c\u5927\u90e8\u5206\u64cd\u4f5c\u76f4\u63a5\u4f7f\u7528\u5b9e\u4f53\u952e\u76d8\u5b8c\u6210\uff0c\u4f7f\u7528\u8f6f\u952e\u76d8\u8f85\u52a9\u8f93\u5165\u3002\u70b9\u51fb\u8f93\u5165\u6846\uff0c\u53ea\u83b7\u53d6\u8f93\u5165\u6846\u7684\u7126\u70b9\u800c\u4e0d\u5f39\u51fa\u8f6f\u952e\u76d8\uff0c\u8fd9\u6837\u65b9\u4fbf\u4f7f\u7528\u5b9e\u4f53\u952e\u76d8\u8f93\u5165\u3002\u5728\u8f93\u5165\u6846\u65c1\u653e\u7f6e\u4e00\u4e2a\u6309\u94ae\uff0c\u7528\u4e8e\u63a7\u5236\u8f6f\u952e\u76d8\u7684\u5f39\u51fa\u548c\u5173\u95ed\u3002 \u529f\u80fd\u70b9\u5982\u4e0b\uff1a \u8f93\u5165\u6846\u83b7\u53d6\u7126\u70b9\u540e\uff0c\u4ec5\u53ef\u4f7f\u7528\u5b9e\u4f53\u952e\u76d8\u8f93\u5165\u4e0d\u5f39\u51fa\u8f6f\u952e\u76d8\u3002 \u70b9\u51fb\u5f39\u51fa/\u6536\u8d77\u8f6f\u952e\u76d8\u6309\u94ae\u540e\uff0c\u6839\u636e\u5f53\u524d\u952e\u76d8\u72b6\u6001\u5f39\u51fa\u6216\u6536\u8d77\u8f6f\u952e\u76d8\u3002 \u70b9\u51fb\u8f6f\u952e\u76d8\u5185\u7f6e\u7684\u6536\u8d77\u6309\u94ae\u540e\uff0c\u8981\u5b9e\u65f6\u6539\u53d8\u5f39\u51fa/\u6536\u8d77\u8f6f\u952e\u76d8\u6309\u94ae\u7684\u72b6\u6001\u3002 \u6700\u7ec8\u6548\u679c \u70b9\u51fb\u8f93\u5165\u6846\u540e\uff1a \u4e22\u5931 \u70b9\u51fb\u5f39\u51fa\u952e\u76d8\u6309\u94ae\u540e\uff1a \u4e22\u5931 \u5b9e\u73b0\u8fc7\u7a0b \u5e03\u5c40\u4ee3\u7801\uff1a <!--\u5de5\u5355\u53f7--> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_marginBottom= \"4dp\" android:gravity= \"center_vertical\" android:orientation= \"horizontal\" > <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/prescription_work_no\" android:textColor= \"@color/holo_blue_bright\" android:textSize= \"18sp\" /> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" > <ykh.tisanems.utils.KeyboardEditText android:id= \"@+id/prescription_work_no_search_key\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_weight= \"1\" android:hint= \"@string/prescription_work_search_key\" android:imeOptions= \"actionSearch\" android:textColor= \"@color/colorAccent\" android:textColorHint= \"@color/colorPrimaryLight\" /> <ImageView android:id= \"@+id/prescription_work_no_search_keyboard\" android:layout_width= \"44dp\" android:layout_height= \"44dp\" android:padding= \"8dp\" android:src= \"@drawable/icon_keyboard\" /> </LinearLayout> </LinearLayout> KeyboardEditText \u53ef\u4ee5\u4f7f\u7528 EditText \u4ee3\u66ff \u63a7\u5236\u4ee3\u7801\uff1a //\u76d1\u542c\u8f6f\u952e\u76d8\u53d8\u5316 KeyboardVisibilityEvent . setEventListener ( context , new KeyboardVisibilityEventListener () { @Override public void onVisibilityChanged ( boolean isOpen ) { if ( ! isOpen ) { prescription_work_search_key . setInputType ( InputType . TYPE_NULL ); prescription_work_search_keyboard . setImageResource ( R . drawable . icon_keyboard ); prescription_work_no_search_key . setInputType ( InputType . TYPE_NULL ); prescription_work_no_search_keyboard . setImageResource ( R . drawable . icon_keyboard ); } } }); prescription_work_search_key . setInputType ( InputType . TYPE_NULL ); //\u8f6f\u952e\u76d8\u5f39\u51fa\u5173\u95ed prescription_work_search_keyboard . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View view ) { InputMethodManager imm = ( InputMethodManager ) getSystemService ( Context . INPUT_METHOD_SERVICE ); if ( prescription_work_search_key . getInputType () == InputType . TYPE_NULL ) { prescription_work_search_key . setInputType ( InputType . TYPE_CLASS_TEXT ); prescription_work_search_key . requestFocus (); prescription_work_search_key . setSelection ( prescription_work_search_key . length ()); imm . showSoftInput ( prescription_work_search_key , InputMethodManager . SHOW_FORCED ); prescription_work_search_keyboard . setImageResource ( R . drawable . icon_keyboard_off ); } else { prescription_work_search_key . setInputType ( InputType . TYPE_NULL ); imm . hideSoftInputFromWindow ( prescription_work_search_key . getWindowToken (), 0 ); prescription_work_search_keyboard . setImageResource ( R . drawable . icon_keyboard ); } } }); //\u8f93\u5165\u6846\u7126\u70b9\u53d8\u5316 prescription_work_search_key . setOnFocusChangeListener ( new View . OnFocusChangeListener () { @Override public void onFocusChange ( View view , boolean b ) { // \u65e0\u8bba\u662f\u5426\u53ef\u8f93\u5165\u3001\u662f\u5426\u6709\u7126\u70b9 \u90fd\u7f6e\u4e8e\u952e\u76d8\u5173\u95ed\u72b6\u6001 prescription_work_search_key . setInputType ( InputType . TYPE_NULL ); prescription_work_search_keyboard . setImageResource ( R . drawable . icon_keyboard ); InputMethodManager imm = ( InputMethodManager ) getSystemService ( Context . INPUT_METHOD_SERVICE ); imm . hideSoftInputFromWindow ( prescription_work_search_key . getWindowToken (), 0 ); } }); //\u5f00\u59cb\u641c\u7d22 prescription_work_search_key . setOnKeyListener ( new View . OnKeyListener () { @Override public boolean onKey ( View view , int keyCode , KeyEvent keyEvent ) { if ( keyEvent . getAction () != KeyEvent . ACTION_DOWN && keyCode == KeyEvent . KEYCODE_ENTER ) { searchPrescriptionWork ( prescription_work_search_key . getText (). toString (). trim ()); } //\u4e0d\u5931\u53bb\u7126\u70b9 return false ; } }); \u8bf4\u660e\uff1a \u4f7f\u7528\u5e93 KeyboardVisibilityEvent \u6765\u5168\u5c40\u76d1\u542c\u8f6f\u952e\u76d8\u7684\u5f39\u51fa\u548c\u5173\u95ed\uff0c\u5173\u95ed\u65f6\u8bbe\u7f6e\u754c\u9762\u4e0a\u6240\u6709\u7684\u8f93\u5165\u6846\u7684\u8f93\u5165\u7c7b\u578b\u4e3a InputType.TYPE_NULL \uff0c\u5c55\u5f00/\u6536\u8d77\u8f6f\u952e\u76d8\u6309\u94ae\u72b6\u6001\u4e3a\u6536\u8d77\u3002 \u8bbe\u7f6e\u8be5\u8f93\u5165\u6846\u7684\u8f93\u5165\u7c7b\u578b\u4e3a InputType.TYPE_NULL \uff0c\u4ee5\u4fdd\u8bc1\u70b9\u51fb\u540e\u80fd\u83b7\u53d6\u5230\u7126\u70b9\u4f46\u662f\u4e0d\u5c55\u5f00\u8f6f\u952e\u76d8\u3002 \u4e3a\u5c55\u5f00/\u6536\u8d77\u8f6f\u952e\u76d8\u6309\u94ae\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6\uff0c\u82e5\u5f53\u524d\u8f93\u5165\u6846\u7684\u8f93\u5165\u7c7b\u578b\u4e3a InputType.TYPE_NULL \u5219\u8ba4\u4e3a\u5f53\u524d\u8f6f\u952e\u76d8\u6536\u8d77\uff0c\u5219\u5c55\u5f00\u8f6f\u952e\u76d8\u5e76\u8bbe\u7f6e\u8f93\u5165\u7c7b\u578b\u4e3a InputType.TYPE_CLASS_TEXT \uff0c\u5426\u5219\u5219\u6536\u8d77\u952e\u76d8\u5e76\u8bbe\u7f6e\u8f93\u5165\u6846\u7c7b\u578b\u4e3a InputType.TYPE_NULL \u3002 \u8bbe\u7f6e\u8f93\u5165\u6846\u7126\u70b9\u53d8\u5316\u65f6\u59cb\u7ec8\u6536\u8d77\u8f6f\u952e\u76d8\u3002 \u4e3a\u952e\u76d8\u548c\u8f6f\u952e\u76d8\u7684 Enter \u6309\u94ae\u7ed1\u5b9a\u4e8b\u4ef6\u3002","title":"Android PDA\u952e\u76d8\u903b\u8f91"},{"location":"java/android/pda-keyboard/#_1","text":"\u7531\u4e8ePDA\u4e0a\u6709\u5b9e\u4f53\u952e\u76d8\uff0c\u5927\u90e8\u5206\u64cd\u4f5c\u76f4\u63a5\u4f7f\u7528\u5b9e\u4f53\u952e\u76d8\u5b8c\u6210\uff0c\u4f7f\u7528\u8f6f\u952e\u76d8\u8f85\u52a9\u8f93\u5165\u3002\u70b9\u51fb\u8f93\u5165\u6846\uff0c\u53ea\u83b7\u53d6\u8f93\u5165\u6846\u7684\u7126\u70b9\u800c\u4e0d\u5f39\u51fa\u8f6f\u952e\u76d8\uff0c\u8fd9\u6837\u65b9\u4fbf\u4f7f\u7528\u5b9e\u4f53\u952e\u76d8\u8f93\u5165\u3002\u5728\u8f93\u5165\u6846\u65c1\u653e\u7f6e\u4e00\u4e2a\u6309\u94ae\uff0c\u7528\u4e8e\u63a7\u5236\u8f6f\u952e\u76d8\u7684\u5f39\u51fa\u548c\u5173\u95ed\u3002 \u529f\u80fd\u70b9\u5982\u4e0b\uff1a \u8f93\u5165\u6846\u83b7\u53d6\u7126\u70b9\u540e\uff0c\u4ec5\u53ef\u4f7f\u7528\u5b9e\u4f53\u952e\u76d8\u8f93\u5165\u4e0d\u5f39\u51fa\u8f6f\u952e\u76d8\u3002 \u70b9\u51fb\u5f39\u51fa/\u6536\u8d77\u8f6f\u952e\u76d8\u6309\u94ae\u540e\uff0c\u6839\u636e\u5f53\u524d\u952e\u76d8\u72b6\u6001\u5f39\u51fa\u6216\u6536\u8d77\u8f6f\u952e\u76d8\u3002 \u70b9\u51fb\u8f6f\u952e\u76d8\u5185\u7f6e\u7684\u6536\u8d77\u6309\u94ae\u540e\uff0c\u8981\u5b9e\u65f6\u6539\u53d8\u5f39\u51fa/\u6536\u8d77\u8f6f\u952e\u76d8\u6309\u94ae\u7684\u72b6\u6001\u3002","title":"\u9884\u671f\u6548\u679c"},{"location":"java/android/pda-keyboard/#_2","text":"\u70b9\u51fb\u8f93\u5165\u6846\u540e\uff1a \u4e22\u5931 \u70b9\u51fb\u5f39\u51fa\u952e\u76d8\u6309\u94ae\u540e\uff1a \u4e22\u5931","title":"\u6700\u7ec8\u6548\u679c"},{"location":"java/android/pda-keyboard/#_3","text":"\u5e03\u5c40\u4ee3\u7801\uff1a <!--\u5de5\u5355\u53f7--> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:layout_marginBottom= \"4dp\" android:gravity= \"center_vertical\" android:orientation= \"horizontal\" > <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"@string/prescription_work_no\" android:textColor= \"@color/holo_blue_bright\" android:textSize= \"18sp\" /> <LinearLayout android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:orientation= \"horizontal\" > <ykh.tisanems.utils.KeyboardEditText android:id= \"@+id/prescription_work_no_search_key\" android:layout_width= \"0dp\" android:layout_height= \"wrap_content\" android:layout_weight= \"1\" android:hint= \"@string/prescription_work_search_key\" android:imeOptions= \"actionSearch\" android:textColor= \"@color/colorAccent\" android:textColorHint= \"@color/colorPrimaryLight\" /> <ImageView android:id= \"@+id/prescription_work_no_search_keyboard\" android:layout_width= \"44dp\" android:layout_height= \"44dp\" android:padding= \"8dp\" android:src= \"@drawable/icon_keyboard\" /> </LinearLayout> </LinearLayout> KeyboardEditText \u53ef\u4ee5\u4f7f\u7528 EditText \u4ee3\u66ff \u63a7\u5236\u4ee3\u7801\uff1a //\u76d1\u542c\u8f6f\u952e\u76d8\u53d8\u5316 KeyboardVisibilityEvent . setEventListener ( context , new KeyboardVisibilityEventListener () { @Override public void onVisibilityChanged ( boolean isOpen ) { if ( ! isOpen ) { prescription_work_search_key . setInputType ( InputType . TYPE_NULL ); prescription_work_search_keyboard . setImageResource ( R . drawable . icon_keyboard ); prescription_work_no_search_key . setInputType ( InputType . TYPE_NULL ); prescription_work_no_search_keyboard . setImageResource ( R . drawable . icon_keyboard ); } } }); prescription_work_search_key . setInputType ( InputType . TYPE_NULL ); //\u8f6f\u952e\u76d8\u5f39\u51fa\u5173\u95ed prescription_work_search_keyboard . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View view ) { InputMethodManager imm = ( InputMethodManager ) getSystemService ( Context . INPUT_METHOD_SERVICE ); if ( prescription_work_search_key . getInputType () == InputType . TYPE_NULL ) { prescription_work_search_key . setInputType ( InputType . TYPE_CLASS_TEXT ); prescription_work_search_key . requestFocus (); prescription_work_search_key . setSelection ( prescription_work_search_key . length ()); imm . showSoftInput ( prescription_work_search_key , InputMethodManager . SHOW_FORCED ); prescription_work_search_keyboard . setImageResource ( R . drawable . icon_keyboard_off ); } else { prescription_work_search_key . setInputType ( InputType . TYPE_NULL ); imm . hideSoftInputFromWindow ( prescription_work_search_key . getWindowToken (), 0 ); prescription_work_search_keyboard . setImageResource ( R . drawable . icon_keyboard ); } } }); //\u8f93\u5165\u6846\u7126\u70b9\u53d8\u5316 prescription_work_search_key . setOnFocusChangeListener ( new View . OnFocusChangeListener () { @Override public void onFocusChange ( View view , boolean b ) { // \u65e0\u8bba\u662f\u5426\u53ef\u8f93\u5165\u3001\u662f\u5426\u6709\u7126\u70b9 \u90fd\u7f6e\u4e8e\u952e\u76d8\u5173\u95ed\u72b6\u6001 prescription_work_search_key . setInputType ( InputType . TYPE_NULL ); prescription_work_search_keyboard . setImageResource ( R . drawable . icon_keyboard ); InputMethodManager imm = ( InputMethodManager ) getSystemService ( Context . INPUT_METHOD_SERVICE ); imm . hideSoftInputFromWindow ( prescription_work_search_key . getWindowToken (), 0 ); } }); //\u5f00\u59cb\u641c\u7d22 prescription_work_search_key . setOnKeyListener ( new View . OnKeyListener () { @Override public boolean onKey ( View view , int keyCode , KeyEvent keyEvent ) { if ( keyEvent . getAction () != KeyEvent . ACTION_DOWN && keyCode == KeyEvent . KEYCODE_ENTER ) { searchPrescriptionWork ( prescription_work_search_key . getText (). toString (). trim ()); } //\u4e0d\u5931\u53bb\u7126\u70b9 return false ; } }); \u8bf4\u660e\uff1a \u4f7f\u7528\u5e93 KeyboardVisibilityEvent \u6765\u5168\u5c40\u76d1\u542c\u8f6f\u952e\u76d8\u7684\u5f39\u51fa\u548c\u5173\u95ed\uff0c\u5173\u95ed\u65f6\u8bbe\u7f6e\u754c\u9762\u4e0a\u6240\u6709\u7684\u8f93\u5165\u6846\u7684\u8f93\u5165\u7c7b\u578b\u4e3a InputType.TYPE_NULL \uff0c\u5c55\u5f00/\u6536\u8d77\u8f6f\u952e\u76d8\u6309\u94ae\u72b6\u6001\u4e3a\u6536\u8d77\u3002 \u8bbe\u7f6e\u8be5\u8f93\u5165\u6846\u7684\u8f93\u5165\u7c7b\u578b\u4e3a InputType.TYPE_NULL \uff0c\u4ee5\u4fdd\u8bc1\u70b9\u51fb\u540e\u80fd\u83b7\u53d6\u5230\u7126\u70b9\u4f46\u662f\u4e0d\u5c55\u5f00\u8f6f\u952e\u76d8\u3002 \u4e3a\u5c55\u5f00/\u6536\u8d77\u8f6f\u952e\u76d8\u6309\u94ae\u8bbe\u7f6e\u70b9\u51fb\u4e8b\u4ef6\uff0c\u82e5\u5f53\u524d\u8f93\u5165\u6846\u7684\u8f93\u5165\u7c7b\u578b\u4e3a InputType.TYPE_NULL \u5219\u8ba4\u4e3a\u5f53\u524d\u8f6f\u952e\u76d8\u6536\u8d77\uff0c\u5219\u5c55\u5f00\u8f6f\u952e\u76d8\u5e76\u8bbe\u7f6e\u8f93\u5165\u7c7b\u578b\u4e3a InputType.TYPE_CLASS_TEXT \uff0c\u5426\u5219\u5219\u6536\u8d77\u952e\u76d8\u5e76\u8bbe\u7f6e\u8f93\u5165\u6846\u7c7b\u578b\u4e3a InputType.TYPE_NULL \u3002 \u8bbe\u7f6e\u8f93\u5165\u6846\u7126\u70b9\u53d8\u5316\u65f6\u59cb\u7ec8\u6536\u8d77\u8f6f\u952e\u76d8\u3002 \u4e3a\u952e\u76d8\u548c\u8f6f\u952e\u76d8\u7684 Enter \u6309\u94ae\u7ed1\u5b9a\u4e8b\u4ef6\u3002","title":"\u5b9e\u73b0\u8fc7\u7a0b"},{"location":"java/android/todo-sync/","text":"\u9700\u6c42 \u6700\u8fd1\u505a\u4e86\u4e2aTodo\u7c7b\u7684android\u5ba2\u6237\u7aef,\u5ba2\u6237\u9700\u8981\u5ba2\u6237\u7aef\u53ef\u4ee5\u79bb\u7ebf\u4f7f\u7528\uff0c\u5e76\u4e14\u5f53\u5ba2\u6237\u7aef\u518d\u6b21\u8fde\u63a5\u5230\u670d\u52a1\u7aef\u65f6\uff0c\u9700\u8981\u5c06\u6570\u636e\u540c\u6b65\u81f3\u670d\u52a1\u7aef\uff0c\u5e76\u4e14\u8981\u652f\u6301\u591a\u7ec8\u7aef\u540c\u4e00\u8d26\u53f7\u540c\u65f6\u767b\u5f55\u64cd\u4f5c\u3002\u8fd9\u4e2a\u9700\u6c42\u548c\u5370\u8c61\u7b14\u8bb0\u5341\u5206\u76f8\u4f3c\uff0c\u5728\u7f51\u4e0a\u4e5f\u68c0\u7d22\u4e86\u8bb8\u591a\u76f8\u5173\u7684\u8d44\u6599\uff0c\u4f46\u57fa\u672c\u4e0a\u90fd\u5e2e\u52a9\u4e0d\u5927\u3002\u6700\u540e\u53ea\u597d\u81ea\u5df1\u6784\u601d\u8bbe\u8ba1\uff0c\u5728\u8fd9\u91cc\u8bb0\u5f55\u4e0b\u8be5\u9700\u6c42\u7684\u5b9e\u73b0\u601d\u8def\u548c\u6838\u5fc3\u4ee3\u7801\u3002 \u5b9e\u73b0\u601d\u8def android\u5ba2\u6237\u7aef\u8981\u80fd\u591f\u79bb\u7ebf\u4f7f\u7528\uff0c\u8fd9\u5c31\u8981\u6c42android\u5ba2\u6237\u7aef\u80fd\u591f\u5728\u672c\u5730\u7ba1\u7406\u6570\u636e\uff0c\u5728\u8fd9\u91cc\u91c7\u7528Sqlite\uff0c\u7ecf\u8fc7\u5bf9\u6bd4\u540e\u91c7\u7528 Suger ORM \u3002 android\u5ba2\u6237\u7aef\u79bb\u7ebf\u64cd\u4f5c\u7684\u6570\u636e\u8981\u652f\u6301\u591a\u7aef\u767b\u5f55 \uff0c\u4e3a\u4e86\u9632\u6b62\u5728\u672c\u5730\u751f\u6210\u7684\u6570\u636e\u4e3b\u952e\u548c\u5176\u4ed6\u79bb\u7ebf\u5ba2\u6237\u7aef\u751f\u6210\u7684\u6570\u636e\u4e3b\u952e\u51b2\u7a81\uff0c\u90a3\u4e48\u6570\u636e\u4e3b\u952e\u4fbf\u4e0d\u9002\u5408\u4f7f\u7528\u81ea\u589eINT\u6765\u5b9e\u73b0\uff0c\u8fd9\u91cc\u91c7\u7528UUID4\u4f5c\u4e3a\u6570\u636e\u8868\u4e3b\u952e\u3002 \u79bb\u7ebf\u64cd\u4f5c\u7684\u6570\u636e\u8981\u7edf\u4e00\u7531\u524d\u53f0ui\u53d1\u9001\u81f3\u540e\u53f0service\uff0c\u518d\u7531\u5f53\u524d\u7f51\u7edc\u72b6\u6001\u6765\u5224\u65ad\u5f53\u524d\u52a8\u4f5c\u7684\u64cd\u4f5c\u903b\u8f91\uff0c\u4e3a\u4e86\u660e\u786e\u5904\u7406\u903b\u8f91\u3002\u4f7f\u7528 EventBus \u4f5c\u4e3a\u6d88\u606f\u603b\u7ebf\u6765\u8d1f\u8d23\u4f20\u9012\u6570\u636e\u64cd\u4f5c\u3001ui\u53d8\u5316\u7b49\u64cd\u4f5c\u6d88\u606f\u3002 \u79bb\u7ebf\u6570\u636e\u518d\u518d\u6b21\u8054\u7f51\u65f6\u8981\u548c\u670d\u52a1\u5668\u5f53\u524d\u6570\u636e\u8fdb\u884c\u6bd4\u5bf9\uff0c\u8981\u8bb0\u5f55\u6570\u636e\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u4f5c\u4e3a\u6570\u636e\u7684\u662f\u5426\u9700\u8981\u66f4\u65b0\u7684\u51ed\u8bc1\u3002\u5177\u4f53\u5904\u7406\u903b\u8f91\u5982\u4e0b\uff1a \u573a\u666f \u64cd\u4f5c \u672c\u5730\u6709\u6570\u636eA\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u6570\u636eA \u5411\u670d\u52a1\u5668\u65b0\u589e\u6570\u636eA \u672c\u5730\u6ca1\u6709\u6570\u636eA\uff0c\u670d\u52a1\u5668\u6709\u6570\u636eA \u5411\u670d\u52a1\u5668\u5220\u9664\u6570\u636eA \u670d\u52a1\u5668\u548c\u672c\u5730\u5747\u6709\u6570\u636eA\uff0c\u670d\u52a1\u5668\u8bb0\u5f55\u7684\u66f4\u65b0\u65f6\u95f4\u66f4\u665a \u6570\u636eA\u7531\u670d\u52a1\u5668\u5411\u672c\u5730\u66f4\u65b0 \u670d\u52a1\u5668\u548c\u672c\u5730\u5747\u6709\u6570\u636eA\uff0c\u670d\u52a1\u5668\u8bb0\u5f55\u7684\u66f4\u65b0\u65f6\u95f4\u66f4\u65e9 \u6570\u636eA\u7531\u672c\u5730\u5411\u670d\u52a1\u5668\u66f4\u65b0 \u670d\u52a1\u5668\u548c\u672c\u5730\u5747\u6709\u6570\u636eA\uff0c\u4e24\u7aef\u66f4\u65b0\u65f6\u95f4\u76f8\u540c \u4e0d\u5904\u7406 \u672c\u5730\u6570\u636e\u6a21\u578b\u4e2d\u8bb0\u5f55\u5982\u4e0b\u4e09\u4e2a\u5b57\u6bb5\uff0c\u7528\u4e8e\u533a\u5206\u6570\u636e\u6700\u8fd1\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 private Boolean isCreate = false; private Boolean isUpdate = false; private Boolean isDelete = false; \u6838\u5fc3\u4ee3\u7801 /** * \u540c\u6b65\u6570\u636e */ public void sync () { Logger . i ( \"Start sync category\" ); if ( ! Utils . isNetworkConnected ( this )) { Logger . w ( \"End sync category, because network is not connected!\" ); return ; } // step1 \u5411\u670d\u52a1\u5668\u65b0\u589e\u672c\u5730\u65b0\u589e List < Category > categoryCreateList = Category . find ( Category . class , \"IS_CREATE = ?\" , \"1\" ); for ( Category category : categoryCreateList ) { addCategory ( category ); } // step2 \u5411\u670d\u52a1\u5668\u5220\u9664\u672c\u5730\u5220\u9664 List < Category > categoryDeleteList = Category . find ( Category . class , \"IS_DELETE = ?\" , \"1\" ); for ( Category category : categoryDeleteList ) { deleteCategory ( category ); } Request request = new Request . Builder () . get () . url ( Constants . CategorySyncList ) . build (); HttpClientUtil . getClient (). newCall ( request ). enqueue ( new Callback () { @Override public void onFailure ( Call call , IOException e ) { Logger . e ( \"Category onFailure\" ); } @Override public void onResponse ( Call call , final Response response ) throws IOException { final String data = response . body (). string (); switch ( response . code ()) { case 200 : Logger . json ( data ); Gson gson = new Gson (); // \u670d\u52a1\u7aef\u6570\u636e List < Category > categoryServerList = gson . fromJson ( data , new TypeToken < List < Category >> () { }. getType ()); List < String > categoryServerIdList = new ArrayList <> (); for ( Category category : categoryServerList ) { categoryServerIdList . add ( category . getUuid ()); } // \u672c\u5730\u6570\u636e List < Category > categoryDbList = Category . listAll ( Category . class ); HashMap < String , String > categoryDbIdList = new HashMap <> (); for ( Category category : categoryDbList ) { categoryDbIdList . put ( category . getUuid (), category . getUpdate_time ()); } for ( Category categoryServer : categoryServerList ) { if ( ! categoryDbIdList . keySet (). contains ( categoryServer . getUuid ())) { // step3 \u670d\u52a1\u5668\u6bd4\u672c\u5730\u591a\u7684\uff0c\u5411\u672c\u5730\u65b0\u589e Logger . i ( \"need to add \" + categoryServer . getUuid ()); categoryServer . save (); } else { Category categoryDb = Category . findByUUID ( categoryServer . getUuid ()); switch ( Utils . timeEqual ( categoryServer . getUpdate_time (), categoryDbIdList . get ( categoryServer . getUuid ()))) { case 0 : // step5.1 \u66f4\u65b0\u65f6\u95f4\u76f8\u540c\u7684\u4e0d\u5904\u7406 Logger . i ( \"not change \" + categoryServer . getUuid ()); break ; case 1 : // step5.2 \u672c\u5730\u6bd4\u670d\u52a1\u5668\u66f4\u65b0\u65f6\u95f4\u665a\u7684\uff0c\u5411\u670d\u52a1\u5668\u66f4\u65b0 Logger . i ( \"server_time:%s local_time:%s, need to update %s to server\" , categoryServer . getUpdate_time (), categoryDbIdList . get ( categoryServer . getUuid ()), categoryServer . getUuid ()); if ( categoryDb != null ) { updateCategory ( categoryDb ); } break ; case - 1 : // step5.3 \u672c\u5730\u6bd4\u670d\u52a1\u5668\u66f4\u65b0\u65f6\u95f4\u65e9\u7684\uff0c\u5411\u672c\u5730\u66f4\u65b0 Logger . i ( \"server_time:%s local_time:%s, need to update %s to local\" , categoryServer . getUpdate_time (), categoryDbIdList . get ( categoryServer . getUuid ()), categoryServer . getUuid ()); if ( categoryDb != null ) { categoryServer . setId ( categoryDb . getId ()); categoryServer . save (); } break ; default : break ; } } } for ( Category categoryDb : categoryDbList ) { if ( ! categoryServerIdList . contains ( categoryDb . getUuid ())) { // step4 \u670d\u52a1\u5668\u6bd4\u672c\u5730\u5c11\u7684\uff0c\u4ece\u672c\u5730\u5220\u9664 categoryDb . delete (); } } break ; default : break ; } // step6 \u540c\u6b65UI Sync sync = new Sync ( \"category_list\" ); EventBus . getDefault (). post ( sync ); Logger . i ( \"End sync category\" ); } }); } Todo: for then if \u53ef\u4ee5\u4f18\u5316\u4e3a\u53d6\u5dee\u96c6\u3001\u8865\u96c6\u3002","title":"Android\u79bb\u7ebf\u6570\u636e\u540c\u6b65\u7b56\u7565"},{"location":"java/android/todo-sync/#_1","text":"\u6700\u8fd1\u505a\u4e86\u4e2aTodo\u7c7b\u7684android\u5ba2\u6237\u7aef,\u5ba2\u6237\u9700\u8981\u5ba2\u6237\u7aef\u53ef\u4ee5\u79bb\u7ebf\u4f7f\u7528\uff0c\u5e76\u4e14\u5f53\u5ba2\u6237\u7aef\u518d\u6b21\u8fde\u63a5\u5230\u670d\u52a1\u7aef\u65f6\uff0c\u9700\u8981\u5c06\u6570\u636e\u540c\u6b65\u81f3\u670d\u52a1\u7aef\uff0c\u5e76\u4e14\u8981\u652f\u6301\u591a\u7ec8\u7aef\u540c\u4e00\u8d26\u53f7\u540c\u65f6\u767b\u5f55\u64cd\u4f5c\u3002\u8fd9\u4e2a\u9700\u6c42\u548c\u5370\u8c61\u7b14\u8bb0\u5341\u5206\u76f8\u4f3c\uff0c\u5728\u7f51\u4e0a\u4e5f\u68c0\u7d22\u4e86\u8bb8\u591a\u76f8\u5173\u7684\u8d44\u6599\uff0c\u4f46\u57fa\u672c\u4e0a\u90fd\u5e2e\u52a9\u4e0d\u5927\u3002\u6700\u540e\u53ea\u597d\u81ea\u5df1\u6784\u601d\u8bbe\u8ba1\uff0c\u5728\u8fd9\u91cc\u8bb0\u5f55\u4e0b\u8be5\u9700\u6c42\u7684\u5b9e\u73b0\u601d\u8def\u548c\u6838\u5fc3\u4ee3\u7801\u3002","title":"\u9700\u6c42"},{"location":"java/android/todo-sync/#_2","text":"android\u5ba2\u6237\u7aef\u8981\u80fd\u591f\u79bb\u7ebf\u4f7f\u7528\uff0c\u8fd9\u5c31\u8981\u6c42android\u5ba2\u6237\u7aef\u80fd\u591f\u5728\u672c\u5730\u7ba1\u7406\u6570\u636e\uff0c\u5728\u8fd9\u91cc\u91c7\u7528Sqlite\uff0c\u7ecf\u8fc7\u5bf9\u6bd4\u540e\u91c7\u7528 Suger ORM \u3002 android\u5ba2\u6237\u7aef\u79bb\u7ebf\u64cd\u4f5c\u7684\u6570\u636e\u8981\u652f\u6301\u591a\u7aef\u767b\u5f55 \uff0c\u4e3a\u4e86\u9632\u6b62\u5728\u672c\u5730\u751f\u6210\u7684\u6570\u636e\u4e3b\u952e\u548c\u5176\u4ed6\u79bb\u7ebf\u5ba2\u6237\u7aef\u751f\u6210\u7684\u6570\u636e\u4e3b\u952e\u51b2\u7a81\uff0c\u90a3\u4e48\u6570\u636e\u4e3b\u952e\u4fbf\u4e0d\u9002\u5408\u4f7f\u7528\u81ea\u589eINT\u6765\u5b9e\u73b0\uff0c\u8fd9\u91cc\u91c7\u7528UUID4\u4f5c\u4e3a\u6570\u636e\u8868\u4e3b\u952e\u3002 \u79bb\u7ebf\u64cd\u4f5c\u7684\u6570\u636e\u8981\u7edf\u4e00\u7531\u524d\u53f0ui\u53d1\u9001\u81f3\u540e\u53f0service\uff0c\u518d\u7531\u5f53\u524d\u7f51\u7edc\u72b6\u6001\u6765\u5224\u65ad\u5f53\u524d\u52a8\u4f5c\u7684\u64cd\u4f5c\u903b\u8f91\uff0c\u4e3a\u4e86\u660e\u786e\u5904\u7406\u903b\u8f91\u3002\u4f7f\u7528 EventBus \u4f5c\u4e3a\u6d88\u606f\u603b\u7ebf\u6765\u8d1f\u8d23\u4f20\u9012\u6570\u636e\u64cd\u4f5c\u3001ui\u53d8\u5316\u7b49\u64cd\u4f5c\u6d88\u606f\u3002 \u79bb\u7ebf\u6570\u636e\u518d\u518d\u6b21\u8054\u7f51\u65f6\u8981\u548c\u670d\u52a1\u5668\u5f53\u524d\u6570\u636e\u8fdb\u884c\u6bd4\u5bf9\uff0c\u8981\u8bb0\u5f55\u6570\u636e\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u4f5c\u4e3a\u6570\u636e\u7684\u662f\u5426\u9700\u8981\u66f4\u65b0\u7684\u51ed\u8bc1\u3002\u5177\u4f53\u5904\u7406\u903b\u8f91\u5982\u4e0b\uff1a \u573a\u666f \u64cd\u4f5c \u672c\u5730\u6709\u6570\u636eA\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u6570\u636eA \u5411\u670d\u52a1\u5668\u65b0\u589e\u6570\u636eA \u672c\u5730\u6ca1\u6709\u6570\u636eA\uff0c\u670d\u52a1\u5668\u6709\u6570\u636eA \u5411\u670d\u52a1\u5668\u5220\u9664\u6570\u636eA \u670d\u52a1\u5668\u548c\u672c\u5730\u5747\u6709\u6570\u636eA\uff0c\u670d\u52a1\u5668\u8bb0\u5f55\u7684\u66f4\u65b0\u65f6\u95f4\u66f4\u665a \u6570\u636eA\u7531\u670d\u52a1\u5668\u5411\u672c\u5730\u66f4\u65b0 \u670d\u52a1\u5668\u548c\u672c\u5730\u5747\u6709\u6570\u636eA\uff0c\u670d\u52a1\u5668\u8bb0\u5f55\u7684\u66f4\u65b0\u65f6\u95f4\u66f4\u65e9 \u6570\u636eA\u7531\u672c\u5730\u5411\u670d\u52a1\u5668\u66f4\u65b0 \u670d\u52a1\u5668\u548c\u672c\u5730\u5747\u6709\u6570\u636eA\uff0c\u4e24\u7aef\u66f4\u65b0\u65f6\u95f4\u76f8\u540c \u4e0d\u5904\u7406 \u672c\u5730\u6570\u636e\u6a21\u578b\u4e2d\u8bb0\u5f55\u5982\u4e0b\u4e09\u4e2a\u5b57\u6bb5\uff0c\u7528\u4e8e\u533a\u5206\u6570\u636e\u6700\u8fd1\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 private Boolean isCreate = false; private Boolean isUpdate = false; private Boolean isDelete = false;","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"java/android/todo-sync/#_3","text":"/** * \u540c\u6b65\u6570\u636e */ public void sync () { Logger . i ( \"Start sync category\" ); if ( ! Utils . isNetworkConnected ( this )) { Logger . w ( \"End sync category, because network is not connected!\" ); return ; } // step1 \u5411\u670d\u52a1\u5668\u65b0\u589e\u672c\u5730\u65b0\u589e List < Category > categoryCreateList = Category . find ( Category . class , \"IS_CREATE = ?\" , \"1\" ); for ( Category category : categoryCreateList ) { addCategory ( category ); } // step2 \u5411\u670d\u52a1\u5668\u5220\u9664\u672c\u5730\u5220\u9664 List < Category > categoryDeleteList = Category . find ( Category . class , \"IS_DELETE = ?\" , \"1\" ); for ( Category category : categoryDeleteList ) { deleteCategory ( category ); } Request request = new Request . Builder () . get () . url ( Constants . CategorySyncList ) . build (); HttpClientUtil . getClient (). newCall ( request ). enqueue ( new Callback () { @Override public void onFailure ( Call call , IOException e ) { Logger . e ( \"Category onFailure\" ); } @Override public void onResponse ( Call call , final Response response ) throws IOException { final String data = response . body (). string (); switch ( response . code ()) { case 200 : Logger . json ( data ); Gson gson = new Gson (); // \u670d\u52a1\u7aef\u6570\u636e List < Category > categoryServerList = gson . fromJson ( data , new TypeToken < List < Category >> () { }. getType ()); List < String > categoryServerIdList = new ArrayList <> (); for ( Category category : categoryServerList ) { categoryServerIdList . add ( category . getUuid ()); } // \u672c\u5730\u6570\u636e List < Category > categoryDbList = Category . listAll ( Category . class ); HashMap < String , String > categoryDbIdList = new HashMap <> (); for ( Category category : categoryDbList ) { categoryDbIdList . put ( category . getUuid (), category . getUpdate_time ()); } for ( Category categoryServer : categoryServerList ) { if ( ! categoryDbIdList . keySet (). contains ( categoryServer . getUuid ())) { // step3 \u670d\u52a1\u5668\u6bd4\u672c\u5730\u591a\u7684\uff0c\u5411\u672c\u5730\u65b0\u589e Logger . i ( \"need to add \" + categoryServer . getUuid ()); categoryServer . save (); } else { Category categoryDb = Category . findByUUID ( categoryServer . getUuid ()); switch ( Utils . timeEqual ( categoryServer . getUpdate_time (), categoryDbIdList . get ( categoryServer . getUuid ()))) { case 0 : // step5.1 \u66f4\u65b0\u65f6\u95f4\u76f8\u540c\u7684\u4e0d\u5904\u7406 Logger . i ( \"not change \" + categoryServer . getUuid ()); break ; case 1 : // step5.2 \u672c\u5730\u6bd4\u670d\u52a1\u5668\u66f4\u65b0\u65f6\u95f4\u665a\u7684\uff0c\u5411\u670d\u52a1\u5668\u66f4\u65b0 Logger . i ( \"server_time:%s local_time:%s, need to update %s to server\" , categoryServer . getUpdate_time (), categoryDbIdList . get ( categoryServer . getUuid ()), categoryServer . getUuid ()); if ( categoryDb != null ) { updateCategory ( categoryDb ); } break ; case - 1 : // step5.3 \u672c\u5730\u6bd4\u670d\u52a1\u5668\u66f4\u65b0\u65f6\u95f4\u65e9\u7684\uff0c\u5411\u672c\u5730\u66f4\u65b0 Logger . i ( \"server_time:%s local_time:%s, need to update %s to local\" , categoryServer . getUpdate_time (), categoryDbIdList . get ( categoryServer . getUuid ()), categoryServer . getUuid ()); if ( categoryDb != null ) { categoryServer . setId ( categoryDb . getId ()); categoryServer . save (); } break ; default : break ; } } } for ( Category categoryDb : categoryDbList ) { if ( ! categoryServerIdList . contains ( categoryDb . getUuid ())) { // step4 \u670d\u52a1\u5668\u6bd4\u672c\u5730\u5c11\u7684\uff0c\u4ece\u672c\u5730\u5220\u9664 categoryDb . delete (); } } break ; default : break ; } // step6 \u540c\u6b65UI Sync sync = new Sync ( \"category_list\" ); EventBus . getDefault (). post ( sync ); Logger . i ( \"End sync category\" ); } }); } Todo: for then if \u53ef\u4ee5\u4f18\u5316\u4e3a\u53d6\u5dee\u96c6\u3001\u8865\u96c6\u3002","title":"\u6838\u5fc3\u4ee3\u7801"},{"location":"java/android/viewpager/","text":"\u8bbe\u7f6e\u7f13\u5b58\u9875\u6570 vievPager . setOffscreenPageLimit ( 1 ) \u6700\u5c0f\u503c\u4e3a1\uff0c\u4e0d\u53ef\u4e3a0; \u60f3\u4e0d\u9884\u52a0\u8f7d\u4e0b\u4e00\u9875\u6570\u636e\uff0c\u53c2\u89c1 \u61d2\u52a0\u8f7d \u90e8\u5206\u3002 \u8bbe\u7f6e\u7981\u6b62\u6ed1\u52a8 import android.content.Context ; import android.support.v4.view.ViewPager ; import android.util.AttributeSet ; import android.view.MotionEvent ; /** * Created by ykh on 2016/7/11. */ public class CustomViewPager extends ViewPager { private boolean isCanScroll = true ; public CustomViewPager ( Context context ) { super ( context ); } public CustomViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ); } public void setCanScroll ( boolean isCanScroll ) { this . isCanScroll = isCanScroll ; } // \u53ea\u91cd\u5199\u8be5\u65b9\u6cd5\u65e0\u6cd5\u7981\u7528 @Override public boolean onTouchEvent ( MotionEvent event ) { return this . isCanScroll && super . onTouchEvent ( event ); } // \u8fd8\u9700\u8981\u91cd\u5199\u672c\u65b9\u6cd5 @Override public boolean onInterceptTouchEvent ( MotionEvent event ) { return this . isCanScroll && super . onInterceptTouchEvent ( event ); } } \u7528\u6cd5\uff1a //\u5141\u8bb8viewpager\u5de6\u53f3\u6ed1\u52a8 viewPager . setCanScroll ( true ); //\u7981\u6b62viewpager\u5de6\u53f3\u6ed1\u52a8 viewPager . setCanScroll ( false ); \u4e0d\u91cd\u5199onInterceptTouchEvent\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u7981\u6b62\u6ed1\u52a8\u65f6\u7528\u6237\u53ef\u4ee5\u6162\u6162\u7684\u4e00\u70b9\u70b9\u7684\u5212\u51fa\u4e0b\u4e00\u9875\u7684\u4e00\u591a\u534a\u9875\u9762\u7684\u60c5\u51b5\u3002 \u65b9\u6cd5\u5177\u4f53\u610f\u4e49\u89c1\u300aAndroid\u5f00\u53d1\u827a\u672f\u63a2\u8ba8\u300bP141\u3002 \u61d2\u52a0\u8f7d \u82e5\u4e0d\u63a7\u5236\u9884\u52a0\u8f7d\uff1a @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { initView (); super . onViewCreated ( view , savedInstanceState ); } \u82e5\u63a7\u5236\u9884\u52a0\u8f7d\uff1a package ykh.viewpagerdemo; import android.content.Context ; import android.os.Handler ; import android.os.Looper ; import android.support.v4.app.Fragment ; import android.widget.Toast ; /** * Created by ykh on 2018/6/09. */ public abstract class BaseFragment extends Fragment { /** * Fragment\u5f53\u524d\u72b6\u6001\u662f\u5426\u53ef\u89c1 */ protected boolean isVisible ; @Override public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ); if ( getUserVisibleHint ()) { isVisible = true ; onVisible (); } else { isVisible = false ; onInvisible (); } } /** * \u53ef\u89c1 */ protected void onVisible () { onViewLoad (); } /** * \u4e0d\u53ef\u89c1 */ protected void onInvisible () { onViewLost (); } /** * \u5ef6\u8fdf\u52a0\u8f7d * \u5b50\u7c7b\u5fc5\u987b\u91cd\u5199\u6b64\u65b9\u6cd5 */ protected abstract void onViewLoad (); protected abstract void onViewLost (); } \u5b50 Fragment \u7ee7\u627f BaseFragment ,\u9700\u8981\u6ce8\u610f\u7684\u662f onViewLoad \u7684\u8c03\u7528\u987a\u5e8f\u5728 onViewCreated \u4e4b\u524d\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b2c\u4e00\u6b21\u6570\u636e\u52a0\u8f7d\u7684\u65f6\u5019\uff0c\u53ef\u89c1\u7684\u9875\u9762\u5728 onViewCreated \u65b9\u6cd5\u4e2d initView \uff0c\u4e0d\u53ef\u89c1\u7684\u9875\u9762\u5728 onViewLoad\u4e2dinitView \u52a0\u8f7d\u6570\u636e\u3002\u5b9e\u4f8b\uff1a import android.app.Activity ; import android.content.Context ; import android.os.Bundle ; import android.view.LayoutInflater ; import android.view.View ; import android.view.ViewGroup ; import android.widget.TextView ; public class ListFragment extends BaseFragment { private boolean is_init = false ; private Activity activity ; private View layout ; private String name_str ; private TextView name ; private int count = 0 ; @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { activity = this . getActivity (); layout = activity . getLayoutInflater (). inflate ( R . layout . fragment_todo_list , container , false ); Bundle bundle = this . getArguments (); if ( bundle != null ) { name_str = bundle . getString ( \"name\" , \"\" ); } return layout ; } @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { if ( isVisible ) { initView (); } super . onViewCreated ( view , savedInstanceState ); } public void initView () { if ( ! is_init ) { Logger . i ( \"initView \" + name_str ); count ++ ; name = ( TextView ) layout . findViewById ( R . id . name ); name . setText ( name_str + \" Pager Loaded Times:\" + count ); // \u61d2\u52a0\u8f7d\u6570\u636e\u7684\u5730\u65b9 is_init = true ; } } @Override protected void onViewLoad () { Logger . i ( \"onViewLoad \" + name_str + activity ); if ( activity != null ) { initView (); } } @Override protected void onViewLost () { } @Override public void onDestroyView () { super . onDestroyView (); is_init = false ; } } FragmentPagerAdapter \u548c FragmentStatePagerAdapter \u7684\u533a\u522b \u4f7f\u7528 FragmentPagerAdapter \u65f6\uff0c ViewPager \u4e2d\u7684\u6240\u6709 Fragment \u5b9e\u4f8b\u5e38\u9a7b\u5185\u5b58\uff0c\u5f53 Fragment \u53d8\u5f97\u4e0d\u53ef\u89c1\u65f6\u4ec5\u4ec5\u662f\u89c6\u56fe\u7ed3\u6784\u7684\u9500\u6bc1\uff0c\u5373\u8c03\u7528\u4e86 onDestroyView \u65b9\u6cd5\u3002\u7531\u4e8e FragmentPagerAdapter \u5185\u5b58\u6d88\u8017\u8f83\u5927\uff0c\u6240\u4ee5\u9002\u5408\u5c11\u91cf\u9759\u6001\u9875\u9762\u7684\u573a\u666f\u3002 \u4f7f\u7528 FragmentStatePagerAdapter \u65f6\uff0c\u5f53 Fragment \u53d8\u5f97\u4e0d\u53ef\u89c1\uff0c\u4e0d\u4ec5\u89c6\u56fe\u5c42\u6b21\u9500\u6bc1\uff0c\u5b9e\u4f8b\u4e5f\u88ab\u9500\u6bc1\uff0c\u5373\u8c03\u7528\u4e86 onDestroyView \u548c onDestroy \u65b9\u6cd5\uff0c\u4ec5\u4ec5\u4fdd\u5b58 Fragment \u72b6\u6001\u3002\u76f8\u6bd4\u800c\u8a00\uff0c FragmentStatePagerAdapter \u5185\u5b58\u5360\u7528\u8f83\u5c0f\uff0c\u6240\u4ee5\u9002\u5408\u5927\u91cf\u52a8\u6001\u9875\u9762\uff0c\u6bd4\u5982\u6211\u4eec\u5e38\u89c1\u7684\u65b0\u95fb\u5217\u8868\u7c7b\u5e94\u7528\u3002 Android Fragment\uff0bViewPager \u7ec4\u5408\uff0c\u4e00\u4e9b\u4f60\u4e0d\u53ef\u4e0d\u77e5\u7684\u6ce8\u610f\u4e8b\u9879 \u66ff\u6362ViewPager\u4e2dFragment\u65e0\u6548\u95ee\u9898 FragmentPagerAdapter\u5185\u7f6e\u7f13\u5b58\u5bfc\u81f4\u66ff\u6362ViewPager\u4e2dFragment\u65e0\u6548\u95ee\u9898 \u904d\u5386 FragmentPagerAdapter \u6e90\u4ee3\u7801\u53ef\u89c1 instantiateItem \u51fd\u6570\uff0c\u5176\u6839\u636e getItemId(position) \u51fd\u6570\u6765\u5f97\u5230 itemId \uff0c\u518d\u6839\u636e\u6839\u636e makeFragmentName(container.getId(), itemId) \u6765\u83b7\u53d6 itemId \u5bf9\u5e94\u7684 name ,\u518d\u6839\u636e findFragmentByTag(name) \u6765\u5224\u65ad\u5f53\u524d fragment \u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u5df2\u5b58\u5728\u5219\u76f4\u63a5\u4f7f\u7528\uff0c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 getItem(position) \u51fd\u6570\u6765\u91cd\u65b0\u751f\u6210\u3002 @SuppressWarnings ( \"ReferenceEquality\" ) @Override public Object instantiateItem ( ViewGroup container , int position ) { if ( mCurTransaction == null ) { mCurTransaction = mFragmentManager . beginTransaction (); } final long itemId = getItemId ( position ); // Do we already have this fragment? String name = makeFragmentName ( container . getId (), itemId ); Fragment fragment = mFragmentManager . findFragmentByTag ( name ); if ( fragment != null ) { if ( DEBUG ) Log . v ( TAG , \"Attaching item #\" + itemId + \": f=\" + fragment ); mCurTransaction . attach ( fragment ); } else { fragment = getItem ( position ); if ( DEBUG ) Log . v ( TAG , \"Adding item #\" + itemId + \": f=\" + fragment ); mCurTransaction . add ( container . getId (), fragment , makeFragmentName ( container . getId (), itemId )); } if ( fragment != mCurrentPrimaryItem ) { fragment . setMenuVisibility ( false ); fragment . setUserVisibleHint ( false ); } return fragment ; } \u641c\u7d22\u5f97\u5230\u7684\u89e3\u51b3\u65b9\u6cd5 \u65b9\u6cd5\u4e00\uff1a\u91cd\u5199 adapter \u7684 getItemPosition() \u65b9\u6cd5\u5982\u4e0b\uff1a public int getItemPosition ( Object object ) { return POSITION_NONE ; } \u5f53\u8c03\u7528 notifyDataSetChanged() \u7684\u65f6\u5019\u3002 ViewPager \u4f1a remove \u6389\u5168\u90e8\u7684 view \uff0c\u7136\u540e\u53c8\u4e00\u6b21\u53bb\u8f7d\u5165\u3002\u53ef\u884c\uff0c\u53ef\u662f\u6548\u7387\u4f4e\u3002 \u8be6\u89c1 \u6b64\u5904 \u65b9\u6cd5\u4e8c\uff1a\u66b4\u529b\u5220\u9664 fragment ,\u65b9\u6cd5\u5982\u4e0b\uff1a List < Fragment > fragments = getSupportFragmentManager ( 0. getFragments (); for ( int i = 0 ; i < fragments . size (); i ++ ){ getSupportFragmentManager (). beginTransaction (). remove ( fragments . get ( i )); } \u65b9\u6cd5\u4e09\uff1a\u91cd\u5199 FragmentPagerAdapter \u7684 instantiateItem \u65b9\u6cd5\u3002 \u65b9\u6cd5\u56db\uff1a\u91cd\u5199 getItemId \u5982\u4e0b\uff1a public long getItemId ( int position ) { return registeredFragments . get ( position ). hashCode (); } FragmentPagerAdapter\u91cc\u5728\u6839\u636egetItemId(int position)\u6765\u5224\u65ad\u5f53\u524dposition\u91ccFragment\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u4e0d\u4f1a\u521b\u5efa\u4ea6\u4e0d\u4f1a\u66f4\u65b0\uff0c\u90a3\u4e48\u8981\u8ba9FragmentPagerAdapter\u7684\u66f4\u65b0\u751f\u6548\uff0c\u90a3\u5728getItemId(int)\u91cc\u6839\u636e\u6570\u636e\u8fd4\u56de\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u636eID\uff0c\u5f53FragmentPagerAdapter\u66f4\u65b0\u65f6\uff0c\u6570\u636eID\u6539\u53d8\u4e86\uff0c\u90a3\u4e48Fragment\u5c31\u4f1a\u8c03\u7528getItem(int)\u53bb\u83b7\u53d6\u65b0Fragment\uff0c\u8fbe\u5230\u66f4\u65b0\u6548\u679c\uff08 \u6765\u6e90 \uff09 \u65b9\u6cd55\uff1a\u4e3a\u6bcf\u4e2a Fragment \u8bbe\u7f6etag(\u63a8\u8350) \u6458\u6284\u5982\u4e0b\uff1a My approach is to use the setTag() method for any instantiated view in the instantiateItem() method. So when you want to change the data or invalidate the view that you need, you can call the findViewWithTag() method on the ViewPager to retrieve the previously instantiated view and modify/use it as you want without having to delete/create a new view each time you want to update some value. ViewPager PagerAdapter not updating the View \u5177\u4f53\u5b9e\u73b0\u53ef\u89c1 \u6b64\u535a\u5ba2 \uff0c\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a public class FragmentViewPagerAdapter extends FragmentPagerAdapter { private FragmentManager mFragmentManager ; private List < String > mDatas ; private List < String > tagList = new ArrayList < String > (); public FragmentViewPagerAdapter ( FragmentManager fm , List < String > datas ) { super ( fm ); this . mFragmentManager = fm ; this . mDatas = datas ; } @Override public Object instantiateItem ( ViewGroup container , int position ) { tagList . add ( makeFragmentName ( container . getId (), getItemId ( position ))); //\u628atag\u5b58\u8d77\u6765 return super . instantiateItem ( container , position ); } @Override public void destroyItem ( ViewGroup container , int position , Object object ) { super . destroyItem ( container , position , object ); tagList . remove ( makeFragmentName ( container . getId (), getItemId ( position ))); //\u628atag\u5220\u6389 } @Override public Fragment getItem ( int position ) { String url = mDatas . get ( position ); WebViewFragmentV4 webview = new WebViewFragmentV4 ( url ); //\u672c\u6587\u6e2c\u8bd5\u7684Fragment\u662f\u4e00\u4e2aWebViewFragment return webview ; } @Override public int getCount () { if ( mDatas == null ) { return 0 ; } else { return mDatas . size (); } } public void update ( List < String > datas ) { this . mDatas = datas ; notifyDataSetChanged (); //\u5e76\u4e0d\u80fd\u8d77\u5230\u66f4\u65b0Fragment\u5185\u5bb9\u7684\u4f5c\u7528\u3002 } public void update ( int position ) { //\u8fd9\u4e2a\u4e8b\u771f\u6b63\u7684\u66f4\u65b0Fragment\u7684\u5185\u5bb9 WebViewFragmentV4 fragment = ( WebViewFragmentV4 ) mFragmentManager . findFragmentByTag ( tagList . get ( position )); if ( fragment == null ) { return ; } fragment . update (); } private static String makeFragmentName ( int viewId , long id ) { return \"android:switcher:\" + viewId + \":\" + id ; } } \u6700\u540e\u4f7f\u7528\u7684\u89e3\u51b3\u65b9\u6848 \u5199\u535a\u5ba2\u7684\u65f6\u5019\u9047\u5230\u7684\u5177\u4f53\u95ee\u9898\u573a\u666f\u4e3a\uff0c\u4e00\u4e2a ViewPager \u4e2d\u6709\u4e24\u4e2a Fragment ,\u9700\u8981\u52a8\u6001\u7684\u66ff\u6362(\u800c\u4e0d\u662f\u66f4\u65b0\u5176\u5185\u5bb9)\u7b2c\u4e8c\u4e2a Fragment \u4e3a\u65b0\u7684 Fragment \uff0c\u4f46\u662f\u53c8\u4e0d\u613f\u610f\u91cd\u65b0\u52a0\u8f7d\u7b2c\u4e00\u4e2a\uff0c\u4f7f\u7528\u7684 adapter \u5982\u4e0b\uff1a private class DynamicPagerAdapter extends FragmentPagerAdapter { private ArrayList < Fragment > registeredFragments ; private List < Integer > hashList ; private DynamicPagerAdapter ( FragmentManager fm ) { super ( fm ); this . registeredFragments = new ArrayList <> (); hashList = new ArrayList <> (); } public int getItemPosition ( Object object ) { int index = getIndexByTag ( object . hashCode ()); if ( index >= 0 ) { hashList . remove ( index ); return POSITION_NONE ; } else { return POSITION_UNCHANGED ; } } public long getItemId ( int position ) { return registeredFragments . get ( position ). hashCode (); } @Override public Fragment getItem ( int position ) { return registeredFragments . get ( position ); } @Override public int getCount () { return registeredFragments . size (); } public void add ( Fragment fragment ) { registeredFragments . add ( fragment ); hashList . add ( fragment . hashCode ()); notifyDataSetChanged (); } public void remove ( int position ) { registeredFragments . remove ( position ); notifyDataSetChanged (); } private int getIndexByTag ( int hashCode ) { for ( int i = 0 ; i < hashList . size (); i ++ ) { if ( hashList . get ( i ) == hashCode ) { return i ; } } return - 1 ; } } \u4e3b\u8981\u601d\u8def\uff1a\u8bb0\u5f55\u6240\u6709\u65b0\u589e\u7684 Fragment \u7684 hashCode ,\u5728 getItemPosition \u65f6\uff0c\u6839\u636e Fragment \u5224\u65ad\u8be5\u5bf9\u8c61\u662f\u5426\u5df2\u7ecf\u88ab\u8bb0\u5f55\uff0c\u82e5\u672a\u8bb0\u5f55\u5219\u8fd4\u56de POSITION_NONE \u8ba9\u5176\u88ab\u91cd\u65b0\u52a0\u8f7d\uff0c\u5426\u5219\u8fd4\u56de POSITION_UNCHANGED \u4ee5\u4f7f\u7528\u7f13\u5b58\u3002 ViewPager\u4e2d\u4f7f\u7528\u76f8\u540c\u7684Fragment \u9875\u9762\u4e0d\u66f4\u65b0\uff0c\u53ea\u663e\u793a\u7b2c\u4e00\u4e2aFragment \u7ed1\u5b9a\u63a7\u4ef6\u65f6\u5e94\u4f7f\u7528 layout \u67e5\u627e\u800c\u4e0d\u662f activity \u67e5\u627e\uff0c\u5e94\u8be5\u4e3a\uff1a name = ( TextView ) layout . findViewById ( R . id . name ); \u800c\u4e0d\u662f\uff1a name = ( TextView ) activity . findViewById ( R . id . name );","title":"Android ViewPager\u603b\u7ed3"},{"location":"java/android/viewpager/#_1","text":"vievPager . setOffscreenPageLimit ( 1 ) \u6700\u5c0f\u503c\u4e3a1\uff0c\u4e0d\u53ef\u4e3a0; \u60f3\u4e0d\u9884\u52a0\u8f7d\u4e0b\u4e00\u9875\u6570\u636e\uff0c\u53c2\u89c1 \u61d2\u52a0\u8f7d \u90e8\u5206\u3002","title":"\u8bbe\u7f6e\u7f13\u5b58\u9875\u6570"},{"location":"java/android/viewpager/#_2","text":"import android.content.Context ; import android.support.v4.view.ViewPager ; import android.util.AttributeSet ; import android.view.MotionEvent ; /** * Created by ykh on 2016/7/11. */ public class CustomViewPager extends ViewPager { private boolean isCanScroll = true ; public CustomViewPager ( Context context ) { super ( context ); } public CustomViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ); } public void setCanScroll ( boolean isCanScroll ) { this . isCanScroll = isCanScroll ; } // \u53ea\u91cd\u5199\u8be5\u65b9\u6cd5\u65e0\u6cd5\u7981\u7528 @Override public boolean onTouchEvent ( MotionEvent event ) { return this . isCanScroll && super . onTouchEvent ( event ); } // \u8fd8\u9700\u8981\u91cd\u5199\u672c\u65b9\u6cd5 @Override public boolean onInterceptTouchEvent ( MotionEvent event ) { return this . isCanScroll && super . onInterceptTouchEvent ( event ); } } \u7528\u6cd5\uff1a //\u5141\u8bb8viewpager\u5de6\u53f3\u6ed1\u52a8 viewPager . setCanScroll ( true ); //\u7981\u6b62viewpager\u5de6\u53f3\u6ed1\u52a8 viewPager . setCanScroll ( false ); \u4e0d\u91cd\u5199onInterceptTouchEvent\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u7981\u6b62\u6ed1\u52a8\u65f6\u7528\u6237\u53ef\u4ee5\u6162\u6162\u7684\u4e00\u70b9\u70b9\u7684\u5212\u51fa\u4e0b\u4e00\u9875\u7684\u4e00\u591a\u534a\u9875\u9762\u7684\u60c5\u51b5\u3002 \u65b9\u6cd5\u5177\u4f53\u610f\u4e49\u89c1\u300aAndroid\u5f00\u53d1\u827a\u672f\u63a2\u8ba8\u300bP141\u3002","title":"\u8bbe\u7f6e\u7981\u6b62\u6ed1\u52a8"},{"location":"java/android/viewpager/#_3","text":"\u82e5\u4e0d\u63a7\u5236\u9884\u52a0\u8f7d\uff1a @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { initView (); super . onViewCreated ( view , savedInstanceState ); } \u82e5\u63a7\u5236\u9884\u52a0\u8f7d\uff1a package ykh.viewpagerdemo; import android.content.Context ; import android.os.Handler ; import android.os.Looper ; import android.support.v4.app.Fragment ; import android.widget.Toast ; /** * Created by ykh on 2018/6/09. */ public abstract class BaseFragment extends Fragment { /** * Fragment\u5f53\u524d\u72b6\u6001\u662f\u5426\u53ef\u89c1 */ protected boolean isVisible ; @Override public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ); if ( getUserVisibleHint ()) { isVisible = true ; onVisible (); } else { isVisible = false ; onInvisible (); } } /** * \u53ef\u89c1 */ protected void onVisible () { onViewLoad (); } /** * \u4e0d\u53ef\u89c1 */ protected void onInvisible () { onViewLost (); } /** * \u5ef6\u8fdf\u52a0\u8f7d * \u5b50\u7c7b\u5fc5\u987b\u91cd\u5199\u6b64\u65b9\u6cd5 */ protected abstract void onViewLoad (); protected abstract void onViewLost (); } \u5b50 Fragment \u7ee7\u627f BaseFragment ,\u9700\u8981\u6ce8\u610f\u7684\u662f onViewLoad \u7684\u8c03\u7528\u987a\u5e8f\u5728 onViewCreated \u4e4b\u524d\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b2c\u4e00\u6b21\u6570\u636e\u52a0\u8f7d\u7684\u65f6\u5019\uff0c\u53ef\u89c1\u7684\u9875\u9762\u5728 onViewCreated \u65b9\u6cd5\u4e2d initView \uff0c\u4e0d\u53ef\u89c1\u7684\u9875\u9762\u5728 onViewLoad\u4e2dinitView \u52a0\u8f7d\u6570\u636e\u3002\u5b9e\u4f8b\uff1a import android.app.Activity ; import android.content.Context ; import android.os.Bundle ; import android.view.LayoutInflater ; import android.view.View ; import android.view.ViewGroup ; import android.widget.TextView ; public class ListFragment extends BaseFragment { private boolean is_init = false ; private Activity activity ; private View layout ; private String name_str ; private TextView name ; private int count = 0 ; @Override public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { activity = this . getActivity (); layout = activity . getLayoutInflater (). inflate ( R . layout . fragment_todo_list , container , false ); Bundle bundle = this . getArguments (); if ( bundle != null ) { name_str = bundle . getString ( \"name\" , \"\" ); } return layout ; } @Override public void onViewCreated ( View view , Bundle savedInstanceState ) { if ( isVisible ) { initView (); } super . onViewCreated ( view , savedInstanceState ); } public void initView () { if ( ! is_init ) { Logger . i ( \"initView \" + name_str ); count ++ ; name = ( TextView ) layout . findViewById ( R . id . name ); name . setText ( name_str + \" Pager Loaded Times:\" + count ); // \u61d2\u52a0\u8f7d\u6570\u636e\u7684\u5730\u65b9 is_init = true ; } } @Override protected void onViewLoad () { Logger . i ( \"onViewLoad \" + name_str + activity ); if ( activity != null ) { initView (); } } @Override protected void onViewLost () { } @Override public void onDestroyView () { super . onDestroyView (); is_init = false ; } }","title":"\u61d2\u52a0\u8f7d"},{"location":"java/android/viewpager/#fragmentpageradapterfragmentstatepageradapter","text":"\u4f7f\u7528 FragmentPagerAdapter \u65f6\uff0c ViewPager \u4e2d\u7684\u6240\u6709 Fragment \u5b9e\u4f8b\u5e38\u9a7b\u5185\u5b58\uff0c\u5f53 Fragment \u53d8\u5f97\u4e0d\u53ef\u89c1\u65f6\u4ec5\u4ec5\u662f\u89c6\u56fe\u7ed3\u6784\u7684\u9500\u6bc1\uff0c\u5373\u8c03\u7528\u4e86 onDestroyView \u65b9\u6cd5\u3002\u7531\u4e8e FragmentPagerAdapter \u5185\u5b58\u6d88\u8017\u8f83\u5927\uff0c\u6240\u4ee5\u9002\u5408\u5c11\u91cf\u9759\u6001\u9875\u9762\u7684\u573a\u666f\u3002 \u4f7f\u7528 FragmentStatePagerAdapter \u65f6\uff0c\u5f53 Fragment \u53d8\u5f97\u4e0d\u53ef\u89c1\uff0c\u4e0d\u4ec5\u89c6\u56fe\u5c42\u6b21\u9500\u6bc1\uff0c\u5b9e\u4f8b\u4e5f\u88ab\u9500\u6bc1\uff0c\u5373\u8c03\u7528\u4e86 onDestroyView \u548c onDestroy \u65b9\u6cd5\uff0c\u4ec5\u4ec5\u4fdd\u5b58 Fragment \u72b6\u6001\u3002\u76f8\u6bd4\u800c\u8a00\uff0c FragmentStatePagerAdapter \u5185\u5b58\u5360\u7528\u8f83\u5c0f\uff0c\u6240\u4ee5\u9002\u5408\u5927\u91cf\u52a8\u6001\u9875\u9762\uff0c\u6bd4\u5982\u6211\u4eec\u5e38\u89c1\u7684\u65b0\u95fb\u5217\u8868\u7c7b\u5e94\u7528\u3002 Android Fragment\uff0bViewPager \u7ec4\u5408\uff0c\u4e00\u4e9b\u4f60\u4e0d\u53ef\u4e0d\u77e5\u7684\u6ce8\u610f\u4e8b\u9879","title":"FragmentPagerAdapter\u548cFragmentStatePagerAdapter\u7684\u533a\u522b"},{"location":"java/android/viewpager/#viewpagerfragment","text":"","title":"\u66ff\u6362ViewPager\u4e2dFragment\u65e0\u6548\u95ee\u9898"},{"location":"java/android/viewpager/#fragmentpageradapterviewpagerfragment","text":"\u904d\u5386 FragmentPagerAdapter \u6e90\u4ee3\u7801\u53ef\u89c1 instantiateItem \u51fd\u6570\uff0c\u5176\u6839\u636e getItemId(position) \u51fd\u6570\u6765\u5f97\u5230 itemId \uff0c\u518d\u6839\u636e\u6839\u636e makeFragmentName(container.getId(), itemId) \u6765\u83b7\u53d6 itemId \u5bf9\u5e94\u7684 name ,\u518d\u6839\u636e findFragmentByTag(name) \u6765\u5224\u65ad\u5f53\u524d fragment \u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u5df2\u5b58\u5728\u5219\u76f4\u63a5\u4f7f\u7528\uff0c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 getItem(position) \u51fd\u6570\u6765\u91cd\u65b0\u751f\u6210\u3002 @SuppressWarnings ( \"ReferenceEquality\" ) @Override public Object instantiateItem ( ViewGroup container , int position ) { if ( mCurTransaction == null ) { mCurTransaction = mFragmentManager . beginTransaction (); } final long itemId = getItemId ( position ); // Do we already have this fragment? String name = makeFragmentName ( container . getId (), itemId ); Fragment fragment = mFragmentManager . findFragmentByTag ( name ); if ( fragment != null ) { if ( DEBUG ) Log . v ( TAG , \"Attaching item #\" + itemId + \": f=\" + fragment ); mCurTransaction . attach ( fragment ); } else { fragment = getItem ( position ); if ( DEBUG ) Log . v ( TAG , \"Adding item #\" + itemId + \": f=\" + fragment ); mCurTransaction . add ( container . getId (), fragment , makeFragmentName ( container . getId (), itemId )); } if ( fragment != mCurrentPrimaryItem ) { fragment . setMenuVisibility ( false ); fragment . setUserVisibleHint ( false ); } return fragment ; }","title":"FragmentPagerAdapter\u5185\u7f6e\u7f13\u5b58\u5bfc\u81f4\u66ff\u6362ViewPager\u4e2dFragment\u65e0\u6548\u95ee\u9898"},{"location":"java/android/viewpager/#_4","text":"\u65b9\u6cd5\u4e00\uff1a\u91cd\u5199 adapter \u7684 getItemPosition() \u65b9\u6cd5\u5982\u4e0b\uff1a public int getItemPosition ( Object object ) { return POSITION_NONE ; } \u5f53\u8c03\u7528 notifyDataSetChanged() \u7684\u65f6\u5019\u3002 ViewPager \u4f1a remove \u6389\u5168\u90e8\u7684 view \uff0c\u7136\u540e\u53c8\u4e00\u6b21\u53bb\u8f7d\u5165\u3002\u53ef\u884c\uff0c\u53ef\u662f\u6548\u7387\u4f4e\u3002 \u8be6\u89c1 \u6b64\u5904 \u65b9\u6cd5\u4e8c\uff1a\u66b4\u529b\u5220\u9664 fragment ,\u65b9\u6cd5\u5982\u4e0b\uff1a List < Fragment > fragments = getSupportFragmentManager ( 0. getFragments (); for ( int i = 0 ; i < fragments . size (); i ++ ){ getSupportFragmentManager (). beginTransaction (). remove ( fragments . get ( i )); } \u65b9\u6cd5\u4e09\uff1a\u91cd\u5199 FragmentPagerAdapter \u7684 instantiateItem \u65b9\u6cd5\u3002 \u65b9\u6cd5\u56db\uff1a\u91cd\u5199 getItemId \u5982\u4e0b\uff1a public long getItemId ( int position ) { return registeredFragments . get ( position ). hashCode (); } FragmentPagerAdapter\u91cc\u5728\u6839\u636egetItemId(int position)\u6765\u5224\u65ad\u5f53\u524dposition\u91ccFragment\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u4e0d\u4f1a\u521b\u5efa\u4ea6\u4e0d\u4f1a\u66f4\u65b0\uff0c\u90a3\u4e48\u8981\u8ba9FragmentPagerAdapter\u7684\u66f4\u65b0\u751f\u6548\uff0c\u90a3\u5728getItemId(int)\u91cc\u6839\u636e\u6570\u636e\u8fd4\u56de\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u636eID\uff0c\u5f53FragmentPagerAdapter\u66f4\u65b0\u65f6\uff0c\u6570\u636eID\u6539\u53d8\u4e86\uff0c\u90a3\u4e48Fragment\u5c31\u4f1a\u8c03\u7528getItem(int)\u53bb\u83b7\u53d6\u65b0Fragment\uff0c\u8fbe\u5230\u66f4\u65b0\u6548\u679c\uff08 \u6765\u6e90 \uff09 \u65b9\u6cd55\uff1a\u4e3a\u6bcf\u4e2a Fragment \u8bbe\u7f6etag(\u63a8\u8350) \u6458\u6284\u5982\u4e0b\uff1a My approach is to use the setTag() method for any instantiated view in the instantiateItem() method. So when you want to change the data or invalidate the view that you need, you can call the findViewWithTag() method on the ViewPager to retrieve the previously instantiated view and modify/use it as you want without having to delete/create a new view each time you want to update some value. ViewPager PagerAdapter not updating the View \u5177\u4f53\u5b9e\u73b0\u53ef\u89c1 \u6b64\u535a\u5ba2 \uff0c\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a public class FragmentViewPagerAdapter extends FragmentPagerAdapter { private FragmentManager mFragmentManager ; private List < String > mDatas ; private List < String > tagList = new ArrayList < String > (); public FragmentViewPagerAdapter ( FragmentManager fm , List < String > datas ) { super ( fm ); this . mFragmentManager = fm ; this . mDatas = datas ; } @Override public Object instantiateItem ( ViewGroup container , int position ) { tagList . add ( makeFragmentName ( container . getId (), getItemId ( position ))); //\u628atag\u5b58\u8d77\u6765 return super . instantiateItem ( container , position ); } @Override public void destroyItem ( ViewGroup container , int position , Object object ) { super . destroyItem ( container , position , object ); tagList . remove ( makeFragmentName ( container . getId (), getItemId ( position ))); //\u628atag\u5220\u6389 } @Override public Fragment getItem ( int position ) { String url = mDatas . get ( position ); WebViewFragmentV4 webview = new WebViewFragmentV4 ( url ); //\u672c\u6587\u6e2c\u8bd5\u7684Fragment\u662f\u4e00\u4e2aWebViewFragment return webview ; } @Override public int getCount () { if ( mDatas == null ) { return 0 ; } else { return mDatas . size (); } } public void update ( List < String > datas ) { this . mDatas = datas ; notifyDataSetChanged (); //\u5e76\u4e0d\u80fd\u8d77\u5230\u66f4\u65b0Fragment\u5185\u5bb9\u7684\u4f5c\u7528\u3002 } public void update ( int position ) { //\u8fd9\u4e2a\u4e8b\u771f\u6b63\u7684\u66f4\u65b0Fragment\u7684\u5185\u5bb9 WebViewFragmentV4 fragment = ( WebViewFragmentV4 ) mFragmentManager . findFragmentByTag ( tagList . get ( position )); if ( fragment == null ) { return ; } fragment . update (); } private static String makeFragmentName ( int viewId , long id ) { return \"android:switcher:\" + viewId + \":\" + id ; } }","title":"\u641c\u7d22\u5f97\u5230\u7684\u89e3\u51b3\u65b9\u6cd5"},{"location":"java/android/viewpager/#_5","text":"\u5199\u535a\u5ba2\u7684\u65f6\u5019\u9047\u5230\u7684\u5177\u4f53\u95ee\u9898\u573a\u666f\u4e3a\uff0c\u4e00\u4e2a ViewPager \u4e2d\u6709\u4e24\u4e2a Fragment ,\u9700\u8981\u52a8\u6001\u7684\u66ff\u6362(\u800c\u4e0d\u662f\u66f4\u65b0\u5176\u5185\u5bb9)\u7b2c\u4e8c\u4e2a Fragment \u4e3a\u65b0\u7684 Fragment \uff0c\u4f46\u662f\u53c8\u4e0d\u613f\u610f\u91cd\u65b0\u52a0\u8f7d\u7b2c\u4e00\u4e2a\uff0c\u4f7f\u7528\u7684 adapter \u5982\u4e0b\uff1a private class DynamicPagerAdapter extends FragmentPagerAdapter { private ArrayList < Fragment > registeredFragments ; private List < Integer > hashList ; private DynamicPagerAdapter ( FragmentManager fm ) { super ( fm ); this . registeredFragments = new ArrayList <> (); hashList = new ArrayList <> (); } public int getItemPosition ( Object object ) { int index = getIndexByTag ( object . hashCode ()); if ( index >= 0 ) { hashList . remove ( index ); return POSITION_NONE ; } else { return POSITION_UNCHANGED ; } } public long getItemId ( int position ) { return registeredFragments . get ( position ). hashCode (); } @Override public Fragment getItem ( int position ) { return registeredFragments . get ( position ); } @Override public int getCount () { return registeredFragments . size (); } public void add ( Fragment fragment ) { registeredFragments . add ( fragment ); hashList . add ( fragment . hashCode ()); notifyDataSetChanged (); } public void remove ( int position ) { registeredFragments . remove ( position ); notifyDataSetChanged (); } private int getIndexByTag ( int hashCode ) { for ( int i = 0 ; i < hashList . size (); i ++ ) { if ( hashList . get ( i ) == hashCode ) { return i ; } } return - 1 ; } } \u4e3b\u8981\u601d\u8def\uff1a\u8bb0\u5f55\u6240\u6709\u65b0\u589e\u7684 Fragment \u7684 hashCode ,\u5728 getItemPosition \u65f6\uff0c\u6839\u636e Fragment \u5224\u65ad\u8be5\u5bf9\u8c61\u662f\u5426\u5df2\u7ecf\u88ab\u8bb0\u5f55\uff0c\u82e5\u672a\u8bb0\u5f55\u5219\u8fd4\u56de POSITION_NONE \u8ba9\u5176\u88ab\u91cd\u65b0\u52a0\u8f7d\uff0c\u5426\u5219\u8fd4\u56de POSITION_UNCHANGED \u4ee5\u4f7f\u7528\u7f13\u5b58\u3002","title":"\u6700\u540e\u4f7f\u7528\u7684\u89e3\u51b3\u65b9\u6848"},{"location":"java/android/viewpager/#viewpagerfragment_1","text":"","title":"ViewPager\u4e2d\u4f7f\u7528\u76f8\u540c\u7684Fragment"},{"location":"java/android/viewpager/#fragment","text":"\u7ed1\u5b9a\u63a7\u4ef6\u65f6\u5e94\u4f7f\u7528 layout \u67e5\u627e\u800c\u4e0d\u662f activity \u67e5\u627e\uff0c\u5e94\u8be5\u4e3a\uff1a name = ( TextView ) layout . findViewById ( R . id . name ); \u800c\u4e0d\u662f\uff1a name = ( TextView ) activity . findViewById ( R . id . name );","title":"\u9875\u9762\u4e0d\u66f4\u65b0\uff0c\u53ea\u663e\u793a\u7b2c\u4e00\u4e2aFragment"},{"location":"linux/CentOS-7-install-Python3.8.3/","text":"CentOS-7\u5b89\u88c5Python3.8.3 \u5b89\u88c5\u4f9d\u8d56 yum install openssl-devel gcc make libffi-devel \u4e0b\u8f7d \u524d\u5f80 \u534e\u4e3a\u955c\u50cf \u4e0b\u8f7dPython-3.8.3.tgz\u6587\u4ef6 \u5b89\u88c5 \u5c06\u4e0b\u8f7d\u5f97\u5230\u7684Python-3.8.3.tgz\u6587\u4ef6\u4f20\u5165\u673a\u5668\u7684/tmp/\u76ee\u5f55 \u8fdb\u5165\u76ee\u5f55 cd /tmp \u89e3\u538b tar -zxvf Python-3.8.3.tgz \u8fdb\u5165\u89e3\u538b\u76ee\u5f55 cd Python-3.8.3 \u914d\u7f6e\u5b89\u88c5\u4f4d\u7f6e ./configure prefix=/usr/local/python3 \u5b89\u88c5 make && make install \u8f6f\u94fe\u63a5 \u5982\u679c\u6700\u540e\u6ca1\u63d0\u793a\u51fa\u9519\uff0c\u5c31\u4ee3\u8868\u6b63\u786e\u5b89\u88c5\u4e86\uff0c\u5728/usr/local/\u76ee\u5f55\u4e0b\u5c31\u4f1a\u6709python3\u76ee\u5f55\u3002 \u6dfb\u52a0\u8f6f\u94fe\u63a5 ln -s /usr/local/python3/bin/python3.8 /usr/bin/python3 \u6d4b\u8bd5 [root@localhost python3]# python3 Python 3.8.3 (default, Sep 8 2020, 06:06:08)","title":"CentOS-7\u5b89\u88c5Python3.8.3"},{"location":"linux/CentOS-7-install-Python3.8.3/#centos-7python383","text":"","title":"CentOS-7\u5b89\u88c5Python3.8.3"},{"location":"linux/CentOS-7-install-Python3.8.3/#_1","text":"yum install openssl-devel gcc make libffi-devel","title":"\u5b89\u88c5\u4f9d\u8d56"},{"location":"linux/CentOS-7-install-Python3.8.3/#_2","text":"\u524d\u5f80 \u534e\u4e3a\u955c\u50cf \u4e0b\u8f7dPython-3.8.3.tgz\u6587\u4ef6","title":"\u4e0b\u8f7d"},{"location":"linux/CentOS-7-install-Python3.8.3/#_3","text":"\u5c06\u4e0b\u8f7d\u5f97\u5230\u7684Python-3.8.3.tgz\u6587\u4ef6\u4f20\u5165\u673a\u5668\u7684/tmp/\u76ee\u5f55 \u8fdb\u5165\u76ee\u5f55 cd /tmp \u89e3\u538b tar -zxvf Python-3.8.3.tgz \u8fdb\u5165\u89e3\u538b\u76ee\u5f55 cd Python-3.8.3 \u914d\u7f6e\u5b89\u88c5\u4f4d\u7f6e ./configure prefix=/usr/local/python3 \u5b89\u88c5 make && make install","title":"\u5b89\u88c5"},{"location":"linux/CentOS-7-install-Python3.8.3/#_4","text":"\u5982\u679c\u6700\u540e\u6ca1\u63d0\u793a\u51fa\u9519\uff0c\u5c31\u4ee3\u8868\u6b63\u786e\u5b89\u88c5\u4e86\uff0c\u5728/usr/local/\u76ee\u5f55\u4e0b\u5c31\u4f1a\u6709python3\u76ee\u5f55\u3002 \u6dfb\u52a0\u8f6f\u94fe\u63a5 ln -s /usr/local/python3/bin/python3.8 /usr/bin/python3","title":"\u8f6f\u94fe\u63a5"},{"location":"linux/CentOS-7-install-Python3.8.3/#_5","text":"[root@localhost python3]# python3 Python 3.8.3 (default, Sep 8 2020, 06:06:08)","title":"\u6d4b\u8bd5"},{"location":"linux/git-note/","text":"\u5e38\u7528\u547d\u4ee4 git clone \u4ed3\u5e93\u5730\u5740 git pull \u4ed3\u5e93\u5730\u5740 git rm -r myFolder \u4ecegit\u5220\u9664\u6587\u4ef6\u5939 git rm --cached -r myFolder \u4ece\u672c\u5730git\u4e2d\u5220\u9664\u67d0\u4e2a\u6587\u4ef6\u5939 git rm --cached myfile \u4ece\u672c\u5730git\u4e2d\u5220\u9664\u67d0\u4e2a\u6587\u4ef6 git checkout . \u653e\u5f03\u5f53\u524d\u672a\u63d0\u4ea4\u7684\u4fee\u6539\u6587\u4ef6 https:// { username } : { passwd } @git.coding.net \u5728Uri\u5730\u5740\u4e2d\u5b58\u5165git\u7684\u8d26\u6237\u5bc6\u7801\u4e4b\u540e\u6267\u884c git config --global credential.helper store git remote set-url origin https://git.coding.net/ykh/Blog.git\u91cd\u65b0\u8bbe\u7f6e\u4ed3\u5e93\u5730\u5740 git log --all --decorate --oneline --graph # \u663e\u793agit log \u79fb\u9664--decorate\u53ef\u4e0d\u663e\u793a\u5206\u652f\u4fe1\u606f .gitignore\u6587\u4ef6\u4f5c\u7528 \u521b\u5efa .gitignore \u6587\u4ef6\uff0c\u6587\u4ef6\u7528\u4e8e\u544a\u8bc9git\u5ffd\u7565\u67d0\u4e9b\u7279\u5b9a\u6216\u8005\u7279\u5b9a\u6587\u4ef6\u7c7b\u578b\u7684\u6587\u4ef6\uff1a *.[oa] #\u5ffd\u7565\u6240\u6709.o\u548c.a\u7c7b\u578b\u7684\u6587\u4ef6 *.log #\u5ffd\u7565\u6240\u6709.log\u7c7b\u578b\u7684\u6587\u4ef6 !info.log #\u4e0d\u5ffd\u7565info.log\u6587\u4ef6 *~ #\u5ffd\u7565\u6240\u6709\u6587\u4ef6\u540d\u79f0\u4ee5~\u7ed3\u5c3e\u7684\u6587\u4ef6 media/ #\u5ffd\u7565\u6240\u6709\u7684media/\u6587\u4ef6\u5939 migrations/*.py #\u5ffd\u7565\u6240\u6709migrations/\u6587\u4ef6\u5939\u4e0b\u7684.py\u6587\u4ef6 !migrations/__init__.py #\u4e0d\u5ffd\u7565\u6240\u6709migrations/\u6587\u4ef6\u5939\u4e0b\u7684__init__.py Django\u9879\u76ee\u591a\u7aef\u540c\u6b65\u7684\u65f6\u5019\u6781\u4e3a\u6709\u7528 /environment #\u5ffd\u7565\u6839\u76ee\u5f55\u4e0b\u7684environment\u6587\u4ef6\u5939 \u5e38\u89c1\u9519\u8bef \u51b2\u7a81 \u672c\u5730\u7248\u672c\u4f4e\u4e8e\u8fdc\u7a0b\u7248\u672c\uff0c\u5219\u5148\u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u62c9\u53d6\u4ee3\u7801\uff0c\u5728\u672c\u5730\u5408\u5e76\u5b8c\u6210\u540e\u518d\u6b21\u63d0\u4ea4 error: path 'signals.py' is unmerged git reset signals.py git checkout signals.py \u547d\u4ee4\u53ef\u4f7f\u7528git Bash\u3001SourceTree\u3001PyCharm\u7b49\u5de5\u5177\u6267\u884c python3\u83b7\u53d6git log\u4fe1\u606f\u811a\u672c \u5728 Terminal \u4e2d\u8f93\u5165 git log | git_parser.py \u5373\u53ef\u6267\u884c\u811a\u672c, git_parser.py \u6587\u4ef6\uff1a import re import io import sys import datetime # array to store dict of commit data commits = [] def parse_commit ( commit_lines ): # dict to store commit data commit = {} # iterate lines and save for commit_line in commit_lines : if commit_line == '' or commit_line == ' \\n ' : # ignore empty lines pass elif bool ( re . match ( 'commit' , commit_line , re . IGNORECASE )): # commit xxxx if len ( commit ) != 0 : # new commit, so re-initialize commits . append ( commit ) commit = { 'hash' : re . match ( 'commit (.*)' , commit_line , re . IGNORECASE ) . group ( 1 )} elif bool ( re . match ( 'merge:' , commit_line , re . IGNORECASE )): # Merge: xxxx xxxx pass elif bool ( re . match ( 'author:' , commit_line , re . IGNORECASE )): # Author: xxxx <xxxx@xxxx.com> m = re . compile ( 'Author: (.*) <(.*)>' ) . match ( commit_line ) commit [ 'author' ] = m . group ( 1 ) commit [ 'email' ] = m . group ( 2 ) elif bool ( re . match ( 'date:' , commit_line , re . IGNORECASE )): # Date: xxx m = re . compile ( 'Date: (.*)' ) . match ( commit_line ) date = m . group ( 1 ) commit [ 'date' ] = datetime . datetime . strptime ( date , ' %a %b %d %H:%M:%S %Y %z' ) . strftime ( '%Y-%m- %d %H:%M:%S' ) elif bool ( re . match ( ' ' , commit_line , re . IGNORECASE )): # (4 empty spaces) if commit . get ( 'message' ) is None : commit [ 'message' ] = commit_line . strip () else : print ( 'ERROR: Unexpected Line: ' + commit_line ) if __name__ == '__main__' : input_stream = io . TextIOWrapper ( sys . stdin . buffer , encoding = 'utf-8' ) parse_commit ( input_stream . readlines ()) # print commits print ( 'Author' . ljust ( 8 ) + ' ' + 'Email' . ljust ( 20 ) + ' ' + 'Hash' . ljust ( 8 ) + ' ' + 'Date' . ljust ( 20 ) + ' ' + 'Message' . ljust ( 20 )) print ( \"=====================================================================================================\" ) for commit in commits : print ( commit [ 'author' ] . ljust ( 8 ) + ' ' + commit [ 'email' ][: 20 ] . ljust ( 20 ) + ' ' + commit [ 'hash' ][: 7 ] . ljust ( 8 ) + ' ' + commit [ 'date' ] + ' ' + commit [ 'message' ])","title":"Git\u7b14\u8bb0"},{"location":"linux/git-note/#_1","text":"git clone \u4ed3\u5e93\u5730\u5740 git pull \u4ed3\u5e93\u5730\u5740 git rm -r myFolder \u4ecegit\u5220\u9664\u6587\u4ef6\u5939 git rm --cached -r myFolder \u4ece\u672c\u5730git\u4e2d\u5220\u9664\u67d0\u4e2a\u6587\u4ef6\u5939 git rm --cached myfile \u4ece\u672c\u5730git\u4e2d\u5220\u9664\u67d0\u4e2a\u6587\u4ef6 git checkout . \u653e\u5f03\u5f53\u524d\u672a\u63d0\u4ea4\u7684\u4fee\u6539\u6587\u4ef6 https:// { username } : { passwd } @git.coding.net \u5728Uri\u5730\u5740\u4e2d\u5b58\u5165git\u7684\u8d26\u6237\u5bc6\u7801\u4e4b\u540e\u6267\u884c git config --global credential.helper store git remote set-url origin https://git.coding.net/ykh/Blog.git\u91cd\u65b0\u8bbe\u7f6e\u4ed3\u5e93\u5730\u5740 git log --all --decorate --oneline --graph # \u663e\u793agit log \u79fb\u9664--decorate\u53ef\u4e0d\u663e\u793a\u5206\u652f\u4fe1\u606f","title":"\u5e38\u7528\u547d\u4ee4"},{"location":"linux/git-note/#gitignore","text":"\u521b\u5efa .gitignore \u6587\u4ef6\uff0c\u6587\u4ef6\u7528\u4e8e\u544a\u8bc9git\u5ffd\u7565\u67d0\u4e9b\u7279\u5b9a\u6216\u8005\u7279\u5b9a\u6587\u4ef6\u7c7b\u578b\u7684\u6587\u4ef6\uff1a *.[oa] #\u5ffd\u7565\u6240\u6709.o\u548c.a\u7c7b\u578b\u7684\u6587\u4ef6 *.log #\u5ffd\u7565\u6240\u6709.log\u7c7b\u578b\u7684\u6587\u4ef6 !info.log #\u4e0d\u5ffd\u7565info.log\u6587\u4ef6 *~ #\u5ffd\u7565\u6240\u6709\u6587\u4ef6\u540d\u79f0\u4ee5~\u7ed3\u5c3e\u7684\u6587\u4ef6 media/ #\u5ffd\u7565\u6240\u6709\u7684media/\u6587\u4ef6\u5939 migrations/*.py #\u5ffd\u7565\u6240\u6709migrations/\u6587\u4ef6\u5939\u4e0b\u7684.py\u6587\u4ef6 !migrations/__init__.py #\u4e0d\u5ffd\u7565\u6240\u6709migrations/\u6587\u4ef6\u5939\u4e0b\u7684__init__.py Django\u9879\u76ee\u591a\u7aef\u540c\u6b65\u7684\u65f6\u5019\u6781\u4e3a\u6709\u7528 /environment #\u5ffd\u7565\u6839\u76ee\u5f55\u4e0b\u7684environment\u6587\u4ef6\u5939","title":".gitignore\u6587\u4ef6\u4f5c\u7528"},{"location":"linux/git-note/#_2","text":"","title":"\u5e38\u89c1\u9519\u8bef"},{"location":"linux/git-note/#_3","text":"\u672c\u5730\u7248\u672c\u4f4e\u4e8e\u8fdc\u7a0b\u7248\u672c\uff0c\u5219\u5148\u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u62c9\u53d6\u4ee3\u7801\uff0c\u5728\u672c\u5730\u5408\u5e76\u5b8c\u6210\u540e\u518d\u6b21\u63d0\u4ea4","title":"\u51b2\u7a81"},{"location":"linux/git-note/#error-path-signalspy-is-unmerged","text":"git reset signals.py git checkout signals.py \u547d\u4ee4\u53ef\u4f7f\u7528git Bash\u3001SourceTree\u3001PyCharm\u7b49\u5de5\u5177\u6267\u884c","title":"error: path 'signals.py' is unmerged"},{"location":"linux/git-note/#python3git-log","text":"\u5728 Terminal \u4e2d\u8f93\u5165 git log | git_parser.py \u5373\u53ef\u6267\u884c\u811a\u672c, git_parser.py \u6587\u4ef6\uff1a import re import io import sys import datetime # array to store dict of commit data commits = [] def parse_commit ( commit_lines ): # dict to store commit data commit = {} # iterate lines and save for commit_line in commit_lines : if commit_line == '' or commit_line == ' \\n ' : # ignore empty lines pass elif bool ( re . match ( 'commit' , commit_line , re . IGNORECASE )): # commit xxxx if len ( commit ) != 0 : # new commit, so re-initialize commits . append ( commit ) commit = { 'hash' : re . match ( 'commit (.*)' , commit_line , re . IGNORECASE ) . group ( 1 )} elif bool ( re . match ( 'merge:' , commit_line , re . IGNORECASE )): # Merge: xxxx xxxx pass elif bool ( re . match ( 'author:' , commit_line , re . IGNORECASE )): # Author: xxxx <xxxx@xxxx.com> m = re . compile ( 'Author: (.*) <(.*)>' ) . match ( commit_line ) commit [ 'author' ] = m . group ( 1 ) commit [ 'email' ] = m . group ( 2 ) elif bool ( re . match ( 'date:' , commit_line , re . IGNORECASE )): # Date: xxx m = re . compile ( 'Date: (.*)' ) . match ( commit_line ) date = m . group ( 1 ) commit [ 'date' ] = datetime . datetime . strptime ( date , ' %a %b %d %H:%M:%S %Y %z' ) . strftime ( '%Y-%m- %d %H:%M:%S' ) elif bool ( re . match ( ' ' , commit_line , re . IGNORECASE )): # (4 empty spaces) if commit . get ( 'message' ) is None : commit [ 'message' ] = commit_line . strip () else : print ( 'ERROR: Unexpected Line: ' + commit_line ) if __name__ == '__main__' : input_stream = io . TextIOWrapper ( sys . stdin . buffer , encoding = 'utf-8' ) parse_commit ( input_stream . readlines ()) # print commits print ( 'Author' . ljust ( 8 ) + ' ' + 'Email' . ljust ( 20 ) + ' ' + 'Hash' . ljust ( 8 ) + ' ' + 'Date' . ljust ( 20 ) + ' ' + 'Message' . ljust ( 20 )) print ( \"=====================================================================================================\" ) for commit in commits : print ( commit [ 'author' ] . ljust ( 8 ) + ' ' + commit [ 'email' ][: 20 ] . ljust ( 20 ) + ' ' + commit [ 'hash' ][: 7 ] . ljust ( 8 ) + ' ' + commit [ 'date' ] + ' ' + commit [ 'message' ])","title":"python3\u83b7\u53d6git log\u4fe1\u606f\u811a\u672c"},{"location":"linux/raspberrypi/","text":"\u524d\u5f80https://www.raspberrypi.org/downloads/\u4e0b\u8f7d\u6811\u8393\u6d3eNOOBS\u5b8c\u5168\u7248\u7cfb\u7edf ! \u524d\u5f80https://www.sdcard.org/downloads/formatter_4/\u4e0b\u8f7dSDFormatter v4.0\u5e76\u5b89\u88c5 ! \u4e0b\u8f7dRASPBIAN\u7cfb\u7edf\uff0c\u5f97\u5230.img\u6587\u4ef6\uff0c\u4f7f\u7528Win32 Disk Imager \u5c06\u955c\u50cf\u5199\u5165\u5185\u5b58\u5361\u3002 \u4f7f\u7528SDFormatter\u683c\u5f0f\u5316\u4f60\u7684\u5185\u5b58\u5361\u4e3aFAT\u683c\u5f0f\uff0c\u65e2\u8bbe\u7f6e\u8c03\u6574\u903b\u8f91\u5927\u5c0f(FORMAT SIZE ADJUSTMEN)\u9009\u9879\u4e3aON\uff0c\u5c06\u4e0b\u8f7d\u7684NODE.zip\u538b\u7f29\u5305\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u63d0\u53d6\u51fa\u6765\u62f7\u8d1d\u5230SD\u5361\u7684\u6839\u76ee\u5f55\uff0c\u62f7\u8d1d\u5b8c\u6210\u540e\u5b89\u5168\u79fb\u9664\u5e76\u5c06SD\u5361\u63d2\u5230\u4f60\u7684\u6811\u8393\u6d3e\u4e2d\uff0c\u91cd\u542f\u4f60\u7684\u6811\u8393\u6d3e\u65f6\u5c06\u770b\u5230\u9009\u62e9\u754c\u9762\uff0c\u63d2\u4e0a\u952e\u76d8\u9f20\u6807\u9009\u62e9\u63a8\u8350\u7684Raspbian OS\uff0c\u7b49\u5f85\u5b89\u88c5\u5b8c\u6210\u540e\u91cd\u542f\uff0c\u9ed8\u8ba4\u8d26\u53f7\u4e3api\uff0c\u5bc6\u7801\u4e3araspberry\u3002 \u518d\u6b21\u91cd\u542f\u540e\u4f7f\u7528 startx \u547d\u4ee4\u8fdb\u5165\u56fe\u50cf\u754c\u9762\u540e\uff0c\u5728Menu->Programming\u4e2d\u65e2\u53ef\u627e\u5230\u7cfb\u7edf\u81ea\u5e26\u7684Python2\u6216\u8005Python3\u7684IDE\u3002","title":"\u6811\u8393\u6d3e\u5b89\u88c5 python3 \u53ca python IDE"},{"location":"linux/supervisor-celery/","text":"1 supervisor\u4f5c\u7528 Linux\u7684\u540e\u53f0\u8fdb\u7a0b\u8fd0\u884c\u6709\u597d\u51e0\u79cd\u65b9\u6cd5\uff0c\u4f8b\u5982nohup\uff0cscreen\u7b49\uff0c\u4f46\u662f\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u670d\u52a1\u7a0b\u5e8f\uff0c\u8981\u53ef\u9760\u5730\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a\u5b83\u505a\u6210daemon\uff0c\u6700\u597d\u8fd8\u80fd\u76d1\u63a7\u8fdb\u7a0b\u72b6\u6001\uff0c\u5728\u610f\u5916\u7ed3\u675f\u65f6\u80fd\u81ea\u52a8\u91cd\u542f\u3002 supervisor\u5c31\u662f\u7528Python\u5f00\u53d1\u7684\u4e00\u5957\u901a\u7528\u7684\u8fdb\u7a0b\u7ba1\u7406\u7a0b\u5e8f\uff0c\u80fd\u5c06\u4e00\u4e2a\u666e\u901a\u7684\u547d\u4ee4\u884c\u8fdb\u7a0b\u53d8\u4e3a\u540e\u53f0daemon\uff0c\u5e76\u76d1\u63a7\u8fdb\u7a0b\u72b6\u6001\uff0c\u5f02\u5e38\u9000\u51fa\u65f6\u80fd\u81ea\u52a8\u91cd\u542f\u3002 Supervisor\u7528\u4e8elinux\u7cfb\u7edf\u4e2d\u8fdb\u884c\u8fdb\u7a0b\u5b88\u62a4\uff0csupervisor3.x\u7248\u672c\u4ec5\u652f\u6301\u5728python2\u73af\u5883\u4e0b\u8fd0\u884c\uff0c\u4f46\u5bf9\u5176\u7ba1\u7406\u7684\u5b50\u8fdb\u7a0b\u8fd0\u884c\u73af\u5883\u6ca1\u6709\u8981\u6c42\uff0c\u5728\u5373\u5c06\u53d1\u5e03\u76844.x\u7248\u672c\u5f00\u59cb\u652f\u6301python3\u3002 2 supervisor\u5b89\u88c5 \u4f7f\u7528easy_install\u5b89\u88c5(\u9700\u8981\u9ed8\u8ba4python\u73af\u5883\u4e3apython2) easy_install supervisor sudo python2.7 -m easy_install supervisor Git\u514b\u9686\u5b89\u88c5 cd /usr/bin sudo git clone https://github.com/Supervisor/supervisor.git cd supervisor sudo python2 setup.py install 3 supervisor\u914d\u7f6e \u751f\u6210\u9700\u8981\u7684\u6587\u4ef6\u5939 sudo mkdir /etc/supervisord /etc/supervisord/conf.d /var/log/supervisord \u7531\u914d\u7f6e\u6a21\u677f\u751f\u6210\u914d\u7f6e\u6587\u4ef6\u5e76\u8d4b\u6743 sudo chmod -R 777 /etc/supervisor/ # \u6587\u4ef6\u5939\u8d4b\u6743 sudo echo_supervisord_conf > /etc/supervisord/supervisord.conf # \u751f\u6210\u9ed8\u8ba4\u914d\u7f6e\u6a21\u677f sudo chmod -R 777 /etc/supervisord/supervisord.conf # \u5bf9\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u8d4b\u6743 sudo gedit /etc/supervisord/supervisord.conf # \u7f16\u8f91\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 \u9700\u8981\u7279\u6b8a\u914d\u7f6e\u7684\u5730\u65b9\uff1a [unix_http_server] file = /tmp/supervisor.sock ; the path to the socket file [supervisord] logfile = /var/log/supervisord/supervisord.log ; main log file; default $CWD/supervisord.log logfile_maxbytes = 50MB ; max main logfile bytes b4 rotation; default 50MB logfile_backups = 10 ; # of main logfile backups; 0 means none, default 10 loglevel = info ; log level; default info; others: debug,warn,trace pidfile = /tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid nodaemon = false ; start in foreground if true; default false minfds = 1024 ; min. avail startup file descriptors; default 1024 minprocs = 200 ; min. avail process descriptors;default 200 childlogdir = /tmp ; 'AUTO' child log dir, default $TEMP [rpcinterface:supervisor] supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface [supervisorctl] serverurl = unix:///tmp/supervisor.sock ; use a unix:// URL for a unix socket # \u6b64\u5904\u9700\u8981\u914d\u7f6e \u7528\u4e8e\u4fdd\u8bc1supervisor\u505c\u6b62\u8fdb\u7a0b\u540e\u5176\u5bf9\u5e94\u7684UNIX\u8fdb\u7a0b\u88ab\u540c\u6b65\u5173\u95ed # \u4e0d\u7136\u4f1a\u51fa\u73b0celery\u5df2\u88ab\u5173\u95ed\u4f46\u662f\u4efb\u52a1\u961f\u5217\u4ecd\u7136\u53ef\u7528\u7684\u60c5\u51b5 stopasgroup = true ; send stop signal to the UNIX process group (default false) # \u6b64\u5904\u9700\u8981\u914d\u7f6e \u4fdd\u8bc1/etc/supervisord/conf.d/\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u4ee5.conf\u7c7b\u578b\u7ed3\u5c3e\u7684\u6587\u4ef6\u90fd\u88ab\u5f53\u505a\u914d\u7f6e\u6587\u4ef6\u88ab\u52a0\u8f7d [include] files = /etc/supervisord/conf.d/*.conf 4 cleley\u914d\u7f6e \u793a\u4f8b\u4f7f\u7528\u7684\u9879\u76ee\u6839\u76ee\u5f55\u4e3a/django/JRFamily/,\u4f7f\u7528\u7684virtualenv\u8def\u5f84\u4e3a/django/JRFamily/environment/\uff0c\u65e5\u5fd7\u5b58\u50a8\u8def\u5f84\u4e3a/django/JRFamily/log/\u3002 \u751f\u6210\u65e5\u5fd7\u6587\u4ef6\uff0csupervisor\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\uff1a cd /django/JRFamily/log/ sudo touch celery_beat.log sudo touch celery_worker.log \u65b0\u589e/etc/supervisord/conf.d/JRFamily.conf\u6587\u4ef6\uff1a [program:jrfamily_celery_beat] command = /django/JRFamily/environment/bin/python manage.py celery beat -l info directory = /django/JRFamily stdout_logfile = /django/JRFamily/log/celery_beat.log stderr_logfile = /django/JRFamily/log/celery_beat.log autostart = true autorestart = true user = dreamgo startsecs = 10 [program:jrfamily_celery_worker] numprocs = 2 process_name = worker%(process_num)s command = /django/JRFamily/environment/bin/python manage.py celery worker -E -l info directory = /django/JRFamily stdout_logfile = /django/JRFamily/log/celery_worker.log stderr_logfile = /django/JRFamily/log/celery_worker.log autostart = true autorestart = true user = dreamgo startsecs = 10 [program:jrfamily_celery_beat] command = /django/JRFamily/environment/bin/python manage.py celerycam directory = /django/JRFamily stdout_logfile = /django/JRFamily/log/celery_beat.log stderr_logfile = /django/JRFamily/log/celery_beat.log autostart = true autorestart = true user = dreamgo startsecs = 10 autostart\u4e3a\u662f\u5426\u81ea\u52a8\u542f\u52a8\uff0cuser\u4e3a\u5f53\u524d\u7cfb\u7edf\u7528\u6237\u540d\u3002 \u4e0a\u8ff0\u811a\u672c\u4f9d\u6b21\u6267\u884c\u7684\u547d\u4ee4\u4e3a\uff1a python manage.py celery beat -l info # \u5f00\u542ftask\u53d1\u9001\u7aef python manage.py celery worker -E -l info # -E\u662f\u4e3a\u4e86celerycam\u80fd\u591f\u6355\u6349\u5230task\u72b6\u6001 python manage.py celerycam # \u6355\u6349task\u6267\u884c\u72b6\u6001 \u53ef\u5728admin->Djcelery->Task\u67e5\u770b 5 RabbitMQ\u914d\u7f6e \u5728\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u90e8\u7f72\u591a\u4e2aDjango\u7ad9\u70b9\u65f6\uff0c\u82e5\u4f7f\u7528\u540c\u4e00\u4e2aRabbitMQ\u8fde\u63a5\uff0c\u5c06\u5bfc\u81f4\u591a\u4e2aDjango\u7ad9\u70b9\u5171\u7528\u540c\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u4f7f\u5f97\u5176\u4e2d\u67d0\u4e00\u4e2a\u7ad9\u70b9\u53ea\u80fd\u63a5\u53d7\u5230n/m\u7684\u4efb\u52a1(n\u4e3a\u672c\u7ad9\u70b9\u5f00\u542f\u7684celery wroker\u6570\u91cf,m\u4e3a\u603b\u7ad9\u70b9\u5f00\u542f\u7684celery worker\u6570\u91cf)\u3002\u4f7f\u7528RabbitMQ\u4e2d\u7684vhost\u529f\u80fd\u6765\u9694\u7edd\u5404\u4e2a\u7ad9\u70b9\u4e4b\u95f4\u7684RabbitMQ\u8fde\u63a5\uff0c\u4ece\u800c\u786e\u4fdd\u672c\u7ad9\u70b9\u53d1\u51fa\u7684\u4efb\u52a1(task)\u53ea\u6709\u672c\u7ad9\u70b9\u5f00\u542f\u7684worker\u80fd\u591f\u63a5\u53d7\u5230\u5e76\u8fdb\u884c\u5904\u7406\u3002 RabbitMQ\u4e2d\u7684vhost\u6982\u5ff5\u76f8\u5f53\u4e8eApache\u4e2d\u7684VirtualHost\u3002 \u8bf7\u6309\u7167\u4e0b\u5217\u547d\u4ee4\u987a\u5e8f\u6dfb\u52a0\u7528\u6237\u5e76\u5c06\u7528\u6237\u7ed1\u5b9a\u5230\u5bf9\u5e94\u7684vhost\u4e0a\uff1a sudo rabbitmqctl add_user { username } { password } # \u6dfb\u52a0\u7528\u6237 sudo rabbitmqctl add_vhost { vhost_name } # \u6dfb\u52a0vhost sudo rabbitmqctl set_permissions -p { vhost_name } { username } \".*\" \".*\" \".*\" # \u4e3a\u7528\u6237\u8bbe\u7f6e\u65b9\u4f4dvhost\u7684\u6743\u9650 sudo rabbitmqctl set_user_tags { username } { tag ... } \u591a\u4e2a\u7ad9\u70b9\u53ef\u4ee5\u5171\u7528\u4e00\u4e2a\u7528\u6237\u8d26\u53f7\uff0c\u4f46\u662f\u5fc5\u987b\u4f7f\u7528\u4e0d\u540c\u7684vhost\u3002 \u66f4\u591arabbitmqctl\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u89c1 rabbitmqctl\u4f7f\u7528\u624b\u518c \u3002 \u5728Django\u4e2d\u7684settings\u6587\u4ef6\u8bbe\u7f6e\uff1a BROKER_URL = 'amqp://username:password@localhost:5672/vhost_name' # \u8bf7\u7279\u522b\u6ce8\u610f BROKER_URL\u53ea\u6709\u5728\u5927\u5199\u65f6\u6709\u6548\uff0c\u5c0f\u5199\u65f6\u65e0\u6548\u3002 \u591a\u7ad9\u70b9\u95ee\u9898\u89e3\u51b3\u65f6\u67e5\u770b\u7684\u76f8\u5173\u8d44\u6599\uff1a Run Multiple Django Apps With Celery On One Server With Rabbitmq VHosts Using celeryd as a daemon with multiple django apps? Running multiple Django Celery websites on same server Run Multiple Django Apps With Celery On One Server With Rabbitmq VHosts 6 supervisor\u4f7f\u7528 \u5f00\u542f\u3001\u65ad\u5f00supervisor.sock\u8fde\u63a5 sudo supervisord -c /etc/supervisord/supervisord.conf # \u5f00\u542f sudo unlink /tmp/supervisor.sock # \u65ad\u5f00\u8fde\u63a5 \u72b6\u6001\u67e5\u770b\u3001\u63a7\u5236 supervisorctl -c /etc/supervisord/supervisord.conf > status # \u67e5\u770b\u7a0b\u5e8f\u72b6\u6001 > stop [process_alias] # \u5173\u95ed usercenter \u7a0b\u5e8f > start [process_alias] # \u542f\u52a8 usercenter \u7a0b\u5e8f > restart [process_alias] # \u91cd\u542f usercenter \u7a0b\u5e8f > reread \uff03 \u8bfb\u53d6\u6709\u66f4\u65b0\uff08\u589e\u52a0\uff09\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4e0d\u4f1a\u542f\u52a8\u65b0\u6dfb\u52a0\u7684\u7a0b\u5e8f > update \uff03 \u91cd\u542f\u914d\u7f6e\u6587\u4ef6\u4fee\u6539\u8fc7\u7684\u7a0b\u5e8f sudo supervisorctl -c /etc/supervisord/supervisord.conf stop all # \u5173\u95ed\u5168\u90e8\u8fdb\u7a0b unlink\u524d\u5fc5\u987b\u4f7f\u7528\u8be5\u547d\u4ee4\u5173\u95edsupervisord \u4e0d\u7136celery\u4f9d\u65e7\u5b58\u5728\u4e8e\u7cfb\u7edf\u4e2d \u5bfc\u81f4\u5185\u5b58\u6cc4\u9732\u4ee5\u53ca\u6709\u89c4\u5f8b\u7684\u4efb\u52a1\u4e22\u5931\uff01\uff01\uff01 sudo supervisorctl -c /etc/supervisord/supervisord.conf start all # \u542f\u52a8\u6240\u6709\u914d\u7f6e sudo supervisorctl -c /etc/supervisord/supervisord.conf reread # \u8bfb\u53d6\u6709\u66f4\u65b0\uff08\u589e\u52a0\uff09\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4e0d\u4f1a\u542f\u52a8\u65b0\u6dfb\u52a0\u7684\u7a0b\u5e8f sudo supervisorctl -c /etc/supervisord/supervisord.conf update # \u91cd\u542f\u914d\u7f6e\u6587\u4ef6\u4fee\u6539\u8fc7\u7684\u7a0b\u5e8f Linux\u8fdb\u7a0b\u67e5\u770b\u3001\u6e05\u7406 ps auxf | grep celery # \u6811\u5f62\u663e\u793a \u63a8\u8350 ps -efH | grep celery # \u67e5\u770bcelery\u76f8\u5173\u8fdb\u7a0b \u5fc5\u987b\u662f\u5927\u5199\u7684H\u4ee5\u683c\u5f0f\u5316\u663e\u793a\u683c\u5f0f ps aux | grep celery | awk '{system(\"kill -9 \" $2)}' # \u6740\u6b7bcelery\u76f8\u5173\u8fdb\u7a0b 7 supervisor\u5f00\u673a\u81ea\u542f\u52a8 ubuntu\u5f00\u542f\u81ea\u542f\u52a8\u811a\u672c \u539f\u59cb\u94fe\u63a5 \u4fee\u6539\u540e\u811a\u672c/etc/init.d/supervisord\uff1a #! /bin/sh # # Downloaded from: # http://bazaar.launchpad.net/~ubuntu-branches/ubuntu/trusty/supervisor/trusty/view/head:/debian/supervisor.init # # skeleton example file to build /etc/init.d/ scripts. # This file should be used to construct scripts for /etc/init.d. # # Written by Miquel van Smoorenburg <miquels@cistron.nl>. # Modified for Debian # by Ian Murdock <imurdock@gnu.ai.mit.edu>. # Further changes by Javier Fernandez-Sanguino <jfs@debian.org> # Modified by sbilly <superli.1980@gmail.com> Added supervisorctl to status # # Version: @(#)skeleton 1.9 26-Feb-2001 miquels@cistron.nl # ### BEGIN INIT INFO # Provides: supervisor # Required-Start: $remote_fs $network $named # Required-Stop: $remote_fs $network $named # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Start/stop supervisor # Description: Start/stop supervisor daemon and its configured # subprocesses. ### END INIT INFO . /lib/lsb/init-functions PATH = /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin DAEMON = /usr/local/bin/supervisord SUPERVISORCTL = /usr/local/bin/supervisorctl NAME = supervisord DESC = supervisor test -x $DAEMON || exit 0 LOGDIR = /var/log/supervisord PIDFILE = /tmp/supervisord.pid DODTIME = 5 # Time to wait for the server to die, in seconds # If this value is set too low you might not # let some servers to die gracefully and # 'restart' will not work # Include supervisor defaults if available if [ -f /etc/default/supervisor ] ; then . /etc/default/supervisor fi DAEMON_OPTS = \"-c /etc/supervisord/supervisord.conf $DAEMON_OPTS \" set -e running_pid () { # Check if a given process pid's cmdline matches a given name pid = $1 name = $2 [ -z \" $pid \" ] && return 1 [ ! -d /proc/ $pid ] && return 1 ( cat /proc/ $pid /cmdline | tr \"\\000\" \"\\n\" | grep -q $name ) || return 1 return 0 } running () { # Check if the process is running looking at /proc # (works for all users) # No pidfile, probably no daemon present [ ! -f \" $PIDFILE \" ] && return 1 # Obtain the pid and check it against the binary name pid = ` cat $PIDFILE ` running_pid $pid $DAEMON || return 1 return 0 } force_stop () { # Forcefully kill the process [ ! -f \" $PIDFILE \" ] && return if running ; then kill -15 $pid # Is it really dead? [ -n \" $DODTIME \" ] && sleep \" $DODTIME \" s if running ; then kill -9 $pid [ -n \" $DODTIME \" ] && sleep \" $DODTIME \" s if running ; then echo \"Cannot kill $NAME (pid= $pid )!\" exit 1 fi fi fi rm -f $PIDFILE return 0 } case \" $1 \" in start ) echo -n \"Starting $DESC : \" start-stop-daemon --start --quiet --pidfile $PIDFILE \\ --startas $DAEMON -- $DAEMON_OPTS test -f $PIDFILE || sleep 1 if running ; then echo \" $NAME .\" else echo \" ERROR.\" fi ;; stop ) echo -n \"Stopping $DESC : \" start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE echo \" $NAME .\" ;; force-stop ) echo -n \"Forcefully stopping $DESC : \" force_stop if ! running ; then echo \" $NAME .\" else echo \" ERROR.\" fi ;; #reload) # # If the daemon can reload its config files on the fly # for example by sending it SIGHUP, do it here. # # If the daemon responds to changes in its config file # directly anyway, make this a do-nothing entry. # # echo \"Reloading $DESC configuration files.\" # start-stop-daemon --stop --signal 1 --quiet --pidfile \\ # /var/run/$NAME.pid --exec $DAEMON #;; force-reload ) # # If the \"reload\" option is implemented, move the \"force-reload\" # option to the \"reload\" entry above. If not, \"force-reload\" is # just the same as \"restart\" except that it does nothing if the # daemon isn't already running. # check wether $DAEMON is running. If so, restart start-stop-daemon --stop --test --quiet --pidfile $PIDFILE \\ --startas $DAEMON \\ && $0 restart \\ || exit 0 ;; restart ) echo -n \"Restarting $DESC : \" start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE [ -n \" $DODTIME \" ] && sleep $DODTIME start-stop-daemon --start --quiet --pidfile $PIDFILE \\ --startas $DAEMON -- $DAEMON_OPTS echo \" $NAME .\" ;; status ) echo -n \" $NAME is \" if running ; then echo \"running\" else echo \" not running.\" exit 1 fi $SUPERVISORCTL $DAEMON_OPTS status ;; * ) N = /etc/init.d/ $NAME # echo \"Usage: $N {start|stop|restart|reload|force-reload}\" >&2 echo \"Usage: $N {start|stop|restart|force-reload|status|force-stop}\" > & 2 exit 1 ;; esac exit 0 \u81ea\u542f\u52a8\u811a\u672c\u4fee\u6539\u6ce8\u610f\u4e8b\u9879\uff1a \u9700\u8981\u4fee\u6539DAEMON\u3001SUPERVISORCTL\u4e24\u4e2a\u8def\u5f84\uff0c\u5747\u4f4d\u4e8e/usr/local/bin\u76ee\u5f55\u4e0b\uff0c\u539f\u59cb\u76ee\u5f55\u4e3a/usr/bin\u3002 \u52a1\u5fc5\u786e\u4fddPIDFILE\u7684\u4f4d\u7f6e\u548c/etc/supervisord/supervisord.conf\u4e2d\u7684pidfile\u5bf9\u5e94\u76f8\u540c\u7684\u6587\u4ef6\u3002 \u786e\u4fddLOGDIR\u8bbe\u7f6e\u7684\u76ee\u5f55\u548c/etc/supervisord/supervisord.conf\u4e2d\u7684logfile\u6240\u5728\u7684\u76ee\u5f55\u76f8\u540c\u3002 \u8bbe\u7f6e\u811a\u672c\u4e3aUbuntu\u4e2d\u7684\u670d\u52a1 sudo chmod -R 777 /etc/init.d/supervisord sudo update-rc.d supervisord defaults sudo service --status-all \u79fb\u9664\u670d\u52a1 sudo update-rc.d -f supervisord remove \ufeff","title":"Supervisor\u4f7f\u7528\u7b14\u8bb0\u53cacelery\u751f\u4ea7\u90e8\u7f72"},{"location":"linux/supervisor-celery/#1-supervisor","text":"Linux\u7684\u540e\u53f0\u8fdb\u7a0b\u8fd0\u884c\u6709\u597d\u51e0\u79cd\u65b9\u6cd5\uff0c\u4f8b\u5982nohup\uff0cscreen\u7b49\uff0c\u4f46\u662f\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u670d\u52a1\u7a0b\u5e8f\uff0c\u8981\u53ef\u9760\u5730\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a\u5b83\u505a\u6210daemon\uff0c\u6700\u597d\u8fd8\u80fd\u76d1\u63a7\u8fdb\u7a0b\u72b6\u6001\uff0c\u5728\u610f\u5916\u7ed3\u675f\u65f6\u80fd\u81ea\u52a8\u91cd\u542f\u3002 supervisor\u5c31\u662f\u7528Python\u5f00\u53d1\u7684\u4e00\u5957\u901a\u7528\u7684\u8fdb\u7a0b\u7ba1\u7406\u7a0b\u5e8f\uff0c\u80fd\u5c06\u4e00\u4e2a\u666e\u901a\u7684\u547d\u4ee4\u884c\u8fdb\u7a0b\u53d8\u4e3a\u540e\u53f0daemon\uff0c\u5e76\u76d1\u63a7\u8fdb\u7a0b\u72b6\u6001\uff0c\u5f02\u5e38\u9000\u51fa\u65f6\u80fd\u81ea\u52a8\u91cd\u542f\u3002 Supervisor\u7528\u4e8elinux\u7cfb\u7edf\u4e2d\u8fdb\u884c\u8fdb\u7a0b\u5b88\u62a4\uff0csupervisor3.x\u7248\u672c\u4ec5\u652f\u6301\u5728python2\u73af\u5883\u4e0b\u8fd0\u884c\uff0c\u4f46\u5bf9\u5176\u7ba1\u7406\u7684\u5b50\u8fdb\u7a0b\u8fd0\u884c\u73af\u5883\u6ca1\u6709\u8981\u6c42\uff0c\u5728\u5373\u5c06\u53d1\u5e03\u76844.x\u7248\u672c\u5f00\u59cb\u652f\u6301python3\u3002","title":"1 supervisor\u4f5c\u7528"},{"location":"linux/supervisor-celery/#2-supervisor","text":"\u4f7f\u7528easy_install\u5b89\u88c5(\u9700\u8981\u9ed8\u8ba4python\u73af\u5883\u4e3apython2) easy_install supervisor sudo python2.7 -m easy_install supervisor Git\u514b\u9686\u5b89\u88c5 cd /usr/bin sudo git clone https://github.com/Supervisor/supervisor.git cd supervisor sudo python2 setup.py install","title":"2 supervisor\u5b89\u88c5"},{"location":"linux/supervisor-celery/#3-supervisor","text":"\u751f\u6210\u9700\u8981\u7684\u6587\u4ef6\u5939 sudo mkdir /etc/supervisord /etc/supervisord/conf.d /var/log/supervisord \u7531\u914d\u7f6e\u6a21\u677f\u751f\u6210\u914d\u7f6e\u6587\u4ef6\u5e76\u8d4b\u6743 sudo chmod -R 777 /etc/supervisor/ # \u6587\u4ef6\u5939\u8d4b\u6743 sudo echo_supervisord_conf > /etc/supervisord/supervisord.conf # \u751f\u6210\u9ed8\u8ba4\u914d\u7f6e\u6a21\u677f sudo chmod -R 777 /etc/supervisord/supervisord.conf # \u5bf9\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u8d4b\u6743 sudo gedit /etc/supervisord/supervisord.conf # \u7f16\u8f91\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 \u9700\u8981\u7279\u6b8a\u914d\u7f6e\u7684\u5730\u65b9\uff1a [unix_http_server] file = /tmp/supervisor.sock ; the path to the socket file [supervisord] logfile = /var/log/supervisord/supervisord.log ; main log file; default $CWD/supervisord.log logfile_maxbytes = 50MB ; max main logfile bytes b4 rotation; default 50MB logfile_backups = 10 ; # of main logfile backups; 0 means none, default 10 loglevel = info ; log level; default info; others: debug,warn,trace pidfile = /tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid nodaemon = false ; start in foreground if true; default false minfds = 1024 ; min. avail startup file descriptors; default 1024 minprocs = 200 ; min. avail process descriptors;default 200 childlogdir = /tmp ; 'AUTO' child log dir, default $TEMP [rpcinterface:supervisor] supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface [supervisorctl] serverurl = unix:///tmp/supervisor.sock ; use a unix:// URL for a unix socket # \u6b64\u5904\u9700\u8981\u914d\u7f6e \u7528\u4e8e\u4fdd\u8bc1supervisor\u505c\u6b62\u8fdb\u7a0b\u540e\u5176\u5bf9\u5e94\u7684UNIX\u8fdb\u7a0b\u88ab\u540c\u6b65\u5173\u95ed # \u4e0d\u7136\u4f1a\u51fa\u73b0celery\u5df2\u88ab\u5173\u95ed\u4f46\u662f\u4efb\u52a1\u961f\u5217\u4ecd\u7136\u53ef\u7528\u7684\u60c5\u51b5 stopasgroup = true ; send stop signal to the UNIX process group (default false) # \u6b64\u5904\u9700\u8981\u914d\u7f6e \u4fdd\u8bc1/etc/supervisord/conf.d/\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u4ee5.conf\u7c7b\u578b\u7ed3\u5c3e\u7684\u6587\u4ef6\u90fd\u88ab\u5f53\u505a\u914d\u7f6e\u6587\u4ef6\u88ab\u52a0\u8f7d [include] files = /etc/supervisord/conf.d/*.conf","title":"3 supervisor\u914d\u7f6e"},{"location":"linux/supervisor-celery/#4-cleley","text":"\u793a\u4f8b\u4f7f\u7528\u7684\u9879\u76ee\u6839\u76ee\u5f55\u4e3a/django/JRFamily/,\u4f7f\u7528\u7684virtualenv\u8def\u5f84\u4e3a/django/JRFamily/environment/\uff0c\u65e5\u5fd7\u5b58\u50a8\u8def\u5f84\u4e3a/django/JRFamily/log/\u3002 \u751f\u6210\u65e5\u5fd7\u6587\u4ef6\uff0csupervisor\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\uff1a cd /django/JRFamily/log/ sudo touch celery_beat.log sudo touch celery_worker.log \u65b0\u589e/etc/supervisord/conf.d/JRFamily.conf\u6587\u4ef6\uff1a [program:jrfamily_celery_beat] command = /django/JRFamily/environment/bin/python manage.py celery beat -l info directory = /django/JRFamily stdout_logfile = /django/JRFamily/log/celery_beat.log stderr_logfile = /django/JRFamily/log/celery_beat.log autostart = true autorestart = true user = dreamgo startsecs = 10 [program:jrfamily_celery_worker] numprocs = 2 process_name = worker%(process_num)s command = /django/JRFamily/environment/bin/python manage.py celery worker -E -l info directory = /django/JRFamily stdout_logfile = /django/JRFamily/log/celery_worker.log stderr_logfile = /django/JRFamily/log/celery_worker.log autostart = true autorestart = true user = dreamgo startsecs = 10 [program:jrfamily_celery_beat] command = /django/JRFamily/environment/bin/python manage.py celerycam directory = /django/JRFamily stdout_logfile = /django/JRFamily/log/celery_beat.log stderr_logfile = /django/JRFamily/log/celery_beat.log autostart = true autorestart = true user = dreamgo startsecs = 10 autostart\u4e3a\u662f\u5426\u81ea\u52a8\u542f\u52a8\uff0cuser\u4e3a\u5f53\u524d\u7cfb\u7edf\u7528\u6237\u540d\u3002 \u4e0a\u8ff0\u811a\u672c\u4f9d\u6b21\u6267\u884c\u7684\u547d\u4ee4\u4e3a\uff1a python manage.py celery beat -l info # \u5f00\u542ftask\u53d1\u9001\u7aef python manage.py celery worker -E -l info # -E\u662f\u4e3a\u4e86celerycam\u80fd\u591f\u6355\u6349\u5230task\u72b6\u6001 python manage.py celerycam # \u6355\u6349task\u6267\u884c\u72b6\u6001 \u53ef\u5728admin->Djcelery->Task\u67e5\u770b","title":"4 cleley\u914d\u7f6e"},{"location":"linux/supervisor-celery/#5-rabbitmq","text":"\u5728\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u90e8\u7f72\u591a\u4e2aDjango\u7ad9\u70b9\u65f6\uff0c\u82e5\u4f7f\u7528\u540c\u4e00\u4e2aRabbitMQ\u8fde\u63a5\uff0c\u5c06\u5bfc\u81f4\u591a\u4e2aDjango\u7ad9\u70b9\u5171\u7528\u540c\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\uff0c\u4f7f\u5f97\u5176\u4e2d\u67d0\u4e00\u4e2a\u7ad9\u70b9\u53ea\u80fd\u63a5\u53d7\u5230n/m\u7684\u4efb\u52a1(n\u4e3a\u672c\u7ad9\u70b9\u5f00\u542f\u7684celery wroker\u6570\u91cf,m\u4e3a\u603b\u7ad9\u70b9\u5f00\u542f\u7684celery worker\u6570\u91cf)\u3002\u4f7f\u7528RabbitMQ\u4e2d\u7684vhost\u529f\u80fd\u6765\u9694\u7edd\u5404\u4e2a\u7ad9\u70b9\u4e4b\u95f4\u7684RabbitMQ\u8fde\u63a5\uff0c\u4ece\u800c\u786e\u4fdd\u672c\u7ad9\u70b9\u53d1\u51fa\u7684\u4efb\u52a1(task)\u53ea\u6709\u672c\u7ad9\u70b9\u5f00\u542f\u7684worker\u80fd\u591f\u63a5\u53d7\u5230\u5e76\u8fdb\u884c\u5904\u7406\u3002 RabbitMQ\u4e2d\u7684vhost\u6982\u5ff5\u76f8\u5f53\u4e8eApache\u4e2d\u7684VirtualHost\u3002 \u8bf7\u6309\u7167\u4e0b\u5217\u547d\u4ee4\u987a\u5e8f\u6dfb\u52a0\u7528\u6237\u5e76\u5c06\u7528\u6237\u7ed1\u5b9a\u5230\u5bf9\u5e94\u7684vhost\u4e0a\uff1a sudo rabbitmqctl add_user { username } { password } # \u6dfb\u52a0\u7528\u6237 sudo rabbitmqctl add_vhost { vhost_name } # \u6dfb\u52a0vhost sudo rabbitmqctl set_permissions -p { vhost_name } { username } \".*\" \".*\" \".*\" # \u4e3a\u7528\u6237\u8bbe\u7f6e\u65b9\u4f4dvhost\u7684\u6743\u9650 sudo rabbitmqctl set_user_tags { username } { tag ... } \u591a\u4e2a\u7ad9\u70b9\u53ef\u4ee5\u5171\u7528\u4e00\u4e2a\u7528\u6237\u8d26\u53f7\uff0c\u4f46\u662f\u5fc5\u987b\u4f7f\u7528\u4e0d\u540c\u7684vhost\u3002 \u66f4\u591arabbitmqctl\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u89c1 rabbitmqctl\u4f7f\u7528\u624b\u518c \u3002 \u5728Django\u4e2d\u7684settings\u6587\u4ef6\u8bbe\u7f6e\uff1a BROKER_URL = 'amqp://username:password@localhost:5672/vhost_name' # \u8bf7\u7279\u522b\u6ce8\u610f BROKER_URL\u53ea\u6709\u5728\u5927\u5199\u65f6\u6709\u6548\uff0c\u5c0f\u5199\u65f6\u65e0\u6548\u3002 \u591a\u7ad9\u70b9\u95ee\u9898\u89e3\u51b3\u65f6\u67e5\u770b\u7684\u76f8\u5173\u8d44\u6599\uff1a Run Multiple Django Apps With Celery On One Server With Rabbitmq VHosts Using celeryd as a daemon with multiple django apps? Running multiple Django Celery websites on same server Run Multiple Django Apps With Celery On One Server With Rabbitmq VHosts","title":"5 RabbitMQ\u914d\u7f6e"},{"location":"linux/supervisor-celery/#6-supervisor","text":"\u5f00\u542f\u3001\u65ad\u5f00supervisor.sock\u8fde\u63a5 sudo supervisord -c /etc/supervisord/supervisord.conf # \u5f00\u542f sudo unlink /tmp/supervisor.sock # \u65ad\u5f00\u8fde\u63a5 \u72b6\u6001\u67e5\u770b\u3001\u63a7\u5236 supervisorctl -c /etc/supervisord/supervisord.conf > status # \u67e5\u770b\u7a0b\u5e8f\u72b6\u6001 > stop [process_alias] # \u5173\u95ed usercenter \u7a0b\u5e8f > start [process_alias] # \u542f\u52a8 usercenter \u7a0b\u5e8f > restart [process_alias] # \u91cd\u542f usercenter \u7a0b\u5e8f > reread \uff03 \u8bfb\u53d6\u6709\u66f4\u65b0\uff08\u589e\u52a0\uff09\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4e0d\u4f1a\u542f\u52a8\u65b0\u6dfb\u52a0\u7684\u7a0b\u5e8f > update \uff03 \u91cd\u542f\u914d\u7f6e\u6587\u4ef6\u4fee\u6539\u8fc7\u7684\u7a0b\u5e8f sudo supervisorctl -c /etc/supervisord/supervisord.conf stop all # \u5173\u95ed\u5168\u90e8\u8fdb\u7a0b unlink\u524d\u5fc5\u987b\u4f7f\u7528\u8be5\u547d\u4ee4\u5173\u95edsupervisord \u4e0d\u7136celery\u4f9d\u65e7\u5b58\u5728\u4e8e\u7cfb\u7edf\u4e2d \u5bfc\u81f4\u5185\u5b58\u6cc4\u9732\u4ee5\u53ca\u6709\u89c4\u5f8b\u7684\u4efb\u52a1\u4e22\u5931\uff01\uff01\uff01 sudo supervisorctl -c /etc/supervisord/supervisord.conf start all # \u542f\u52a8\u6240\u6709\u914d\u7f6e sudo supervisorctl -c /etc/supervisord/supervisord.conf reread # \u8bfb\u53d6\u6709\u66f4\u65b0\uff08\u589e\u52a0\uff09\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4e0d\u4f1a\u542f\u52a8\u65b0\u6dfb\u52a0\u7684\u7a0b\u5e8f sudo supervisorctl -c /etc/supervisord/supervisord.conf update # \u91cd\u542f\u914d\u7f6e\u6587\u4ef6\u4fee\u6539\u8fc7\u7684\u7a0b\u5e8f Linux\u8fdb\u7a0b\u67e5\u770b\u3001\u6e05\u7406 ps auxf | grep celery # \u6811\u5f62\u663e\u793a \u63a8\u8350 ps -efH | grep celery # \u67e5\u770bcelery\u76f8\u5173\u8fdb\u7a0b \u5fc5\u987b\u662f\u5927\u5199\u7684H\u4ee5\u683c\u5f0f\u5316\u663e\u793a\u683c\u5f0f ps aux | grep celery | awk '{system(\"kill -9 \" $2)}' # \u6740\u6b7bcelery\u76f8\u5173\u8fdb\u7a0b","title":"6 supervisor\u4f7f\u7528"},{"location":"linux/supervisor-celery/#7-supervisor","text":"ubuntu\u5f00\u542f\u81ea\u542f\u52a8\u811a\u672c \u539f\u59cb\u94fe\u63a5 \u4fee\u6539\u540e\u811a\u672c/etc/init.d/supervisord\uff1a #! /bin/sh # # Downloaded from: # http://bazaar.launchpad.net/~ubuntu-branches/ubuntu/trusty/supervisor/trusty/view/head:/debian/supervisor.init # # skeleton example file to build /etc/init.d/ scripts. # This file should be used to construct scripts for /etc/init.d. # # Written by Miquel van Smoorenburg <miquels@cistron.nl>. # Modified for Debian # by Ian Murdock <imurdock@gnu.ai.mit.edu>. # Further changes by Javier Fernandez-Sanguino <jfs@debian.org> # Modified by sbilly <superli.1980@gmail.com> Added supervisorctl to status # # Version: @(#)skeleton 1.9 26-Feb-2001 miquels@cistron.nl # ### BEGIN INIT INFO # Provides: supervisor # Required-Start: $remote_fs $network $named # Required-Stop: $remote_fs $network $named # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Start/stop supervisor # Description: Start/stop supervisor daemon and its configured # subprocesses. ### END INIT INFO . /lib/lsb/init-functions PATH = /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin DAEMON = /usr/local/bin/supervisord SUPERVISORCTL = /usr/local/bin/supervisorctl NAME = supervisord DESC = supervisor test -x $DAEMON || exit 0 LOGDIR = /var/log/supervisord PIDFILE = /tmp/supervisord.pid DODTIME = 5 # Time to wait for the server to die, in seconds # If this value is set too low you might not # let some servers to die gracefully and # 'restart' will not work # Include supervisor defaults if available if [ -f /etc/default/supervisor ] ; then . /etc/default/supervisor fi DAEMON_OPTS = \"-c /etc/supervisord/supervisord.conf $DAEMON_OPTS \" set -e running_pid () { # Check if a given process pid's cmdline matches a given name pid = $1 name = $2 [ -z \" $pid \" ] && return 1 [ ! -d /proc/ $pid ] && return 1 ( cat /proc/ $pid /cmdline | tr \"\\000\" \"\\n\" | grep -q $name ) || return 1 return 0 } running () { # Check if the process is running looking at /proc # (works for all users) # No pidfile, probably no daemon present [ ! -f \" $PIDFILE \" ] && return 1 # Obtain the pid and check it against the binary name pid = ` cat $PIDFILE ` running_pid $pid $DAEMON || return 1 return 0 } force_stop () { # Forcefully kill the process [ ! -f \" $PIDFILE \" ] && return if running ; then kill -15 $pid # Is it really dead? [ -n \" $DODTIME \" ] && sleep \" $DODTIME \" s if running ; then kill -9 $pid [ -n \" $DODTIME \" ] && sleep \" $DODTIME \" s if running ; then echo \"Cannot kill $NAME (pid= $pid )!\" exit 1 fi fi fi rm -f $PIDFILE return 0 } case \" $1 \" in start ) echo -n \"Starting $DESC : \" start-stop-daemon --start --quiet --pidfile $PIDFILE \\ --startas $DAEMON -- $DAEMON_OPTS test -f $PIDFILE || sleep 1 if running ; then echo \" $NAME .\" else echo \" ERROR.\" fi ;; stop ) echo -n \"Stopping $DESC : \" start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE echo \" $NAME .\" ;; force-stop ) echo -n \"Forcefully stopping $DESC : \" force_stop if ! running ; then echo \" $NAME .\" else echo \" ERROR.\" fi ;; #reload) # # If the daemon can reload its config files on the fly # for example by sending it SIGHUP, do it here. # # If the daemon responds to changes in its config file # directly anyway, make this a do-nothing entry. # # echo \"Reloading $DESC configuration files.\" # start-stop-daemon --stop --signal 1 --quiet --pidfile \\ # /var/run/$NAME.pid --exec $DAEMON #;; force-reload ) # # If the \"reload\" option is implemented, move the \"force-reload\" # option to the \"reload\" entry above. If not, \"force-reload\" is # just the same as \"restart\" except that it does nothing if the # daemon isn't already running. # check wether $DAEMON is running. If so, restart start-stop-daemon --stop --test --quiet --pidfile $PIDFILE \\ --startas $DAEMON \\ && $0 restart \\ || exit 0 ;; restart ) echo -n \"Restarting $DESC : \" start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE [ -n \" $DODTIME \" ] && sleep $DODTIME start-stop-daemon --start --quiet --pidfile $PIDFILE \\ --startas $DAEMON -- $DAEMON_OPTS echo \" $NAME .\" ;; status ) echo -n \" $NAME is \" if running ; then echo \"running\" else echo \" not running.\" exit 1 fi $SUPERVISORCTL $DAEMON_OPTS status ;; * ) N = /etc/init.d/ $NAME # echo \"Usage: $N {start|stop|restart|reload|force-reload}\" >&2 echo \"Usage: $N {start|stop|restart|force-reload|status|force-stop}\" > & 2 exit 1 ;; esac exit 0 \u81ea\u542f\u52a8\u811a\u672c\u4fee\u6539\u6ce8\u610f\u4e8b\u9879\uff1a \u9700\u8981\u4fee\u6539DAEMON\u3001SUPERVISORCTL\u4e24\u4e2a\u8def\u5f84\uff0c\u5747\u4f4d\u4e8e/usr/local/bin\u76ee\u5f55\u4e0b\uff0c\u539f\u59cb\u76ee\u5f55\u4e3a/usr/bin\u3002 \u52a1\u5fc5\u786e\u4fddPIDFILE\u7684\u4f4d\u7f6e\u548c/etc/supervisord/supervisord.conf\u4e2d\u7684pidfile\u5bf9\u5e94\u76f8\u540c\u7684\u6587\u4ef6\u3002 \u786e\u4fddLOGDIR\u8bbe\u7f6e\u7684\u76ee\u5f55\u548c/etc/supervisord/supervisord.conf\u4e2d\u7684logfile\u6240\u5728\u7684\u76ee\u5f55\u76f8\u540c\u3002","title":"7 supervisor\u5f00\u673a\u81ea\u542f\u52a8"},{"location":"linux/supervisor-celery/#ubuntu","text":"sudo chmod -R 777 /etc/init.d/supervisord sudo update-rc.d supervisord defaults sudo service --status-all \u79fb\u9664\u670d\u52a1 sudo update-rc.d -f supervisord remove \ufeff","title":"\u8bbe\u7f6e\u811a\u672c\u4e3aUbuntu\u4e2d\u7684\u670d\u52a1"},{"location":"linux/ubuntu-install/","text":"ubuntu\u5b89\u88c5\u8bb0\u5f55 1\u3001\u4e0b\u8f7dubuntu14.04 iso\u955c\u50cf\u6587\u4ef6 2\u3001\u4e0b\u8f7drufus\u8f6f\u4ef6\u5236\u4f5cubuntu\u5b89\u88c5\u5f15\u5bfc\u76d8 \u9700\u8981\u70b9\u51fb\u521b\u5efa\u4e00\u4e2a\u542f\u52a8\u76d8\u4f7f\u7528\u9009\u4e2d\u4e0b\u8f7d\u7684iso\u955c\u50cf\u6587\u4ef6 3\u3001\u5b89\u88c5\u6b65\u9aa4\u5b89\u88c5ubuntu 4\u3001\u5b89\u88c5\u8fdc\u7a0b\u684c\u9762 ubuntu16.04 service\u7248\u5b89\u88c5GUI: sudo apt-get install --no-install-recommends ubuntu-desktop sudo apt-get update sudo apt-get install xfce4 sudo apt-get install xrdp vnc4server echo \"xfce4-session\" >~/.xsession sudo service xrdp restart \u9700\u8981\u5173\u95ed\u5c4f\u4fdd\uff0c\u5c4f\u4fdd\u5360\u7528\u5927\u91cf\u5e26\u5bbd\uff1a setting->setting manager->Screensaver 5\u3001\u5728window\u4e0a\u5f00\u542f\u8fdc\u7a0b\u8fde\u63a5 sudo apt-get install gnome-terminal \u5b89\u88c5\u65b0\u7ec8\u7aef sudo update-alternatives --config x-terminal-emulator \u8bbe\u7f6e\u9ed8\u8ba4\u7ec8\u7aef\u4e3agnome terminal\u6ca1\u6709\u5149\u6807\uff1a\u5728Terminal->Edit->Profile Preferences->Colors->\u53cd\u9009Use colors from system theme\u5373\u53ef \u6587\u4ef6\u7ba1\u7406\u5668\u65e0\u7f29\u7565\u56fe\uff1a\u6267\u884c sudo apt-get install gnome-icon-theme-full tango-icon-theme \u65ad\u5f00\u8fde\u63a5\u518d\u6b21\u91cd\u8fde\u5373\u53ef 6\u3001ufw\u9632\u706b\u5899\u8bbe\u7f6e sudo ufw default deny \u9ed8\u8ba4\u62d2\u7edd\u6240\u6709\u8bf7\u6c42 sudo ufw enable/disable \u5f00\u542f\u6216\u8005\u5173\u95ed\u9632\u706b\u5899 sudo ufw status \u67e5\u770b\u9632\u706b\u5899\u72b6\u6001 sudo ufw allow ssh/22 \u5141\u8bb822\u7aef\u53e3\u53ef\u88ab\u8bbf\u95ee 22\u7aef\u53e3\u4e3assh\u7aef\u53e3 sudo ufw allow 80 \u5141\u8bb880\u7aef\u53e3 \u4e3aapache\u4f7f\u7528 sudo ufw allow from 192 .168.1.107 \u5141\u8bb8\u8be5IP\u7684\u4e3b\u673a\u8bbf\u95ee\u6240\u6709\u7aef\u53e3 sudo ufw reset \u91cd\u7f6e\u6240\u6709\u89c4\u5219 sudo ufw delete allow 3350 \u5220\u9664\u67d0\u6761\u89c4\u5219 sudo ufw allow 3350 sudo ufw allow 3389 windows\u8fdc\u7a0b\u684c\u9762\u9ed8\u8ba4\u7aef\u53e3\u53f7\u4e3a\uff1a3389\uff0c\u4e24\u4e2a\u90fd\u5f00\u542f\u624d\u80fd\u8fde\u63a5\u5230\u8fdc\u7a0b\u684c\u9762 sudo ufw allow 8000 django\u9875\u9762\u6d4b\u8bd5\u4f7f\u7528 7\u3001\u6587\u4ef6\u4e92\u4f20 \u5b89\u88c5putty,\u5728putty\u7684\u5b89\u88c5\u76ee\u5f55\u4e2d\u62f7\u8d1d\u51fapscp.exe\u6587\u4ef6\u81f3C:\\Windows\\System32\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u4efb\u610f\u5730\u65b9\u8fd0\u884cpscp\u547d\u4ee4\u3002 \u5728\u684c\u9762\u6253\u5f00cmd,\u6b32\u4f20\u8f93ss.png\u81f3ubuntu,\u4f7f\u7528\u547d\u4ee4\uff1ahttps://www.alibabacloud.com/help/zh/doc-detail/51798.htm) pscp ss.png dramgo@192.168.1.102:/var/www \u53ea\u6709\u5de6\u659c\u6760\u53ef\u7528 pscp ss.png dramgo@192.168.1.102:Downloads \u5176\u4e2ddramgo\u662fubuntu\u7684\u7528\u6237\u540d\uff0c192.168.1.102\u662fubuntu\u7684IP\u5730\u5740\u3002 \u82e5\u51fa\u73b0unable to open /home/ss.png: permission denied \u5219\u9700\u8981\u5bf9ubuntu\u670d\u52a1\u5668\u4e0a\u7684\u5bf9\u5e94\u6587\u4ef6\u5939\u8fdb\u884c\u8bfb\u5199\u6388\u6743\uff0c \u4f7f\u7528\u547d\u4ee4 sudo chmod -R 777 /home/ \u4fee\u6539\u8be5\u76ee\u5f55\u7684\u6743\u9650\u4e3a\u666e\u901a\u7528\u6237\u53ef\u8bbf\u95ee\u3002 \u4eceubuntu\u670d\u52a1\u5668\u4e0b\u8f7dss.png\u5230window,\u4f7f\u7528\u547d\u4ee4\uff1a pscp dreamgo@192.168.1.102:/var/www/ss.png C:/ss.png \u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u7684/var/www/ss.png \u4e0b\u8f7d\u5230\u672c\u5730C\u76d8ss.png \u63d0\u793aFatal:Network error: COnnection refused \u539f\u56e0\uff1a\u8fdc\u7a0b\u670d\u52a1\u5668\u672a\u5b89\u88c5ssh\u670d\u52a1 sudo apt-get install openssh-server openssh-client 8\u3001\u89e3\u538b tar -xvzf community_images.tar.gz \u89e3\u538b zip -r compressed_filename.zip foldername \u538b\u7f29 unzip dreamgo.zip \u89e3\u538bzip 9\u3001pycharm\u5b89\u88c5\u53ca\u6fc0\u6d3b \u5728windows\u4e0a\u8fd0\u884c\u670d\u52a1\u6fc0\u6d3b\u7a0b\u5e8f\uff0c\u53d1\u9001\u5bf9\u5e94pycharm\u6587\u4ef6\u81f3ubuntu\uff0c\u89e3\u538b\u5e76\u8fdb\u5165bin\u76ee\u5f55\uff0c\u8fd0\u884csudo ./pycharm.sh\u5b89\u88c5pycharm\u3002 \u9009\u62e9\u670d\u52a1\u7aef\u6fc0\u6d3b\uff0c\u8f93\u5165http://192.168.1.x(windows\u5730\u5740)\uff1a\u6fc0\u6d3b\u5bf9\u5e94\u7684\u7aef\u53e3\u53f7 \u4e4b\u540e\u53ef\u4ee5\u7528/usr/local/bin/charm\u6253\u5f00\u8f6f\u4ef6 10\u3001mysql mysql -uroot -proot \u8fdb\u5165mysql\u547d\u4ee4\u884c\u64cd\u4f5c create database dreamgo; \u4e00\u5b9a\u8981\u52a0;\u53f7 11\u3001tab\u65e0\u6cd5\u81ea\u52a8\u8865\u5168 \u5728setting->Window Manager->Keyboard->\u5173\u95ed Switch window for same application \u6216\u8005 \u53f3\u51fb\u5de6\u9762 \u5e94\u7528\u7a0b\u5e8f->\u8bbe\u7f6e->\u7a97\u53e3\u7ba1\u7406\u5668->\u952e\u76d8->\u5207\u6362\u540c\u4e00\u5e94\u7528\u7a0b\u5e8f\u7684\u7a97\u53e3 12\u3001\u6821\u51c6\u6807\u51c6\u65f6\u95f4 sudo ntpdate ntp.ubuntu.com 13\u3001Putty\u4f7f\u7528\u5bc6\u94a5\u767b\u9646 \u5728\u963f\u91cc\u4e91\u4e0a\u751f\u6210\u5bc6\u94a5\u5bf9\uff0c\u7ed1\u5b9a\u5bc6\u94a5\u81f3\u5bf9\u5e94\u4e3b\u673a\u5b9e\u4f8b\u3002\u4e0b\u8f7d\u79c1\u94a5pem\u6587\u4ef6\uff0c\u518d\u901a\u8fc7Putty\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684puttygen.exe\u5c06\u751f\u6210\u7684pem\u6587\u4ef6\u8f6c\u6210ppk\u6587\u4ef6\u3002\u6253\u5f00putty\uff0c\u70b9\u51fbConnection->SSH->Auth->Browse\u9009\u4e2dppk\u6587\u4ef6\uff0c\u70b9\u51fbsession,\u8f93\u5165username@ip_address\u70b9\u51fb\u8fde\u63a5\u5373\u53ef\u94fe\u63a5\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668\u3002 \u4f7f\u7528 SSH \u5bc6\u94a5\u5bf9\u8fde\u63a5 Linux \u5b9e\u4f8b","title":"ubuntu\u5b89\u88c5\u914d\u7f6e\u8bb0\u5f55"},{"location":"linux/ubuntu-install/#ubuntu","text":"","title":"ubuntu\u5b89\u88c5\u8bb0\u5f55"},{"location":"linux/ubuntu-install/#1ubuntu1404-iso","text":"","title":"1\u3001\u4e0b\u8f7dubuntu14.04 iso\u955c\u50cf\u6587\u4ef6"},{"location":"linux/ubuntu-install/#2rufusubuntu","text":"\u9700\u8981\u70b9\u51fb\u521b\u5efa\u4e00\u4e2a\u542f\u52a8\u76d8\u4f7f\u7528\u9009\u4e2d\u4e0b\u8f7d\u7684iso\u955c\u50cf\u6587\u4ef6","title":"2\u3001\u4e0b\u8f7drufus\u8f6f\u4ef6\u5236\u4f5cubuntu\u5b89\u88c5\u5f15\u5bfc\u76d8"},{"location":"linux/ubuntu-install/#3ubuntu","text":"","title":"3\u3001\u5b89\u88c5\u6b65\u9aa4\u5b89\u88c5ubuntu"},{"location":"linux/ubuntu-install/#4","text":"ubuntu16.04 service\u7248\u5b89\u88c5GUI: sudo apt-get install --no-install-recommends ubuntu-desktop sudo apt-get update sudo apt-get install xfce4 sudo apt-get install xrdp vnc4server echo \"xfce4-session\" >~/.xsession sudo service xrdp restart \u9700\u8981\u5173\u95ed\u5c4f\u4fdd\uff0c\u5c4f\u4fdd\u5360\u7528\u5927\u91cf\u5e26\u5bbd\uff1a setting->setting manager->Screensaver","title":"4\u3001\u5b89\u88c5\u8fdc\u7a0b\u684c\u9762"},{"location":"linux/ubuntu-install/#5window","text":"sudo apt-get install gnome-terminal \u5b89\u88c5\u65b0\u7ec8\u7aef sudo update-alternatives --config x-terminal-emulator \u8bbe\u7f6e\u9ed8\u8ba4\u7ec8\u7aef\u4e3agnome terminal\u6ca1\u6709\u5149\u6807\uff1a\u5728Terminal->Edit->Profile Preferences->Colors->\u53cd\u9009Use colors from system theme\u5373\u53ef \u6587\u4ef6\u7ba1\u7406\u5668\u65e0\u7f29\u7565\u56fe\uff1a\u6267\u884c sudo apt-get install gnome-icon-theme-full tango-icon-theme \u65ad\u5f00\u8fde\u63a5\u518d\u6b21\u91cd\u8fde\u5373\u53ef","title":"5\u3001\u5728window\u4e0a\u5f00\u542f\u8fdc\u7a0b\u8fde\u63a5"},{"location":"linux/ubuntu-install/#6ufw","text":"sudo ufw default deny \u9ed8\u8ba4\u62d2\u7edd\u6240\u6709\u8bf7\u6c42 sudo ufw enable/disable \u5f00\u542f\u6216\u8005\u5173\u95ed\u9632\u706b\u5899 sudo ufw status \u67e5\u770b\u9632\u706b\u5899\u72b6\u6001 sudo ufw allow ssh/22 \u5141\u8bb822\u7aef\u53e3\u53ef\u88ab\u8bbf\u95ee 22\u7aef\u53e3\u4e3assh\u7aef\u53e3 sudo ufw allow 80 \u5141\u8bb880\u7aef\u53e3 \u4e3aapache\u4f7f\u7528 sudo ufw allow from 192 .168.1.107 \u5141\u8bb8\u8be5IP\u7684\u4e3b\u673a\u8bbf\u95ee\u6240\u6709\u7aef\u53e3 sudo ufw reset \u91cd\u7f6e\u6240\u6709\u89c4\u5219 sudo ufw delete allow 3350 \u5220\u9664\u67d0\u6761\u89c4\u5219 sudo ufw allow 3350 sudo ufw allow 3389 windows\u8fdc\u7a0b\u684c\u9762\u9ed8\u8ba4\u7aef\u53e3\u53f7\u4e3a\uff1a3389\uff0c\u4e24\u4e2a\u90fd\u5f00\u542f\u624d\u80fd\u8fde\u63a5\u5230\u8fdc\u7a0b\u684c\u9762 sudo ufw allow 8000 django\u9875\u9762\u6d4b\u8bd5\u4f7f\u7528","title":"6\u3001ufw\u9632\u706b\u5899\u8bbe\u7f6e"},{"location":"linux/ubuntu-install/#7","text":"\u5b89\u88c5putty,\u5728putty\u7684\u5b89\u88c5\u76ee\u5f55\u4e2d\u62f7\u8d1d\u51fapscp.exe\u6587\u4ef6\u81f3C:\\Windows\\System32\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u4efb\u610f\u5730\u65b9\u8fd0\u884cpscp\u547d\u4ee4\u3002 \u5728\u684c\u9762\u6253\u5f00cmd,\u6b32\u4f20\u8f93ss.png\u81f3ubuntu,\u4f7f\u7528\u547d\u4ee4\uff1ahttps://www.alibabacloud.com/help/zh/doc-detail/51798.htm) pscp ss.png dramgo@192.168.1.102:/var/www \u53ea\u6709\u5de6\u659c\u6760\u53ef\u7528 pscp ss.png dramgo@192.168.1.102:Downloads \u5176\u4e2ddramgo\u662fubuntu\u7684\u7528\u6237\u540d\uff0c192.168.1.102\u662fubuntu\u7684IP\u5730\u5740\u3002 \u82e5\u51fa\u73b0unable to open /home/ss.png: permission denied \u5219\u9700\u8981\u5bf9ubuntu\u670d\u52a1\u5668\u4e0a\u7684\u5bf9\u5e94\u6587\u4ef6\u5939\u8fdb\u884c\u8bfb\u5199\u6388\u6743\uff0c \u4f7f\u7528\u547d\u4ee4 sudo chmod -R 777 /home/ \u4fee\u6539\u8be5\u76ee\u5f55\u7684\u6743\u9650\u4e3a\u666e\u901a\u7528\u6237\u53ef\u8bbf\u95ee\u3002 \u4eceubuntu\u670d\u52a1\u5668\u4e0b\u8f7dss.png\u5230window,\u4f7f\u7528\u547d\u4ee4\uff1a pscp dreamgo@192.168.1.102:/var/www/ss.png C:/ss.png \u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u7684/var/www/ss.png \u4e0b\u8f7d\u5230\u672c\u5730C\u76d8ss.png \u63d0\u793aFatal:Network error: COnnection refused \u539f\u56e0\uff1a\u8fdc\u7a0b\u670d\u52a1\u5668\u672a\u5b89\u88c5ssh\u670d\u52a1 sudo apt-get install openssh-server openssh-client","title":"7\u3001\u6587\u4ef6\u4e92\u4f20"},{"location":"linux/ubuntu-install/#8","text":"tar -xvzf community_images.tar.gz \u89e3\u538b zip -r compressed_filename.zip foldername \u538b\u7f29 unzip dreamgo.zip \u89e3\u538bzip","title":"8\u3001\u89e3\u538b"},{"location":"linux/ubuntu-install/#9pycharm","text":"\u5728windows\u4e0a\u8fd0\u884c\u670d\u52a1\u6fc0\u6d3b\u7a0b\u5e8f\uff0c\u53d1\u9001\u5bf9\u5e94pycharm\u6587\u4ef6\u81f3ubuntu\uff0c\u89e3\u538b\u5e76\u8fdb\u5165bin\u76ee\u5f55\uff0c\u8fd0\u884csudo ./pycharm.sh\u5b89\u88c5pycharm\u3002 \u9009\u62e9\u670d\u52a1\u7aef\u6fc0\u6d3b\uff0c\u8f93\u5165http://192.168.1.x(windows\u5730\u5740)\uff1a\u6fc0\u6d3b\u5bf9\u5e94\u7684\u7aef\u53e3\u53f7 \u4e4b\u540e\u53ef\u4ee5\u7528/usr/local/bin/charm\u6253\u5f00\u8f6f\u4ef6","title":"9\u3001pycharm\u5b89\u88c5\u53ca\u6fc0\u6d3b"},{"location":"linux/ubuntu-install/#10mysql","text":"mysql -uroot -proot \u8fdb\u5165mysql\u547d\u4ee4\u884c\u64cd\u4f5c create database dreamgo; \u4e00\u5b9a\u8981\u52a0;\u53f7","title":"10\u3001mysql"},{"location":"linux/ubuntu-install/#11tab","text":"\u5728setting->Window Manager->Keyboard->\u5173\u95ed Switch window for same application \u6216\u8005 \u53f3\u51fb\u5de6\u9762 \u5e94\u7528\u7a0b\u5e8f->\u8bbe\u7f6e->\u7a97\u53e3\u7ba1\u7406\u5668->\u952e\u76d8->\u5207\u6362\u540c\u4e00\u5e94\u7528\u7a0b\u5e8f\u7684\u7a97\u53e3","title":"11\u3001tab\u65e0\u6cd5\u81ea\u52a8\u8865\u5168"},{"location":"linux/ubuntu-install/#12","text":"sudo ntpdate ntp.ubuntu.com","title":"12\u3001\u6821\u51c6\u6807\u51c6\u65f6\u95f4"},{"location":"linux/ubuntu-install/#13putty","text":"\u5728\u963f\u91cc\u4e91\u4e0a\u751f\u6210\u5bc6\u94a5\u5bf9\uff0c\u7ed1\u5b9a\u5bc6\u94a5\u81f3\u5bf9\u5e94\u4e3b\u673a\u5b9e\u4f8b\u3002\u4e0b\u8f7d\u79c1\u94a5pem\u6587\u4ef6\uff0c\u518d\u901a\u8fc7Putty\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684puttygen.exe\u5c06\u751f\u6210\u7684pem\u6587\u4ef6\u8f6c\u6210ppk\u6587\u4ef6\u3002\u6253\u5f00putty\uff0c\u70b9\u51fbConnection->SSH->Auth->Browse\u9009\u4e2dppk\u6587\u4ef6\uff0c\u70b9\u51fbsession,\u8f93\u5165username@ip_address\u70b9\u51fb\u8fde\u63a5\u5373\u53ef\u94fe\u63a5\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668\u3002 \u4f7f\u7528 SSH \u5bc6\u94a5\u5bf9\u8fde\u63a5 Linux \u5b9e\u4f8b","title":"13\u3001Putty\u4f7f\u7528\u5bc6\u94a5\u767b\u9646"},{"location":"linux/vm/","text":"\u65e0\u6cd5\u83b7\u5f97 VMCI \u9a71\u52a8\u7a0b\u5e8f\u7684\u7248\u672c: \u53e5\u67c4\u65e0\u6548\u3002 \u65e0\u6cd5\u83b7\u5f97 VMCI \u9a71\u52a8\u7a0b\u5e8f\u7684\u7248\u672c: \u53e5\u67c4\u65e0\u6548\u3002 \u9a71\u52a8\u7a0b\u5e8f\u201cvmci.sys\u201d\u7684\u7248\u672c\u4e0d\u6b63\u786e\u3002\u8bf7\u5c1d\u8bd5\u91cd\u65b0\u5b89\u88c5 VMware Workstation\u3002 \u6a21\u5757\u201cDevicePowerOn\u201d\u542f\u52a8\u5931\u8d25\u3002 \u672a\u80fd\u542f\u52a8\u865a\u62df\u673a\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a \u8fdb\u5165\u865a\u62df\u673a\u5b89\u88c5\u76ee\u5f55\uff0c\u9009\u62e9.vmx\u6587\u4ef6\uff0c\u5c06\u6587\u4ef6\u5185 vmci0.present = \"TRUE\"\u6539\u4e3aFALSE vi /etc/sysconfig/network-scripts/ifcfg-ens33 service network restart","title":"\u865a\u62df\u673a\u5b89\u88c5\u95ee\u9898\u8bb0\u5f55"},{"location":"linux/vm/#vmci","text":"\u65e0\u6cd5\u83b7\u5f97 VMCI \u9a71\u52a8\u7a0b\u5e8f\u7684\u7248\u672c: \u53e5\u67c4\u65e0\u6548\u3002 \u9a71\u52a8\u7a0b\u5e8f\u201cvmci.sys\u201d\u7684\u7248\u672c\u4e0d\u6b63\u786e\u3002\u8bf7\u5c1d\u8bd5\u91cd\u65b0\u5b89\u88c5 VMware Workstation\u3002 \u6a21\u5757\u201cDevicePowerOn\u201d\u542f\u52a8\u5931\u8d25\u3002 \u672a\u80fd\u542f\u52a8\u865a\u62df\u673a\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a \u8fdb\u5165\u865a\u62df\u673a\u5b89\u88c5\u76ee\u5f55\uff0c\u9009\u62e9.vmx\u6587\u4ef6\uff0c\u5c06\u6587\u4ef6\u5185 vmci0.present = \"TRUE\"\u6539\u4e3aFALSE vi /etc/sysconfig/network-scripts/ifcfg-ens33 service network restart","title":"\u65e0\u6cd5\u83b7\u5f97 VMCI \u9a71\u52a8\u7a0b\u5e8f\u7684\u7248\u672c: \u53e5\u67c4\u65e0\u6548\u3002"},{"location":"linux/wrk/","text":"\u5b89\u88c5 cd / opt git clone https : // github . com / wg / wrk . git cd wrk make ln - s / opt / wrk / wrk / usr / local / bin Git\u4e0b\u8f7d\u6162\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u52a0\u901f\u94fe\u63a5 https://github.com.cnpmjs.org/wg/wrk.git \u4f7f\u7528\u8bf4\u660e [root@localhost opt]# wrk Usage: wrk <options> <url> Options: -c, --connections <N> Connections to keep open -d, --duration <T> Duration of test -t, --threads <N> Number of threads to use -s, --script <S> Load Lua script file -H, --header <H> Add header to request --latency Print latency statistics --timeout <T> Socket/request timeout -v, --version Print version details Numeric arguments may include a SI unit (1k, 1M, 1G) Time arguments may include a time unit (2s, 2m, 2h) \u793a\u4f8b\uff1a [root@localhost ~]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8000/client/1 Running 30s test @ http://192.168.11.5:8000/client/1 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 751.06ms 526.96ms 1.95s 59.53% Req/Sec 112.46 107.55 650.00 78.82% Latency Distribution 50% 848.00ms 75% 934.46ms 90% 1.65s 99% 1.82s 17120 requests in 30.09s, 8.72MB read Socket errors: connect 0, read 0, write 0, timeout 860 Requests/sec: 568.93 Transfer/sec: 296.69KB","title":"wrk\u538b\u6d4b\u5de5\u5177"},{"location":"other/FileZilla/","text":"\u5728Server 2008R2 \u4e0a\u4f7f\u7528FileZilla Server0.9.48\u7248\u672c\u914d\u7f6eFtp\u670d\u52a1\u3002 \u5728Edit\u4e2d\u53ef\u4ee5\u914d\u7f6egroups\u548c\u589e\u52a0users,\u5728\u7528\u6237\u548c\u7ec4\u7684\u8bbe\u7f6e\u754c\u9762\u4e2d\u7684Shared folders\u4e3a\u5206\u4eab\u76ee\u5f55\u7684\u8bbe\u7f6e\uff0c\u6ce8\u610f\u8981\u5bf9\u76ee\u5f55\u6743\u9650\u8fdb\u884c\u63a7\u5236\uff0c+subdirs\u4ee3\u8868\u5b50\u76ee\u5f55\u7684\u6743\u9650\uff0c\u4e0d\u52fe\u9009\u5c06\u4e0d\u5177\u6709\u5bf9\u5b50\u76ee\u5f55\u7684\u6743\u9650\u3002 \u540c\u4e00\u7528\u6237\u6216\u7ec4\u5171\u4eab\u4e24\u4e2a\u6ca1\u6709\u7236\u7ea7\u5173\u7cfb\u7684\u6587\u4ef6\u5939\u7684\u65f6\u5019\uff0c\u8981\u7ed9\u975e\u4e3b\u6587\u4ef6\u5939\u7684\u76ee\u5f55\u8bbe\u7f6e\u522b\u540d\uff0c\u683c\u5f0f\u4e3a/alias/,\u5177\u4f53\u5982\u56fe\uff1a \u8bbe\u7f6e\u5b8c\u6210\u540e\u9700\u8981\u8bbe\u7f6eSever\u7684\u9632\u706b\u5899\u5982\u4e0b\uff0c\u70b9\u51fb\u5141\u8bb8\u5141\u8bb8\u53e6\u4e00\u7a0b\u5e8f\uff0c\u8fdb\u5165\u5b89\u88c5\u76ee\u5f55\u9009\u62e9\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\uff0c \u9700\u8981\u8ba9FileZilla Server\u548cFileZilla Server Interface\u4e24\u4e2a\u7a0b\u5e8f\u540c\u65f6\u901a\u8fc7\u9632\u706b\u5899\uff0c\u8fd9\u6837FileZilla Client\u624d\u80fd\u591f\u6210\u529f\u8fde\u63a5\u5230\u670d\u52a1\u5668\u3002","title":"FileZilla Server\u642d\u5efa"},{"location":"other/school-ms/","text":"\u3010\u6559\u52a1\u3011 \u8bfe\u7a0b\u8868\u751f\u6210\uff1a\u751f\u6210\u8349\u7a3f->\u63d0\u4ea4 \u63d0\u4ea4\u6210\u529f or \u6709\u51b2\u7a81->\u4fee\u6539\u8349\u7a3f\uff08\u6309\u51b2\u7a81\u63d0\u793a\uff09->\u518d\u6b21\u63d0\u4ea4 \u51c6\u5b66\u5458\u8d2d\u4e702\u6b21\u76f8\u540c\u8bfe\u7a0b\u65f6\uff0c\u76f4\u63a5\u7d2f\u52a0\u8d2d\u4e70\u8be5\u8bfe\u7a0b\u7684\u8bfe\u7a0b\u65f6\u957f\u3002\ufeff \u8bfe\u8868\u4e00\u65e6\u751f\u6548\u5c31\u4e0d\u53ef\u518d\u88ab\u4fee\u6539\uff0c\u53ea\u53ef\u4f7f\u7528cancel\u63a5\u53e3\u8fdb\u884c\u53d6\u6d88\u8bfe\u7a0b\u3002 \u63d0\u4ea4\u6392\u8bfe\u8349\u7a3f\u65f6\u76f8\u5e94\u589e\u52a0\u73ed\u7ea7\u3001\u73ed\u7ea7\u5185\u5b66\u5458\u7684\u5df2\u6392\u8bfe\u65f6\u3002 \u53d6\u6d88\u6210\u529f\u51cf\u5c11\u5bf9\u5e94\u73ed\u7ea7\u7684\u5df2\u6392\u8bfe\u65f6\u3002 \u8bfe\u7a0b\u8868\u7684\u8bfe\u6d88\u72b6\u6001\u6539\u53d8\u65f6\uff0csave\u65b9\u6cd5\u52a8\u6001\u6539\u53d8\u73ed\u7ea7\u7684\u8bfe\u6d88\u65f6\u95f4\u3002 \u5b66\u5458\u8bfe\u6d88\u72b6\u6001\u6539\u53d8\u65f6\uff0csave\u65b9\u6cd5\u52a8\u6001\u6539\u53d8\u5b66\u5458\u7684\u8bfe\u6d88\uff08\u5df2\u4e0a\uff09\u65f6\u95f4\u3002 \u8d2d\u8bfe\u4e4b\u540e\u8bbe\u7f6e\u5b66\u5458\u8d2d\u8bfe\u65f6\u957f\uff0c\u5b66\u5458\u52a0\u5165\u73ed\u7ea7\u6216\u8005\u79fb\u51fa\u73ed\u7ea7\u65f6\u8bbe\u7f6e\u8ba1\u5212\u65f6\u957f\u3002 \u5206\u73ed\uff1a\u5f85\u5206\u73ed\u5b66\u5458\u3001\u6279\u91cf\u8bbe\u7f6e\u5165\u73ed\u65f6\u95f4\u3001\u5165\u73ed\u65f6\u4fee\u6539\u5df2\u8ba1\u5212\u8bfe\u65f6\u3002 \u73ed\u7ea7\u5b66\u5458\u8981\u6c42\u548c\u5b66\u5458\u76f8\u540c\u7684\u6a21\u578b\u6743\u9650\u3002 \u73ed\u7ea7\u5f00\u59cb\u6392\u8bfe\u4e4b\u524d\uff0c\u4f9d\u6b21\u68c0\u67e5\u5b66\u5458\u7684\u5269\u4f59\u8bfe\u65f6\u662f\u5426\u8db3\u591f\u6392\u8bfe\u3002 \u5165\u73ed\u65f6\u68c0\u6d4b\u5b66\u5458\u7684\u8bfe\u7a0b\u548c\u73ed\u7ea7\u5f00\u8bbe\u7684\u8bfe\u7a0b\u662f\u5426\u76f8\u540c\uff1f \u8bfe\u7a0b\u8868\u521b\u5efa\u7684\u65f6\u5019\u662f\u8349\u7a3f\u72b6\u6001\uff0c\u63d0\u4ea4\u65f6\u8f6c\u5316\u4e3a\u751f\u6548\u72b6\u6001\uff08\u52a0\u5df2\u6392\u8bfe\u65f6\uff09\uff0c\u5220\u9664\u65f6\u8f6c\u6362\u4e3a\u5220\u9664\u72b6\u6001\uff08\u51cf\u5df2\u6392\u8bfe\u65f6\uff09\u3002 \u65b0\u589e\u73ed\u7ea7 \u73ed\u7ea7\u5f00\u8bfe\u8bfe\u7a0b\u603b\u8bfe\u65f6->\u8ba1\u5212\u8bfe\u65f6 \u5b66\u5458\u5165\u73ed\u65f6->\u5df2\u6392\u8bfe\u65f6\u7d2f\u52a0\u4e0a\u73ed\u7ea7\u7684\u5df2\u6392\u8bfe\u65f6 \u5b66\u5458\u79fb\u51fa\u73ed\u7ea7\u65f6->\u5df2\u6392\u8bfe\u65f6\u51cf\u53bb\u73ed\u7ea7\u5df2\u6392\u8bfe\u65f6 \u8bfe\u7a0b\u8868 \u751f\u6548/\u5220\u9664 -> \u73ed\u7ea7\u3001\u5b66\u5458\u5df2\u6392\u8bfe\u65f6 \u662f\u5426\u4e0a\u8bfe->\u73ed\u7ea7\u5df2\u4e0a\u8bfe\u65f6 \u5b66\u5458\u8003\u52e4\u8bfe\u6d88 -> \u5b66\u5458\u5df2\u4e0a\u8bfe\u65f6 \u73ed\u7ea7 \u5df2\u4e0a\uff08\u8bfe\u6d88\uff09 \u5df2\u6392 \u8ba1\u5212 \u6765\u6e90\uff1a \u8bfe\u7a0b\u8868\u5df2\u4e0a\u3001\u672a\u4e0a \u8bfe\u7a0b\u8868\u751f\u6548/\u5220\u9664(\u672a\u4e0a)/\u53d6\u6d88 \u521b\u5efa\u65f6\u6765\u81ea\u8bfe\u7a0b\u603b\u8bfe\u65f6 \u73ed\u7ea7\u5b66\u5458 \u5df2\u4e0a\uff08\u8bfe\u6d88\uff09 \u5df2\u6392 \u8ba1\u5212 \u5145\u503c \u6765\u6e90\uff1a \u73ed\u7ea7\u5b66\u5458\u8bfe\u6d88 \u8bfe\u7a0b\u8868\u751f\u6548/\u5220\u9664\uff08\u672a\u4e0a\uff09/\u53d6\u6d88 \u5165\u73ed\u65f6\u7d2f\u52a0 \u51fa\u73ed\u65f6\u51cf\u5c11 \u6765\u81ea\u8d2d\u8bfe\u8bb0\u5f55","title":"schoolms\u4e2d\u903b\u8f91\u95ee\u9898\u8bb0\u5f55"},{"location":"python/django/apache/","text":"2018-02-06 \u66f4\u65b0\u4f7f\u7528python3.6\u7248\u672c Linux\u90e8\u7f72Apache\u751f\u4ea7\u73af\u5883 Ubuntu 14.04 Apache 2.4.7 Python 3.6 Django 2.0.2 1\u3001ubuntu\u5b89\u88c5python3.6 ubuntu14.04\u7cfb\u7edf\u4f1a\u81ea\u5e26python2.7\u548cpython3.4\uff0c\u8bf7\u4e0d\u8981\u5378\u8f7dpython2.7\uff0c\u4e5f\u4e0d\u8981\u5c06\u65b0\u5b89\u88c5\u7684python3.6\u6307\u5411python/python3\u3002 sudo apt-get install python-software-properties sudo apt-get install software-properties-common # sudo add-apt-repository ppa:deadsnakes/ppa sudo add-apt-repository ppa:jonathonf/python-3.6 sudo apt-get update sudo apt-get install python3.6 python3.6-dev python3.6-venv How to install pip for Python 3.6 on Ubuntu 16.10? 2\u3001\u5b89\u88c5apache2 sudo apt-get update sudo apt-get install apache2 apache2-dev On Linux systems, if Apache has been installed from a package repository, you must have installed the corresponding Apache \"dev\" package as well. 3\u3001\u5b89\u88c5 mod_wsgi \u6a21\u5757 mod_wsgi \u4f9d\u8d56\u4e8e python \u7684 c api ,\u6545\u53ea\u53ef\u652f\u6301\u4e00\u4e2a\u7248\u672c\u7684 python \u3002\u8fd9\u5c31\u8981\u6c42 Django \u9879\u76ee\u4f7f\u7528\u7684\u865a\u62df\u73af\u5883\u4e2d\u7684 python \u7248\u672c\u548c mod_wsgi \u7f16\u8bd1\u4f7f\u7528\u7684 python \u7248\u672c\u5b8c\u5168\u76f8\u540c\uff0c\u4e0d\u7136\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002 pip \u5b89\u88c5 wsgi \u7684\u5e93\u65f6\u4f1a\u81ea\u52a8\u5411 /etc/apache2/mods-available/ \u4e2d\u6dfb\u52a0 wsgi.conf(\u7a7a\u7684\u6ce8\u91ca\u6587\u4ef6)\u548cwsgi.load \uff0c\u624b\u52a8\u5b89\u88c5\u9700\u8981\u624b\u52a8\u65b0\u589e wsgi.load \u6587\u4ef6\u3002 wsgi.load : LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so mod_wsgi.so\u4f4d\u4e8e\u6587\u4ef6\u5939/usr/lib/apache2/modules/\u4e2d \u65b9\u6cd51\uff1apip \u5b89\u88c5 sudo apt-get install libapache2-mod-wsgi-py3 \u8be5\u65b9\u6cd5\u5c06\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u7684 python3 \u5bf9\u5e94\u7684 python \u7248\u672c\u7f16\u8bd1 mod_wsgi , ubuntu14.04 \u7cfb\u7edf\u7684\u9ed8\u8ba4 python3 \u4e3a python3.4 ,\u800c python3.4 \u5728 django2.02 \u540e\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002 ubuntu16.06 \u7cfb\u7edf\u9ed8\u8ba4\u7684 python3 \u4e3a python3.5 \u3002 \u540c\u4e00\u7cfb\u7edf\u6709\u591a\u4e2a python3 ,\u7cfb\u7edf\u9ed8\u8ba4\u53d6\u6700\u4f4e\u7248\u672c\u7684python3\u4ee5\u63d0\u4f9b\u66f4\u597d\u7684\u517c\u5bb9\u6027\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u8ff0\u547d\u4ee4\u6765\u4fee\u6539\u9ed8\u8ba4 python \u548c python3 \u7684\u7248\u672c\uff0c\u4f46\u662f\u5f3a\u70c8\u4e0d\u63a8\u8350\uff0c\u4fee\u6539\u9ed8\u8ba4 python\\python3 \u7248\u672c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002 # \u8bbe\u7f6epython->python3.6 python3->python3.6 sudo cp /usr/bin/python /usr/bin/python_bak sudo rm /usr/bin/python ') sudo ln -s /usr/bin/python3.6 /usr/bin/python sudo cp /usr/bin/python3 /usr/bin/python3_bak sudo rm /usr/bin/python3' ) sudo ln -s /usr/bin/python3.6 /usr/bin/python3 python\u751f\u6210\u7684\u865a\u62df\u73af\u5883\u7248\u672c\u5fc5\u987b\u548c\u7f16\u8bd1\u4f7f\u7528\u7684mod_wsgi\u7248\u672c\u76f8\u540c: \u94fe\u63a51 \u94fe\u63a52 \u94fe\u63a53 \u94fe\u63a54 \u94fe\u63a55 \u65b9\u6cd52\uff08\u63a8\u8350\uff09\uff1a\u5b89\u88c5\u5305\u5b89\u88c5 \u524d\u5f80 github \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u7684 mod_wsgi ,\u4e0a\u4f20\u81f3\u670d\u52a1\u5668\uff0c\u6216\u4f7f\u7528 wget -O mod_wsgi-4.6.4.tar.gz https://codeload.github.com/GrahamDumpleton/mod_wsgi/tar.gz/4.6.4 \u4e0b\u8f7d\uff0c\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u5b89\u88c5\uff1a tar xvfz mod_wsgi-X.Y.tar.gz # \u89e3\u538b cd mod_wsgi-X.Y/ # \u8fdb\u5165\u89e3\u538b\u76ee\u5f55 sudo ./configure --with-python = /usr/bin/python3.6 # \u6307\u5b9apython\u7248\u672c\u7f16\u8bd1mod_wsgi\u6a21\u5757 sudo make # \u7f16\u8bd1 sudo make install # \u5b89\u88c5 sudo nano /etc/apache2/mods-available/wsgi.load # \u65b0\u589ewsgi.load LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so # wsgi.load\u6587\u4ef6\u5199\u5165 \u52a0\u8f7dmod_wsgi sudo a2enmod wsgi # \u5f00\u542fmod_wsgi sudo service apache2 restart # \u91cd\u542fapache2 mod_wsgi \u3010Unpacking The Source Code\u90e8\u5206\u3011 Stack Overflow \u4e2dValentin Kantor\u7684\u56de\u7b54 4\u3001\u5b89\u88c5xsendfile\u6a21\u5757 xsendfile \u4e3b\u8981\u7528\u4e8e\u6587\u4ef6\u4e0a\u4f20\u4e0b\u8f7d\uff0c\u4e0d\u9700\u8981\u8be5\u529f\u80fd\u8bf7\u76f4\u63a5\u8df3\u8fc7\uff0c\u8be5\u6a21\u5757\u4e0e\u7f16\u8bd1 python \u65e0\u5173\uff0c\u53ef\u76f4\u63a5pip\u5b89\u88c5\u3002 sudo apt-get install libapache2-mod-xsendfile sudo a2enmod xsendfile 5\u3001\u521b\u5efa\u865a\u62df\u73af\u5883 \u65b9\u6cd5\u4e00\uff08\u63a8\u8350\uff09\uff1a python3.6 -m venv environment # \u521b\u5efa\u865a\u62df\u73af\u5883 python3.3\u540e\u7248\u672c\u652f\u6301 \u65b9\u6cd5\u4e8c\uff1a sudo apt-get install python3-pip # \u6b64pip\u5bf9\u5e94python3.4 sudo pip3 install virtualenv # \u6b64pip3\u5bf9\u5e94python3.4 virtualenv environment --python = python3.6 # \u6307\u5b9a\u521b\u5efa\u7684\u73af\u5883\u4f7f\u7528python3.6,\u4e0d\u6307\u5b9a\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684python3.4\u800c\u5bfc\u81f4\u65e0\u6cd5\u517c\u5bb9mod_wsgi\u7f16\u8bd1\u7248\u672c\u3002 \u6fc0\u6d3b\\\u5173\u95ed\u865a\u62df\u73af\u5883 source environment/bin/activate \u6fc0\u6d3b\u865a\u62df\u73af\u5883 deactivate \u5173\u95ed\u865a\u62df\u73af\u5883 6\u3001\u914d\u7f6eapache2 sudo chmod -R 777 /etc/apache2 # \u4e3aapache2\u76ee\u5f55\u5f00\u542f\u8bfb\u5199\u6743\u9650,\u9632\u6b62\u8bbe\u7f6e\u4fdd\u5b58\u5931\u8d25 sudo chmod -R /django/demo # \u4e3a\u9879\u76ee\u5f00\u542f\u8bfb\u5199\u6743\u9650,\u65b9\u4fbf\u7f16\u8f91 sudo nano /etc/apache2/site-available/demo.conf # \u7f16\u8f91\u914d\u7f6e\u6587\u4ef6 demo.conf : <VirtualHost *:8000> ServerAdmin ykh@dreamgo.tech ServerName 192.168.1.102 DocumentRoot /django/demo Alias /static /django/demo/static <Directory /django/demo/static> Require all granted </Directory> Alias /static /django/demo/media <Directory /django/demo/media> Require all granted </Directory> WSGIScriptAlias / /django/demo/demo/wsgi.py <Directory /django/demo/demo> <Files wsgi.py> Require all granted </Files> </Directory> WSGIDaemonProcess 192.168.1.102 python-path = /django/demo python-home=/django/demo/environment WSGIProcessGroup 192.168.1.102 </VirtualHost> \u4f7f\u75288000\u7aef\u53e3\u9700\u8981\u914d\u7f6e\uff1a sudo ufw allow 8000 \u9632\u706b\u5899\u5f00\u653e8000\u7aef\u53e3 \u7f16\u8f91 /etc/apache2/ports.conf \u6587\u4ef6,\u65b0\u589eListen 8000,\u4fdd\u5b58\u5e76\u91cd\u542fApache2\u3002 \u4f7f\u7528\u547d\u4ee4\u5f00\u542f\u7ad9\u70b9\uff1a sudo a2enmod wsgi sudo a2ensite 000 -default.conf sudo service apache2 reload sudo service apache2 restart \u7ad9\u70b9\u5173\u95ed\u547d\u4ee4 sudo a2dissite 000 -default.conf Apache\u9ed8\u8ba4\u7684\u65e5\u5fd7\u6587\u4ef6\u4f4d\u4e8e/var/log/apache2/error.log \u914d\u7f6e\u865a\u62df\u4e3b\u673a\uff1aErrorLog /django/dreamgo/error.log Django\u4e2d\u6587\u8bed\u8a00\u9519\u8bef\uff1a \u9519\u8bef\u63d0\u793a\uff1a no translation files found for default language zh_Hans \u89e3\u51b3\u65b9\u6848\uff1a \u5728settings\u4e2d\u5c06LANGUAGE_CODE = 'zh_Hans' \u6539\u4e3aLANGUAGE_CODE = 'zh-hans' \u53ef\u81f3\uff0c\u5bf9\u5e94\u7684\u8bed\u8a00\u4ee3\u7801\u53ef\u81f3django/conf/locale/__init__.py\u4e2d\u67e5\u627e\u3002 7\u3001\u5b89\u88c5mysql5.7 ubuntu16.06 \u8bf7\u76f4\u63a5\u5b89\u88c5\uff0c apt-get install mysql-server ,\u7248\u672c\u4e3a5.7.12\u3002 ubuntu14.04 : \u7531\u4e8e\u4e0d\u540c\u7248\u672c\u7684sql\u65e0\u6cd5\u5907\u4efd\uff0c\u6545\u4f7f\u7528\u548cwindows\u4e0a\u76f8\u540c\u7684mysql5.7,linux apt-get \u5b89\u88c5\u7684\u4e3a5.5.54\u3002 \u6b65\u9aa4\uff1a wget http://dev.mysql.com/get/mysql-apt-config_0.6.0-1_all.deb sudo dpkg -i mysql-apt-config_0.6.0-1_all.deb sudo apt-get update sudo apt-get install mysql-server mysql --version \u51fa\u73b0\u4e2d\u6587\u4e71\u7801\u9519\u8bef CREATE DATABASE <dbname> CHARACTER SET utf8 ; \u8bf7\u5728\u521b\u9020\u6570\u636e\u5e93\u7684\u65f6\u5019\u6307\u5b9a\u6570\u636e\u5e93\u7f16\u7801\u96c6\u4e3autf8\uff1b pip mysqlclient \u65f6\u63d0\u793a mysql_config not found sudo apt-get install libmysqlclient-dev 8\u3001MySql\u7531Windows\u8fc1\u79fb\u81f3Ubuntu Windows\u8fdb\u5165C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\u6253\u5f00cmd: Windows: mysqldump -uroot -proot --all-databases >C: \\a ll_data.sql \u5907\u4efd\u5168\u90e8\u6570\u636e\u5e93 Linux: mysql -uroot -proot \u8fdb\u5165mysql\u547d\u4ee4\u4ea4\u4e92\u7ec8\u7aef create database dreamgo ; \u65b0\u5efa\u6570\u636e\u5e93 drop database dreamgo\uff1b \u5220\u9664\u6570\u636e\u5e93 show databases ; \u5217\u51fa\u6240\u6709\u6570\u636e\u5e93 use database_name ; \u4f7f\u7528\u67d0\u4e2a\u6570\u636e\u5e93 \u901a\u7528\uff1a mysql --version \u67e5\u770bmysql\u7248\u672c mysqldump -uroot -p dreamgo >C: \\d reamgo.sql \u5907\u4efd\u4e00\u4e2a\u6570\u636e\u5e93 \u9700\u8981\u8fc1\u79fb\u7684\u4e24\u4e2a\u6570\u636e\u5e93\u7248\u672c\u76f8\u540c mysqldump -uroot -p database_name <C: \\d reamgo.sql \u6062\u590d\u6570\u636e\u63d0\u793a\u6210\u529f\u4f46\u662f\u65e0\u8868\u88ab\u6dfb\u52a0 mysql -uroot -p database_name <C: \\d reamgo.sql \u6062\u590d\u6570\u636e\u6210\u529f mysql_upgrade -uroot -proot --force \u63d0\u793a\u7cfb\u7edf\u7684session\u8868\u4e0d\u5b58\u5728\u65f6\u6267\u884c 9\u3001Https\u652f\u6301 \u524d\u5f80\u963f\u91cc\u4e91\u6ce8\u518c\u5e76\u4e0b\u8f7d\u514d\u8d39CA\u8bc1\u4e66\uff0c\u8bf7\u6ce8\u610f\u7ed1\u5b9a\u57df\u540d\u65f6\u514d\u8d39\u7684CA\u8bc1\u4e66\u4ec5\u53ef\u7ed1\u5b9a\u5355\u4e2a\u666e\u901a\u57df\u540d\uff0c\u4e0d\u53ef\u7ed1\u5b9a\u901a\u7528\u57df\u540d\uff0c\u65e2\u82e5\u4f7f\u7528\u7684\u57df\u540d\u662f\u4e8c\u7ea7\u57df\u540d\u7684\u8bdd\uff0c\u9700\u8981\u76f4\u63a5\u7ed1\u5b9a\u5230\u4e8c\u7ea7\u57df\u540d\u800c\u4e0d\u662f\u7236\u7ea7\u57df\u540d\u3002 \u5728 /etc/apache2/ \u6587\u4ef6\u5939\u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2acert\u6587\u4ef6\u5939\uff0c\u518d\u5728cert\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a blog_dreamgotech_com \u6587\u4ef6\u5939\uff0c\u62f7\u8d1d\u963f\u91cc\u4e91\u4e0b\u8f7d\u7684\u8bc1\u4e66\u538b\u7f29\u5305\u4e2d\u7684\u56db\u4e2a\u6587\u4ef6\u5230\u5728 /etc/apache2/cert/blog_dreamgotech_com/ \u6587\u4ef6\u5939\u4e0b\u3002 \u5f00\u542f ssl \u4ee5\u53ca rewrite \u6a21\u5757 sudo a2enmod rewrite sudo a2enmod ssl \u786e\u8ba4 ports.conf \u5982\u4e0b\uff1a Listen 80 <IfModule ssl_module> Listen 443 </IfModule> <IfModule mod_gnutls.c> Listen 443 </IfModule> \u914d\u7f6e blog.conf \u6587\u4ef6\u4e3a <VirtualHost *:80> # Http\u91cd\u5b9a\u5411\u81f3Https\u7ad9\u70b9 ServerName blog.dreamgotech.com RewriteEngine On RewriteCond %{HTTP_HOST} ^blog\\.dreamgotech\\.com RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} </VirtualHost> <VirtualHost *:443> ServerName blog.dreamgotech.com ServerAdmin ykh@dreamgo.tech DocumentRoot /django/Blog/ SSLEngine on # \u6dfb\u52a0 SSL \u534f\u8bae\u652f\u6301\u534f\u8bae\uff0c\u53bb\u6389\u4e0d\u5b89\u5168\u7684\u534f\u8bae SSLProtocol all -SSLv2 -SSLv3 # \u4fee\u6539\u52a0\u5bc6\u5957\u4ef6\u5982\u4e0b SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM SSLHonorCipherOrder on # \u8bc1\u4e66\u516c\u94a5\u914d\u7f6e SSLCertificateFile cert/blog_dreamgotech_com/public.pem # \u8bc1\u4e66\u79c1\u94a5\u914d\u7f6e SSLCertificateKeyFile cert/blog_dreamgotech_com/xxxx.key # \u8bc1\u4e66\u94fe\u914d\u7f6e\uff0c\u5982\u679c\u8be5\u5c5e\u6027\u5f00\u5934\u6709 '#'\u5b57\u7b26\uff0c\u8bf7\u5220\u9664\u6389 SSLCertificateChainFile cert/blog_dreamgotech_com/chain.pem Alias /static /django/Blog/static/ <Directory /django/Blog/static/> Require all granted </Directory> Alias /media /django/Blog/media/ <Directory /django/Blog/media/> Require all granted </Directory> WSGIScriptAlias / /django/Blog/Blog/wsgi.py <Directory /django/Blog/Blog> <Files wsgi.py> Require all granted </Files> </Directory> WSGIPassAuthorization On WSGIDaemonProcess blog.dreamgo.tech python-path = /django/Blog python-home=/django/Blog/environment WSGIProcessGroup blog.dreamgo.tech WSGIScriptAlias / /django/Blog/Blog/wsgi.py ErrorLog /django/Blog/log/error.log CustomLog /django/Blog/log/access.log combined </VirtualHost> \u91cd\u542fApache 10\u3001pip\u4fee\u6539\u6e90 window\u4e0a\u4fee\u6539user/Administrator/AppData/Local/pip/pip.ini\u4e3a [global] index-url = http://pypi.douban.com/simple/ [install] trusted-host = pypi.douban.com \u963f\u91cc\u4e91\u7684linux\u4e91\u670d\u52a1\u5668\u81ea\u52a8\u4f1a\u4fee\u6539\u6e90\u4e3a\u963f\u91cc\u4e91\uff0c\u914d\u7f6e\u672c\u5730linux\u4e3b\u673apip\u914d\u7f6e\u6587\u4ef6\uff1a sudo mkdir ~/.pip cd ~/.pip sudo touch pip.conf sudo nano pip.conf \u5185\u5bb9\u4fee\u6539\u5982\u4e0a 11\u3001mysql\u81ea\u52a8\u5907\u4efd sudo apt-get install automysqlbackup \u5b89\u88c5\u65f6\u82e5\u63d0\u793a\u9009\u62e9mail\u65f6\u4f7f\u7528\u5de6\u53f3\u952e\u9009\u4e2dOK\u7ee7\u7eed\u5373\u53ef automysqlbackup\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e/etc/default/automysqlbackup\u6587\u4ef6 sudo nano /etc/default/automysqlbackup \u65b0\u5efa\u5907\u4efd\u76ee\u5f55 \"/django/mysql_backup\" \u5e76\u8d4b\u4e88777\u6743\u9650 automysqlbackup,\u9700\u8981\u914d\u7f6e\u8d26\u6237\u3001\u5bc6\u7801\u3001\u5907\u4efd\u76ee\u5f55\u3001\u5907\u4efd\u9891\u7387\u3001\u5f85\u5907\u4efd\u6570\u636e\u5e93\u540d\u79f0\u5217\u8868: # By default, the Debian version of automysqlbackup will use: # mysqldump --defaults-file=/etc/mysql/debian.cnf # but you might want to overwrite with a specific user & pass. # To do this, simply edit bellow. # Username to access the MySQL server e.g. dbuser USERNAME = \"root\" # Username to access the MySQL server e.g. password PASSWORD = \"root\" # Host name (or IP address) of MySQL server e.g localhost DBHOST = localhost # List of DBNAMES for Daily/Weekly Backup e.g. \"DB1 DB2 DB3\" # Note that it's absolutely normal that the db named \"mysql\" is not in this # list, as it's added later by the script. See the MDBNAMES directives below # in this file (advanced options). # This is ONLY a convenient default, if you don't like it, don't complain # and write your own. # The following is a quick hack that will find the names of the databases by # reading the mysql folder content. Feel free to replace by something else. DBNAMES = \"all\" # Backup directory location e.g /backups # Folders inside this one will be created (daily, weekly, etc.), and the # subfolders will be database names. Note that backups will be owned by # root, with Unix rights 0600. BACKUPDIR = \"/django/mysql_backup\" # Mail setup # What would you like to be mailed to you? # - log : send only log file # - files : send log file and sql files as attachments (see docs) # - stdout : will simply output the log to the screen if run manually. # - quiet : Only send logs if an error occurs to the MAILADDR. MAILCONTENT = \"files\" # Set the maximum allowed email size in k. (4000 = approx 5MB email [see # docs]) MAXATTSIZE = \"4000\" # Email Address to send mail to? (user@domain.com) MAILADDR = \"ykh@dreamgo.tech\" # ============================================================ # === ADVANCED OPTIONS ( Read the doc's below for details )=== #============================================================= # List of DBBNAMES for Monthly Backups. MDBNAMES = \"mysql $DBNAMES\" # List of DBNAMES to EXLUCDE if DBNAMES are set to all (must be in \" quotes) DBEXCLUDE = \"information_schema performance_schema sys mysql\" # Include CREATE DATABASE in backup? CREATE_DATABASE = yes # Separate backup directory and file for each DB? (yes or no) SEPDIR = yes # Which day do you want weekly backups? (1 to 7 where 1 is Monday) DOWEEKLY = 6 # Choose Compression type. (gzip or bzip2) COMP = gzip # Compress communications between backup server and MySQL server? COMMCOMP = no # Additionally keep a copy of the most recent backup in a seperate # directory. LATEST = no # The maximum size of the buffer for client/server communication. e.g. 16MB # (maximum is 1GB) MAX_ALLOWED_PACKET = # For connections to localhost. Sometimes the Unix socket file must be # specified. SOCKET = # Command to run before backups (uncomment to use) #PREBACKUP=\"/etc/mysql-backup-pre\" # Command run after backups (uncomment to use) #POSTBACKUP=\"/etc/mysql-backup-post\" # Backup of stored procedures and routines (comment to remove) ROUTINES = yes \u6267\u884c\u547d\u4ee4 sudo automysqlbackup /etc/default/automysqlbackup \u8fd0\u884c\u914d\u7f6e\u5373\u53ef\u5728\u5bf9\u5e94\u7684\u5907\u4efd\u76ee\u5f55\u770b\u5230\u5907\u4efd\u7684\u6570\u636e\u5e93\u6587\u4ef6 10\u3001\u5e38\u89c1\u95ee\u9898&\u5907\u6ce8 ubuntu\u6587\u4ef6\u64cd\u4f5c sudo touch xxx.etx \u65b0\u5efa\u6587\u4ef6 sudo mkdir xxx \u65b0\u5efa\u76ee\u5f55 sudo mv dir1 dir2 \u526a\u5207\u6587\u4ef6\u5939 sudo rm -rf dir \u5220\u9664\u6587\u4ef6\u5939 sudo cp file dir \u62f7\u8d1d\u6587\u4ef6\u81f3\u67d0\u4e2a\u6587\u4ef6\u5939 Pillow\u5b89\u88c5\u9519\u8bef sudo apt-get install python3-dev sudo apt-get install libjpeg8-dev sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib pip install pillow \u670d\u52a1\u5668500\u9519\u8bef \u5982\u679c\u6709log\u6587\u4ef6\uff0c\u5fc5\u987b\u5bf9log\u6587\u4ef6\u6240\u5728\u7684\u7236\u7ea7\u76ee\u5f55\u6388\u6743\u3002 Nginx VS Apache2 Apache\u9002\u7528\u4e8e\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684\u52a8\u6001\u8bf7\u6c42(\u540e\u7aef)\uff0cNginx\u9002\u5408IO\u5bc6\u96c6\u578b\u7684\u9759\u6001\u6587\u4ef6\u5206\u53d1\u548c\u53cd\u5411\u4ee3\u7406(\u524d\u7aef)\u3002 \u57df\u540d\u91cd\u5b9a\u5411 \u6700\u8fd1\u4e3a\u535a\u5ba2\u66f4\u6362\u4e86\u65b0\u57df\u540d\uff0c\u4e0d\u5e0c\u671b\u4e4b\u524d\u770b\u535a\u5ba2\u7684\u4eba\u627e\u4e0d\u5230\u65b0\u57df\u540d\uff0c\u53c8\u4e0d\u60f3\u90e8\u7f72\u4e24\u4e2a\u7ad9\u70b9\u5bfc\u81f4\u5185\u5bb9\u5272\u88c2\u3002\u4e8e\u662f\u5229\u7528Apache\u7684\u57df\u540d\u91cd\u5b9a\u5411\u529f\u80fd\uff0c\u5c06\u65e7\u7684\u57df\u540d\u8bf7\u6c42\u76f4\u63a5\u91cd\u5b9a\u5411\u81f3\u65b0\u57df\u540d\u4e0b\u3002\u5982\u8bbf\u95ee\u65e7\u57df\u540d blog.dreamgotech.com/article/26/ \u5c06\u88ab\u91cd\u5b9a\u5411\u5230\u65b0\u57df\u540d www.yinkh.top/article/26/ \u3002\u5177\u4f53\u5b9e\u73b0\uff1a <VirtualHost *:80> ServerName xy.example.com RedirectPermanent / http://abc.example.com/ </VirtualHost> \u5bf9\u4e8e\u6211\u7684\u535a\u5ba2\u6765\u8bf4\uff0c\u7531\u4e8e\u6709 http \u548c https \u4e4b\u95f4\u7684\u91cd\u5b9a\u5411\uff0c\u4e8e\u662f\u8bbe\u7f6e\u5982\u4e0b\uff1a <VirtualHost *:80> ServerName blog.dreamgotech.com RedirectPermanent / http://www.yinkh.top/ </VirtualHost> <VirtualHost *:443> ServerName blog.dreamgotech.com ServerAdmin ykh@dreamgo.tech RedirectPermanent / https://www.yinkh.top/ SSLEngine on SSLProtocol all -SSLv2 -SSLv3 SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM SSLHonorCipherOrder on SSLCertificateFile cert/blog_dreamgotech_com/public.pem SSLCertificateKeyFile cert/blog_dreamgotech_com/214278817430753.key SSLCertificateChainFile cert/blog_dreamgotech_com/chain.pem </VirtualHost> 2017-08-30 \u7248\u672c Linux\u90e8\u7f72Apache\u751f\u4ea7\u73af\u5883 Ubuntu 14 .04 Apache 2 .4.7 Python 3 .4 Django 1 .10.6 1\u3001ubuntu\u5b89\u88c5python3.5 ubuntu14.04\u7cfb\u7edf\u4f1a\u81ea\u5e26python2.7\uff0c\u8bf7\u4e0d\u8981\u5378\u8f7d\u5b83\u3002 sudo apt-get install python-software-properties sudo apt-get install software-properties-common sudo add-apt-repository ppa:fkrull/deadsnakes sudo apt-get update sudo apt-get install python3.5 sudo cp /usr/bin/python /usr/bin/python_bak \u5148\u5907\u4efd sudo rm /usr/bin/python \u5220\u9664 sudo ln -s /usr/bin/python3.5 /usr/bin/python \u9ed8\u8ba4\u8bbe\u7f6e\u6210python3.5 2\u3001\u5b89\u88c5apache\u7b49\u5fc5\u8981\u6a21\u5757 sudo apt-get update sudo apt-get install python3-pip apache2 libapache2-mod-wsgi-py3 \u5728python3\u73af\u5883\u4e0b\u4f7f\u7528pip3\u5b89\u88c5\u8f6f\u4ef6\u800c\u4e0d\u662fpip ( python2\u4f7f\u7528 ) sudo pip3 install virtualenv virtualenv dreamgo_env \u65b0\u5efa\u865a\u62df\u73af\u5883 source dreamgo/bin/activate \u6fc0\u6d3b\u865a\u62df\u73af\u5883 deactivate \u5173\u95ed\u865a\u62df\u73af\u5883 sudo apt-get install gedit 3\u3001\u914d\u7f6eapache2 sudo chmod -R 777 /etc/apache2 \u4e3aapache2\u76ee\u5f55\u5f00\u542f\u8bfb\u5199\u6743\u9650,\u9632\u6b62\u8bbe\u7f6e\u4fdd\u5b58\u5931\u8d25 sudo chmod -R /home/dreamgo/dreamgo_official_site \u4e3a\u9879\u76ee\u5f00\u542f\u8bfb\u5199\u6743\u9650,\u65b9\u4fbf\u7f16\u8f91 \u76f4\u63a5\u8fdb\u5165/etc/apache2/site-available/\u6587\u4ef6\u5939\u7f16\u8f91000-default.conf\u6216\u8005\u4f7f\u7528\u547d\u4ee4\uff1a sudo gedit /etc/apache2/site-available/000-default.conf\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6 000-default.conf: <VirtualHost *:8000> ServerAdmin ykh@dreamgo.tech ServerName 192.168.1.102 DocumentRoot /home/dreamgo/dreamgo_official_site Alias /static /home/dreamgo/dreamgo_official_site/static <Directory /home/dreamgo/dreamgo_official_site/static> Require all granted </Directory> <Directory /home/dreamgo/dreamgo_official_site/dreamgo_official_site> <Files wsgi.py> Require all granted </Files> </Directory> WSGIDaemonProcess 192.168.1.102 python-path = /home/dreamgo/dreamgo_official_site python-home=/home/dreamgo/dreamgo_official_site/dreamgo_env WSGIProcessGroup 192.168.1.102 WSGIScriptAlias / /home/dreamgo/dreamgo_official_site/dreamgo_official_site/wsgi.py </VirtualHost> \u4f7f\u75288000\u7aef\u53e3\u9700\u8981\u914d\u7f6e\uff1a sudo ufw allow 8000 \u9632\u706b\u5899\u5f00\u653e8000\u7aef\u53e3 \u7f16\u8f91/etc/apache2/ports.conf\u6587\u4ef6,\u65b0\u589eListen 8000 ,\u4fdd\u5b58\u3002 \u4f7f\u7528\u547d\u4ee4\u5f00\u542f\u7ad9\u70b9\uff1a sudo a2enmod wsgi sudo a2ensite 000 -default.conf sudo service apache2 reload sudo service apache2 restart \u7ad9\u70b9\u5173\u95ed\u547d\u4ee4 sudo a2dissite 000 -default.conf Django\u4e2d\u6587\u8bed\u8a00\u9519\u8bef\uff1a \u9519\u8bef\u63d0\u793a\uff1a no translation files found for default language zh_Hans \u89e3\u51b3\u65b9\u6848\uff1a \u5728settings\u4e2d\u5c06LANGUAGE_CODE = 'zh_Hans' \u6539\u4e3aLANGUAGE_CODE = 'zh-hans' \u53ef\u81f3\uff0c\u5bf9\u5e94\u7684\u8bed\u8a00\u4ee3\u7801\u53ef\u81f3django/conf/locale/__init__.py\u4e2d\u67e5\u627e\u3002 4\u3001MySql\u7531Windows\u8fc1\u79fb\u81f3Ubuntu Windows\u8fdb\u5165C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\u6253\u5f00cmd: Windows: mysqldump -uroot -proot --all-databases >C: \\a ll_data.sql \u5907\u4efd\u5168\u90e8\u6570\u636e\u5e93 Linux: mysql -uroot -proot \u8fdb\u5165mysql\u547d\u4ee4\u4ea4\u4e92\u7ec8\u7aef create database dreamgo ; \u65b0\u5efa\u6570\u636e\u5e93 drop database dreamgo\uff1b \u5220\u9664\u6570\u636e\u5e93 show databases ; \u5217\u51fa\u6240\u6709\u6570\u636e\u5e93 use database_name ; \u4f7f\u7528\u67d0\u4e2a\u6570\u636e\u5e93 \u901a\u7528\uff1a mysql --version \u67e5\u770bmysql\u7248\u672c mysqldump -uroot -p dreamgo >C: \\d reamgo.sql \u5907\u4efd\u4e00\u4e2a\u6570\u636e\u5e93 \u9700\u8981\u8fc1\u79fb\u7684\u4e24\u4e2a\u6570\u636e\u5e93\u7248\u672c\u76f8\u540c mysqldump -uroot -p database_name <C: \\d reamgo.sql \u6062\u590d\u6570\u636e\u63d0\u793a\u6210\u529f\u4f46\u662f\u65e0\u8868\u88ab\u6dfb\u52a0 mysql -uroot -p database_name <C: \\d reamgo.sql \u6062\u590d\u6570\u636e\u6210\u529f mysql_upgrade -uroot -proot --force \u63d0\u793a\u7cfb\u7edf\u7684session\u8868\u4e0d\u5b58\u5728\u65f6\u6267\u884c 5\u3001Apache\u6a21\u5757\u914d\u7f6e pip \u5b89\u88c5wsgi\u7684\u5e93\u65f6\u4f1a\u81ea\u52a8\u5411/etc/apache2/mods-available/\u4e2d\u6dfb\u52a0wsgi.conf\u548cwsgi.load wsgi.load: LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so mod_wsgi.so\u4f4d\u4e8e\u6587\u4ef6\u5939/usr/lib/apache2/modules/\u4e2d Apache\u9ed8\u8ba4\u7684\u65e5\u5fd7\u6587\u4ef6\u4f4d\u4e8e/var/log/apache2/error.log \u914d\u7f6e\u865a\u62df\u4e3b\u673a\uff1aErrorLog /django/dreamgo/error.log \u5b89\u88c5xsendfile,\u7528\u4e8e\u6587\u4ef6\u4e0a\u4f20\u4e0b\u8f7d\u3002 sudo apt-get install libapache2-mod-xsendfile sudo a2enmod xsendfile 6\u3001\u6587\u4ef6\u64cd\u4f5c sudo touch xxx.etx \u65b0\u5efa\u6587\u4ef6 sudo mkdir xxx \u65b0\u5efa\u76ee\u5f55 sudo mv dir1 dir2 \u526a\u5207\u6587\u4ef6\u5939 sudo rm -rf dir \u5220\u9664\u6587\u4ef6\u5939 7\u3001\u914d\u7f6e\u9879\u76ee Pillow\u5b89\u88c5\u9519\u8bef sudo apt-get install python3-dev sudo apt-get install libjpeg8-dev sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib pip install pillow \u5982\u679c\u6709log\u6587\u4ef6\uff0c\u5fc5\u987b\u5bf9log\u6587\u4ef6\u6240\u5728\u7684\u7236\u7ea7\u76ee\u5f55\u6388\u6743\u3002 8\u3001\u5b89\u88c5mysql5.7 \u7531\u4e8e\u4e0d\u540c\u7248\u672c\u7684sql\u65e0\u6cd5\u5907\u4efd\uff0c\u6545\u4f7f\u7528\u548cwindows\u4e0a\u76f8\u540c\u7684mysql5.7,linux apt-get \u5b89\u88c5\u7684\u4e3a5.5.54\u3002 \u6b65\u9aa4\uff1a wget http://dev.mysql.com/get/mysql-apt-config_0.6.0-1_all.deb sudo dpkg -i mysql-apt-config_0.6.0-1_all.deb sudo apt-get update sudo apt-get install mysql-server mysql --version \u51fa\u73b0\u4e2d\u6587\u4e71\u7801\u9519\u8bef CREATE DATABASE <dbname> CHARACTER SET utf8; \u8bf7\u5728\u521b\u9020\u6570\u636e\u5e93\u7684\u65f6\u5019\u6307\u5b9a\u6570\u636e\u5e93\u7f16\u7801\u96c6\u4e3autf8\uff1b pip mysqlclient\u65f6\u63d0\u793a mysql_config not found sudo apt-get install libmysqlclient-dev 9\u3001Https\u652f\u6301 \u524d\u5f80\u963f\u91cc\u4e91\u6ce8\u518c\u5e76\u4e0b\u8f7d\u514d\u8d39CA\u8bc1\u4e66\uff0c\u8bf7\u6ce8\u610f\u7ed1\u5b9a\u57df\u540d\u65f6\u514d\u8d39\u7684CA\u8bc1\u4e66\u4ec5\u53ef\u7ed1\u5b9a\u5355\u4e2a\u666e\u901a\u57df\u540d\uff0c\u4e0d\u53ef\u7ed1\u5b9a\u901a\u7528\u57df\u540d\uff0c\u65e2\u82e5\u4f7f\u7528\u7684\u57df\u540d\u662f\u4e8c\u7ea7\u57df\u540d\u7684\u8bdd\uff0c\u9700\u8981\u76f4\u63a5\u7ed1\u5b9a\u5230\u4e8c\u7ea7\u57df\u540d\u800c\u4e0d\u662f\u7236\u7ea7\u57df\u540d\u3002 \u5728 /etc/apache2/ \u6587\u4ef6\u5939\u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2acert\u6587\u4ef6\u5939\uff0c\u518d\u5728cert\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a blog_dreamgotech_com \u6587\u4ef6\u5939\uff0c\u62f7\u8d1d\u963f\u91cc\u4e91\u4e0b\u8f7d\u7684\u8bc1\u4e66\u538b\u7f29\u5305\u4e2d\u7684\u56db\u4e2a\u6587\u4ef6\u5230\u5728 /etc/apache2/cert/blog_dreamgotech_com/ \u6587\u4ef6\u5939\u4e0b\u3002 \u5f00\u542f ssl \u4ee5\u53ca rewrite \u6a21\u5757 sudo a2enmod rewrite sudo a2enmod ssl \u786e\u8ba4 ports.conf \u5982\u4e0b\uff1a Listen 80 <IfModule ssl_module> Listen 443 </IfModule> <IfModule mod_gnutls.c> Listen 443 </IfModule> \u914d\u7f6e blog.conf \u6587\u4ef6\u4e3a <VirtualHost *:80> # Http\u91cd\u5b9a\u5411\u81f3Https\u7ad9\u70b9 RewriteEngine On RewriteCond %{HTTPS} off RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} </VirtualHost> <VirtualHost *:443> ServerName blog.dreamgotech.com ServerAdmin ykh@dreamgo.tech DocumentRoot /django/Blog/ SSLEngine on # \u6dfb\u52a0 SSL \u534f\u8bae\u652f\u6301\u534f\u8bae\uff0c\u53bb\u6389\u4e0d\u5b89\u5168\u7684\u534f\u8bae SSLProtocol all -SSLv2 -SSLv3 # \u4fee\u6539\u52a0\u5bc6\u5957\u4ef6\u5982\u4e0b SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM SSLHonorCipherOrder on # \u8bc1\u4e66\u516c\u94a5\u914d\u7f6e SSLCertificateFile cert/blog_dreamgotech_com/public.pem # \u8bc1\u4e66\u79c1\u94a5\u914d\u7f6e SSLCertificateKeyFile cert/blog_dreamgotech_com/xxxx.key # \u8bc1\u4e66\u94fe\u914d\u7f6e\uff0c\u5982\u679c\u8be5\u5c5e\u6027\u5f00\u5934\u6709 '#'\u5b57\u7b26\uff0c\u8bf7\u5220\u9664\u6389 SSLCertificateChainFile cert/blog_dreamgotech_com/chain.pem Alias /static /django/Blog/static/ <Directory /django/Blog/static/> Require all granted </Directory> Alias /media /django/Blog/media/ <Directory /django/Blog/media/> Require all granted </Directory> WSGIScriptAlias / /django/Blog/Blog/wsgi.py <Directory /django/Blog/Blog> <Files wsgi.py> Require all granted </Files> </Directory> WSGIPassAuthorization On WSGIDaemonProcess blog.dreamgo.tech python-path = /django/Blog python-home=/django/Blog/environment WSGIProcessGroup blog.dreamgo.tech WSGIScriptAlias / /django/Blog/Blog/wsgi.py ErrorLog /django/Blog/log/error.log CustomLog /django/Blog/log/access.log combined </VirtualHost> \u91cd\u542fApache 10\u3001pip\u4fee\u6539\u6e90 window\u4e0a\u4fee\u6539user/Administrator/AppData/Local/pip/pip.ini\u4e3a [global] index-url = http://pypi.douban.com/simple/ [install] trusted-host = pypi.douban.com \u963f\u91cc\u4e91\u7684linux\u4e91\u670d\u52a1\u5668\u81ea\u52a8\u4f1a\u4fee\u6539\u6e90\u4e3a\u963f\u91cc\u4e91\uff0c\u914d\u7f6e\u672c\u5730linux\u4e3b\u673apip\u914d\u7f6e\u6587\u4ef6\uff1a sudo mkdir ~/.pip cd ~/.pip sudo touch pip.conf sudo gedit pip.conf \u5185\u5bb9\u4fee\u6539\u5982\u4e0a 11\u3001mysql\u81ea\u52a8\u5907\u4efd sudo apt-get install automysqlbackup \u5b89\u88c5\u65f6\u82e5\u63d0\u793a\u9009\u62e9mail\u65f6\u4f7f\u7528\u5de6\u53f3\u952e\u9009\u4e2dOK\u7ee7\u7eed\u5373\u53ef automysqlbackup\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e/etc/default/automysqlbackup\u6587\u4ef6 sudo gedit /etc/default/automysqlbackup \u65b0\u5efa\u5907\u4efd\u76ee\u5f55 \"/django/mysql_backup\" \u5e76\u8d4b\u4e88777\u6743\u9650 automysqlbackup,\u9700\u8981\u914d\u7f6e\u8d26\u6237\u3001\u5bc6\u7801\u3001\u5907\u4efd\u76ee\u5f55\u3001\u5907\u4efd\u9891\u7387\u3001\u5f85\u5907\u4efd\u6570\u636e\u5e93\u540d\u79f0\u5217\u8868: # By default, the Debian version of automysqlbackup will use: # mysqldump --defaults-file=/etc/mysql/debian.cnf # but you might want to overwrite with a specific user & pass. # To do this, simply edit bellow. # Username to access the MySQL server e.g. dbuser USERNAME = \"root\" # Username to access the MySQL server e.g. password PASSWORD = \"root\" # Host name (or IP address) of MySQL server e.g localhost DBHOST = localhost # List of DBNAMES for Daily/Weekly Backup e.g. \"DB1 DB2 DB3\" # Note that it's absolutely normal that the db named \"mysql\" is not in this # list, as it's added later by the script. See the MDBNAMES directives below # in this file (advanced options). # This is ONLY a convenient default, if you don't like it, don't complain # and write your own. # The following is a quick hack that will find the names of the databases by # reading the mysql folder content. Feel free to replace by something else. DBNAMES = \"all\" # Backup directory location e.g /backups # Folders inside this one will be created (daily, weekly, etc.), and the # subfolders will be database names. Note that backups will be owned by # root, with Unix rights 0600. BACKUPDIR = \"/django/mysql_backup\" # Mail setup # What would you like to be mailed to you? # - log : send only log file # - files : send log file and sql files as attachments (see docs) # - stdout : will simply output the log to the screen if run manually. # - quiet : Only send logs if an error occurs to the MAILADDR. MAILCONTENT = \"quiet\" # Set the maximum allowed email size in k. (4000 = approx 5MB email [see # docs]) MAXATTSIZE = \"4000\" # Email Address to send mail to? (user@domain.com) MAILADDR = \"ykh@dreamgo.tech\" # ============================================================ # === ADVANCED OPTIONS ( Read the doc's below for details )=== #============================================================= # List of DBBNAMES for Monthly Backups. MDBNAMES = \"mysql $DBNAMES \" # List of DBNAMES to EXLUCDE if DBNAMES are set to all (must be in \" quotes) DBEXCLUDE = \"information_schema performance_schema sys\" # Include CREATE DATABASE in backup? CREATE_DATABASE = yes # Separate backup directory and file for each DB? (yes or no) SEPDIR = yes # Which day do you want weekly backups? (1 to 7 where 1 is Monday) DOWEEKLY = 6 # Choose Compression type. (gzip or bzip2) COMP = gzip # Compress communications between backup server and MySQL server? COMMCOMP = no # Additionally keep a copy of the most recent backup in a seperate # directory. LATEST = no # The maximum size of the buffer for client/server communication. e.g. 16MB # (maximum is 1GB) MAX_ALLOWED_PACKET = # For connections to localhost. Sometimes the Unix socket file must be # specified. SOCKET = # Command to run before backups (uncomment to use) #PREBACKUP=\"/etc/mysql-backup-pre\" # Command run after backups (uncomment to use) #POSTBACKUP=\"/etc/mysql-backup-post\" # Backup of stored procedures and routines (comment to remove) ROUTINES = yes \u6267\u884c\u547d\u4ee4 sudo automysqlbackup /etc/default/automysqlbackup \u8fd0\u884c\u914d\u7f6e\u5373\u53ef\u5728\u5bf9\u5e94\u7684\u5907\u4efd\u76ee\u5f55\u770b\u5230\u5907\u4efd\u7684\u6570\u636e\u5e93\u6587\u4ef6 12\u3001\u963f\u91cc\u4e91\u4e0axfce4\u4e2d\u6587\u4e71\u7801 \u4e0b\u8f7d\u4e2d\u6587\u652f\u6301\u5305\uff1a sudo apt-get install language-pack-zh-hans \u4e0b\u8f7d\u4e2d\u6587\u5b57\u4f53\uff1a sudo apt-get install fonts-wqy-zenhei","title":"Apache\u90e8\u7f72Django"},{"location":"python/django/apache/#2018-02-06-python36","text":"","title":"2018-02-06 \u66f4\u65b0\u4f7f\u7528python3.6\u7248\u672c"},{"location":"python/django/apache/#linuxapache","text":"Ubuntu 14.04 Apache 2.4.7 Python 3.6 Django 2.0.2","title":"Linux\u90e8\u7f72Apache\u751f\u4ea7\u73af\u5883"},{"location":"python/django/apache/#1ubuntupython36","text":"ubuntu14.04\u7cfb\u7edf\u4f1a\u81ea\u5e26python2.7\u548cpython3.4\uff0c\u8bf7\u4e0d\u8981\u5378\u8f7dpython2.7\uff0c\u4e5f\u4e0d\u8981\u5c06\u65b0\u5b89\u88c5\u7684python3.6\u6307\u5411python/python3\u3002 sudo apt-get install python-software-properties sudo apt-get install software-properties-common # sudo add-apt-repository ppa:deadsnakes/ppa sudo add-apt-repository ppa:jonathonf/python-3.6 sudo apt-get update sudo apt-get install python3.6 python3.6-dev python3.6-venv How to install pip for Python 3.6 on Ubuntu 16.10?","title":"1\u3001ubuntu\u5b89\u88c5python3.6"},{"location":"python/django/apache/#2apache2","text":"sudo apt-get update sudo apt-get install apache2 apache2-dev On Linux systems, if Apache has been installed from a package repository, you must have installed the corresponding Apache \"dev\" package as well.","title":"2\u3001\u5b89\u88c5apache2"},{"location":"python/django/apache/#3mod_wsgi","text":"mod_wsgi \u4f9d\u8d56\u4e8e python \u7684 c api ,\u6545\u53ea\u53ef\u652f\u6301\u4e00\u4e2a\u7248\u672c\u7684 python \u3002\u8fd9\u5c31\u8981\u6c42 Django \u9879\u76ee\u4f7f\u7528\u7684\u865a\u62df\u73af\u5883\u4e2d\u7684 python \u7248\u672c\u548c mod_wsgi \u7f16\u8bd1\u4f7f\u7528\u7684 python \u7248\u672c\u5b8c\u5168\u76f8\u540c\uff0c\u4e0d\u7136\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002 pip \u5b89\u88c5 wsgi \u7684\u5e93\u65f6\u4f1a\u81ea\u52a8\u5411 /etc/apache2/mods-available/ \u4e2d\u6dfb\u52a0 wsgi.conf(\u7a7a\u7684\u6ce8\u91ca\u6587\u4ef6)\u548cwsgi.load \uff0c\u624b\u52a8\u5b89\u88c5\u9700\u8981\u624b\u52a8\u65b0\u589e wsgi.load \u6587\u4ef6\u3002 wsgi.load : LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so mod_wsgi.so\u4f4d\u4e8e\u6587\u4ef6\u5939/usr/lib/apache2/modules/\u4e2d \u65b9\u6cd51\uff1apip \u5b89\u88c5 sudo apt-get install libapache2-mod-wsgi-py3 \u8be5\u65b9\u6cd5\u5c06\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u7684 python3 \u5bf9\u5e94\u7684 python \u7248\u672c\u7f16\u8bd1 mod_wsgi , ubuntu14.04 \u7cfb\u7edf\u7684\u9ed8\u8ba4 python3 \u4e3a python3.4 ,\u800c python3.4 \u5728 django2.02 \u540e\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002 ubuntu16.06 \u7cfb\u7edf\u9ed8\u8ba4\u7684 python3 \u4e3a python3.5 \u3002 \u540c\u4e00\u7cfb\u7edf\u6709\u591a\u4e2a python3 ,\u7cfb\u7edf\u9ed8\u8ba4\u53d6\u6700\u4f4e\u7248\u672c\u7684python3\u4ee5\u63d0\u4f9b\u66f4\u597d\u7684\u517c\u5bb9\u6027\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u8ff0\u547d\u4ee4\u6765\u4fee\u6539\u9ed8\u8ba4 python \u548c python3 \u7684\u7248\u672c\uff0c\u4f46\u662f\u5f3a\u70c8\u4e0d\u63a8\u8350\uff0c\u4fee\u6539\u9ed8\u8ba4 python\\python3 \u7248\u672c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002 # \u8bbe\u7f6epython->python3.6 python3->python3.6 sudo cp /usr/bin/python /usr/bin/python_bak sudo rm /usr/bin/python ') sudo ln -s /usr/bin/python3.6 /usr/bin/python sudo cp /usr/bin/python3 /usr/bin/python3_bak sudo rm /usr/bin/python3' ) sudo ln -s /usr/bin/python3.6 /usr/bin/python3 python\u751f\u6210\u7684\u865a\u62df\u73af\u5883\u7248\u672c\u5fc5\u987b\u548c\u7f16\u8bd1\u4f7f\u7528\u7684mod_wsgi\u7248\u672c\u76f8\u540c: \u94fe\u63a51 \u94fe\u63a52 \u94fe\u63a53 \u94fe\u63a54 \u94fe\u63a55 \u65b9\u6cd52\uff08\u63a8\u8350\uff09\uff1a\u5b89\u88c5\u5305\u5b89\u88c5 \u524d\u5f80 github \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\u7684 mod_wsgi ,\u4e0a\u4f20\u81f3\u670d\u52a1\u5668\uff0c\u6216\u4f7f\u7528 wget -O mod_wsgi-4.6.4.tar.gz https://codeload.github.com/GrahamDumpleton/mod_wsgi/tar.gz/4.6.4 \u4e0b\u8f7d\uff0c\u6267\u884c\u4e0b\u5217\u547d\u4ee4\u5b89\u88c5\uff1a tar xvfz mod_wsgi-X.Y.tar.gz # \u89e3\u538b cd mod_wsgi-X.Y/ # \u8fdb\u5165\u89e3\u538b\u76ee\u5f55 sudo ./configure --with-python = /usr/bin/python3.6 # \u6307\u5b9apython\u7248\u672c\u7f16\u8bd1mod_wsgi\u6a21\u5757 sudo make # \u7f16\u8bd1 sudo make install # \u5b89\u88c5 sudo nano /etc/apache2/mods-available/wsgi.load # \u65b0\u589ewsgi.load LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so # wsgi.load\u6587\u4ef6\u5199\u5165 \u52a0\u8f7dmod_wsgi sudo a2enmod wsgi # \u5f00\u542fmod_wsgi sudo service apache2 restart # \u91cd\u542fapache2 mod_wsgi \u3010Unpacking The Source Code\u90e8\u5206\u3011 Stack Overflow \u4e2dValentin Kantor\u7684\u56de\u7b54","title":"3\u3001\u5b89\u88c5mod_wsgi\u6a21\u5757"},{"location":"python/django/apache/#4xsendfile","text":"xsendfile \u4e3b\u8981\u7528\u4e8e\u6587\u4ef6\u4e0a\u4f20\u4e0b\u8f7d\uff0c\u4e0d\u9700\u8981\u8be5\u529f\u80fd\u8bf7\u76f4\u63a5\u8df3\u8fc7\uff0c\u8be5\u6a21\u5757\u4e0e\u7f16\u8bd1 python \u65e0\u5173\uff0c\u53ef\u76f4\u63a5pip\u5b89\u88c5\u3002 sudo apt-get install libapache2-mod-xsendfile sudo a2enmod xsendfile","title":"4\u3001\u5b89\u88c5xsendfile\u6a21\u5757"},{"location":"python/django/apache/#5","text":"\u65b9\u6cd5\u4e00\uff08\u63a8\u8350\uff09\uff1a python3.6 -m venv environment # \u521b\u5efa\u865a\u62df\u73af\u5883 python3.3\u540e\u7248\u672c\u652f\u6301 \u65b9\u6cd5\u4e8c\uff1a sudo apt-get install python3-pip # \u6b64pip\u5bf9\u5e94python3.4 sudo pip3 install virtualenv # \u6b64pip3\u5bf9\u5e94python3.4 virtualenv environment --python = python3.6 # \u6307\u5b9a\u521b\u5efa\u7684\u73af\u5883\u4f7f\u7528python3.6,\u4e0d\u6307\u5b9a\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684python3.4\u800c\u5bfc\u81f4\u65e0\u6cd5\u517c\u5bb9mod_wsgi\u7f16\u8bd1\u7248\u672c\u3002 \u6fc0\u6d3b\\\u5173\u95ed\u865a\u62df\u73af\u5883 source environment/bin/activate \u6fc0\u6d3b\u865a\u62df\u73af\u5883 deactivate \u5173\u95ed\u865a\u62df\u73af\u5883","title":"5\u3001\u521b\u5efa\u865a\u62df\u73af\u5883"},{"location":"python/django/apache/#6apache2","text":"sudo chmod -R 777 /etc/apache2 # \u4e3aapache2\u76ee\u5f55\u5f00\u542f\u8bfb\u5199\u6743\u9650,\u9632\u6b62\u8bbe\u7f6e\u4fdd\u5b58\u5931\u8d25 sudo chmod -R /django/demo # \u4e3a\u9879\u76ee\u5f00\u542f\u8bfb\u5199\u6743\u9650,\u65b9\u4fbf\u7f16\u8f91 sudo nano /etc/apache2/site-available/demo.conf # \u7f16\u8f91\u914d\u7f6e\u6587\u4ef6 demo.conf : <VirtualHost *:8000> ServerAdmin ykh@dreamgo.tech ServerName 192.168.1.102 DocumentRoot /django/demo Alias /static /django/demo/static <Directory /django/demo/static> Require all granted </Directory> Alias /static /django/demo/media <Directory /django/demo/media> Require all granted </Directory> WSGIScriptAlias / /django/demo/demo/wsgi.py <Directory /django/demo/demo> <Files wsgi.py> Require all granted </Files> </Directory> WSGIDaemonProcess 192.168.1.102 python-path = /django/demo python-home=/django/demo/environment WSGIProcessGroup 192.168.1.102 </VirtualHost> \u4f7f\u75288000\u7aef\u53e3\u9700\u8981\u914d\u7f6e\uff1a sudo ufw allow 8000 \u9632\u706b\u5899\u5f00\u653e8000\u7aef\u53e3 \u7f16\u8f91 /etc/apache2/ports.conf \u6587\u4ef6,\u65b0\u589eListen 8000,\u4fdd\u5b58\u5e76\u91cd\u542fApache2\u3002 \u4f7f\u7528\u547d\u4ee4\u5f00\u542f\u7ad9\u70b9\uff1a sudo a2enmod wsgi sudo a2ensite 000 -default.conf sudo service apache2 reload sudo service apache2 restart \u7ad9\u70b9\u5173\u95ed\u547d\u4ee4 sudo a2dissite 000 -default.conf Apache\u9ed8\u8ba4\u7684\u65e5\u5fd7\u6587\u4ef6\u4f4d\u4e8e/var/log/apache2/error.log \u914d\u7f6e\u865a\u62df\u4e3b\u673a\uff1aErrorLog /django/dreamgo/error.log Django\u4e2d\u6587\u8bed\u8a00\u9519\u8bef\uff1a \u9519\u8bef\u63d0\u793a\uff1a no translation files found for default language zh_Hans \u89e3\u51b3\u65b9\u6848\uff1a \u5728settings\u4e2d\u5c06LANGUAGE_CODE = 'zh_Hans' \u6539\u4e3aLANGUAGE_CODE = 'zh-hans' \u53ef\u81f3\uff0c\u5bf9\u5e94\u7684\u8bed\u8a00\u4ee3\u7801\u53ef\u81f3django/conf/locale/__init__.py\u4e2d\u67e5\u627e\u3002","title":"6\u3001\u914d\u7f6eapache2"},{"location":"python/django/apache/#7mysql57","text":"ubuntu16.06 \u8bf7\u76f4\u63a5\u5b89\u88c5\uff0c apt-get install mysql-server ,\u7248\u672c\u4e3a5.7.12\u3002 ubuntu14.04 : \u7531\u4e8e\u4e0d\u540c\u7248\u672c\u7684sql\u65e0\u6cd5\u5907\u4efd\uff0c\u6545\u4f7f\u7528\u548cwindows\u4e0a\u76f8\u540c\u7684mysql5.7,linux apt-get \u5b89\u88c5\u7684\u4e3a5.5.54\u3002 \u6b65\u9aa4\uff1a wget http://dev.mysql.com/get/mysql-apt-config_0.6.0-1_all.deb sudo dpkg -i mysql-apt-config_0.6.0-1_all.deb sudo apt-get update sudo apt-get install mysql-server mysql --version \u51fa\u73b0\u4e2d\u6587\u4e71\u7801\u9519\u8bef CREATE DATABASE <dbname> CHARACTER SET utf8 ; \u8bf7\u5728\u521b\u9020\u6570\u636e\u5e93\u7684\u65f6\u5019\u6307\u5b9a\u6570\u636e\u5e93\u7f16\u7801\u96c6\u4e3autf8\uff1b pip mysqlclient \u65f6\u63d0\u793a mysql_config not found sudo apt-get install libmysqlclient-dev","title":"7\u3001\u5b89\u88c5mysql5.7"},{"location":"python/django/apache/#8mysqlwindowsubuntu","text":"Windows\u8fdb\u5165C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\u6253\u5f00cmd: Windows: mysqldump -uroot -proot --all-databases >C: \\a ll_data.sql \u5907\u4efd\u5168\u90e8\u6570\u636e\u5e93 Linux: mysql -uroot -proot \u8fdb\u5165mysql\u547d\u4ee4\u4ea4\u4e92\u7ec8\u7aef create database dreamgo ; \u65b0\u5efa\u6570\u636e\u5e93 drop database dreamgo\uff1b \u5220\u9664\u6570\u636e\u5e93 show databases ; \u5217\u51fa\u6240\u6709\u6570\u636e\u5e93 use database_name ; \u4f7f\u7528\u67d0\u4e2a\u6570\u636e\u5e93 \u901a\u7528\uff1a mysql --version \u67e5\u770bmysql\u7248\u672c mysqldump -uroot -p dreamgo >C: \\d reamgo.sql \u5907\u4efd\u4e00\u4e2a\u6570\u636e\u5e93 \u9700\u8981\u8fc1\u79fb\u7684\u4e24\u4e2a\u6570\u636e\u5e93\u7248\u672c\u76f8\u540c mysqldump -uroot -p database_name <C: \\d reamgo.sql \u6062\u590d\u6570\u636e\u63d0\u793a\u6210\u529f\u4f46\u662f\u65e0\u8868\u88ab\u6dfb\u52a0 mysql -uroot -p database_name <C: \\d reamgo.sql \u6062\u590d\u6570\u636e\u6210\u529f mysql_upgrade -uroot -proot --force \u63d0\u793a\u7cfb\u7edf\u7684session\u8868\u4e0d\u5b58\u5728\u65f6\u6267\u884c","title":"8\u3001MySql\u7531Windows\u8fc1\u79fb\u81f3Ubuntu"},{"location":"python/django/apache/#9https","text":"\u524d\u5f80\u963f\u91cc\u4e91\u6ce8\u518c\u5e76\u4e0b\u8f7d\u514d\u8d39CA\u8bc1\u4e66\uff0c\u8bf7\u6ce8\u610f\u7ed1\u5b9a\u57df\u540d\u65f6\u514d\u8d39\u7684CA\u8bc1\u4e66\u4ec5\u53ef\u7ed1\u5b9a\u5355\u4e2a\u666e\u901a\u57df\u540d\uff0c\u4e0d\u53ef\u7ed1\u5b9a\u901a\u7528\u57df\u540d\uff0c\u65e2\u82e5\u4f7f\u7528\u7684\u57df\u540d\u662f\u4e8c\u7ea7\u57df\u540d\u7684\u8bdd\uff0c\u9700\u8981\u76f4\u63a5\u7ed1\u5b9a\u5230\u4e8c\u7ea7\u57df\u540d\u800c\u4e0d\u662f\u7236\u7ea7\u57df\u540d\u3002 \u5728 /etc/apache2/ \u6587\u4ef6\u5939\u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2acert\u6587\u4ef6\u5939\uff0c\u518d\u5728cert\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a blog_dreamgotech_com \u6587\u4ef6\u5939\uff0c\u62f7\u8d1d\u963f\u91cc\u4e91\u4e0b\u8f7d\u7684\u8bc1\u4e66\u538b\u7f29\u5305\u4e2d\u7684\u56db\u4e2a\u6587\u4ef6\u5230\u5728 /etc/apache2/cert/blog_dreamgotech_com/ \u6587\u4ef6\u5939\u4e0b\u3002 \u5f00\u542f ssl \u4ee5\u53ca rewrite \u6a21\u5757 sudo a2enmod rewrite sudo a2enmod ssl \u786e\u8ba4 ports.conf \u5982\u4e0b\uff1a Listen 80 <IfModule ssl_module> Listen 443 </IfModule> <IfModule mod_gnutls.c> Listen 443 </IfModule> \u914d\u7f6e blog.conf \u6587\u4ef6\u4e3a <VirtualHost *:80> # Http\u91cd\u5b9a\u5411\u81f3Https\u7ad9\u70b9 ServerName blog.dreamgotech.com RewriteEngine On RewriteCond %{HTTP_HOST} ^blog\\.dreamgotech\\.com RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} </VirtualHost> <VirtualHost *:443> ServerName blog.dreamgotech.com ServerAdmin ykh@dreamgo.tech DocumentRoot /django/Blog/ SSLEngine on # \u6dfb\u52a0 SSL \u534f\u8bae\u652f\u6301\u534f\u8bae\uff0c\u53bb\u6389\u4e0d\u5b89\u5168\u7684\u534f\u8bae SSLProtocol all -SSLv2 -SSLv3 # \u4fee\u6539\u52a0\u5bc6\u5957\u4ef6\u5982\u4e0b SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM SSLHonorCipherOrder on # \u8bc1\u4e66\u516c\u94a5\u914d\u7f6e SSLCertificateFile cert/blog_dreamgotech_com/public.pem # \u8bc1\u4e66\u79c1\u94a5\u914d\u7f6e SSLCertificateKeyFile cert/blog_dreamgotech_com/xxxx.key # \u8bc1\u4e66\u94fe\u914d\u7f6e\uff0c\u5982\u679c\u8be5\u5c5e\u6027\u5f00\u5934\u6709 '#'\u5b57\u7b26\uff0c\u8bf7\u5220\u9664\u6389 SSLCertificateChainFile cert/blog_dreamgotech_com/chain.pem Alias /static /django/Blog/static/ <Directory /django/Blog/static/> Require all granted </Directory> Alias /media /django/Blog/media/ <Directory /django/Blog/media/> Require all granted </Directory> WSGIScriptAlias / /django/Blog/Blog/wsgi.py <Directory /django/Blog/Blog> <Files wsgi.py> Require all granted </Files> </Directory> WSGIPassAuthorization On WSGIDaemonProcess blog.dreamgo.tech python-path = /django/Blog python-home=/django/Blog/environment WSGIProcessGroup blog.dreamgo.tech WSGIScriptAlias / /django/Blog/Blog/wsgi.py ErrorLog /django/Blog/log/error.log CustomLog /django/Blog/log/access.log combined </VirtualHost> \u91cd\u542fApache","title":"9\u3001Https\u652f\u6301"},{"location":"python/django/apache/#10pip","text":"window\u4e0a\u4fee\u6539user/Administrator/AppData/Local/pip/pip.ini\u4e3a [global] index-url = http://pypi.douban.com/simple/ [install] trusted-host = pypi.douban.com \u963f\u91cc\u4e91\u7684linux\u4e91\u670d\u52a1\u5668\u81ea\u52a8\u4f1a\u4fee\u6539\u6e90\u4e3a\u963f\u91cc\u4e91\uff0c\u914d\u7f6e\u672c\u5730linux\u4e3b\u673apip\u914d\u7f6e\u6587\u4ef6\uff1a sudo mkdir ~/.pip cd ~/.pip sudo touch pip.conf sudo nano pip.conf \u5185\u5bb9\u4fee\u6539\u5982\u4e0a","title":"10\u3001pip\u4fee\u6539\u6e90"},{"location":"python/django/apache/#11mysql","text":"sudo apt-get install automysqlbackup \u5b89\u88c5\u65f6\u82e5\u63d0\u793a\u9009\u62e9mail\u65f6\u4f7f\u7528\u5de6\u53f3\u952e\u9009\u4e2dOK\u7ee7\u7eed\u5373\u53ef automysqlbackup\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e/etc/default/automysqlbackup\u6587\u4ef6 sudo nano /etc/default/automysqlbackup \u65b0\u5efa\u5907\u4efd\u76ee\u5f55 \"/django/mysql_backup\" \u5e76\u8d4b\u4e88777\u6743\u9650 automysqlbackup,\u9700\u8981\u914d\u7f6e\u8d26\u6237\u3001\u5bc6\u7801\u3001\u5907\u4efd\u76ee\u5f55\u3001\u5907\u4efd\u9891\u7387\u3001\u5f85\u5907\u4efd\u6570\u636e\u5e93\u540d\u79f0\u5217\u8868: # By default, the Debian version of automysqlbackup will use: # mysqldump --defaults-file=/etc/mysql/debian.cnf # but you might want to overwrite with a specific user & pass. # To do this, simply edit bellow. # Username to access the MySQL server e.g. dbuser USERNAME = \"root\" # Username to access the MySQL server e.g. password PASSWORD = \"root\" # Host name (or IP address) of MySQL server e.g localhost DBHOST = localhost # List of DBNAMES for Daily/Weekly Backup e.g. \"DB1 DB2 DB3\" # Note that it's absolutely normal that the db named \"mysql\" is not in this # list, as it's added later by the script. See the MDBNAMES directives below # in this file (advanced options). # This is ONLY a convenient default, if you don't like it, don't complain # and write your own. # The following is a quick hack that will find the names of the databases by # reading the mysql folder content. Feel free to replace by something else. DBNAMES = \"all\" # Backup directory location e.g /backups # Folders inside this one will be created (daily, weekly, etc.), and the # subfolders will be database names. Note that backups will be owned by # root, with Unix rights 0600. BACKUPDIR = \"/django/mysql_backup\" # Mail setup # What would you like to be mailed to you? # - log : send only log file # - files : send log file and sql files as attachments (see docs) # - stdout : will simply output the log to the screen if run manually. # - quiet : Only send logs if an error occurs to the MAILADDR. MAILCONTENT = \"files\" # Set the maximum allowed email size in k. (4000 = approx 5MB email [see # docs]) MAXATTSIZE = \"4000\" # Email Address to send mail to? (user@domain.com) MAILADDR = \"ykh@dreamgo.tech\" # ============================================================ # === ADVANCED OPTIONS ( Read the doc's below for details )=== #============================================================= # List of DBBNAMES for Monthly Backups. MDBNAMES = \"mysql $DBNAMES\" # List of DBNAMES to EXLUCDE if DBNAMES are set to all (must be in \" quotes) DBEXCLUDE = \"information_schema performance_schema sys mysql\" # Include CREATE DATABASE in backup? CREATE_DATABASE = yes # Separate backup directory and file for each DB? (yes or no) SEPDIR = yes # Which day do you want weekly backups? (1 to 7 where 1 is Monday) DOWEEKLY = 6 # Choose Compression type. (gzip or bzip2) COMP = gzip # Compress communications between backup server and MySQL server? COMMCOMP = no # Additionally keep a copy of the most recent backup in a seperate # directory. LATEST = no # The maximum size of the buffer for client/server communication. e.g. 16MB # (maximum is 1GB) MAX_ALLOWED_PACKET = # For connections to localhost. Sometimes the Unix socket file must be # specified. SOCKET = # Command to run before backups (uncomment to use) #PREBACKUP=\"/etc/mysql-backup-pre\" # Command run after backups (uncomment to use) #POSTBACKUP=\"/etc/mysql-backup-post\" # Backup of stored procedures and routines (comment to remove) ROUTINES = yes \u6267\u884c\u547d\u4ee4 sudo automysqlbackup /etc/default/automysqlbackup \u8fd0\u884c\u914d\u7f6e\u5373\u53ef\u5728\u5bf9\u5e94\u7684\u5907\u4efd\u76ee\u5f55\u770b\u5230\u5907\u4efd\u7684\u6570\u636e\u5e93\u6587\u4ef6","title":"11\u3001mysql\u81ea\u52a8\u5907\u4efd"},{"location":"python/django/apache/#10","text":"ubuntu\u6587\u4ef6\u64cd\u4f5c sudo touch xxx.etx \u65b0\u5efa\u6587\u4ef6 sudo mkdir xxx \u65b0\u5efa\u76ee\u5f55 sudo mv dir1 dir2 \u526a\u5207\u6587\u4ef6\u5939 sudo rm -rf dir \u5220\u9664\u6587\u4ef6\u5939 sudo cp file dir \u62f7\u8d1d\u6587\u4ef6\u81f3\u67d0\u4e2a\u6587\u4ef6\u5939 Pillow\u5b89\u88c5\u9519\u8bef sudo apt-get install python3-dev sudo apt-get install libjpeg8-dev sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib pip install pillow \u670d\u52a1\u5668500\u9519\u8bef \u5982\u679c\u6709log\u6587\u4ef6\uff0c\u5fc5\u987b\u5bf9log\u6587\u4ef6\u6240\u5728\u7684\u7236\u7ea7\u76ee\u5f55\u6388\u6743\u3002 Nginx VS Apache2 Apache\u9002\u7528\u4e8e\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684\u52a8\u6001\u8bf7\u6c42(\u540e\u7aef)\uff0cNginx\u9002\u5408IO\u5bc6\u96c6\u578b\u7684\u9759\u6001\u6587\u4ef6\u5206\u53d1\u548c\u53cd\u5411\u4ee3\u7406(\u524d\u7aef)\u3002 \u57df\u540d\u91cd\u5b9a\u5411 \u6700\u8fd1\u4e3a\u535a\u5ba2\u66f4\u6362\u4e86\u65b0\u57df\u540d\uff0c\u4e0d\u5e0c\u671b\u4e4b\u524d\u770b\u535a\u5ba2\u7684\u4eba\u627e\u4e0d\u5230\u65b0\u57df\u540d\uff0c\u53c8\u4e0d\u60f3\u90e8\u7f72\u4e24\u4e2a\u7ad9\u70b9\u5bfc\u81f4\u5185\u5bb9\u5272\u88c2\u3002\u4e8e\u662f\u5229\u7528Apache\u7684\u57df\u540d\u91cd\u5b9a\u5411\u529f\u80fd\uff0c\u5c06\u65e7\u7684\u57df\u540d\u8bf7\u6c42\u76f4\u63a5\u91cd\u5b9a\u5411\u81f3\u65b0\u57df\u540d\u4e0b\u3002\u5982\u8bbf\u95ee\u65e7\u57df\u540d blog.dreamgotech.com/article/26/ \u5c06\u88ab\u91cd\u5b9a\u5411\u5230\u65b0\u57df\u540d www.yinkh.top/article/26/ \u3002\u5177\u4f53\u5b9e\u73b0\uff1a <VirtualHost *:80> ServerName xy.example.com RedirectPermanent / http://abc.example.com/ </VirtualHost> \u5bf9\u4e8e\u6211\u7684\u535a\u5ba2\u6765\u8bf4\uff0c\u7531\u4e8e\u6709 http \u548c https \u4e4b\u95f4\u7684\u91cd\u5b9a\u5411\uff0c\u4e8e\u662f\u8bbe\u7f6e\u5982\u4e0b\uff1a <VirtualHost *:80> ServerName blog.dreamgotech.com RedirectPermanent / http://www.yinkh.top/ </VirtualHost> <VirtualHost *:443> ServerName blog.dreamgotech.com ServerAdmin ykh@dreamgo.tech RedirectPermanent / https://www.yinkh.top/ SSLEngine on SSLProtocol all -SSLv2 -SSLv3 SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM SSLHonorCipherOrder on SSLCertificateFile cert/blog_dreamgotech_com/public.pem SSLCertificateKeyFile cert/blog_dreamgotech_com/214278817430753.key SSLCertificateChainFile cert/blog_dreamgotech_com/chain.pem </VirtualHost>","title":"10\u3001\u5e38\u89c1\u95ee\u9898&amp;\u5907\u6ce8"},{"location":"python/django/apache/#2017-08-30","text":"","title":"2017-08-30 \u7248\u672c"},{"location":"python/django/apache/#linuxapache_1","text":"Ubuntu 14 .04 Apache 2 .4.7 Python 3 .4 Django 1 .10.6","title":"Linux\u90e8\u7f72Apache\u751f\u4ea7\u73af\u5883"},{"location":"python/django/apache/#1ubuntupython35","text":"ubuntu14.04\u7cfb\u7edf\u4f1a\u81ea\u5e26python2.7\uff0c\u8bf7\u4e0d\u8981\u5378\u8f7d\u5b83\u3002 sudo apt-get install python-software-properties sudo apt-get install software-properties-common sudo add-apt-repository ppa:fkrull/deadsnakes sudo apt-get update sudo apt-get install python3.5 sudo cp /usr/bin/python /usr/bin/python_bak \u5148\u5907\u4efd sudo rm /usr/bin/python \u5220\u9664 sudo ln -s /usr/bin/python3.5 /usr/bin/python \u9ed8\u8ba4\u8bbe\u7f6e\u6210python3.5","title":"1\u3001ubuntu\u5b89\u88c5python3.5"},{"location":"python/django/apache/#2apache","text":"sudo apt-get update sudo apt-get install python3-pip apache2 libapache2-mod-wsgi-py3 \u5728python3\u73af\u5883\u4e0b\u4f7f\u7528pip3\u5b89\u88c5\u8f6f\u4ef6\u800c\u4e0d\u662fpip ( python2\u4f7f\u7528 ) sudo pip3 install virtualenv virtualenv dreamgo_env \u65b0\u5efa\u865a\u62df\u73af\u5883 source dreamgo/bin/activate \u6fc0\u6d3b\u865a\u62df\u73af\u5883 deactivate \u5173\u95ed\u865a\u62df\u73af\u5883 sudo apt-get install gedit","title":"2\u3001\u5b89\u88c5apache\u7b49\u5fc5\u8981\u6a21\u5757"},{"location":"python/django/apache/#3apache2","text":"sudo chmod -R 777 /etc/apache2 \u4e3aapache2\u76ee\u5f55\u5f00\u542f\u8bfb\u5199\u6743\u9650,\u9632\u6b62\u8bbe\u7f6e\u4fdd\u5b58\u5931\u8d25 sudo chmod -R /home/dreamgo/dreamgo_official_site \u4e3a\u9879\u76ee\u5f00\u542f\u8bfb\u5199\u6743\u9650,\u65b9\u4fbf\u7f16\u8f91 \u76f4\u63a5\u8fdb\u5165/etc/apache2/site-available/\u6587\u4ef6\u5939\u7f16\u8f91000-default.conf\u6216\u8005\u4f7f\u7528\u547d\u4ee4\uff1a sudo gedit /etc/apache2/site-available/000-default.conf\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6 000-default.conf: <VirtualHost *:8000> ServerAdmin ykh@dreamgo.tech ServerName 192.168.1.102 DocumentRoot /home/dreamgo/dreamgo_official_site Alias /static /home/dreamgo/dreamgo_official_site/static <Directory /home/dreamgo/dreamgo_official_site/static> Require all granted </Directory> <Directory /home/dreamgo/dreamgo_official_site/dreamgo_official_site> <Files wsgi.py> Require all granted </Files> </Directory> WSGIDaemonProcess 192.168.1.102 python-path = /home/dreamgo/dreamgo_official_site python-home=/home/dreamgo/dreamgo_official_site/dreamgo_env WSGIProcessGroup 192.168.1.102 WSGIScriptAlias / /home/dreamgo/dreamgo_official_site/dreamgo_official_site/wsgi.py </VirtualHost> \u4f7f\u75288000\u7aef\u53e3\u9700\u8981\u914d\u7f6e\uff1a sudo ufw allow 8000 \u9632\u706b\u5899\u5f00\u653e8000\u7aef\u53e3 \u7f16\u8f91/etc/apache2/ports.conf\u6587\u4ef6,\u65b0\u589eListen 8000 ,\u4fdd\u5b58\u3002 \u4f7f\u7528\u547d\u4ee4\u5f00\u542f\u7ad9\u70b9\uff1a sudo a2enmod wsgi sudo a2ensite 000 -default.conf sudo service apache2 reload sudo service apache2 restart \u7ad9\u70b9\u5173\u95ed\u547d\u4ee4 sudo a2dissite 000 -default.conf Django\u4e2d\u6587\u8bed\u8a00\u9519\u8bef\uff1a \u9519\u8bef\u63d0\u793a\uff1a no translation files found for default language zh_Hans \u89e3\u51b3\u65b9\u6848\uff1a \u5728settings\u4e2d\u5c06LANGUAGE_CODE = 'zh_Hans' \u6539\u4e3aLANGUAGE_CODE = 'zh-hans' \u53ef\u81f3\uff0c\u5bf9\u5e94\u7684\u8bed\u8a00\u4ee3\u7801\u53ef\u81f3django/conf/locale/__init__.py\u4e2d\u67e5\u627e\u3002","title":"3\u3001\u914d\u7f6eapache2"},{"location":"python/django/apache/#4mysqlwindowsubuntu","text":"Windows\u8fdb\u5165C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\u6253\u5f00cmd: Windows: mysqldump -uroot -proot --all-databases >C: \\a ll_data.sql \u5907\u4efd\u5168\u90e8\u6570\u636e\u5e93 Linux: mysql -uroot -proot \u8fdb\u5165mysql\u547d\u4ee4\u4ea4\u4e92\u7ec8\u7aef create database dreamgo ; \u65b0\u5efa\u6570\u636e\u5e93 drop database dreamgo\uff1b \u5220\u9664\u6570\u636e\u5e93 show databases ; \u5217\u51fa\u6240\u6709\u6570\u636e\u5e93 use database_name ; \u4f7f\u7528\u67d0\u4e2a\u6570\u636e\u5e93 \u901a\u7528\uff1a mysql --version \u67e5\u770bmysql\u7248\u672c mysqldump -uroot -p dreamgo >C: \\d reamgo.sql \u5907\u4efd\u4e00\u4e2a\u6570\u636e\u5e93 \u9700\u8981\u8fc1\u79fb\u7684\u4e24\u4e2a\u6570\u636e\u5e93\u7248\u672c\u76f8\u540c mysqldump -uroot -p database_name <C: \\d reamgo.sql \u6062\u590d\u6570\u636e\u63d0\u793a\u6210\u529f\u4f46\u662f\u65e0\u8868\u88ab\u6dfb\u52a0 mysql -uroot -p database_name <C: \\d reamgo.sql \u6062\u590d\u6570\u636e\u6210\u529f mysql_upgrade -uroot -proot --force \u63d0\u793a\u7cfb\u7edf\u7684session\u8868\u4e0d\u5b58\u5728\u65f6\u6267\u884c","title":"4\u3001MySql\u7531Windows\u8fc1\u79fb\u81f3Ubuntu"},{"location":"python/django/apache/#5apache","text":"pip \u5b89\u88c5wsgi\u7684\u5e93\u65f6\u4f1a\u81ea\u52a8\u5411/etc/apache2/mods-available/\u4e2d\u6dfb\u52a0wsgi.conf\u548cwsgi.load wsgi.load: LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so mod_wsgi.so\u4f4d\u4e8e\u6587\u4ef6\u5939/usr/lib/apache2/modules/\u4e2d Apache\u9ed8\u8ba4\u7684\u65e5\u5fd7\u6587\u4ef6\u4f4d\u4e8e/var/log/apache2/error.log \u914d\u7f6e\u865a\u62df\u4e3b\u673a\uff1aErrorLog /django/dreamgo/error.log \u5b89\u88c5xsendfile,\u7528\u4e8e\u6587\u4ef6\u4e0a\u4f20\u4e0b\u8f7d\u3002 sudo apt-get install libapache2-mod-xsendfile sudo a2enmod xsendfile","title":"5\u3001Apache\u6a21\u5757\u914d\u7f6e"},{"location":"python/django/apache/#6","text":"sudo touch xxx.etx \u65b0\u5efa\u6587\u4ef6 sudo mkdir xxx \u65b0\u5efa\u76ee\u5f55 sudo mv dir1 dir2 \u526a\u5207\u6587\u4ef6\u5939 sudo rm -rf dir \u5220\u9664\u6587\u4ef6\u5939","title":"6\u3001\u6587\u4ef6\u64cd\u4f5c"},{"location":"python/django/apache/#7","text":"Pillow\u5b89\u88c5\u9519\u8bef sudo apt-get install python3-dev sudo apt-get install libjpeg8-dev sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib pip install pillow \u5982\u679c\u6709log\u6587\u4ef6\uff0c\u5fc5\u987b\u5bf9log\u6587\u4ef6\u6240\u5728\u7684\u7236\u7ea7\u76ee\u5f55\u6388\u6743\u3002","title":"7\u3001\u914d\u7f6e\u9879\u76ee"},{"location":"python/django/apache/#8mysql57","text":"\u7531\u4e8e\u4e0d\u540c\u7248\u672c\u7684sql\u65e0\u6cd5\u5907\u4efd\uff0c\u6545\u4f7f\u7528\u548cwindows\u4e0a\u76f8\u540c\u7684mysql5.7,linux apt-get \u5b89\u88c5\u7684\u4e3a5.5.54\u3002 \u6b65\u9aa4\uff1a wget http://dev.mysql.com/get/mysql-apt-config_0.6.0-1_all.deb sudo dpkg -i mysql-apt-config_0.6.0-1_all.deb sudo apt-get update sudo apt-get install mysql-server mysql --version \u51fa\u73b0\u4e2d\u6587\u4e71\u7801\u9519\u8bef CREATE DATABASE <dbname> CHARACTER SET utf8; \u8bf7\u5728\u521b\u9020\u6570\u636e\u5e93\u7684\u65f6\u5019\u6307\u5b9a\u6570\u636e\u5e93\u7f16\u7801\u96c6\u4e3autf8\uff1b pip mysqlclient\u65f6\u63d0\u793a mysql_config not found sudo apt-get install libmysqlclient-dev","title":"8\u3001\u5b89\u88c5mysql5.7"},{"location":"python/django/apache/#9https_1","text":"\u524d\u5f80\u963f\u91cc\u4e91\u6ce8\u518c\u5e76\u4e0b\u8f7d\u514d\u8d39CA\u8bc1\u4e66\uff0c\u8bf7\u6ce8\u610f\u7ed1\u5b9a\u57df\u540d\u65f6\u514d\u8d39\u7684CA\u8bc1\u4e66\u4ec5\u53ef\u7ed1\u5b9a\u5355\u4e2a\u666e\u901a\u57df\u540d\uff0c\u4e0d\u53ef\u7ed1\u5b9a\u901a\u7528\u57df\u540d\uff0c\u65e2\u82e5\u4f7f\u7528\u7684\u57df\u540d\u662f\u4e8c\u7ea7\u57df\u540d\u7684\u8bdd\uff0c\u9700\u8981\u76f4\u63a5\u7ed1\u5b9a\u5230\u4e8c\u7ea7\u57df\u540d\u800c\u4e0d\u662f\u7236\u7ea7\u57df\u540d\u3002 \u5728 /etc/apache2/ \u6587\u4ef6\u5939\u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2acert\u6587\u4ef6\u5939\uff0c\u518d\u5728cert\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a blog_dreamgotech_com \u6587\u4ef6\u5939\uff0c\u62f7\u8d1d\u963f\u91cc\u4e91\u4e0b\u8f7d\u7684\u8bc1\u4e66\u538b\u7f29\u5305\u4e2d\u7684\u56db\u4e2a\u6587\u4ef6\u5230\u5728 /etc/apache2/cert/blog_dreamgotech_com/ \u6587\u4ef6\u5939\u4e0b\u3002 \u5f00\u542f ssl \u4ee5\u53ca rewrite \u6a21\u5757 sudo a2enmod rewrite sudo a2enmod ssl \u786e\u8ba4 ports.conf \u5982\u4e0b\uff1a Listen 80 <IfModule ssl_module> Listen 443 </IfModule> <IfModule mod_gnutls.c> Listen 443 </IfModule> \u914d\u7f6e blog.conf \u6587\u4ef6\u4e3a <VirtualHost *:80> # Http\u91cd\u5b9a\u5411\u81f3Https\u7ad9\u70b9 RewriteEngine On RewriteCond %{HTTPS} off RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} </VirtualHost> <VirtualHost *:443> ServerName blog.dreamgotech.com ServerAdmin ykh@dreamgo.tech DocumentRoot /django/Blog/ SSLEngine on # \u6dfb\u52a0 SSL \u534f\u8bae\u652f\u6301\u534f\u8bae\uff0c\u53bb\u6389\u4e0d\u5b89\u5168\u7684\u534f\u8bae SSLProtocol all -SSLv2 -SSLv3 # \u4fee\u6539\u52a0\u5bc6\u5957\u4ef6\u5982\u4e0b SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM SSLHonorCipherOrder on # \u8bc1\u4e66\u516c\u94a5\u914d\u7f6e SSLCertificateFile cert/blog_dreamgotech_com/public.pem # \u8bc1\u4e66\u79c1\u94a5\u914d\u7f6e SSLCertificateKeyFile cert/blog_dreamgotech_com/xxxx.key # \u8bc1\u4e66\u94fe\u914d\u7f6e\uff0c\u5982\u679c\u8be5\u5c5e\u6027\u5f00\u5934\u6709 '#'\u5b57\u7b26\uff0c\u8bf7\u5220\u9664\u6389 SSLCertificateChainFile cert/blog_dreamgotech_com/chain.pem Alias /static /django/Blog/static/ <Directory /django/Blog/static/> Require all granted </Directory> Alias /media /django/Blog/media/ <Directory /django/Blog/media/> Require all granted </Directory> WSGIScriptAlias / /django/Blog/Blog/wsgi.py <Directory /django/Blog/Blog> <Files wsgi.py> Require all granted </Files> </Directory> WSGIPassAuthorization On WSGIDaemonProcess blog.dreamgo.tech python-path = /django/Blog python-home=/django/Blog/environment WSGIProcessGroup blog.dreamgo.tech WSGIScriptAlias / /django/Blog/Blog/wsgi.py ErrorLog /django/Blog/log/error.log CustomLog /django/Blog/log/access.log combined </VirtualHost> \u91cd\u542fApache","title":"9\u3001Https\u652f\u6301"},{"location":"python/django/apache/#10pip_1","text":"window\u4e0a\u4fee\u6539user/Administrator/AppData/Local/pip/pip.ini\u4e3a [global] index-url = http://pypi.douban.com/simple/ [install] trusted-host = pypi.douban.com \u963f\u91cc\u4e91\u7684linux\u4e91\u670d\u52a1\u5668\u81ea\u52a8\u4f1a\u4fee\u6539\u6e90\u4e3a\u963f\u91cc\u4e91\uff0c\u914d\u7f6e\u672c\u5730linux\u4e3b\u673apip\u914d\u7f6e\u6587\u4ef6\uff1a sudo mkdir ~/.pip cd ~/.pip sudo touch pip.conf sudo gedit pip.conf \u5185\u5bb9\u4fee\u6539\u5982\u4e0a","title":"10\u3001pip\u4fee\u6539\u6e90"},{"location":"python/django/apache/#11mysql_1","text":"sudo apt-get install automysqlbackup \u5b89\u88c5\u65f6\u82e5\u63d0\u793a\u9009\u62e9mail\u65f6\u4f7f\u7528\u5de6\u53f3\u952e\u9009\u4e2dOK\u7ee7\u7eed\u5373\u53ef automysqlbackup\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e/etc/default/automysqlbackup\u6587\u4ef6 sudo gedit /etc/default/automysqlbackup \u65b0\u5efa\u5907\u4efd\u76ee\u5f55 \"/django/mysql_backup\" \u5e76\u8d4b\u4e88777\u6743\u9650 automysqlbackup,\u9700\u8981\u914d\u7f6e\u8d26\u6237\u3001\u5bc6\u7801\u3001\u5907\u4efd\u76ee\u5f55\u3001\u5907\u4efd\u9891\u7387\u3001\u5f85\u5907\u4efd\u6570\u636e\u5e93\u540d\u79f0\u5217\u8868: # By default, the Debian version of automysqlbackup will use: # mysqldump --defaults-file=/etc/mysql/debian.cnf # but you might want to overwrite with a specific user & pass. # To do this, simply edit bellow. # Username to access the MySQL server e.g. dbuser USERNAME = \"root\" # Username to access the MySQL server e.g. password PASSWORD = \"root\" # Host name (or IP address) of MySQL server e.g localhost DBHOST = localhost # List of DBNAMES for Daily/Weekly Backup e.g. \"DB1 DB2 DB3\" # Note that it's absolutely normal that the db named \"mysql\" is not in this # list, as it's added later by the script. See the MDBNAMES directives below # in this file (advanced options). # This is ONLY a convenient default, if you don't like it, don't complain # and write your own. # The following is a quick hack that will find the names of the databases by # reading the mysql folder content. Feel free to replace by something else. DBNAMES = \"all\" # Backup directory location e.g /backups # Folders inside this one will be created (daily, weekly, etc.), and the # subfolders will be database names. Note that backups will be owned by # root, with Unix rights 0600. BACKUPDIR = \"/django/mysql_backup\" # Mail setup # What would you like to be mailed to you? # - log : send only log file # - files : send log file and sql files as attachments (see docs) # - stdout : will simply output the log to the screen if run manually. # - quiet : Only send logs if an error occurs to the MAILADDR. MAILCONTENT = \"quiet\" # Set the maximum allowed email size in k. (4000 = approx 5MB email [see # docs]) MAXATTSIZE = \"4000\" # Email Address to send mail to? (user@domain.com) MAILADDR = \"ykh@dreamgo.tech\" # ============================================================ # === ADVANCED OPTIONS ( Read the doc's below for details )=== #============================================================= # List of DBBNAMES for Monthly Backups. MDBNAMES = \"mysql $DBNAMES \" # List of DBNAMES to EXLUCDE if DBNAMES are set to all (must be in \" quotes) DBEXCLUDE = \"information_schema performance_schema sys\" # Include CREATE DATABASE in backup? CREATE_DATABASE = yes # Separate backup directory and file for each DB? (yes or no) SEPDIR = yes # Which day do you want weekly backups? (1 to 7 where 1 is Monday) DOWEEKLY = 6 # Choose Compression type. (gzip or bzip2) COMP = gzip # Compress communications between backup server and MySQL server? COMMCOMP = no # Additionally keep a copy of the most recent backup in a seperate # directory. LATEST = no # The maximum size of the buffer for client/server communication. e.g. 16MB # (maximum is 1GB) MAX_ALLOWED_PACKET = # For connections to localhost. Sometimes the Unix socket file must be # specified. SOCKET = # Command to run before backups (uncomment to use) #PREBACKUP=\"/etc/mysql-backup-pre\" # Command run after backups (uncomment to use) #POSTBACKUP=\"/etc/mysql-backup-post\" # Backup of stored procedures and routines (comment to remove) ROUTINES = yes \u6267\u884c\u547d\u4ee4 sudo automysqlbackup /etc/default/automysqlbackup \u8fd0\u884c\u914d\u7f6e\u5373\u53ef\u5728\u5bf9\u5e94\u7684\u5907\u4efd\u76ee\u5f55\u770b\u5230\u5907\u4efd\u7684\u6570\u636e\u5e93\u6587\u4ef6","title":"11\u3001mysql\u81ea\u52a8\u5907\u4efd"},{"location":"python/django/apache/#12xfce4","text":"\u4e0b\u8f7d\u4e2d\u6587\u652f\u6301\u5305\uff1a sudo apt-get install language-pack-zh-hans \u4e0b\u8f7d\u4e2d\u6587\u5b57\u4f53\uff1a sudo apt-get install fonts-wqy-zenhei","title":"12\u3001\u963f\u91cc\u4e91\u4e0axfce4\u4e2d\u6587\u4e71\u7801"},{"location":"python/django/django-TinyMCE/","text":"\u4f7f\u7528\u7684\u7248\u672c\uff1aDjango 1.10.2 TinyMCE 4.4.3 \u6b65\u9aa41 \u524d\u5f80TinyMCE\u5b98\u7f51\u4e0b\u8f7dTinyMCE_4.4.3\uff0c\u66f4\u65e9\u4e4b\u524d\u7684\u7248\u672c\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d\u3002 \u6b65\u9aa42 \u6253\u5f00tinymce_4.4.3/tinymce/js\u6587\u4ef6\u5939\uff0c\u62f7\u8d1d\u5176\u4e2d\u7684tinymce\u6587\u4ef6\u5939\u81f3Django\u9879\u76ee\u7684STATIC_ROOT\u5bf9\u5e94\u8def\u5f84\u7684js\u6587\u4ef6\u5939\u4e0b\uff0c\u76ee\u5f55\u7ed3\u6784\u4e3aSTATIC_ROOT/js/tinymce\u3002 \u6b65\u9aa43 \u5728STATIC_ROOT/js/\u6587\u4ef6\u5939\u4e0b\u65b0\u5efatextareas.js\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a tinymce . init ({ selector : 'textarea' , height : 300 , theme : 'modern' , menubar : false , plugins : [ 'advlist autolink autosave sh4tinymce link image lists charmap print preview hr anchor pagebreak spellchecker' , 'searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking' , 'save table contextmenu directionality emoticons template paste textcolor' , 'codesample autoresize table' ], toolbar1 : \"undo redo | bold italic codesample sh4tinymce underline | alignleft aligncenter alignright alignjustify \" + \"| table link image media | print preview | forecolor backcolor emoticons | bullist numlist outdent indent \" + \"| styleselect formatselect fontselect fontsizeselect\" , language : 'zh_CN' , content_css : [ '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i' , '//www.tinymce.com/css/codepen.min.css' ] }); \u5176\u4e2dselector\u5bf9\u5e94\u7684\u662f\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u5728\u9875\u9762\u4e2d\u5bf9\u5e94\u7684\u4f5c\u7528\u57df height\u548cweight\u5206\u522b\u5bf9\u5e94\u7684\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u7f16\u8f91\u6846\u7684\u9ad8\u548c\u5bbd\u6b64\u5904\u5bbd\u5ea6\u672a\u8bbe\u7f6e\u5219\u548c\u754c\u9762\u540c\u5bbd theme\u4e3a\u7f16\u8f91\u5668\u4e3b\u9898\uff0c\u53ef\u5728tinymce/themes\u6587\u4ef6\u5939\u4e0b\u770b\u5230\u6709\u4e09\u4e2a\u5b50\u6587\u4ef6\u5939\uff0c\u5206\u522b\u662fadvanced\u3001inlite\u3001modern\uff0c\u5bf9\u5e94\u7684\u6587\u4ef6\u540d\u5373\u53ef\u4f5c\u4e3atheme\u7684\u58f0\u660e\u9009\u9879\u3002 menubar\u8bbe\u7f6e\u4e3atrue\u65f6\u663e\u793a\u6700\u4e0a\u65b9\u9ed8\u8ba4\u83dc\u5355\u680f\uff0c\u4e3afalse\u5219\u4e0d\u663e\u793a\u3002 plugins\u4e3a\u8be5\u6b64\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u4f7f\u7528\u5230\u7684\u63d2\u4ef6\uff0c\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u9002\u5408\u81ea\u5df1\u9700\u6c42\u7684\uff0c\u5bf9\u5e94\u7684plugins\u4f4d\u4e8etinymce/plugins\u6587\u4ef6\u5939\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u9700\u8981\u7684\u529f\u80fd\u81ea\u5b9a\u4e49plugins\u5e76\u52a0\u5165\u5230\u58f0\u660e\u5217\u8868\u4e2d\u5373\u53ef\u751f\u6548\uff1b\u6240\u6709\u9884\u8bbe\u7684plugin\u5747\u4f7f\u7528\u538b\u7f29\u8fc7\u7684.min.js\u6587\u4ef6\u7c7b\u578b\uff0c\u53ef\u4f7f\u7528\u5728\u7ebf\u4ee3\u7801\u683c\u5f0f\u5316 \u5de5\u5177\u67e5\u770b\u3002\u5176\u4e2dimage\u3001media\u4e0d\u652f\u6301\u5728\u7ebf\u4e0a\u4f20\u529f\u80fd\uff0c\u53ea\u53ef\u4ee5\u63d2\u5165\u56fe\u7247\u5730\u5740\u6765\u5b9e\u73b0\u63d2\u5165\u56fe\u7247\u3001\u89c6\u9891\u529f\u80fd\uff0c\u7b2c\u4e09\u65b9\u56fe\u7247\u4e0a\u4f20\u53ef\u4ee5\u8003\u8651\u4e03\u725b\u4e91\u548cuploadcare\uff0c\u4e03\u725b\u4e91\u5e76\u6ca1\u6709\u627e\u5230\u53ef\u4ee5\u4f7f\u7528\u73b0\u6210\u7684plugin\u4f46\u662f\u5176\u63d0\u4f9b\u7684\u514d\u8d39\u5b58\u50a8\u7a7a\u95f4\u5927\uff0cuploadcare\u53ef\u4ee5\u81f3\u6b64\u5904\u4e0b\u8f7dplugins(\u4eb2\u6d4b\u53ef\u7528)\u4f46\u514d\u8d39\u5b58\u50a8\u5bb9\u91cf\u53ea\u6709500M\uff1bsimplecode\u4e3a\u63d2\u5165\u4ee3\u7801\u533a\u5757\u7684plugin\uff1bautosize\u652f\u6301\u52a8\u6001\u7684\u6839\u636e\u5f53\u524d\u7f16\u8f91\u7684\u6587\u672c\u5185\u5bb9\u591a\u5c11\u8c03\u6574\u7f16\u8f91\u6846\u7684\u5927\u5c0f;autosave\u53ef\u4ee5\u76f4\u63a5\u5728\u7f16\u8f91\u6846\u4e2d\u6309\u4e0bctrl+s\u6765\u8fdb\u884c\u4fdd\u5b58\u3002 toolbar\u4e3a\u5de5\u5177\u6761\u751f\u547d\uff0c\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a\u5de5\u5177\u6761\uff0c\u53ea\u6709\u5728\u5de5\u5177\u6761\u4e2d\u7684plugins\u624d\u80fd\u770b\u5230\u5feb\u6377\u65b9\u5f0f\u56fe\u7247\uff0c\u9700\u8981\u6ce8\u610f | \u7b26\u53f7\u7684\u4e24\u8fb9\u9700\u8981\u7559\u51fa\u7a7a\u683c\u3002 language\u4e3a\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u7684\u63d0\u793a\u4f7f\u7528\u8bed\u8a00\uff0c\u53ef\u81f3\u6b64\u5904\u4e0b\u8f7d\u5bf9\u5e94\u7684js\u6587\u4ef6\u540e\u62f7\u8d1d\u81f3tinymce/langs/\u6587\u4ef6\u5939\u4e0b\u5e76\u58f0\u660e\u5373\u53ef\u3002 \u6b65\u9aa44 \u5728app\u76ee\u5f55\u4e0b\u7684admin.py\u6587\u4ef6\u4e2d\u63d2\u5165\u5982\u4e0b\u4ee3\u7801\u5373\u53ef\u5b9e\u73b0model\u4e2dTextField \u5bf9\u5e94\u7684\u5b57\u6bb5\u4f7f\u7528\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u6765\u8fdb\u884c\u7f16\u8f91\u7684\u76ee\u7684\u3002 class ArticleAdmin ( admin . ModelAdmin ): . . . class Media : js = ( '/STATIC_ROOT/js/tinymce/tinymce.min.js' , '/STATIC_ROOT/js/textareas.js' , ) \u6b65\u9aa45 \u9884\u89c8\u56fe\uff1a","title":"Django Admin\u4e2d\u96c6\u6210TinyMCE"},{"location":"python/django/django-TinyMCE/#1","text":"\u524d\u5f80TinyMCE\u5b98\u7f51\u4e0b\u8f7dTinyMCE_4.4.3\uff0c\u66f4\u65e9\u4e4b\u524d\u7684\u7248\u672c\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d\u3002","title":"\u6b65\u9aa41"},{"location":"python/django/django-TinyMCE/#2","text":"\u6253\u5f00tinymce_4.4.3/tinymce/js\u6587\u4ef6\u5939\uff0c\u62f7\u8d1d\u5176\u4e2d\u7684tinymce\u6587\u4ef6\u5939\u81f3Django\u9879\u76ee\u7684STATIC_ROOT\u5bf9\u5e94\u8def\u5f84\u7684js\u6587\u4ef6\u5939\u4e0b\uff0c\u76ee\u5f55\u7ed3\u6784\u4e3aSTATIC_ROOT/js/tinymce\u3002","title":"\u6b65\u9aa42"},{"location":"python/django/django-TinyMCE/#3","text":"\u5728STATIC_ROOT/js/\u6587\u4ef6\u5939\u4e0b\u65b0\u5efatextareas.js\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a tinymce . init ({ selector : 'textarea' , height : 300 , theme : 'modern' , menubar : false , plugins : [ 'advlist autolink autosave sh4tinymce link image lists charmap print preview hr anchor pagebreak spellchecker' , 'searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking' , 'save table contextmenu directionality emoticons template paste textcolor' , 'codesample autoresize table' ], toolbar1 : \"undo redo | bold italic codesample sh4tinymce underline | alignleft aligncenter alignright alignjustify \" + \"| table link image media | print preview | forecolor backcolor emoticons | bullist numlist outdent indent \" + \"| styleselect formatselect fontselect fontsizeselect\" , language : 'zh_CN' , content_css : [ '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i' , '//www.tinymce.com/css/codepen.min.css' ] }); \u5176\u4e2dselector\u5bf9\u5e94\u7684\u662f\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u5728\u9875\u9762\u4e2d\u5bf9\u5e94\u7684\u4f5c\u7528\u57df height\u548cweight\u5206\u522b\u5bf9\u5e94\u7684\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u7f16\u8f91\u6846\u7684\u9ad8\u548c\u5bbd\u6b64\u5904\u5bbd\u5ea6\u672a\u8bbe\u7f6e\u5219\u548c\u754c\u9762\u540c\u5bbd theme\u4e3a\u7f16\u8f91\u5668\u4e3b\u9898\uff0c\u53ef\u5728tinymce/themes\u6587\u4ef6\u5939\u4e0b\u770b\u5230\u6709\u4e09\u4e2a\u5b50\u6587\u4ef6\u5939\uff0c\u5206\u522b\u662fadvanced\u3001inlite\u3001modern\uff0c\u5bf9\u5e94\u7684\u6587\u4ef6\u540d\u5373\u53ef\u4f5c\u4e3atheme\u7684\u58f0\u660e\u9009\u9879\u3002 menubar\u8bbe\u7f6e\u4e3atrue\u65f6\u663e\u793a\u6700\u4e0a\u65b9\u9ed8\u8ba4\u83dc\u5355\u680f\uff0c\u4e3afalse\u5219\u4e0d\u663e\u793a\u3002 plugins\u4e3a\u8be5\u6b64\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u4f7f\u7528\u5230\u7684\u63d2\u4ef6\uff0c\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u9002\u5408\u81ea\u5df1\u9700\u6c42\u7684\uff0c\u5bf9\u5e94\u7684plugins\u4f4d\u4e8etinymce/plugins\u6587\u4ef6\u5939\u4e0b\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u9700\u8981\u7684\u529f\u80fd\u81ea\u5b9a\u4e49plugins\u5e76\u52a0\u5165\u5230\u58f0\u660e\u5217\u8868\u4e2d\u5373\u53ef\u751f\u6548\uff1b\u6240\u6709\u9884\u8bbe\u7684plugin\u5747\u4f7f\u7528\u538b\u7f29\u8fc7\u7684.min.js\u6587\u4ef6\u7c7b\u578b\uff0c\u53ef\u4f7f\u7528\u5728\u7ebf\u4ee3\u7801\u683c\u5f0f\u5316 \u5de5\u5177\u67e5\u770b\u3002\u5176\u4e2dimage\u3001media\u4e0d\u652f\u6301\u5728\u7ebf\u4e0a\u4f20\u529f\u80fd\uff0c\u53ea\u53ef\u4ee5\u63d2\u5165\u56fe\u7247\u5730\u5740\u6765\u5b9e\u73b0\u63d2\u5165\u56fe\u7247\u3001\u89c6\u9891\u529f\u80fd\uff0c\u7b2c\u4e09\u65b9\u56fe\u7247\u4e0a\u4f20\u53ef\u4ee5\u8003\u8651\u4e03\u725b\u4e91\u548cuploadcare\uff0c\u4e03\u725b\u4e91\u5e76\u6ca1\u6709\u627e\u5230\u53ef\u4ee5\u4f7f\u7528\u73b0\u6210\u7684plugin\u4f46\u662f\u5176\u63d0\u4f9b\u7684\u514d\u8d39\u5b58\u50a8\u7a7a\u95f4\u5927\uff0cuploadcare\u53ef\u4ee5\u81f3\u6b64\u5904\u4e0b\u8f7dplugins(\u4eb2\u6d4b\u53ef\u7528)\u4f46\u514d\u8d39\u5b58\u50a8\u5bb9\u91cf\u53ea\u6709500M\uff1bsimplecode\u4e3a\u63d2\u5165\u4ee3\u7801\u533a\u5757\u7684plugin\uff1bautosize\u652f\u6301\u52a8\u6001\u7684\u6839\u636e\u5f53\u524d\u7f16\u8f91\u7684\u6587\u672c\u5185\u5bb9\u591a\u5c11\u8c03\u6574\u7f16\u8f91\u6846\u7684\u5927\u5c0f;autosave\u53ef\u4ee5\u76f4\u63a5\u5728\u7f16\u8f91\u6846\u4e2d\u6309\u4e0bctrl+s\u6765\u8fdb\u884c\u4fdd\u5b58\u3002 toolbar\u4e3a\u5de5\u5177\u6761\u751f\u547d\uff0c\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a\u5de5\u5177\u6761\uff0c\u53ea\u6709\u5728\u5de5\u5177\u6761\u4e2d\u7684plugins\u624d\u80fd\u770b\u5230\u5feb\u6377\u65b9\u5f0f\u56fe\u7247\uff0c\u9700\u8981\u6ce8\u610f | \u7b26\u53f7\u7684\u4e24\u8fb9\u9700\u8981\u7559\u51fa\u7a7a\u683c\u3002 language\u4e3a\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u7684\u63d0\u793a\u4f7f\u7528\u8bed\u8a00\uff0c\u53ef\u81f3\u6b64\u5904\u4e0b\u8f7d\u5bf9\u5e94\u7684js\u6587\u4ef6\u540e\u62f7\u8d1d\u81f3tinymce/langs/\u6587\u4ef6\u5939\u4e0b\u5e76\u58f0\u660e\u5373\u53ef\u3002","title":"\u6b65\u9aa43"},{"location":"python/django/django-TinyMCE/#4","text":"\u5728app\u76ee\u5f55\u4e0b\u7684admin.py\u6587\u4ef6\u4e2d\u63d2\u5165\u5982\u4e0b\u4ee3\u7801\u5373\u53ef\u5b9e\u73b0model\u4e2dTextField \u5bf9\u5e94\u7684\u5b57\u6bb5\u4f7f\u7528\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u6765\u8fdb\u884c\u7f16\u8f91\u7684\u76ee\u7684\u3002 class ArticleAdmin ( admin . ModelAdmin ): . . . class Media : js = ( '/STATIC_ROOT/js/tinymce/tinymce.min.js' , '/STATIC_ROOT/js/textareas.js' , )","title":"\u6b65\u9aa44"},{"location":"python/django/django-TinyMCE/#5","text":"\u9884\u89c8\u56fe\uff1a","title":"\u6b65\u9aa45"},{"location":"python/django/django-admin/","text":"1 \u539f\u751fadmin \u4f18\u70b9\uff1a\u517c\u5bb9\u6027\u597d \u7f3a\u70b9\uff1a\u6837\u5f0f\u4e0d\u597d\u770b \u64cd\u4f5c\u6548\u7387\u4f4e \u4e0d\u517c\u5bb9\u624b\u673a\u7aef 2 xadmin \u4f18\u70b9\uff1a\u64cd\u4f5c\u5feb\u6377 \u7f3a\u70b9\uff1a\u4e0d\u517c\u5bb9django\u6700\u65b0\u7248\u672c 3 Django-material \u4f18\u70b9\uff1a\u6837\u5f0f\u7f8e\u89c2 \u517c\u5bb9\u624b\u673a\u7aef \u7f3a\u70b9\uff1a\u4e0d\u652f\u6301\u7ea7\u8054\u4fee\u6539 \u4e0d\u652f\u6301filter_horizontal\u65b9\u5f0f\u9009\u62e9M2M 4 Django admin bootstrap \u6837\u5f0f\u9519\u4f4d\uff0c\u4e0d\u8003\u8651\u3002 5 django suit \u7f3a\u70b9\uff1a\u4e0d\u597d\u770b \u4e0d\u517c\u5bb9\u624b\u673a \u5546\u7528\u6536\u8d39 6 django flat response \u4f18\u70b9\uff1a\u6837\u5f0f\u5b8c\u5168\u548c\u539f\u751fadmin\u4e00\u6837 \u53ea\u662f\u589e\u52a0\u4e86\u539f\u751f\u7aef\u624b\u673a\u9002\u914d 1.9\u4ee5\u524d\u53ef\u4ee5\u4f7f\u7528django-flat-theme \u81ea\u5b9a\u4e49base_site.html\u65f6\u9700\u8981\u5728 {% extends \"admin/base.html\" %} \u4e4b\u540e\u52a0\u5165 {% load admin_static %} {% block blockbots %} {{ block.super }} <meta name=\"viewport\" content=\"user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0\"> <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'admin/css/responsive.css' %}\" /> {% endblock %} \u624d\u80fd\u4f7f\u54cd\u5e94\u5f0fadmin\u751f\u6548\uff0c\u5c31\u662f\u52a0\u5165\u4e86\u4e00\u4e2aadmin/css/responsive.css 7 django grappelli \u7f3a\u70b9\uff1a\u4e0d\u597d\u770b \u4e0d\u517c\u5bb9\u624b\u673a \u8bf8\u591a\u517c\u5bb9\u6027\u95ee\u9898","title":"Django admin\u5bf9\u6bd4"},{"location":"python/django/django-admin/#1-admin","text":"\u4f18\u70b9\uff1a\u517c\u5bb9\u6027\u597d \u7f3a\u70b9\uff1a\u6837\u5f0f\u4e0d\u597d\u770b \u64cd\u4f5c\u6548\u7387\u4f4e \u4e0d\u517c\u5bb9\u624b\u673a\u7aef","title":"1 \u539f\u751fadmin"},{"location":"python/django/django-admin/#2-xadmin","text":"\u4f18\u70b9\uff1a\u64cd\u4f5c\u5feb\u6377 \u7f3a\u70b9\uff1a\u4e0d\u517c\u5bb9django\u6700\u65b0\u7248\u672c","title":"2 xadmin"},{"location":"python/django/django-admin/#3-django-material","text":"\u4f18\u70b9\uff1a\u6837\u5f0f\u7f8e\u89c2 \u517c\u5bb9\u624b\u673a\u7aef \u7f3a\u70b9\uff1a\u4e0d\u652f\u6301\u7ea7\u8054\u4fee\u6539 \u4e0d\u652f\u6301filter_horizontal\u65b9\u5f0f\u9009\u62e9M2M","title":"3 Django-material"},{"location":"python/django/django-admin/#4-django-admin-bootstrap","text":"\u6837\u5f0f\u9519\u4f4d\uff0c\u4e0d\u8003\u8651\u3002","title":"4 Django admin bootstrap"},{"location":"python/django/django-admin/#5-django-suit","text":"\u7f3a\u70b9\uff1a\u4e0d\u597d\u770b \u4e0d\u517c\u5bb9\u624b\u673a \u5546\u7528\u6536\u8d39","title":"5 django suit"},{"location":"python/django/django-admin/#6-django-flat-response","text":"\u4f18\u70b9\uff1a\u6837\u5f0f\u5b8c\u5168\u548c\u539f\u751fadmin\u4e00\u6837 \u53ea\u662f\u589e\u52a0\u4e86\u539f\u751f\u7aef\u624b\u673a\u9002\u914d 1.9\u4ee5\u524d\u53ef\u4ee5\u4f7f\u7528django-flat-theme \u81ea\u5b9a\u4e49base_site.html\u65f6\u9700\u8981\u5728 {% extends \"admin/base.html\" %} \u4e4b\u540e\u52a0\u5165 {% load admin_static %} {% block blockbots %} {{ block.super }} <meta name=\"viewport\" content=\"user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0\"> <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'admin/css/responsive.css' %}\" /> {% endblock %} \u624d\u80fd\u4f7f\u54cd\u5e94\u5f0fadmin\u751f\u6548\uff0c\u5c31\u662f\u52a0\u5165\u4e86\u4e00\u4e2aadmin/css/responsive.css","title":"6 django flat response"},{"location":"python/django/django-admin/#7-django-grappelli","text":"\u7f3a\u70b9\uff1a\u4e0d\u597d\u770b \u4e0d\u517c\u5bb9\u624b\u673a \u8bf8\u591a\u517c\u5bb9\u6027\u95ee\u9898","title":"7 django grappelli"},{"location":"python/django/django-celery/","text":"celery.py from __future__ import absolute_import import os from celery import Celery from django.conf import settings # set the default Django settings module for the 'celery' program. os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'SchoolMS.settings' ) app = Celery ( 'SchoolMS' ) # Using a string here means the worker will not have to # pickle the object when using Windows. app . config_from_object ( 'django.conf:settings' ) app . autodiscover_tasks ( lambda : settings . INSTALLED_APPS ) init.py from __future__ import absolute_import # This will make sure the app is always imported when # Django starts so that shared_task will use this app. from .celery import app as celery_app setting.py # \u5b9a\u65f6\u4efb\u52a1 broker_url = 'amqp://guest:guest@localhost:5672//' CELERY_TIMEZONE = 'Asia/Shanghai' CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler' CELERYBEAT_SCHEDULE = { 'check_sms_remain_everyday' : { 'task' : 'family.tasks.notify_if_sms_out' , 'schedule' : crontab ( minute = 0 , hour = 10 ), 'args' : (), }, 'sms_reset' : { 'task' : 'family.tasks.reset_sms_count' , 'schedule' : crontab ( minute = 43 , hour = 17 ), 'args' : (), }, } task.py from celery import shared_task , task @task def reset_sms_count (): sms_reset_date = get_value ( settings . SMS_RESET_DATE_NAME ) if sms_reset_date == datetime . now () . day : for sms_assign in SMSAssign . objects . all (): sms_assign . period_reset () Logger . objects . create ( user = None , category = 5 , content = '\u7cfb\u7edf\u91cd\u7f6e\u77ed\u4fe1\u5206\u914d' ) \u547d\u4ee4\uff1a python manage . py celery beat - l info # \u542f\u52a8\u4efb\u52a1\u53d1\u9001\u7aef python manage . py celery worker - l info # \u542f\u52a8\u4efb\u52a1\u5904\u7406\u7aef worker \u91cd\u542fworker\u624d\u80fd\u4f7ftask\u88c5\u9970\u8fc7\u7684\u4ee3\u7801\u5728\u4fee\u6539\u8fc7\u540e\u6539\u6210\u4fee\u6539\u4e4b\u540e\u7684\u7248\u672c\uff0c\u4e0d\u7136\u4e00\u76f4\u8fd0\u884c\u7684\u662f\u4fee\u6539\u524d\u7684\u7248\u672c\uff0c\u7c7b\u4f3c\u4e8eapache\u3002 \u5728setting.py \u4e2d\u4fee\u6539CELERYBEAT_SCHEDULE\u8981\u6c42\u91cd\u542fbeat\u548cworker\u624d\u80fd\u5373\u65f6\u751f\u6548 \u5b89\u88c5\u3001\u4f7f\u7528RabbitMQ: windows\u9700\u8981\u4e0b\u8f7d\u5b89\u88c5\u8f6f\u4ef6\uff0cLinux\u76f4\u63a5apt-get http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq sudo apt-get install rabbitmq-server \u751f\u4ea7\u73af\u5883\u90e8\u7f72\u53c2\u89c1 Supervisor\u4f7f\u7528\u7b14\u8bb0\u53cacelery\u751f\u4ea7\u90e8\u7f72 windows\u5b9a\u65f6\u5173\u673a cmd\u8f93\u5165\uff1a at 23:00 shutdown -s \u8981\u53d6\u6d88ID\u4e3a1\u7684\u5173\u673a\u8ba1\u5212\uff1a at 1 /delete","title":"Django celery"},{"location":"python/django/django-channels/","text":"Django-Channels\u4f5c\u7528 \u5728Django\u90e8\u7f72\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f7f\u7528\u7684\u90fd\u662fWSGI\uff08Web Server Gateway Interface\uff09\u65e2\u901a\u7528\u670d\u52a1\u7f51\u5173\u63a5\u53e3\uff0c\u8be5\u534f\u8bae\u4ec5\u7528\u6765\u5904\u7406 Http \u8bf7\u6c42\uff0c\u66f4\u591a\u5173\u4e8eWSGI\u7684\u8bf4\u660e\u8bf7\u53c2\u89c1 \u5ed6\u96ea\u5cf0\u535a\u5ba2 \u3002 \u5f53\u7f51\u5740\u9700\u8981\u52a0\u5165 WebSocket \u529f\u80fd\u65f6\uff0cWSGI \u5c06\u4e0d\u518d\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u4f7f\u7528ASGI\u65e2\u5f02\u6b65\u670d\u52a1\u7f51\u5173\u63a5\u53e3\uff0c\u8be5\u534f\u8bae\u80fd\u591f\u7528\u6765\u5904\u7406\u591a\u79cd\u901a\u7528\u534f\u8bae\u7c7b\u578b\uff0c\u5305\u62ecHTTP\u3001HTTP2 \u548c WebSocket\uff0c\u66f4\u591a\u5173\u4e8e ASGI \u7684\u8bf4\u660e\u8bf7\u53c2\u89c1 \u6b64\u5904 \u3002 ASGI \u7531 Django \u56e2\u961f\u63d0\u51fa\uff0c\u4e3a\u4e86\u89e3\u51b3\u5728\u4e00\u4e2a\u7f51\u7edc\u6846\u67b6\u91cc\uff08\u5982 Django\uff09\u540c\u65f6\u5904\u7406 HTTP\u3001HTTP2\u3001WebSocket \u534f\u8bae\u3002\u4e3a\u6b64\uff0cDjango \u56e2\u961f\u5f00\u53d1\u4e86 Django Channels \u63d2\u4ef6\uff0c\u4e3a Django \u5e26\u6765\u4e86 ASGI \u80fd\u529b\u3002 \u5728 ASGI \u4e2d\uff0c\u5c06\u4e00\u4e2a\u7f51\u7edc\u8bf7\u6c42\u5212\u5206\u6210\u4e09\u4e2a\u5904\u7406\u5c42\u9762\uff0c\u6700\u524d\u9762\u7684\u4e00\u5c42\uff0cinterface server\uff08\u534f\u8bae\u5904\u7406\u670d\u52a1\u5668\uff09\uff0c\u8d1f\u8d23\u5bf9\u8bf7\u6c42\u534f\u8bae\u8fdb\u884c\u89e3\u6790\uff0c\u5e76\u5c06\u4e0d\u540c\u7684\u534f\u8bae\u5206\u53d1\u5230\u4e0d\u540c\u7684 Channel\uff08\u9891\u9053\uff09\uff1b\u9891\u9053\u5c5e\u4e8e\u7b2c\u4e8c\u5c42\uff0c\u901a\u5e38\u53ef\u4ee5\u662f\u4e00\u4e2a\u961f\u5217\u7cfb\u7edf\u3002\u9891\u9053\u7ed1\u5b9a\u4e86\u7b2c\u4e09\u5c42\u7684 Consumer\uff08\u6d88\u8d39\u8005\uff09\u3002 \u73a9\u8f6c ASGI:\u4ece\u96f6\u5230\u4e00\u5b9e\u73b0\u4e00\u4e2a\u5b9e\u65f6\u535a\u5ba2 Django-Channels\u4f7f\u7528 \u672c\u6587\u57fa\u4e8eDjango==2.1\uff0cchannels==2.1.3\uff0cchannels-redis==2.3.0\u3002 \u793a\u4f8b\u9879\u76eeRestaurantOrder\u65e8\u5728\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8eWebSocket\u7684\u804a\u5929\u5ba4\uff0c\u5728 Channels 2.1.3\u6587\u6863\u4e2dTutorial \u7684\u57fa\u7840\u4e0a\u7a0d\u52a0\u4fee\u6539\u7528\u4e8e\u5fae\u4fe1\u70b9\u9910\u8fc7\u7a0b\u4e2d\u7684\u591a\u4eba\u534f\u4f5c\u70b9\u9910\u3002 \u5728 settings.py \u52a0\u5165\u548c channels \u76f8\u5173\u7684\u57fa\u7840\u8bbe\u7f6e: INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'channels' , ... ] ASGI_APPLICATION = \"RestaurantOrder.routing.application\" # WebSocket CHANNEL_LAYERS = { 'default' : { 'BACKEND' : 'channels_redis.core.RedisChannelLayer' , 'CONFIG' : { \"hosts\" : [( '127.0.0.1' , 6379 )], }, }, } \u5728 wsgi.py \u540c\u7ea7\u76ee\u5f55\u65b0\u589e\u6587\u4ef6 asgi.py : \"\"\" ASGI entrypoint. Configures Django and then runs the application defined in the ASGI_APPLICATION setting. \"\"\" import os import django from channels.routing import get_default_application os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" , \"RestaurantOrder.settings\" ) django . setup () application = get_default_application () \u5728 wsgi.py \u540c\u7ea7\u76ee\u5f55\u65b0\u589e\u6587\u4ef6 routing.py ,\u5176\u4f5c\u7528\u7c7b\u578b\u4e0e urls.py ,\u7528\u4e8e\u5206\u53d1 webscoket \u8bf7\u6c42: routing.py from django.urls import path from channels.auth import AuthMiddlewareStack from channels.routing import ProtocolTypeRouter , URLRouter from table.consumers import TableConsumer application = ProtocolTypeRouter ({ # Empty for now (http->django views is added by default) 'websocket' : AuthMiddlewareStack ( URLRouter ([ path ( 'ws/table/<slug:table_id>/' , TableConsumer ), ]) ), }) \u65b0\u589e app \u540d\u4e3a table ,\u5728 table \u76ee\u5f55\u4e0b\u65b0\u589e consumers.py : from channels.generic.websocket import AsyncJsonWebsocketConsumer from table.models import Table class TableConsumer ( AsyncJsonWebsocketConsumer ): table = None async def connect ( self ): self . table = 'table_ {} ' . format ( self . scope [ 'url_route' ][ 'kwargs' ][ 'table_id' ]) # Join room group await self . channel_layer . group_add ( self . table , self . channel_name ) await self . accept () async def disconnect ( self , close_code ): # Leave room group await self . channel_layer . group_discard ( self . table , self . channel_name ) # Receive message from WebSocket async def receive_json ( self , content , ** kwargs ): # Send message to room group await self . channel_layer . group_send ( self . table , { 'type' : 'message' , 'message' : content }) # Receive message from room group async def message ( self , event ): message = event [ 'message' ] # Send message to WebSocket await self . send_json ( message ) TableConsumer \u7c7b\u4e2d\u7684\u51fd\u6570\u4f9d\u6b21\u7528\u4e8e\u5904\u7406\u8fde\u63a5\u3001\u65ad\u5f00\u8fde\u63a5\u3001\u63a5\u6536\u6d88\u606f\u548c\u5904\u7406\u5bf9\u5e94\u7c7b\u578b\u7684\u6d88\u606f\uff0c\u5176\u4e2d channel_layer.group_send(self.table, {'type': 'message', 'message': content}) \u65b9\u6cd5\uff0c self.table \u53c2\u6570\u4e3a\u5f53\u524d\u7ec4\u7684\u7ec4id\uff0c {'type': 'message', 'message': content} \u90e8\u5206\u5206\u4e3a\u4e24\u90e8\u5206\uff0c type \u7528\u4e8e\u6307\u5b9a\u8be5\u6d88\u606f\u7684\u7c7b\u578b\uff0c\u6839\u636e\u6d88\u606f\u7c7b\u578b\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570\u53bb\u5904\u7406\u6d88\u606f\uff0c\u800c message \u5185\u4e3a\u6d88\u606f\u4e3b\u4f53\u3002 \u5728 table \u76ee\u5f55\u4e0b\u7684 views.py \u4e2d\u65b0\u589e\u51fd\u6570\uff1a def table ( request , table_id ): return render ( request , 'table/table.html' , { 'room_name_json' : mark_safe ( json . dumps ( table_id )) }) table \u51fd\u6570\u5bf9\u5e94\u7684 urls.py \u4e0d\u518d\u8d58\u8ff0\u3002 \u5728 table \u7684 templates\\table \u76ee\u5f55\u4e0b\u65b0\u589e table.html : < ! -- chat / templates / chat / room . html --> < ! DOCTYPE html > < html > < head > < meta charset = \"utf-8\" /> < title > Chat Room </ title > </ head > < body > < textarea id = \"chat-log\" cols = \"100\" rows = \"20\" ></ textarea >< br /> < input id = \"chat-message-input\" type = \"text\" size = \"100\" />< br /> < input id = \"chat-message-submit\" type = \"button\" value = \"Send\" /> </ body > < script > var roomName = {{ room_name_json }}; var chatSocket = new WebSocket ( 'ws://' + window . location . host + '/ws/table/' + roomName + '/' ); chatSocket . onmessage = function ( e ) { var data = JSON . parse ( e . data ); document . querySelector ( '#chat-log' ) . value += ( JSON . stringify ( data ) + ' \\n ' ); }; chatSocket . onclose = function ( e ) { console . error ( 'Chat socket closed unexpectedly' ); }; document . querySelector ( '#chat-message-input' ) . focus (); document . querySelector ( '#chat-message-input' ) . onkeyup = function ( e ) { if ( e . keyCode === 13 ) { // enter , return document . querySelector ( '#chat-message-submit' ) . click (); } }; document . querySelector ( '#chat-message-submit' ) . onclick = function ( e ) { var messageInputDom = document . querySelector ( '#chat-message-input' ); var message = messageInputDom . value ; chatSocket . send ( JSON . stringify ( message )); messageInputDom . value = '' ; }; </ script > </ html > Django-Channels\u90e8\u7f72 \u5728\u5b98\u65b9\u6587\u6863\u4e2d\u63a8\u8350 Djaogo-Channels \u7684 http \u90e8\u5206\u548c websocket \u90e8\u5206\u5747\u4f7f\u7528 daphne \u8fdb\u884c\u90e8\u7f72\uff0c\u8be5\u65b9\u6cd5\u53c2\u89c1 DjangoChannels Docs \u3002 \u672c\u6587\u4f7f\u7528\u7684\u65b9\u6cd5\u4e3a\u4f7f\u7528 Nginx \u4ee3\u7406\uff0c\u5c06 http \u90e8\u5206\u8bf7\u6c42\u53d1\u9001\u7ed9 uwsgi \u8fdb\u884c\u5904\u7406\uff0c\u5c06 websocket \u90e8\u5206\u8bf7\u6c42\u53d1\u9001\u7ed9 daphne \u8fdb\u884c\u5904\u7406\u3002 uwsgi \u548c daphhe \u5747\u4f7f\u7528 supervisord \u8fdb\u884c\u63a7\u5236\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e Nginx \u65e0\u6cd5\u8bc6\u522b http \u8bf7\u6c42\u548c websocket \u8bf7\u6c42\uff0c\u9700\u8981\u901a\u8fc7\u8def\u7531\u6765\u533a\u5206\u662f\u54ea\u79cd\u534f\u8bae\u3002\u6211\u4f7f\u7528\u7684\u65b9\u6cd5\u662f\u89c4\u5b9a\u6240\u6709\u7684websocket\u7684\u8def\u7531\u5747\u4ee5/ws\u5f00\u5934(\u5982\uff1a ws://www.example/ws/table/table_id/ )\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9 Nginx \u5c06\u6240\u6709\u4ee5 /ws \u5f00\u5934\u7684\u8bf7\u6c42\u5168\u90e8\u8f6c\u53d1\u7ed9 daphne \u8fdb\u884c\u5904\u7406\u3002 \u5728 Nginx \u548c daphne \u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u6709 http socket \u548c file socket \u4e24\u79cd\u901a\u4fe1\u65b9\u5f0f\uff0c\u63a8\u8350\u4f7f\u7528\u540e\u4e00\u79cd file socket \u7684\u65b9\u5f0f\uff0c\u5728\u8fd9\u91cc\u5217\u51fa\u4e24\u79cd\u901a\u4fe1\u65b9\u5f0f\u7684\u90e8\u7f72\u4ee3\u7801\u3002 http socket\u65b9\u5f0f nginx.conf: upstream restaurant_order { server unix:///django/RestaurantOrder/restaurant_order.sock; } server { listen 8000; server_name 114.116.25.246; # substitute your machine's IP address or FQDN charset utf-8; client_max_body_size 75M; location /media { alias /django/RestaurantOrder/media; } location /static { alias /django/RestaurantOrder/static; } access_log /django/RestaurantOrder/log/access.log; error_log /django/RestaurantOrder/log/error.log; location / { uwsgi_pass restaurant_order; include /django/RestaurantOrder/uwsgi_params; } location /ws { proxy_pass http://127.0.0.1:8001; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_read_timeout 36000s; proxy_send_timeout 36000s; } } supervisord.conf: [program:restaurant_order_service] command=uwsgi --ini /django/RestaurantOrder/restaurant_order_uwsgi.ini directory=/django/RestaurantOrder stdout_logfile=/django/RestaurantOrder/log/uwsgi_out.log stderr_logfile=/django/RestaurantOrder/log/uwsgi_err.log autostart=true autorestart=true user=root startsecs=10 [program:restaurant_order_websocket] command=/django/RestaurantOrder/environment/bin/daphne -b 0.0.0.0 -p 8001 RestaurantOrder.asgi:application directory=/django/RestaurantOrder stdout_logfile=/django/RestaurantOrder/log/websocket_out.log stderr_logfile=/django/RestaurantOrder/log/websocket_err.log autostart=true autorestart=true user=root startsecs=10 file socket\u65b9\u5f0f \u533a\u522b\u4e8e http socket \u7684\u4e3a2\u5904\uff0c1\u662f nginx.conf \u4e2d\u7684\u65b0\u589e upstream websocket \uff0c\u5e76\u5728 location /ws \u4e2d\u8bbe\u7f6e proxy_pass http://websocket; \uff0c\u9700\u8981\u6ce8\u610f\u6b64\u5904\u7684 http:// \u524d\u7f00\u4e0d\u53ef\u7701\u7565;2\u662f daphne \u7684\u542f\u52a8\u65b9\u5f0f\u6539\u4e3a daphne -u /django/RestaurantOrder/websocket.sock RestaurantOrder.asgi:application \u3002 nginx.conf: upstream restaurant_order { server unix:///django/RestaurantOrder/restaurant_order.sock; } upstream websocket { server unix:///django/RestaurantOrder/websocket.sock; } server { listen 8000; server_name 114.116.25.246; # substitute your machine's IP address or FQDN charset utf-8; client_max_body_size 75M; location /media { alias /django/RestaurantOrder/media; } location /static { alias /django/RestaurantOrder/static; } access_log /django/RestaurantOrder/log/access.log; error_log /django/RestaurantOrder/log/error.log; location / { uwsgi_pass restaurant_order; include /django/RestaurantOrder/uwsgi_params; } location /ws { proxy_pass http://websocket; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_read_timeout 36000s; proxy_send_timeout 36000s; } } supervisord.conf: [program:restaurant_order_service] command=uwsgi --ini /django/RestaurantOrder/restaurant_order_uwsgi.ini directory=/django/RestaurantOrder stdout_logfile=/django/RestaurantOrder/log/uwsgi_out.log stderr_logfile=/django/RestaurantOrder/log/uwsgi_err.log autostart=true autorestart=true user=root startsecs=10 [program:restaurant_order_websocket] command=/django/RestaurantOrder/environment/bin/daphne -u /django/RestaurantOrder/websocket.sock RestaurantOrder.asgi:application directory=/django/RestaurantOrder stdout_logfile=/django/RestaurantOrder/log/websocket_out.log stderr_logfile=/django/RestaurantOrder/log/websocket_err.log autostart=true autorestart=true user=root startsecs=10","title":"Django-Channels\u4f7f\u7528\u548c\u90e8\u7f72"},{"location":"python/django/django-channels/#django-channels","text":"\u5728Django\u90e8\u7f72\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f7f\u7528\u7684\u90fd\u662fWSGI\uff08Web Server Gateway Interface\uff09\u65e2\u901a\u7528\u670d\u52a1\u7f51\u5173\u63a5\u53e3\uff0c\u8be5\u534f\u8bae\u4ec5\u7528\u6765\u5904\u7406 Http \u8bf7\u6c42\uff0c\u66f4\u591a\u5173\u4e8eWSGI\u7684\u8bf4\u660e\u8bf7\u53c2\u89c1 \u5ed6\u96ea\u5cf0\u535a\u5ba2 \u3002 \u5f53\u7f51\u5740\u9700\u8981\u52a0\u5165 WebSocket \u529f\u80fd\u65f6\uff0cWSGI \u5c06\u4e0d\u518d\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u4f7f\u7528ASGI\u65e2\u5f02\u6b65\u670d\u52a1\u7f51\u5173\u63a5\u53e3\uff0c\u8be5\u534f\u8bae\u80fd\u591f\u7528\u6765\u5904\u7406\u591a\u79cd\u901a\u7528\u534f\u8bae\u7c7b\u578b\uff0c\u5305\u62ecHTTP\u3001HTTP2 \u548c WebSocket\uff0c\u66f4\u591a\u5173\u4e8e ASGI \u7684\u8bf4\u660e\u8bf7\u53c2\u89c1 \u6b64\u5904 \u3002 ASGI \u7531 Django \u56e2\u961f\u63d0\u51fa\uff0c\u4e3a\u4e86\u89e3\u51b3\u5728\u4e00\u4e2a\u7f51\u7edc\u6846\u67b6\u91cc\uff08\u5982 Django\uff09\u540c\u65f6\u5904\u7406 HTTP\u3001HTTP2\u3001WebSocket \u534f\u8bae\u3002\u4e3a\u6b64\uff0cDjango \u56e2\u961f\u5f00\u53d1\u4e86 Django Channels \u63d2\u4ef6\uff0c\u4e3a Django \u5e26\u6765\u4e86 ASGI \u80fd\u529b\u3002 \u5728 ASGI \u4e2d\uff0c\u5c06\u4e00\u4e2a\u7f51\u7edc\u8bf7\u6c42\u5212\u5206\u6210\u4e09\u4e2a\u5904\u7406\u5c42\u9762\uff0c\u6700\u524d\u9762\u7684\u4e00\u5c42\uff0cinterface server\uff08\u534f\u8bae\u5904\u7406\u670d\u52a1\u5668\uff09\uff0c\u8d1f\u8d23\u5bf9\u8bf7\u6c42\u534f\u8bae\u8fdb\u884c\u89e3\u6790\uff0c\u5e76\u5c06\u4e0d\u540c\u7684\u534f\u8bae\u5206\u53d1\u5230\u4e0d\u540c\u7684 Channel\uff08\u9891\u9053\uff09\uff1b\u9891\u9053\u5c5e\u4e8e\u7b2c\u4e8c\u5c42\uff0c\u901a\u5e38\u53ef\u4ee5\u662f\u4e00\u4e2a\u961f\u5217\u7cfb\u7edf\u3002\u9891\u9053\u7ed1\u5b9a\u4e86\u7b2c\u4e09\u5c42\u7684 Consumer\uff08\u6d88\u8d39\u8005\uff09\u3002 \u73a9\u8f6c ASGI:\u4ece\u96f6\u5230\u4e00\u5b9e\u73b0\u4e00\u4e2a\u5b9e\u65f6\u535a\u5ba2","title":"Django-Channels\u4f5c\u7528"},{"location":"python/django/django-channels/#django-channels_1","text":"\u672c\u6587\u57fa\u4e8eDjango==2.1\uff0cchannels==2.1.3\uff0cchannels-redis==2.3.0\u3002 \u793a\u4f8b\u9879\u76eeRestaurantOrder\u65e8\u5728\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8eWebSocket\u7684\u804a\u5929\u5ba4\uff0c\u5728 Channels 2.1.3\u6587\u6863\u4e2dTutorial \u7684\u57fa\u7840\u4e0a\u7a0d\u52a0\u4fee\u6539\u7528\u4e8e\u5fae\u4fe1\u70b9\u9910\u8fc7\u7a0b\u4e2d\u7684\u591a\u4eba\u534f\u4f5c\u70b9\u9910\u3002 \u5728 settings.py \u52a0\u5165\u548c channels \u76f8\u5173\u7684\u57fa\u7840\u8bbe\u7f6e: INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'channels' , ... ] ASGI_APPLICATION = \"RestaurantOrder.routing.application\" # WebSocket CHANNEL_LAYERS = { 'default' : { 'BACKEND' : 'channels_redis.core.RedisChannelLayer' , 'CONFIG' : { \"hosts\" : [( '127.0.0.1' , 6379 )], }, }, } \u5728 wsgi.py \u540c\u7ea7\u76ee\u5f55\u65b0\u589e\u6587\u4ef6 asgi.py : \"\"\" ASGI entrypoint. Configures Django and then runs the application defined in the ASGI_APPLICATION setting. \"\"\" import os import django from channels.routing import get_default_application os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" , \"RestaurantOrder.settings\" ) django . setup () application = get_default_application () \u5728 wsgi.py \u540c\u7ea7\u76ee\u5f55\u65b0\u589e\u6587\u4ef6 routing.py ,\u5176\u4f5c\u7528\u7c7b\u578b\u4e0e urls.py ,\u7528\u4e8e\u5206\u53d1 webscoket \u8bf7\u6c42: routing.py from django.urls import path from channels.auth import AuthMiddlewareStack from channels.routing import ProtocolTypeRouter , URLRouter from table.consumers import TableConsumer application = ProtocolTypeRouter ({ # Empty for now (http->django views is added by default) 'websocket' : AuthMiddlewareStack ( URLRouter ([ path ( 'ws/table/<slug:table_id>/' , TableConsumer ), ]) ), }) \u65b0\u589e app \u540d\u4e3a table ,\u5728 table \u76ee\u5f55\u4e0b\u65b0\u589e consumers.py : from channels.generic.websocket import AsyncJsonWebsocketConsumer from table.models import Table class TableConsumer ( AsyncJsonWebsocketConsumer ): table = None async def connect ( self ): self . table = 'table_ {} ' . format ( self . scope [ 'url_route' ][ 'kwargs' ][ 'table_id' ]) # Join room group await self . channel_layer . group_add ( self . table , self . channel_name ) await self . accept () async def disconnect ( self , close_code ): # Leave room group await self . channel_layer . group_discard ( self . table , self . channel_name ) # Receive message from WebSocket async def receive_json ( self , content , ** kwargs ): # Send message to room group await self . channel_layer . group_send ( self . table , { 'type' : 'message' , 'message' : content }) # Receive message from room group async def message ( self , event ): message = event [ 'message' ] # Send message to WebSocket await self . send_json ( message ) TableConsumer \u7c7b\u4e2d\u7684\u51fd\u6570\u4f9d\u6b21\u7528\u4e8e\u5904\u7406\u8fde\u63a5\u3001\u65ad\u5f00\u8fde\u63a5\u3001\u63a5\u6536\u6d88\u606f\u548c\u5904\u7406\u5bf9\u5e94\u7c7b\u578b\u7684\u6d88\u606f\uff0c\u5176\u4e2d channel_layer.group_send(self.table, {'type': 'message', 'message': content}) \u65b9\u6cd5\uff0c self.table \u53c2\u6570\u4e3a\u5f53\u524d\u7ec4\u7684\u7ec4id\uff0c {'type': 'message', 'message': content} \u90e8\u5206\u5206\u4e3a\u4e24\u90e8\u5206\uff0c type \u7528\u4e8e\u6307\u5b9a\u8be5\u6d88\u606f\u7684\u7c7b\u578b\uff0c\u6839\u636e\u6d88\u606f\u7c7b\u578b\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570\u53bb\u5904\u7406\u6d88\u606f\uff0c\u800c message \u5185\u4e3a\u6d88\u606f\u4e3b\u4f53\u3002 \u5728 table \u76ee\u5f55\u4e0b\u7684 views.py \u4e2d\u65b0\u589e\u51fd\u6570\uff1a def table ( request , table_id ): return render ( request , 'table/table.html' , { 'room_name_json' : mark_safe ( json . dumps ( table_id )) }) table \u51fd\u6570\u5bf9\u5e94\u7684 urls.py \u4e0d\u518d\u8d58\u8ff0\u3002 \u5728 table \u7684 templates\\table \u76ee\u5f55\u4e0b\u65b0\u589e table.html : < ! -- chat / templates / chat / room . html --> < ! DOCTYPE html > < html > < head > < meta charset = \"utf-8\" /> < title > Chat Room </ title > </ head > < body > < textarea id = \"chat-log\" cols = \"100\" rows = \"20\" ></ textarea >< br /> < input id = \"chat-message-input\" type = \"text\" size = \"100\" />< br /> < input id = \"chat-message-submit\" type = \"button\" value = \"Send\" /> </ body > < script > var roomName = {{ room_name_json }}; var chatSocket = new WebSocket ( 'ws://' + window . location . host + '/ws/table/' + roomName + '/' ); chatSocket . onmessage = function ( e ) { var data = JSON . parse ( e . data ); document . querySelector ( '#chat-log' ) . value += ( JSON . stringify ( data ) + ' \\n ' ); }; chatSocket . onclose = function ( e ) { console . error ( 'Chat socket closed unexpectedly' ); }; document . querySelector ( '#chat-message-input' ) . focus (); document . querySelector ( '#chat-message-input' ) . onkeyup = function ( e ) { if ( e . keyCode === 13 ) { // enter , return document . querySelector ( '#chat-message-submit' ) . click (); } }; document . querySelector ( '#chat-message-submit' ) . onclick = function ( e ) { var messageInputDom = document . querySelector ( '#chat-message-input' ); var message = messageInputDom . value ; chatSocket . send ( JSON . stringify ( message )); messageInputDom . value = '' ; }; </ script > </ html >","title":"Django-Channels\u4f7f\u7528"},{"location":"python/django/django-channels/#django-channels_2","text":"\u5728\u5b98\u65b9\u6587\u6863\u4e2d\u63a8\u8350 Djaogo-Channels \u7684 http \u90e8\u5206\u548c websocket \u90e8\u5206\u5747\u4f7f\u7528 daphne \u8fdb\u884c\u90e8\u7f72\uff0c\u8be5\u65b9\u6cd5\u53c2\u89c1 DjangoChannels Docs \u3002 \u672c\u6587\u4f7f\u7528\u7684\u65b9\u6cd5\u4e3a\u4f7f\u7528 Nginx \u4ee3\u7406\uff0c\u5c06 http \u90e8\u5206\u8bf7\u6c42\u53d1\u9001\u7ed9 uwsgi \u8fdb\u884c\u5904\u7406\uff0c\u5c06 websocket \u90e8\u5206\u8bf7\u6c42\u53d1\u9001\u7ed9 daphne \u8fdb\u884c\u5904\u7406\u3002 uwsgi \u548c daphhe \u5747\u4f7f\u7528 supervisord \u8fdb\u884c\u63a7\u5236\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e Nginx \u65e0\u6cd5\u8bc6\u522b http \u8bf7\u6c42\u548c websocket \u8bf7\u6c42\uff0c\u9700\u8981\u901a\u8fc7\u8def\u7531\u6765\u533a\u5206\u662f\u54ea\u79cd\u534f\u8bae\u3002\u6211\u4f7f\u7528\u7684\u65b9\u6cd5\u662f\u89c4\u5b9a\u6240\u6709\u7684websocket\u7684\u8def\u7531\u5747\u4ee5/ws\u5f00\u5934(\u5982\uff1a ws://www.example/ws/table/table_id/ )\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9 Nginx \u5c06\u6240\u6709\u4ee5 /ws \u5f00\u5934\u7684\u8bf7\u6c42\u5168\u90e8\u8f6c\u53d1\u7ed9 daphne \u8fdb\u884c\u5904\u7406\u3002 \u5728 Nginx \u548c daphne \u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u6709 http socket \u548c file socket \u4e24\u79cd\u901a\u4fe1\u65b9\u5f0f\uff0c\u63a8\u8350\u4f7f\u7528\u540e\u4e00\u79cd file socket \u7684\u65b9\u5f0f\uff0c\u5728\u8fd9\u91cc\u5217\u51fa\u4e24\u79cd\u901a\u4fe1\u65b9\u5f0f\u7684\u90e8\u7f72\u4ee3\u7801\u3002 http socket\u65b9\u5f0f nginx.conf: upstream restaurant_order { server unix:///django/RestaurantOrder/restaurant_order.sock; } server { listen 8000; server_name 114.116.25.246; # substitute your machine's IP address or FQDN charset utf-8; client_max_body_size 75M; location /media { alias /django/RestaurantOrder/media; } location /static { alias /django/RestaurantOrder/static; } access_log /django/RestaurantOrder/log/access.log; error_log /django/RestaurantOrder/log/error.log; location / { uwsgi_pass restaurant_order; include /django/RestaurantOrder/uwsgi_params; } location /ws { proxy_pass http://127.0.0.1:8001; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_read_timeout 36000s; proxy_send_timeout 36000s; } } supervisord.conf: [program:restaurant_order_service] command=uwsgi --ini /django/RestaurantOrder/restaurant_order_uwsgi.ini directory=/django/RestaurantOrder stdout_logfile=/django/RestaurantOrder/log/uwsgi_out.log stderr_logfile=/django/RestaurantOrder/log/uwsgi_err.log autostart=true autorestart=true user=root startsecs=10 [program:restaurant_order_websocket] command=/django/RestaurantOrder/environment/bin/daphne -b 0.0.0.0 -p 8001 RestaurantOrder.asgi:application directory=/django/RestaurantOrder stdout_logfile=/django/RestaurantOrder/log/websocket_out.log stderr_logfile=/django/RestaurantOrder/log/websocket_err.log autostart=true autorestart=true user=root startsecs=10 file socket\u65b9\u5f0f \u533a\u522b\u4e8e http socket \u7684\u4e3a2\u5904\uff0c1\u662f nginx.conf \u4e2d\u7684\u65b0\u589e upstream websocket \uff0c\u5e76\u5728 location /ws \u4e2d\u8bbe\u7f6e proxy_pass http://websocket; \uff0c\u9700\u8981\u6ce8\u610f\u6b64\u5904\u7684 http:// \u524d\u7f00\u4e0d\u53ef\u7701\u7565;2\u662f daphne \u7684\u542f\u52a8\u65b9\u5f0f\u6539\u4e3a daphne -u /django/RestaurantOrder/websocket.sock RestaurantOrder.asgi:application \u3002 nginx.conf: upstream restaurant_order { server unix:///django/RestaurantOrder/restaurant_order.sock; } upstream websocket { server unix:///django/RestaurantOrder/websocket.sock; } server { listen 8000; server_name 114.116.25.246; # substitute your machine's IP address or FQDN charset utf-8; client_max_body_size 75M; location /media { alias /django/RestaurantOrder/media; } location /static { alias /django/RestaurantOrder/static; } access_log /django/RestaurantOrder/log/access.log; error_log /django/RestaurantOrder/log/error.log; location / { uwsgi_pass restaurant_order; include /django/RestaurantOrder/uwsgi_params; } location /ws { proxy_pass http://websocket; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_read_timeout 36000s; proxy_send_timeout 36000s; } } supervisord.conf: [program:restaurant_order_service] command=uwsgi --ini /django/RestaurantOrder/restaurant_order_uwsgi.ini directory=/django/RestaurantOrder stdout_logfile=/django/RestaurantOrder/log/uwsgi_out.log stderr_logfile=/django/RestaurantOrder/log/uwsgi_err.log autostart=true autorestart=true user=root startsecs=10 [program:restaurant_order_websocket] command=/django/RestaurantOrder/environment/bin/daphne -u /django/RestaurantOrder/websocket.sock RestaurantOrder.asgi:application directory=/django/RestaurantOrder stdout_logfile=/django/RestaurantOrder/log/websocket_out.log stderr_logfile=/django/RestaurantOrder/log/websocket_err.log autostart=true autorestart=true user=root startsecs=10","title":"Django-Channels\u90e8\u7f72"},{"location":"python/django/django-cleanup/","text":"\ufeff\u5b89\u88c5 pip install django - cleanup \u914d\u7f6e INSTALLED_APPS = ( ... 'django_cleanup' , ) \u4fe1\u53f7 from django_cleanup.signals import cleanup_pre_delete , cleanup_post_delete def sorl_delete ( ** kwargs ): print ( kwargs [ 'file' ]) cleanup_pre_delete . connect ( sorl_delete ) \u4f5c\u7528 \u5728django\u5b9e\u4f8b\u4e2d\u7684file\u3001image\u5b57\u6bb5\u5185\u5bb9\u88ab\u66f4\u65b0\u65f6\uff0c\u65e7\u7684\u6587\u4ef6\u5c06\u88ab\u81ea\u52a8\u5220\u9664\u3002 \u5728django\u5b9e\u4f8b\u88ab\u5220\u9664\u65f6\uff0c\u5b9e\u4f8b\u5305\u542b\u7684\u6240\u6709file\u3001image\u5c06\u88ab\u81ea\u52a8\u5220\u9664\u3002 \u9ed8\u8ba4\u5934\u50cf\u88ab\u5220\u9664\u7684\u95ee\u9898 \u9ed8\u8ba4\u5934\u50cf\u4e0d\u4f7f\u7528default\uff0c\u4f7f\u7528null=True\uff0c\u83b7\u53d6\u5934\u50cf\u4f7f\u7528\u65b9\u6cd5\uff1a def display_avatar ( self ): return self . avatar . url or '/static/img/default-avatar.png' \u8be6\u89c1https://github.com/un1t/django-cleanup/issues/8 \ufeff\u7f29\u7565\u56fe\u517c\u5bb9\uff1a \u517c\u5bb9\u7f29\u7565\u56fe\u751f\u6210\u5de5\u5177\uff1a sorl-thumbnail and easy-thumbnail https://github.com/un1t/django-cleanup \u4fee\u6539\u5206\u8fa8\u7387 profile = Message . objects . get ( id = 5 ) media_root = getattr ( settings , 'MEDIA_ROOT' , None ) path = os . path . join ( os . path . join ( media_root , '' ), profile . portrait1 . name ) # \u4fee\u6539\u5934\u50cf\u5206\u8fa8\u7387 from PIL import Image im = Image . open ( path ) out = im . resize (( 200 , 200 ), Image . ANTIALIAS ) out . save ( path ) \u4f7f\u7528django-imagekit\u751f\u6210\u7f29\u7565\u56fe\uff1a \u65b9\u6cd5\u4e00\uff1a avatar_thumbnail = ImageSpecField ( source = 'portrait1' , processors = [ ResizeToFill ( 200 , 200 )], format = 'PNG' , options = { 'quality' : 100 }) print ( profile . avatar_thumbnail . url ) # > /media/CACHE/images/982d5af84cddddfd0fbf70892b4431e4.jpg print ( profile . avatar_thumbnail . width ) \u65e0\u6cd5\u4f7f\u7528django-cleanup\u81ea\u52a8\u5220\u9664\u751f\u6210\u7684Cache\u6587\u4ef6 \u65b9\u6cd5\u4e8c\uff1a from imagekit import ImageSpec from imagekit.processors import ResizeToFill class Thumbnail ( ImageSpec ): processors = [ ResizeToFill ( 200 , 200 )] format = 'JPEG' options = { 'quality' : 100 } source_file = profile . portrait1 image_generator = Thumbnail ( source = source_file ) result = image_generator . generate () print ( result , type ( result )) dest = open ( path , \"wb+\" ) dest . write ( result . read ()) dest . close () \u7f29\u7565\u56fe\u8986\u76d6\u539f\u6587\u4ef6\u6216\u8005\u76f4\u63a5\u4fdd\u5b58\u81f3\u5176\u4ed6\u6587\u4ef6\u3002 \u540c\u5c3a\u5bf8\u751f\u6210\u540c\u5c3a\u5bf8\u7684\u7f29\u7565\u56fe\u4f1a\u53d8\u6a21\u7cca\uff0c\u4f46\u8fdc\u4f18\u4e8e\u4f7f\u7528PIL-Image\u4fee\u6539\u5206\u8fa8\u7387\u751f\u6210\u7684\u56fe\u7247\u8d28\u91cf\u3002 sorl-thumbnail \u5b89\u88c5 pip install sorl - thumbnail \u914d\u7f6e INSTALLED_APPS = ( ... 'sorl.thumbnail' , ) No Such Table \u9519\u8bef python manage . py makemigrations thumbnail python manage . py migrate thumbnail \u83b7\u53d6\u53ca\u5220\u9664\u7f29\u7565\u56fe from sorl.thumbnail import get_thumbnail from sorl.thumbnail import delete im = get_thumbnail ( my_file , '100x100' , crop = 'center' , quality = 99 ) delete ( my_file ) \u914d\u5408django-cleanup from django_cleanup.signals import cleanup_pre_delete , cleanup_post_delete def sorl_delete ( ** kwargs ): from sorl.thumbnail import delete delete ( kwargs [ 'file' ]) cleanup_pre_delete . connect ( sorl_delete )","title":"Django-cleanup \u6e05\u7406\u6587\u4ef6"},{"location":"python/django/django-cleanup/#_1","text":"pip install django - cleanup","title":"\ufeff\u5b89\u88c5"},{"location":"python/django/django-cleanup/#_2","text":"INSTALLED_APPS = ( ... 'django_cleanup' , )","title":"\u914d\u7f6e"},{"location":"python/django/django-cleanup/#_3","text":"from django_cleanup.signals import cleanup_pre_delete , cleanup_post_delete def sorl_delete ( ** kwargs ): print ( kwargs [ 'file' ]) cleanup_pre_delete . connect ( sorl_delete )","title":"\u4fe1\u53f7"},{"location":"python/django/django-cleanup/#_4","text":"\u5728django\u5b9e\u4f8b\u4e2d\u7684file\u3001image\u5b57\u6bb5\u5185\u5bb9\u88ab\u66f4\u65b0\u65f6\uff0c\u65e7\u7684\u6587\u4ef6\u5c06\u88ab\u81ea\u52a8\u5220\u9664\u3002 \u5728django\u5b9e\u4f8b\u88ab\u5220\u9664\u65f6\uff0c\u5b9e\u4f8b\u5305\u542b\u7684\u6240\u6709file\u3001image\u5c06\u88ab\u81ea\u52a8\u5220\u9664\u3002 \u9ed8\u8ba4\u5934\u50cf\u88ab\u5220\u9664\u7684\u95ee\u9898 \u9ed8\u8ba4\u5934\u50cf\u4e0d\u4f7f\u7528default\uff0c\u4f7f\u7528null=True\uff0c\u83b7\u53d6\u5934\u50cf\u4f7f\u7528\u65b9\u6cd5\uff1a def display_avatar ( self ): return self . avatar . url or '/static/img/default-avatar.png' \u8be6\u89c1https://github.com/un1t/django-cleanup/issues/8 \ufeff\u7f29\u7565\u56fe\u517c\u5bb9\uff1a \u517c\u5bb9\u7f29\u7565\u56fe\u751f\u6210\u5de5\u5177\uff1a sorl-thumbnail and easy-thumbnail https://github.com/un1t/django-cleanup","title":"\u4f5c\u7528"},{"location":"python/django/django-cleanup/#_5","text":"profile = Message . objects . get ( id = 5 ) media_root = getattr ( settings , 'MEDIA_ROOT' , None ) path = os . path . join ( os . path . join ( media_root , '' ), profile . portrait1 . name ) # \u4fee\u6539\u5934\u50cf\u5206\u8fa8\u7387 from PIL import Image im = Image . open ( path ) out = im . resize (( 200 , 200 ), Image . ANTIALIAS ) out . save ( path ) \u4f7f\u7528django-imagekit\u751f\u6210\u7f29\u7565\u56fe\uff1a \u65b9\u6cd5\u4e00\uff1a avatar_thumbnail = ImageSpecField ( source = 'portrait1' , processors = [ ResizeToFill ( 200 , 200 )], format = 'PNG' , options = { 'quality' : 100 }) print ( profile . avatar_thumbnail . url ) # > /media/CACHE/images/982d5af84cddddfd0fbf70892b4431e4.jpg print ( profile . avatar_thumbnail . width ) \u65e0\u6cd5\u4f7f\u7528django-cleanup\u81ea\u52a8\u5220\u9664\u751f\u6210\u7684Cache\u6587\u4ef6 \u65b9\u6cd5\u4e8c\uff1a from imagekit import ImageSpec from imagekit.processors import ResizeToFill class Thumbnail ( ImageSpec ): processors = [ ResizeToFill ( 200 , 200 )] format = 'JPEG' options = { 'quality' : 100 } source_file = profile . portrait1 image_generator = Thumbnail ( source = source_file ) result = image_generator . generate () print ( result , type ( result )) dest = open ( path , \"wb+\" ) dest . write ( result . read ()) dest . close () \u7f29\u7565\u56fe\u8986\u76d6\u539f\u6587\u4ef6\u6216\u8005\u76f4\u63a5\u4fdd\u5b58\u81f3\u5176\u4ed6\u6587\u4ef6\u3002 \u540c\u5c3a\u5bf8\u751f\u6210\u540c\u5c3a\u5bf8\u7684\u7f29\u7565\u56fe\u4f1a\u53d8\u6a21\u7cca\uff0c\u4f46\u8fdc\u4f18\u4e8e\u4f7f\u7528PIL-Image\u4fee\u6539\u5206\u8fa8\u7387\u751f\u6210\u7684\u56fe\u7247\u8d28\u91cf\u3002","title":"\u4fee\u6539\u5206\u8fa8\u7387"},{"location":"python/django/django-cleanup/#sorl-thumbnail","text":"\u5b89\u88c5 pip install sorl - thumbnail \u914d\u7f6e INSTALLED_APPS = ( ... 'sorl.thumbnail' , ) No Such Table \u9519\u8bef python manage . py makemigrations thumbnail python manage . py migrate thumbnail \u83b7\u53d6\u53ca\u5220\u9664\u7f29\u7565\u56fe from sorl.thumbnail import get_thumbnail from sorl.thumbnail import delete im = get_thumbnail ( my_file , '100x100' , crop = 'center' , quality = 99 ) delete ( my_file ) \u914d\u5408django-cleanup from django_cleanup.signals import cleanup_pre_delete , cleanup_post_delete def sorl_delete ( ** kwargs ): from sorl.thumbnail import delete delete ( kwargs [ 'file' ]) cleanup_pre_delete . connect ( sorl_delete )","title":"sorl-thumbnail"},{"location":"python/django/django-constance/","text":"\u672c\u6587\u57fa\u4e8e django-constance==2.2.0 \u5b89\u88c5 django-constance \u5206\u4e3a redis \u5b58\u50a8\u8bbe\u7f6e\u7684\u7248\u672c\u548c\u4f7f\u7528 database \u5b58\u50a8\u8bbe\u7f6e\u7684\u7248\u672c\uff0c\u5bf9\u5e94\u7684\u4e0b\u8f7d\u65b9\u5f0f\u5206\u522b\u4e3a\uff1a pip install \"django-constance[redis]\" pip install \"django-constance[database]\" \u5982\u679c\u786e\u8ba4\u76f8\u5173\u4f9d\u8d56\u5df2\u7ecf\u5b89\u88c5\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0b\u5217\u547d\u4ee4\u5b89\u88c5\uff1a pip install django - constance \u914d\u7f6e settings.py\u6587\u4ef6 \uff1a # \u5df2\u5b89\u88c5\u7684Apps INSTALLED_APPS = [ 'constance' , ... ] \u82e5\u4f7f\u7528 database \u5b58\u50a8\u8bbe\u7f6e\u7684\u7248\u672c\uff0c\u8bf7\u4f7f\u7528\uff1a # \u5df2\u5b89\u88c5\u7684Apps INSTALLED_APPS = [ 'constance' , 'constance.backends.database' , ... ] \u58f0\u660e\u5f85\u914d\u7f6e\u9009\u9879\uff1a CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend' CONSTANCE_IGNORE_ADMIN_VERSION_CHECK = True CONSTANCE_ADDITIONAL_FIELDS = { 'coupon_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"\u65f6+\u5206+\u79d2\" ), ( 1 , \"\u65f6+\u5206\" ), ( 2 , \"\u65f6\" ), ( 3 , \"\u5ffd\u7565\" )) }], } CONSTANCE_CONFIG = { 'site_name' : ( '\u5357\u4eac\u8bd7\u8fdc\u542f' , '\u7f51\u7ad9\u6807\u9898' ), 'site_description' : ( '\u5357\u4eac\u8bd7\u8fdc\u542f' , '\u7ad9\u70b9\u63cf\u8ff0' ), 'coupon_fix_code' : ( 'DreamGo' , '\u7535\u5b50\u5238\u56fa\u5b9a\u4ee3\u7801' ), 'coupon_time_format' : ( 0 , '\u7535\u5b50\u5238\u65f6\u95f4\u683c\u5f0f' , 'coupon_select' ), 'sms_reset_date' : ( 1 , '\u5206\u914d\u77ed\u4fe1\u6e05\u96f6\u65f6\u95f4' ), } CONSTANCE_CONFIG_FIELDSETS = { '\u7ad9\u70b9\u8bbe\u7f6e' : ( 'site_name' , 'site_description' ), '\u7535\u5b50\u5238' : ( 'coupon_fix_code' , 'coupon_time_format' , ), '\u77ed\u4fe1' : ( 'sms_reset_date' , ), } 'site_name': ('\u5357\u4eac\u8bd7\u8fdc\u542f', '\u7f51\u7ad9\u6807\u9898'), \u5206\u522b\u4ee3\u8868 \u8bbe\u7f6e\u53d8\u91cf\u7684\u540d\u79f0 \u9ed8\u8ba4\u503c \u8bbe\u7f6e\u53d8\u91cf\u7528\u9014\u63cf\u8ff0( help_text ) 'coupon_time_format': (0, '\u7535\u5b50\u5238\u65f6\u95f4\u683c\u5f0f', 'coupon_select'), \u524d3\u4e2a\u53d8\u91cf\u610f\u4e49\u540c\u4e0a\uff0c\u6700\u540e\u7684 'coupon_select' \u4ee3\u8868\u4f7f\u7528\u81ea\u5b9a\u4e49\u9009\u62e9\u63a7\u4ef6\u6765\u9009\u62e9\u503c\u3002 Admin\u6837\u5f0f \u4f7f\u7528\u4ee3\u7801\u83b7\u53d6\u5f53\u524d\u8bbe\u7f6e\u503c from constance import config def set_value ( key , value ): \"\"\" \u66f4\u65b0\u6570\u636e\u5e93\u8bbe\u7f6e\u9879 :param key: \u952e\u540d :param value: \u503c :return: \u65e0\u8fd4\u56de \"\"\" setattr ( config , key , value ) def get_value ( key ): \"\"\" \u83b7\u53d6\u6570\u636e\u5e93\u8bbe\u7f6e\u9879\u503c :param key: \u952e\u540d :return: \u952e\u540d\u5bf9\u5e94\u7684\u8bbe\u7f6e\u9879\u503c \"\"\" return getattr ( config , key ) \u7528\u6cd5\uff1a set_value ( 'site_name' , '\u5357\u4eac\u8bd7\u8fdc\u542f(\u4fee\u6539\u540e)' ) get_value ( 'site_name' ) # \u5e94\u4e3a'\u5357\u4eac\u8bd7\u8fdc\u542f(\u4fee\u6539\u540e)' DjangoRestFramework\u4e2d\u4f7f\u7528 utils.py: from constance import config from constance.settings import CONFIG def get_settings ( allow_settings ): \"\"\" \u83b7\u53d6\u5bf9\u5e94settings\u7ec4\u6210\u7684list :param allow_settings: \u5f85\u8f6c\u4e49\u5217\u8868 :return: \u5bf9\u5e94settings\u7ec4\u6210\u7684list \"\"\" setting_list = [] for key , options in CONFIG . items (): if key in allow_settings : default , help_text = options [ 0 ], options [ 1 ] data = { 'key' : key , 'default' : default , 'help_text' : help_text , 'value' : get_value ( key )} setting_list . append ( data ) return setting_list views.py: from rest_framework.viewsets import ViewSet from rest_framework.response import Response from .utils import set_value , get_value , CONFIG class SettingViewSet ( ViewSet ): permission_classes = ( IsAuthenticated ,) def setting ( self , request , allow_settings ): if request . method == 'GET' : return Response ( data = get_settings ( allow_settings ), status = status . HTTP_200_OK ) else : all_settings = CONFIG . keys () for key in request . data : if key in allow_settings and key in all_settings : value = request . data [ key ] set_value ( key , '' if value is None else value ) return Response ( data = get_settings ( allow_settings ), status = status . HTTP_200_OK ) def create ( self , request ): \"\"\" <p>\u66f4\u65b0\u8bbe\u7f6ePOST:<code>{'\u8bbe\u7f6eKey': \u65b0\u503c}</code> \"\"\" return self . setting ( request , CONFIG . keys ()) def list ( self , request ): \"\"\" \u8fd4\u56de\u6240\u6709\u5f85\u9009\u8bbe\u7f6e\u9879 \"\"\" return self . setting ( request , CONFIG . keys ()) @action ( methods = [ 'GET' , 'POST' ], detail = False ) def site ( self , request ): \"\"\"\u4ec5\u5141\u8bb8\u8bbe\u7f6e \u7f51\u7ad9\u6807\u9898\u3001\u7ad9\u70b9\u63cf\u8ff0\u7684\u63a5\u53e3\"\"\" allow_settings = [ 'site_name' , 'site_description' ] return self . setting ( request , allow_settings ) \u56fa\u5b9a\u8bbe\u7f6e\u9879\u5728Admin\u4e2d\u7684\u987a\u5e8f \u4e3a\u4e86\u9632\u6b62\u6bcf\u6b21\u6253\u5f00\u8bbe\u7f6e\u754c\u9762\u8bbe\u7f6e\u9009\u9879\u9519\u8bef\uff0c\u9700\u8981\u4f7f\u7528 OrderedDict \u6765\u4fdd\u8bc1\u987a\u5e8f\uff1a from collections import OrderedDict SITE_NAME = 'site_name' SITE_DESCRIPTION = 'site_description' CONSTANCE_CONFIG = OrderedDict ([ ( SITE_NAME , ( '\u5357\u4eac\u8bd7\u8fdc\u542f' , '\u7ad9\u70b9\u540d\u79f0' )), ( SITE_DESCRIPTION , ( '\u5357\u4eac\u8bd7\u8fdc\u542f' , '\u7ad9\u70b9\u63cf\u8ff0' )), ]) CONSTANCE_CONFIG_FIELDSETS = OrderedDict ([ ( '\u7ad9\u70b9\u8bbe\u7f6e' , ( SITE_NAME , SITE_DESCRIPTION )), ]) QA \u51fa\u73b0\u6ca1\u6709\u8868\u7684\u60c5\u51b5 \u6267\u884c\uff1a python manage . py makemigrations constance python manage . py migrate constance \u5728makemigrations\u65f6\u5c31\u63d0\u793a\u8868\u4e0d\u5b58\u5728 INSTALLED_APPS \u4e2d\u52a0 constance.backends.database ,\u5220\u9664\u4f7f\u7528\u5230 constance \u7684\u5730\u65b9\uff0c makemigrations \u4e4b\u540e\u518d\u8fc1\u79fb\u3002 \u4fee\u6539\u6743\u9650 'constance.change_config' \u7684\u540d\u79f0\u540e\u62a5\u9519 constance \u9ed8\u8ba4\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6743\u9650 'constance.change_config' \uff0c\u4f46\u662f\u5f53\u4fee\u6539\u4e86\u8be5\u6743\u9650\u7684\u9ed8\u8ba4\u6743\u9650\u540d\u79f0\u540e\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e0b\u9519\u8bef\uff1a django.db.utils.IntegrityError: (1062, \"Duplicate entry '2-change_config' for key 'auth_permission_content_type_id_codename_01ab37 5a_uniq'\") \u91cd\u65b0\u6d4f\u89c8\u4ee3\u7801\u540e\u53d1\u73b0\u662f\u5728 constance/apps.py 29\u884c\uff0c\u5199\u4e86\uff1a permission , created = Permission . objects . using ( using ) . get_or_create ( name = 'Can change config' , content_type = content_type , codename = 'change_config' ) \u5c06\u5176\u4fee\u6539\u4e3a\uff1a permission , created = Permission . objects . using ( using ) . get_or_create ( content_type = content_type , codename = 'change_config' , defaults = { 'name' : 'Can change config' }) \u5373\u53ef\u89e3\u51b3\u8fd9\u4e2a\u9519\u8bef\uff0c\u8be6\u89c1 issue \u3002 \u8be5PR\u5df2\u63d0\u4ea4\uff0c\u4ee3\u7801\u5408\u5e76\u6210\u529f\uff0c\u5728\u4e00\u4e2a\u6b63\u5f0f\u7248\u672c\u8be5\u95ee\u9898\u5c06\u88ab\u89e3\u51b3\u3002 makemigrations constance \u4e00\u76f4\u4e0d\u521b\u5efa makemigrations \u6587\u4ef6 Backends->Database pip install django - constance [ database ] CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend' INSTALLED_APPS = ( # other apps 'constance.backends.database' , ) python manage . py migrate database \u9891\u7e41\u67e5\u8be2\u3001\u66f4\u65b0\u7684\u8bbe\u7f6e\u9879 \u4f7f\u7528Cache\u52a0\u5feb\u8bbf\u95ee\u901f\u5ea6 Cache # cache\u914d\u7f6e CACHES = { 'default' : { 'BACKEND' : 'django.core.cache.backends.locmem.LocMemCache' , 'LOCATION' : 'unique-snowflake' , 'KEY_PREFIX' : 'protal' , 'options' : { 'MAX_ENTRIES' : 1024 , } }, 'memcache' : { 'BACKEND' : 'django.core.cache.backends.memcached.MemcachedCache' , 'LOCATION' : '127.0.0.1:11211' , 'KEY_PREFIX' : 'protal' , 'options' : { 'MAX_ENTRIES' : 1024 , } }, } # \u8bbe\u7f6e\u7f13\u5b58 CONSTANCE_DATABASE_CACHE_BACKEND = 'memcache' Illegal mix of collations for operation ' IN ' \u82e5\u5728\u5347\u7ea7\u9879\u76ee\u4e2d\u9047\u5230mysql\u62a5\u9519 Illegal mix of collations for operation ' IN ' \u9700\u8981\u5220\u9664\u6570\u636e\u5e93\uff0c\u518d\u6b21\u521b\u5efa create database database_name character set utf8 ; \u518d\u6b21\u5bfc\u5165\u6570\u636e\u5e93\u5373\u53ef\u3002 \u6587\u6863","title":"Django-constance\u5b9e\u73b0\u52a8\u6001\u8bbe\u7f6e"},{"location":"python/django/django-constance/#_1","text":"django-constance \u5206\u4e3a redis \u5b58\u50a8\u8bbe\u7f6e\u7684\u7248\u672c\u548c\u4f7f\u7528 database \u5b58\u50a8\u8bbe\u7f6e\u7684\u7248\u672c\uff0c\u5bf9\u5e94\u7684\u4e0b\u8f7d\u65b9\u5f0f\u5206\u522b\u4e3a\uff1a pip install \"django-constance[redis]\" pip install \"django-constance[database]\" \u5982\u679c\u786e\u8ba4\u76f8\u5173\u4f9d\u8d56\u5df2\u7ecf\u5b89\u88c5\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0b\u5217\u547d\u4ee4\u5b89\u88c5\uff1a pip install django - constance","title":"\u5b89\u88c5"},{"location":"python/django/django-constance/#_2","text":"settings.py\u6587\u4ef6 \uff1a # \u5df2\u5b89\u88c5\u7684Apps INSTALLED_APPS = [ 'constance' , ... ] \u82e5\u4f7f\u7528 database \u5b58\u50a8\u8bbe\u7f6e\u7684\u7248\u672c\uff0c\u8bf7\u4f7f\u7528\uff1a # \u5df2\u5b89\u88c5\u7684Apps INSTALLED_APPS = [ 'constance' , 'constance.backends.database' , ... ] \u58f0\u660e\u5f85\u914d\u7f6e\u9009\u9879\uff1a CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend' CONSTANCE_IGNORE_ADMIN_VERSION_CHECK = True CONSTANCE_ADDITIONAL_FIELDS = { 'coupon_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"\u65f6+\u5206+\u79d2\" ), ( 1 , \"\u65f6+\u5206\" ), ( 2 , \"\u65f6\" ), ( 3 , \"\u5ffd\u7565\" )) }], } CONSTANCE_CONFIG = { 'site_name' : ( '\u5357\u4eac\u8bd7\u8fdc\u542f' , '\u7f51\u7ad9\u6807\u9898' ), 'site_description' : ( '\u5357\u4eac\u8bd7\u8fdc\u542f' , '\u7ad9\u70b9\u63cf\u8ff0' ), 'coupon_fix_code' : ( 'DreamGo' , '\u7535\u5b50\u5238\u56fa\u5b9a\u4ee3\u7801' ), 'coupon_time_format' : ( 0 , '\u7535\u5b50\u5238\u65f6\u95f4\u683c\u5f0f' , 'coupon_select' ), 'sms_reset_date' : ( 1 , '\u5206\u914d\u77ed\u4fe1\u6e05\u96f6\u65f6\u95f4' ), } CONSTANCE_CONFIG_FIELDSETS = { '\u7ad9\u70b9\u8bbe\u7f6e' : ( 'site_name' , 'site_description' ), '\u7535\u5b50\u5238' : ( 'coupon_fix_code' , 'coupon_time_format' , ), '\u77ed\u4fe1' : ( 'sms_reset_date' , ), } 'site_name': ('\u5357\u4eac\u8bd7\u8fdc\u542f', '\u7f51\u7ad9\u6807\u9898'), \u5206\u522b\u4ee3\u8868 \u8bbe\u7f6e\u53d8\u91cf\u7684\u540d\u79f0 \u9ed8\u8ba4\u503c \u8bbe\u7f6e\u53d8\u91cf\u7528\u9014\u63cf\u8ff0( help_text ) 'coupon_time_format': (0, '\u7535\u5b50\u5238\u65f6\u95f4\u683c\u5f0f', 'coupon_select'), \u524d3\u4e2a\u53d8\u91cf\u610f\u4e49\u540c\u4e0a\uff0c\u6700\u540e\u7684 'coupon_select' \u4ee3\u8868\u4f7f\u7528\u81ea\u5b9a\u4e49\u9009\u62e9\u63a7\u4ef6\u6765\u9009\u62e9\u503c\u3002","title":"\u914d\u7f6e"},{"location":"python/django/django-constance/#admin","text":"","title":"Admin\u6837\u5f0f"},{"location":"python/django/django-constance/#_3","text":"from constance import config def set_value ( key , value ): \"\"\" \u66f4\u65b0\u6570\u636e\u5e93\u8bbe\u7f6e\u9879 :param key: \u952e\u540d :param value: \u503c :return: \u65e0\u8fd4\u56de \"\"\" setattr ( config , key , value ) def get_value ( key ): \"\"\" \u83b7\u53d6\u6570\u636e\u5e93\u8bbe\u7f6e\u9879\u503c :param key: \u952e\u540d :return: \u952e\u540d\u5bf9\u5e94\u7684\u8bbe\u7f6e\u9879\u503c \"\"\" return getattr ( config , key ) \u7528\u6cd5\uff1a set_value ( 'site_name' , '\u5357\u4eac\u8bd7\u8fdc\u542f(\u4fee\u6539\u540e)' ) get_value ( 'site_name' ) # \u5e94\u4e3a'\u5357\u4eac\u8bd7\u8fdc\u542f(\u4fee\u6539\u540e)'","title":"\u4f7f\u7528\u4ee3\u7801\u83b7\u53d6\u5f53\u524d\u8bbe\u7f6e\u503c"},{"location":"python/django/django-constance/#djangorestframework","text":"utils.py: from constance import config from constance.settings import CONFIG def get_settings ( allow_settings ): \"\"\" \u83b7\u53d6\u5bf9\u5e94settings\u7ec4\u6210\u7684list :param allow_settings: \u5f85\u8f6c\u4e49\u5217\u8868 :return: \u5bf9\u5e94settings\u7ec4\u6210\u7684list \"\"\" setting_list = [] for key , options in CONFIG . items (): if key in allow_settings : default , help_text = options [ 0 ], options [ 1 ] data = { 'key' : key , 'default' : default , 'help_text' : help_text , 'value' : get_value ( key )} setting_list . append ( data ) return setting_list views.py: from rest_framework.viewsets import ViewSet from rest_framework.response import Response from .utils import set_value , get_value , CONFIG class SettingViewSet ( ViewSet ): permission_classes = ( IsAuthenticated ,) def setting ( self , request , allow_settings ): if request . method == 'GET' : return Response ( data = get_settings ( allow_settings ), status = status . HTTP_200_OK ) else : all_settings = CONFIG . keys () for key in request . data : if key in allow_settings and key in all_settings : value = request . data [ key ] set_value ( key , '' if value is None else value ) return Response ( data = get_settings ( allow_settings ), status = status . HTTP_200_OK ) def create ( self , request ): \"\"\" <p>\u66f4\u65b0\u8bbe\u7f6ePOST:<code>{'\u8bbe\u7f6eKey': \u65b0\u503c}</code> \"\"\" return self . setting ( request , CONFIG . keys ()) def list ( self , request ): \"\"\" \u8fd4\u56de\u6240\u6709\u5f85\u9009\u8bbe\u7f6e\u9879 \"\"\" return self . setting ( request , CONFIG . keys ()) @action ( methods = [ 'GET' , 'POST' ], detail = False ) def site ( self , request ): \"\"\"\u4ec5\u5141\u8bb8\u8bbe\u7f6e \u7f51\u7ad9\u6807\u9898\u3001\u7ad9\u70b9\u63cf\u8ff0\u7684\u63a5\u53e3\"\"\" allow_settings = [ 'site_name' , 'site_description' ] return self . setting ( request , allow_settings )","title":"DjangoRestFramework\u4e2d\u4f7f\u7528"},{"location":"python/django/django-constance/#admin_1","text":"\u4e3a\u4e86\u9632\u6b62\u6bcf\u6b21\u6253\u5f00\u8bbe\u7f6e\u754c\u9762\u8bbe\u7f6e\u9009\u9879\u9519\u8bef\uff0c\u9700\u8981\u4f7f\u7528 OrderedDict \u6765\u4fdd\u8bc1\u987a\u5e8f\uff1a from collections import OrderedDict SITE_NAME = 'site_name' SITE_DESCRIPTION = 'site_description' CONSTANCE_CONFIG = OrderedDict ([ ( SITE_NAME , ( '\u5357\u4eac\u8bd7\u8fdc\u542f' , '\u7ad9\u70b9\u540d\u79f0' )), ( SITE_DESCRIPTION , ( '\u5357\u4eac\u8bd7\u8fdc\u542f' , '\u7ad9\u70b9\u63cf\u8ff0' )), ]) CONSTANCE_CONFIG_FIELDSETS = OrderedDict ([ ( '\u7ad9\u70b9\u8bbe\u7f6e' , ( SITE_NAME , SITE_DESCRIPTION )), ])","title":"\u56fa\u5b9a\u8bbe\u7f6e\u9879\u5728Admin\u4e2d\u7684\u987a\u5e8f"},{"location":"python/django/django-constance/#qa","text":"","title":"QA"},{"location":"python/django/django-constance/#_4","text":"\u6267\u884c\uff1a python manage . py makemigrations constance python manage . py migrate constance","title":"\u51fa\u73b0\u6ca1\u6709\u8868\u7684\u60c5\u51b5"},{"location":"python/django/django-constance/#makemigrations","text":"INSTALLED_APPS \u4e2d\u52a0 constance.backends.database ,\u5220\u9664\u4f7f\u7528\u5230 constance \u7684\u5730\u65b9\uff0c makemigrations \u4e4b\u540e\u518d\u8fc1\u79fb\u3002","title":"\u5728makemigrations\u65f6\u5c31\u63d0\u793a\u8868\u4e0d\u5b58\u5728"},{"location":"python/django/django-constance/#constancechange_config","text":"constance \u9ed8\u8ba4\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6743\u9650 'constance.change_config' \uff0c\u4f46\u662f\u5f53\u4fee\u6539\u4e86\u8be5\u6743\u9650\u7684\u9ed8\u8ba4\u6743\u9650\u540d\u79f0\u540e\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e0b\u9519\u8bef\uff1a django.db.utils.IntegrityError: (1062, \"Duplicate entry '2-change_config' for key 'auth_permission_content_type_id_codename_01ab37 5a_uniq'\") \u91cd\u65b0\u6d4f\u89c8\u4ee3\u7801\u540e\u53d1\u73b0\u662f\u5728 constance/apps.py 29\u884c\uff0c\u5199\u4e86\uff1a permission , created = Permission . objects . using ( using ) . get_or_create ( name = 'Can change config' , content_type = content_type , codename = 'change_config' ) \u5c06\u5176\u4fee\u6539\u4e3a\uff1a permission , created = Permission . objects . using ( using ) . get_or_create ( content_type = content_type , codename = 'change_config' , defaults = { 'name' : 'Can change config' }) \u5373\u53ef\u89e3\u51b3\u8fd9\u4e2a\u9519\u8bef\uff0c\u8be6\u89c1 issue \u3002 \u8be5PR\u5df2\u63d0\u4ea4\uff0c\u4ee3\u7801\u5408\u5e76\u6210\u529f\uff0c\u5728\u4e00\u4e2a\u6b63\u5f0f\u7248\u672c\u8be5\u95ee\u9898\u5c06\u88ab\u89e3\u51b3\u3002","title":"\u4fee\u6539\u6743\u9650'constance.change_config'\u7684\u540d\u79f0\u540e\u62a5\u9519"},{"location":"python/django/django-constance/#makemigrations-constancemakemigrations","text":"Backends->Database pip install django - constance [ database ] CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend' INSTALLED_APPS = ( # other apps 'constance.backends.database' , ) python manage . py migrate database","title":"makemigrations constance\u4e00\u76f4\u4e0d\u521b\u5efamakemigrations\u6587\u4ef6"},{"location":"python/django/django-constance/#cache","text":"Cache # cache\u914d\u7f6e CACHES = { 'default' : { 'BACKEND' : 'django.core.cache.backends.locmem.LocMemCache' , 'LOCATION' : 'unique-snowflake' , 'KEY_PREFIX' : 'protal' , 'options' : { 'MAX_ENTRIES' : 1024 , } }, 'memcache' : { 'BACKEND' : 'django.core.cache.backends.memcached.MemcachedCache' , 'LOCATION' : '127.0.0.1:11211' , 'KEY_PREFIX' : 'protal' , 'options' : { 'MAX_ENTRIES' : 1024 , } }, } # \u8bbe\u7f6e\u7f13\u5b58 CONSTANCE_DATABASE_CACHE_BACKEND = 'memcache'","title":"\u9891\u7e41\u67e5\u8be2\u3001\u66f4\u65b0\u7684\u8bbe\u7f6e\u9879 \u4f7f\u7528Cache\u52a0\u5feb\u8bbf\u95ee\u901f\u5ea6"},{"location":"python/django/django-constance/#illegal-mix-of-collations-for-operation-in","text":"\u82e5\u5728\u5347\u7ea7\u9879\u76ee\u4e2d\u9047\u5230mysql\u62a5\u9519 Illegal mix of collations for operation ' IN ' \u9700\u8981\u5220\u9664\u6570\u636e\u5e93\uff0c\u518d\u6b21\u521b\u5efa create database database_name character set utf8 ; \u518d\u6b21\u5bfc\u5165\u6570\u636e\u5e93\u5373\u53ef\u3002 \u6587\u6863","title":"Illegal mix of collations for operation ' IN '"},{"location":"python/django/django-cors-headers/","text":"\u95ee\u9898\u8bf4\u660e \u5728Django\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u524d\u540e\u7aef\u5206\u79bb\u8bbe\u8ba1\u7684\u7ad9\u70b9\u8d8a\u6765\u8d8a\u591a\uff0c\u5982Django+VUE\u3001Django+Angular\u3002\u5728\u4f7f\u7528DjangoRestFramework\u5f00\u53d1API\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u524d\u7aef\u7ad9\u70b9\u548c\u540e\u7aefAPI\u7ad9\u70b9\u57df\u540d\u5f80\u5f80\u4e0d\u540c\uff0c\u968f\u4e4b\u800c\u6765\u7684\u4fbf\u662f\u8de8\u57df\u95ee\u9898\u3002 \u8de8\u57df\u653b\u51fb\u662f\u4e00\u79cd\u5e38\u89c1\u7684Web\u653b\u51fb\u624b\u6bb5\uff0c\u5e38\u89c1\u7684\u653b\u51fb\u6d41\u7a0b\u4e3a\uff1a \u5047\u8bbe\u73b0\u5728\u4f60\u6709\u4e00\u4e2a\u524d\u7aef\u7ad9\u70b9A\u548c\u540e\u7aef\u7ad9\u70b9B\uff0c\u524d\u7aef\u7ad9\u70b9A\u4f7f\u7528Ajax\u7684GET\u8bf7\u6c42\u540e\u7aef\u7ad9\u70b9B\u7684\u63a5\u53e3 /withdraw/?money=1000&account=yinkh \u53ef\u4ee5\u5411\u8d26\u53f7yinkh\u63d0\u73b0\u4e00\u5343\u5143\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4f7f\u7528token\u8ba4\u8bc1\u6216\u8005session\u8ba4\u8bc1\uff0c\u7528\u6237\u7684\u8eab\u4efd\u4fe1\u606f\u4f1a\u88ab\u7f13\u5b58\u5728\u7528\u6237\u7684\u6d4f\u89c8\u5668\u4e2d\u3002\u73b0\u5728\u5047\u8bbe\u6709\u4e0d\u6cd5\u5206\u5b50\u67b6\u8bbe\u4e86\u4e00\u4e2a\u7ad9\u70b9C,\u5728\u7ad9\u70b9C\u4e2d\u653e\u5165\u4e00\u5f20\u56fe\u7247\u5176src\u8def\u5f84\u8bbe\u7f6e\u4e3a /withdraw/?money=1000&account=xxxx \uff0c\u4e0d\u6cd5\u5206\u5b50\u518d\u5c06\u7ad9\u70b9C\u7684\u94fe\u63a5\u901a\u8fc7\u4e00\u5b9a\u7684\u65b9\u5f0f\u8bf1\u5bfc\u4f60\u5728\u7f13\u5b58\u6709\u540e\u7aef\u7ad9\u70b9B\u7684\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\uff0c\u5982\u679c\u540e\u7aef\u7ad9\u70b9B\u6ca1\u6709\u505a\u8de8\u57df\u8bbf\u95ee\u63a7\u5236\u7684\u8bdd\uff0c\u4f60\u5c31\u5c06\u50cf\u4e0d\u6cd5\u5206\u5b50\u7684\u8d26\u6237xxxx\u63d0\u73b0\u4e00\u5343\u5143\u3002 \u800c\u8de8\u57df\u8bbf\u95ee\u63a7\u5236\u662f\u901a\u8fc7\u9a8c\u8bc1\u8bf7\u6c42\u6765\u6e90\u7ad9\u70b9\uff0c\u4ee5\u9632\u6b62\u8de8\u57df\u653b\u51fb\u3002\u53ea\u6709\u4f60\u5c06\u524d\u7aef\u7ad9\u70b9A\u5bf9\u5e94\u7684\u57df\u540d\u6dfb\u52a0\u81f3\u540e\u7aef\u7ad9\u70b9B\u7684\u53ef\u4fe1\u5217\u8868\u4e2d\uff0c\u4f60\u624d\u80fd\u6b63\u786e\u7684\u8bf7\u6c42\u5bf9\u5e94\u7684API\u63a5\u53e3\uff0c\u5426\u5219\u8bf7\u6c42\u5c06\u88ab\u540e\u7aef\u7ad9\u70b9B\u62d2\u7edd\u3002 \u5b89\u88c5 pip install django - cors - headers == 2.4.0 \u8bbe\u7f6e \u5728 settings.py \u4e2d\uff1a 1 \u8bbe\u7f6e INSTALLED_APPS INSTALLED_APPS = [ ... 'corsheaders' , ... ] 2 \u8bbe\u7f6e MIDDLEWARE,\u82e5\u4f60\u4f7f\u7528\u7684Django\u7248\u672c\u5c0f\u4e8e1.10\uff0c\u8be5\u9879\u4e3aMIDDLEWARE_CLASSES\u3002 MIDDLEWARE = [ ... 'corsheaders.middleware.CorsMiddleware' , 'django.middleware.common.CommonMiddleware' , ... ] 3 \u8bbe\u7f6e\u4fe1\u4efb\u7ad9\u70b9 # \u5141\u8bb8\u8de8\u57df if DEBUG : CORS_ORIGIN_ALLOW_ALL = True else : CORS_ORIGIN_WHITELIST = ( 'www.example.com' , ) \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u65e2 DEBUG=True \u65f6\uff0c\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5c06 CORS_ORIGIN_ALLOW_ALL \u8bbe\u7f6e\u4e3a True \uff0c\u8fd9\u9879\u8bbe\u7f6e\u76f8\u5f53\u4e8e\u5173\u95ed\u4e86\u7ad9\u70b9\u9632\u6b62\u8de8\u57df\u653b\u51fb\u7684\u529f\u80fd\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u9700\u8981\u4f7f\u7528 CORS_ORIGIN_WHITELIST \uff0c\u5c06\u4f60\u4fe1\u4efb\u7684\u524d\u7aef\u7ad9\u70b9\u57df\u540d\u52a0\u5165 CORS_ORIGIN_WHITELIST \u5217\u8868\u4e2d\uff0c\u8be5\u57df\u540d\u4e0d\u8981\u4ee5 http:// \u6216\u8005 https:// \u5f00\u5934\u3002 \u81f3\u6b64\u4f60\u7684\u524d\u7aef\u7ad9\u70b9\u5e94\u8be5\u5c31\u53ef\u4ee5\u6b63\u786e\u7684\u8bbf\u95ee\u540e\u7aef\u7ad9\u70b9\u7684\u63a5\u53e3\u4e86\u3002 \u66f4\u591a\u8bbe\u7f6e\u9879\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 \u7b14\u8bb0 Q: \u5728\u4f7f\u7528\u4e86 django-cors-headers \u5e93\u540e\uff0c\u65e0\u6cd5\u83b7\u53d6\u81ea\u5b9a\u4e49\u7684 requset header \u3002 A: settings.py \u52a0\u5165\uff1a from corsheaders.defaults import default_headers # The list of non-standard HTTP headers that can be used when making the actual request CORS_ALLOW_HEADERS = default_headers + ( 'YourCustomHeaderName' ,)","title":"Django\u4f7f\u7528django-cors-headers\u5904\u7406API\u8de8\u57df\u95ee\u9898"},{"location":"python/django/django-cors-headers/#_1","text":"\u5728Django\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u524d\u540e\u7aef\u5206\u79bb\u8bbe\u8ba1\u7684\u7ad9\u70b9\u8d8a\u6765\u8d8a\u591a\uff0c\u5982Django+VUE\u3001Django+Angular\u3002\u5728\u4f7f\u7528DjangoRestFramework\u5f00\u53d1API\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u524d\u7aef\u7ad9\u70b9\u548c\u540e\u7aefAPI\u7ad9\u70b9\u57df\u540d\u5f80\u5f80\u4e0d\u540c\uff0c\u968f\u4e4b\u800c\u6765\u7684\u4fbf\u662f\u8de8\u57df\u95ee\u9898\u3002 \u8de8\u57df\u653b\u51fb\u662f\u4e00\u79cd\u5e38\u89c1\u7684Web\u653b\u51fb\u624b\u6bb5\uff0c\u5e38\u89c1\u7684\u653b\u51fb\u6d41\u7a0b\u4e3a\uff1a \u5047\u8bbe\u73b0\u5728\u4f60\u6709\u4e00\u4e2a\u524d\u7aef\u7ad9\u70b9A\u548c\u540e\u7aef\u7ad9\u70b9B\uff0c\u524d\u7aef\u7ad9\u70b9A\u4f7f\u7528Ajax\u7684GET\u8bf7\u6c42\u540e\u7aef\u7ad9\u70b9B\u7684\u63a5\u53e3 /withdraw/?money=1000&account=yinkh \u53ef\u4ee5\u5411\u8d26\u53f7yinkh\u63d0\u73b0\u4e00\u5343\u5143\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4f7f\u7528token\u8ba4\u8bc1\u6216\u8005session\u8ba4\u8bc1\uff0c\u7528\u6237\u7684\u8eab\u4efd\u4fe1\u606f\u4f1a\u88ab\u7f13\u5b58\u5728\u7528\u6237\u7684\u6d4f\u89c8\u5668\u4e2d\u3002\u73b0\u5728\u5047\u8bbe\u6709\u4e0d\u6cd5\u5206\u5b50\u67b6\u8bbe\u4e86\u4e00\u4e2a\u7ad9\u70b9C,\u5728\u7ad9\u70b9C\u4e2d\u653e\u5165\u4e00\u5f20\u56fe\u7247\u5176src\u8def\u5f84\u8bbe\u7f6e\u4e3a /withdraw/?money=1000&account=xxxx \uff0c\u4e0d\u6cd5\u5206\u5b50\u518d\u5c06\u7ad9\u70b9C\u7684\u94fe\u63a5\u901a\u8fc7\u4e00\u5b9a\u7684\u65b9\u5f0f\u8bf1\u5bfc\u4f60\u5728\u7f13\u5b58\u6709\u540e\u7aef\u7ad9\u70b9B\u7684\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\uff0c\u5982\u679c\u540e\u7aef\u7ad9\u70b9B\u6ca1\u6709\u505a\u8de8\u57df\u8bbf\u95ee\u63a7\u5236\u7684\u8bdd\uff0c\u4f60\u5c31\u5c06\u50cf\u4e0d\u6cd5\u5206\u5b50\u7684\u8d26\u6237xxxx\u63d0\u73b0\u4e00\u5343\u5143\u3002 \u800c\u8de8\u57df\u8bbf\u95ee\u63a7\u5236\u662f\u901a\u8fc7\u9a8c\u8bc1\u8bf7\u6c42\u6765\u6e90\u7ad9\u70b9\uff0c\u4ee5\u9632\u6b62\u8de8\u57df\u653b\u51fb\u3002\u53ea\u6709\u4f60\u5c06\u524d\u7aef\u7ad9\u70b9A\u5bf9\u5e94\u7684\u57df\u540d\u6dfb\u52a0\u81f3\u540e\u7aef\u7ad9\u70b9B\u7684\u53ef\u4fe1\u5217\u8868\u4e2d\uff0c\u4f60\u624d\u80fd\u6b63\u786e\u7684\u8bf7\u6c42\u5bf9\u5e94\u7684API\u63a5\u53e3\uff0c\u5426\u5219\u8bf7\u6c42\u5c06\u88ab\u540e\u7aef\u7ad9\u70b9B\u62d2\u7edd\u3002","title":"\u95ee\u9898\u8bf4\u660e"},{"location":"python/django/django-cors-headers/#_2","text":"pip install django - cors - headers == 2.4.0","title":"\u5b89\u88c5"},{"location":"python/django/django-cors-headers/#_3","text":"\u5728 settings.py \u4e2d\uff1a 1 \u8bbe\u7f6e INSTALLED_APPS INSTALLED_APPS = [ ... 'corsheaders' , ... ] 2 \u8bbe\u7f6e MIDDLEWARE,\u82e5\u4f60\u4f7f\u7528\u7684Django\u7248\u672c\u5c0f\u4e8e1.10\uff0c\u8be5\u9879\u4e3aMIDDLEWARE_CLASSES\u3002 MIDDLEWARE = [ ... 'corsheaders.middleware.CorsMiddleware' , 'django.middleware.common.CommonMiddleware' , ... ] 3 \u8bbe\u7f6e\u4fe1\u4efb\u7ad9\u70b9 # \u5141\u8bb8\u8de8\u57df if DEBUG : CORS_ORIGIN_ALLOW_ALL = True else : CORS_ORIGIN_WHITELIST = ( 'www.example.com' , ) \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u65e2 DEBUG=True \u65f6\uff0c\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5c06 CORS_ORIGIN_ALLOW_ALL \u8bbe\u7f6e\u4e3a True \uff0c\u8fd9\u9879\u8bbe\u7f6e\u76f8\u5f53\u4e8e\u5173\u95ed\u4e86\u7ad9\u70b9\u9632\u6b62\u8de8\u57df\u653b\u51fb\u7684\u529f\u80fd\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u9700\u8981\u4f7f\u7528 CORS_ORIGIN_WHITELIST \uff0c\u5c06\u4f60\u4fe1\u4efb\u7684\u524d\u7aef\u7ad9\u70b9\u57df\u540d\u52a0\u5165 CORS_ORIGIN_WHITELIST \u5217\u8868\u4e2d\uff0c\u8be5\u57df\u540d\u4e0d\u8981\u4ee5 http:// \u6216\u8005 https:// \u5f00\u5934\u3002 \u81f3\u6b64\u4f60\u7684\u524d\u7aef\u7ad9\u70b9\u5e94\u8be5\u5c31\u53ef\u4ee5\u6b63\u786e\u7684\u8bbf\u95ee\u540e\u7aef\u7ad9\u70b9\u7684\u63a5\u53e3\u4e86\u3002 \u66f4\u591a\u8bbe\u7f6e\u9879\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002","title":"\u8bbe\u7f6e"},{"location":"python/django/django-cors-headers/#_4","text":"Q: \u5728\u4f7f\u7528\u4e86 django-cors-headers \u5e93\u540e\uff0c\u65e0\u6cd5\u83b7\u53d6\u81ea\u5b9a\u4e49\u7684 requset header \u3002 A: settings.py \u52a0\u5165\uff1a from corsheaders.defaults import default_headers # The list of non-standard HTTP headers that can be used when making the actual request CORS_ALLOW_HEADERS = default_headers + ( 'YourCustomHeaderName' ,)","title":"\u7b14\u8bb0"},{"location":"python/django/django-extensions/","text":"\u5b89\u88c5 Django-extensions ,\u5b89\u88c5\u5b8c\u6210\u540e\u67e5\u770b graph_models \u90e8\u5206\u3002 \u4f7f\u7528\u547d\u4ee4\uff1a python manage.py graph_models -a > my_project.dot \u751f\u6210\u9879\u76eemodels\u5bf9\u5e94\u7684.dot\u6587\u4ef6\u3002\u4e0b\u8f7d Graphviz \u8f6f\u4ef6\uff0c\u4f7f\u7528GVEdit\u6253\u5f00my_project.dot\u6587\u4ef6\u5373\u53ef\u67e5\u770b\u5bf9\u5e94\u7684models\u4f9d\u8d56\u5173\u7cfb\u56fe\u3002 \u5982\u4f55\u5c06.dot\u6587\u4ef6\u8f6c\u5316\u4e3a.png\u6587\u4ef6\uff1a \u5728GVEdit->Graph->Settings\u4e2d\u8bbe\u7f6e\u6587\u4ef6\u8f93\u51fa\u5c5e\u6027\u53ca\u8def\u5f84\uff08\u8def\u5f84\u4e2d\u4e0d\u53ef\u5305\u542b\u4e2d\u6587\uff09\uff0c\u5373\u53ef\u751f\u6210\u5bf9\u5e94\u7684.png\u6587\u4ef6\u3002 \u793a\u4f8b\u56fe\u7247\uff1a \u9519\u8bef\u8bb0\u5f55\uff1a python manage.py graph_models --pygraphviz -a -g -o > my_project.png \u9700\u8981\u4f7f\u7528pip install pygraphviz\u5b89\u88c5pygraphviz\uff0c\u5b89\u88c5\u5931\u8d25\u3002 python manage.py graph_models --pydot -a -g -o > my_project.png \u9700\u8981\u4f7f\u7528pip install pyparsing pydot\uff0c\u5b89\u88c5\u6210\u529f\u3002\u4f46\u662f\u8fd0\u884c\u4e0a\u884c\u547d\u4ee4\u4f1a\u63d0\u793a \u201cdot.exe not found in path\u201d\u9519\u8bef\uff0c\u4f30\u6d4b\u539f\u56e0\u4e3awindos\u5e73\u53f0\u4e0a\u73af\u5883\u53d8\u91cf\u6ca1\u6709\u8bbe\u7f6e\u6216\u8005\u8bbe\u7f6e\u9519\u8bef\u3002","title":"Django\u6a21\u578b\u4f9d\u8d56\u53ef\u89c6\u5316"},{"location":"python/django/django-haystack/","text":"\u7b80\u8ff0 Haystack(\u7a3b\u8349\u5806)\u4e00\u822c\u7528\u4e8e\u5f62\u5bb9\u5f85\u68c0\u7d22\u7684\u96c6\u5408\uff0cneedle(\u9488)\u4e00\u822c\u7528\u4e8e\u5f62\u5bb9\u5f85\u68c0\u7d22\u7684\u5bf9\u8c61\uff0c\u4ee5\u5927\u6d77\u635e\u9488\u6765\u5f62\u5bb9\u5168\u5c40\u641c\u7d22\u53ef\u4ee5\u8bf4\u662f\u5341\u5206\u7684\u5f62\u8c61\u751f\u52a8\u3002\u7b80\u8ff0\u5982\u4f55\u4f7f\u7528 django-haystack + Whoosh + jieba \u6765\u5b9e\u73b0\u591a\u6a21\u578b\u6df7\u5408\u68c0\u7d22\uff0c\u652f\u6301\u6a21\u7cca\u68c0\u7d22\u3001\u5206\u6a21\u578b\u68c0\u7d22\u3001\u68c0\u7d22\u7ed3\u679c\u9ad8\u4eae\u68c0\u7d22\u5173\u952e\u5b57\uff0c\u4ee5\u53ca django-haystck + django-hvad \u5b9e\u73b0\u591a\u8bed\u8a00\u73af\u5883\u4e2d\u7684\u5168\u5c40\u68c0\u7d22\u3002 1\u3001 \u5b89\u88c5\u5bf9\u5e94\u63d2\u4ef6 django - haystack == 2.6.1 Whoosh == 2.7.4 jieba == 0.39 2\u3001 \u66f4\u65b0 settings.py \u6587\u4ef6 # \u68c0\u7d22\u670d\u52a1 HAYSTACK_CONNECTIONS = { 'default' : { 'ENGINE' : 'common.whoosh_cn_backend.ChineseWhooshEngine' , 'PATH' : os . path . join ( os . path . dirname ( __file__ ), 'whoosh_index' ), }, } # \u81ea\u52a8\u66f4\u65b0\u641c\u7d22\u7d22\u5f15 HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor' 3\u3001 \u5c06 jieba \u5206\u8bcd\u52a0\u5165\u68c0\u7d22\u5f15\u64ce\u4e2d \u65b0\u5efa\u6587\u4ef6 common/whoosh_cn_backend.py (\u82e5\u4fee\u6539\u4e86\u6587\u4ef6\u5939\u6216\u6587\u4ef6\u540d\u8bf7\u76f8\u5e94\u4fee\u6539 settings.py \u4e2d\u7684 HAYSTACK_CONNECTIONS->ENGINE \u8def\u5f84),\u5185\u5bb9\u5982\u4e0b\uff1a from haystack.constants import DJANGO_CT , DJANGO_ID , ID from haystack.exceptions import SearchBackendError from whoosh.fields import ID as WHOOSH_ID from whoosh.fields import BOOLEAN , DATETIME , IDLIST , KEYWORD , NGRAM , NGRAMWORDS , NUMERIC , Schema , TEXT from jieba.analyse import ChineseAnalyzer from haystack.backends.whoosh_backend import WhooshSearchBackend , WhooshEngine class ChineseWhooshSearchBackend ( WhooshSearchBackend ): def build_schema ( self , fields ): schema_fields = { ID : WHOOSH_ID ( stored = True , unique = True ), DJANGO_CT : WHOOSH_ID ( stored = True ), DJANGO_ID : WHOOSH_ID ( stored = True ), } # Grab the number of keys that are hard-coded into Haystack. # We'll use this to (possibly) fail slightly more gracefully later. initial_key_count = len ( schema_fields ) content_field_name = '' for field_name , field_class in fields . items (): if field_class . is_multivalued : if field_class . indexed is False : schema_fields [ field_class . index_fieldname ] = IDLIST ( stored = True , field_boost = field_class . boost ) else : schema_fields [ field_class . index_fieldname ] = KEYWORD ( stored = True , commas = True , scorable = True , field_boost = field_class . boost ) elif field_class . field_type in [ 'date' , 'datetime' ]: schema_fields [ field_class . index_fieldname ] = DATETIME ( stored = field_class . stored , sortable = True ) elif field_class . field_type == 'integer' : schema_fields [ field_class . index_fieldname ] = NUMERIC ( stored = field_class . stored , numtype = int , field_boost = field_class . boost ) elif field_class . field_type == 'float' : schema_fields [ field_class . index_fieldname ] = NUMERIC ( stored = field_class . stored , numtype = float , field_boost = field_class . boost ) elif field_class . field_type == 'boolean' : # Field boost isn't supported on BOOLEAN as of 1.8.2. schema_fields [ field_class . index_fieldname ] = BOOLEAN ( stored = field_class . stored ) elif field_class . field_type == 'ngram' : schema_fields [ field_class . index_fieldname ] = NGRAM ( minsize = 3 , maxsize = 15 , stored = field_class . stored , field_boost = field_class . boost ) elif field_class . field_type == 'edge_ngram' : schema_fields [ field_class . index_fieldname ] = NGRAMWORDS ( minsize = 2 , maxsize = 15 , at = 'start' , stored = field_class . stored , field_boost = field_class . boost ) else : schema_fields [ field_class . index_fieldname ] = TEXT ( stored = True , analyzer = ChineseAnalyzer (), field_boost = field_class . boost , sortable = True ) if field_class . document is True : content_field_name = field_class . index_fieldname schema_fields [ field_class . index_fieldname ] . spelling = True # Fail more gracefully than relying on the backend to die if no fields # are found. if len ( schema_fields ) <= initial_key_count : raise SearchBackendError ( \"No fields were found in any search_indexes. Please correct this before attempting to search.\" ) return ( content_field_name , Schema ( ** schema_fields )) class ChineseWhooshEngine ( WhooshEngine ): backend = ChineseWhooshSearchBackend \u4e3b\u8981\u64cd\u4f5c\u662f\u4f7f\u7528 from jieba.analyse import ChineseAnalyzer \u4e2d\u7684 ChineseAnalyzer \u66ff\u6362\u539f\u5148\u7684 StemmingAnalyzer \uff0c\u4ee5\u8fbe\u5230\u66f4\u597d\u7684\u4e2d\u6587\u5206\u8bcd\u6548\u679c\u3002 4\u3001 \u4e3a\u6a21\u578b\u68c0\u7d22\u7d22\u5f15 \u7d22\u5f15\u6587\u4ef6\u653e\u4e8e\u5404\u6a21\u578b\u6240\u5728 app \u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u9ed8\u8ba4\u540d\u79f0\u4e3a search_indexes.py ,\u4ee5\u65b0\u95fb\u548c\u62db\u8058\u4e3a\u4f8b: news/search_indexes.py from haystack import indexes from .models import News class NewsIndex ( indexes . SearchIndex , indexes . Indexable ): text = indexes . CharField ( document = True , use_template = True ) title = indexes . CharField ( null = True , model_attr = 'title' ) summary = indexes . CharField ( null = True , model_attr = 'summary' ) content = indexes . CharField ( null = True , model_attr = 'content' ) publish_time = indexes . DateTimeField ( model_attr = 'publish_time' ) lang = indexes . CharField ( model_attr = 'language_code' ) def get_model ( self ): return News def index_queryset ( self , using = None ): \"\"\"Used when the entire index for model is updated.\"\"\" return self . get_model () . objects . language ( 'all' ) . all () def read_queryset ( self , using = None ): return self . get_model () . objects . language () recruit/search_indexes.py from haystack import indexes from .models import Recruit class RecruitIndex ( indexes . SearchIndex , indexes . Indexable ): text = indexes . CharField ( document = True , use_template = True ) job = indexes . CharField ( null = True , model_attr = 'job' ) place = indexes . CharField ( null = True , model_attr = 'place' ) content = indexes . CharField ( null = True , model_attr = 'content' ) publish_time = indexes . DateTimeField ( model_attr = 'publish_time' ) lang = indexes . CharField ( model_attr = 'language_code' ) def get_model ( self ): return Recruit def index_queryset ( self , using = None ): \"\"\"Used when the entire index for model is updated.\"\"\" return self . get_model () . objects . language ( 'all' ) . all () def read_queryset ( self , using = None ): return self . get_model () . objects . language () NewsIndex\u3001RecruitIndex \u91cc\u7684 lang = indexes.CharField(model_attr='language_code') \u548c index_queryset\\read_queryset \u4e2d\u7684 .language() \u65b9\u6cd5\u5747\u4e3a\u517c\u5bb9 django-hvad \u7684\u5199\u6cd5\uff0c\u672a\u4f7f\u7528 django-hvad \u53ef\u5220\u9664 lang = indexes.CharField(model_attr='language_code') \uff0c\u5c06 .language() \u66ff\u6362\u4e3a .all() \u5373\u53ef\u3002 \u5728templates\u76ee\u5f55\u4e0b\u65b0\u589esearch\u76ee\u5f55\uff0c\u76ee\u5f55\u6811\u5982\u4e0b\uff1a \u251c\u2500 templates \u2502 \u2514\u2500 search \u2502 \u2514\u2500 indexes \u2502 \u251c\u2500 case \u2502 \u251c\u2500 download \u2502 \u251c\u2500 flatpage \u2502 \u251c\u2500 goods \u2502 \u251c\u2500 news \u2502 \u251c\u2500 product \u2502 \u251c\u2500 recruit \u2502 \u251c\u2500 service \u2502 \u251c\u2500 solution \u2502 \u2514\u2500 staff indexes\u4e0b\u7684\u6587\u4ef6\u5939\u4ee5app\u5c0f\u5199\u540d\u79f0\u5f00\u5934\uff0c\u5728 news \u6587\u4ef6\u5939\u4e0b\u65b0\u589e news_text.txt \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a {{ object . title }} {{ object . summary }} {{ object . content }} {{ object . publish_time }} \u5728 recruit \u6587\u4ef6\u5939\u4e0b\u65b0\u589e recruit_text.txt \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a {{ object . job }} {{ object . place }} {{ object . content }} {{ object . publish_time }} \u7136\u540e\u6267\u884c python manage.py rebuild_index \u6765\u5efa\u7acb\u7d22\u5f15\uff0c\u5982\u5df2\u5efa\u7acb\u7d22\u5f15\uff0c\u53ef\u6267\u884c python manage.py update_index \u6765\u66f4\u65b0\u7d22\u5f15\u3002 5\u3001 \u591a\u8bed\u8a00\u68c0\u7d22 urls.py url ( r '^search/' , LangSearchView . as_view (), name = 'web_search' ), views.py from haystack.generic_views import SearchView # \u591a\u8bed\u8a00\u641c\u7d22 class LangSearchView ( BaseMixin , SearchView ): form_class = LangSearchForm paginate_by = 10 forms.py from django.utils.translation import get_language from haystack.forms import HighlightedSearchForm class LangSearchForm ( HighlightedSearchForm ): def search ( self ): sqs = super ( LangSearchForm , self ) . search () sqs = sqs . filter ( lang = get_language ()) return sqs 6\u3001 \u641c\u7d22\u7ed3\u679c\u9ad8\u4eae \u65b0\u589e\u9875\u9762/templates/search/search.html: {% extends 'web/base.html' %} {% load i18n %} {% load highlight %} {% block seo %} {% trans \"\u641c\u7d22\u7ed3\u679c\" as default_seo_title %} {% include \"web/seo.html\" with default_seo_title=default_seo_title %} {% endblock %} {% block css %} < style > span . highlighted { color : #22a7c6 ; } </ style > {% endblock %} {% block main %} < div id = \"news_search\" > < div class = \"container base news_search_container\" > < h2 > {% trans '\u641c\u7d22' %} </ h2 > < form method = \"get\" action = \"{% url 'web_search' %}\" class = \"news_search_form\" > < input class = \"news_search_input\" type = \"text\" name = \"q\" {% if query %} value = \"{{ query }}\" {% else %} value = \"\" {% endif %} placeholder = \"{% trans '\u641c\u7d22\u4f60\u60f3\u8981\u7684\u5173\u952e\u5b57' %}\" > < input type = \"submit\" value = \"\" class = \"back_submit\" > < input type = \"submit\" value = \"\" id = \"search\" style = \"background:url('/static/web/img/search_white.png') no-repeat center center;width: 60px;height: 40px;\" > </ form > < div class = \"thumb-container\" > < span >< img src = \"/static/web/img/location.png\" alt = \"\" ></ span > < a href = \"{% url 'web_search' %}\" > {% trans '\u5173\u952e\u8bcd\u641c\u7d22' %} </ a > </ div > {% if query %} < div class = \"information-list wow fadeInUp \" > < h3 > {% trans '\u641c\u7d22\u7ed3\u679c:' %} </ h3 > {% for result in object_list %} {% if result.model_name == 'news' %} < a class = \"information-item\" href = \"{{ result.object.get_absolute_url }}\" {% if result . object . url %} target = \"_blank\" {% endif %} > < div class = \"information-content\" > < div class = \"information_div\" > < p class = \"information-title\" > {% highlight result.object.title with query %} </ p > < p class = \"information-date\" > {{ result.object.publish_time.date }} </ p > </ div > < div class = \"information-summary-div\" > < p class = \"information-summary\" > {% highlight result.object.summary with query %} </ p > </ divclass > </ div > </ a > {% elif result.model_name == 'recruit' %} < a class = \"information-item\" href = \"{{ result.object.get_absolute_url }}\" {% if result . object . url %} target = \"_blank\" {% endif %} > < div class = \"information-content\" > < div class = \"information_div\" > < p class = \"information-title\" > {% highlight result.object.job with query %} </ p > < p class = \"information-date\" > {{ result.object.update_time.date }} </ p > </ div > < div > < p class = \"information-summary\" > {% highlight result.object.place with query %} </ p > </ div > </ div > </ a > {% endif %} {% empty %} < p > {% trans '\u6ca1\u6709\u627e\u5230\u60a8\u60f3\u8981\u641c\u7d22\u7684\u7ed3\u679c...' %} </ p > {% endfor %} </ div > {% include 'web/pagination.html' %} {% else %} {# Show some example queries to run, maybe query syntax, something else? #} {% endif %} </ div > </ div > {% endblock %} \u4f7f\u7528 highlight \u6807\u7b7e+\u81ea\u5b9a\u4e49\u7684 span.highlighted css \u53ef\u4ee5\u8ba9\u641c\u7d22\u7ed3\u679c\u9ad8\u4eae\uff0c\u4f46 SearchForm \u5fc5\u987b\u8981\u7ee7\u627f HighlightedSearchForm \u3002 {{ result.model_name }} \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u7ed3\u679c\u5bf9\u5e94\u7684\u6a21\u578b\u540d\uff0c\u636e\u6b64\u53ef\u5bf9\u4e0d\u540c\u7684\u641c\u7d22\u7ed3\u679c\u505a\u51fa\u4e0d\u540c\u7684\u5c55\u793a\u6548\u679c\u3002 {{ result.object }} \u65e2\u4e3a\u539f\u59cb\u5bf9\u8c61\uff0c\u53ef\u636e\u6b64\u83b7\u53d6\u5230\u539f\u59cb\u5bf9\u8c61\u7684\u5404\u4e2a\u5c5e\u6027\u3002\u82e5\u60f3\u53ef\u4ee5\u6309\u6a21\u578b\u68c0\u7d22\u8bf7\u4f7f\u7528 ModelSearchForm \u6216 HighlightedModelSearchForm \uff0c\u68c0\u7d22\u53d1\u8d77\u7684 form \u4e0d\u5b9c\u518d\u81ea\u5b9a\u4e49\uff0c\u5e94\u4f7f\u7528 {{ form.as_table }} \u3002","title":"Django-haystack\u5168\u5c40\u641c\u7d22"},{"location":"python/django/django-haystack/#_1","text":"Haystack(\u7a3b\u8349\u5806)\u4e00\u822c\u7528\u4e8e\u5f62\u5bb9\u5f85\u68c0\u7d22\u7684\u96c6\u5408\uff0cneedle(\u9488)\u4e00\u822c\u7528\u4e8e\u5f62\u5bb9\u5f85\u68c0\u7d22\u7684\u5bf9\u8c61\uff0c\u4ee5\u5927\u6d77\u635e\u9488\u6765\u5f62\u5bb9\u5168\u5c40\u641c\u7d22\u53ef\u4ee5\u8bf4\u662f\u5341\u5206\u7684\u5f62\u8c61\u751f\u52a8\u3002\u7b80\u8ff0\u5982\u4f55\u4f7f\u7528 django-haystack + Whoosh + jieba \u6765\u5b9e\u73b0\u591a\u6a21\u578b\u6df7\u5408\u68c0\u7d22\uff0c\u652f\u6301\u6a21\u7cca\u68c0\u7d22\u3001\u5206\u6a21\u578b\u68c0\u7d22\u3001\u68c0\u7d22\u7ed3\u679c\u9ad8\u4eae\u68c0\u7d22\u5173\u952e\u5b57\uff0c\u4ee5\u53ca django-haystck + django-hvad \u5b9e\u73b0\u591a\u8bed\u8a00\u73af\u5883\u4e2d\u7684\u5168\u5c40\u68c0\u7d22\u3002","title":"\u7b80\u8ff0"},{"location":"python/django/django-haystack/#1","text":"django - haystack == 2.6.1 Whoosh == 2.7.4 jieba == 0.39","title":"1\u3001 \u5b89\u88c5\u5bf9\u5e94\u63d2\u4ef6"},{"location":"python/django/django-haystack/#2-settingspy","text":"# \u68c0\u7d22\u670d\u52a1 HAYSTACK_CONNECTIONS = { 'default' : { 'ENGINE' : 'common.whoosh_cn_backend.ChineseWhooshEngine' , 'PATH' : os . path . join ( os . path . dirname ( __file__ ), 'whoosh_index' ), }, } # \u81ea\u52a8\u66f4\u65b0\u641c\u7d22\u7d22\u5f15 HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'","title":"2\u3001 \u66f4\u65b0settings.py\u6587\u4ef6"},{"location":"python/django/django-haystack/#3-jieba","text":"\u65b0\u5efa\u6587\u4ef6 common/whoosh_cn_backend.py (\u82e5\u4fee\u6539\u4e86\u6587\u4ef6\u5939\u6216\u6587\u4ef6\u540d\u8bf7\u76f8\u5e94\u4fee\u6539 settings.py \u4e2d\u7684 HAYSTACK_CONNECTIONS->ENGINE \u8def\u5f84),\u5185\u5bb9\u5982\u4e0b\uff1a from haystack.constants import DJANGO_CT , DJANGO_ID , ID from haystack.exceptions import SearchBackendError from whoosh.fields import ID as WHOOSH_ID from whoosh.fields import BOOLEAN , DATETIME , IDLIST , KEYWORD , NGRAM , NGRAMWORDS , NUMERIC , Schema , TEXT from jieba.analyse import ChineseAnalyzer from haystack.backends.whoosh_backend import WhooshSearchBackend , WhooshEngine class ChineseWhooshSearchBackend ( WhooshSearchBackend ): def build_schema ( self , fields ): schema_fields = { ID : WHOOSH_ID ( stored = True , unique = True ), DJANGO_CT : WHOOSH_ID ( stored = True ), DJANGO_ID : WHOOSH_ID ( stored = True ), } # Grab the number of keys that are hard-coded into Haystack. # We'll use this to (possibly) fail slightly more gracefully later. initial_key_count = len ( schema_fields ) content_field_name = '' for field_name , field_class in fields . items (): if field_class . is_multivalued : if field_class . indexed is False : schema_fields [ field_class . index_fieldname ] = IDLIST ( stored = True , field_boost = field_class . boost ) else : schema_fields [ field_class . index_fieldname ] = KEYWORD ( stored = True , commas = True , scorable = True , field_boost = field_class . boost ) elif field_class . field_type in [ 'date' , 'datetime' ]: schema_fields [ field_class . index_fieldname ] = DATETIME ( stored = field_class . stored , sortable = True ) elif field_class . field_type == 'integer' : schema_fields [ field_class . index_fieldname ] = NUMERIC ( stored = field_class . stored , numtype = int , field_boost = field_class . boost ) elif field_class . field_type == 'float' : schema_fields [ field_class . index_fieldname ] = NUMERIC ( stored = field_class . stored , numtype = float , field_boost = field_class . boost ) elif field_class . field_type == 'boolean' : # Field boost isn't supported on BOOLEAN as of 1.8.2. schema_fields [ field_class . index_fieldname ] = BOOLEAN ( stored = field_class . stored ) elif field_class . field_type == 'ngram' : schema_fields [ field_class . index_fieldname ] = NGRAM ( minsize = 3 , maxsize = 15 , stored = field_class . stored , field_boost = field_class . boost ) elif field_class . field_type == 'edge_ngram' : schema_fields [ field_class . index_fieldname ] = NGRAMWORDS ( minsize = 2 , maxsize = 15 , at = 'start' , stored = field_class . stored , field_boost = field_class . boost ) else : schema_fields [ field_class . index_fieldname ] = TEXT ( stored = True , analyzer = ChineseAnalyzer (), field_boost = field_class . boost , sortable = True ) if field_class . document is True : content_field_name = field_class . index_fieldname schema_fields [ field_class . index_fieldname ] . spelling = True # Fail more gracefully than relying on the backend to die if no fields # are found. if len ( schema_fields ) <= initial_key_count : raise SearchBackendError ( \"No fields were found in any search_indexes. Please correct this before attempting to search.\" ) return ( content_field_name , Schema ( ** schema_fields )) class ChineseWhooshEngine ( WhooshEngine ): backend = ChineseWhooshSearchBackend \u4e3b\u8981\u64cd\u4f5c\u662f\u4f7f\u7528 from jieba.analyse import ChineseAnalyzer \u4e2d\u7684 ChineseAnalyzer \u66ff\u6362\u539f\u5148\u7684 StemmingAnalyzer \uff0c\u4ee5\u8fbe\u5230\u66f4\u597d\u7684\u4e2d\u6587\u5206\u8bcd\u6548\u679c\u3002","title":"3\u3001 \u5c06jieba\u5206\u8bcd\u52a0\u5165\u68c0\u7d22\u5f15\u64ce\u4e2d"},{"location":"python/django/django-haystack/#4","text":"\u7d22\u5f15\u6587\u4ef6\u653e\u4e8e\u5404\u6a21\u578b\u6240\u5728 app \u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u9ed8\u8ba4\u540d\u79f0\u4e3a search_indexes.py ,\u4ee5\u65b0\u95fb\u548c\u62db\u8058\u4e3a\u4f8b: news/search_indexes.py from haystack import indexes from .models import News class NewsIndex ( indexes . SearchIndex , indexes . Indexable ): text = indexes . CharField ( document = True , use_template = True ) title = indexes . CharField ( null = True , model_attr = 'title' ) summary = indexes . CharField ( null = True , model_attr = 'summary' ) content = indexes . CharField ( null = True , model_attr = 'content' ) publish_time = indexes . DateTimeField ( model_attr = 'publish_time' ) lang = indexes . CharField ( model_attr = 'language_code' ) def get_model ( self ): return News def index_queryset ( self , using = None ): \"\"\"Used when the entire index for model is updated.\"\"\" return self . get_model () . objects . language ( 'all' ) . all () def read_queryset ( self , using = None ): return self . get_model () . objects . language () recruit/search_indexes.py from haystack import indexes from .models import Recruit class RecruitIndex ( indexes . SearchIndex , indexes . Indexable ): text = indexes . CharField ( document = True , use_template = True ) job = indexes . CharField ( null = True , model_attr = 'job' ) place = indexes . CharField ( null = True , model_attr = 'place' ) content = indexes . CharField ( null = True , model_attr = 'content' ) publish_time = indexes . DateTimeField ( model_attr = 'publish_time' ) lang = indexes . CharField ( model_attr = 'language_code' ) def get_model ( self ): return Recruit def index_queryset ( self , using = None ): \"\"\"Used when the entire index for model is updated.\"\"\" return self . get_model () . objects . language ( 'all' ) . all () def read_queryset ( self , using = None ): return self . get_model () . objects . language () NewsIndex\u3001RecruitIndex \u91cc\u7684 lang = indexes.CharField(model_attr='language_code') \u548c index_queryset\\read_queryset \u4e2d\u7684 .language() \u65b9\u6cd5\u5747\u4e3a\u517c\u5bb9 django-hvad \u7684\u5199\u6cd5\uff0c\u672a\u4f7f\u7528 django-hvad \u53ef\u5220\u9664 lang = indexes.CharField(model_attr='language_code') \uff0c\u5c06 .language() \u66ff\u6362\u4e3a .all() \u5373\u53ef\u3002 \u5728templates\u76ee\u5f55\u4e0b\u65b0\u589esearch\u76ee\u5f55\uff0c\u76ee\u5f55\u6811\u5982\u4e0b\uff1a \u251c\u2500 templates \u2502 \u2514\u2500 search \u2502 \u2514\u2500 indexes \u2502 \u251c\u2500 case \u2502 \u251c\u2500 download \u2502 \u251c\u2500 flatpage \u2502 \u251c\u2500 goods \u2502 \u251c\u2500 news \u2502 \u251c\u2500 product \u2502 \u251c\u2500 recruit \u2502 \u251c\u2500 service \u2502 \u251c\u2500 solution \u2502 \u2514\u2500 staff indexes\u4e0b\u7684\u6587\u4ef6\u5939\u4ee5app\u5c0f\u5199\u540d\u79f0\u5f00\u5934\uff0c\u5728 news \u6587\u4ef6\u5939\u4e0b\u65b0\u589e news_text.txt \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a {{ object . title }} {{ object . summary }} {{ object . content }} {{ object . publish_time }} \u5728 recruit \u6587\u4ef6\u5939\u4e0b\u65b0\u589e recruit_text.txt \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a {{ object . job }} {{ object . place }} {{ object . content }} {{ object . publish_time }} \u7136\u540e\u6267\u884c python manage.py rebuild_index \u6765\u5efa\u7acb\u7d22\u5f15\uff0c\u5982\u5df2\u5efa\u7acb\u7d22\u5f15\uff0c\u53ef\u6267\u884c python manage.py update_index \u6765\u66f4\u65b0\u7d22\u5f15\u3002","title":"4\u3001 \u4e3a\u6a21\u578b\u68c0\u7d22\u7d22\u5f15"},{"location":"python/django/django-haystack/#5","text":"urls.py url ( r '^search/' , LangSearchView . as_view (), name = 'web_search' ), views.py from haystack.generic_views import SearchView # \u591a\u8bed\u8a00\u641c\u7d22 class LangSearchView ( BaseMixin , SearchView ): form_class = LangSearchForm paginate_by = 10 forms.py from django.utils.translation import get_language from haystack.forms import HighlightedSearchForm class LangSearchForm ( HighlightedSearchForm ): def search ( self ): sqs = super ( LangSearchForm , self ) . search () sqs = sqs . filter ( lang = get_language ()) return sqs","title":"5\u3001 \u591a\u8bed\u8a00\u68c0\u7d22"},{"location":"python/django/django-haystack/#6","text":"\u65b0\u589e\u9875\u9762/templates/search/search.html: {% extends 'web/base.html' %} {% load i18n %} {% load highlight %} {% block seo %} {% trans \"\u641c\u7d22\u7ed3\u679c\" as default_seo_title %} {% include \"web/seo.html\" with default_seo_title=default_seo_title %} {% endblock %} {% block css %} < style > span . highlighted { color : #22a7c6 ; } </ style > {% endblock %} {% block main %} < div id = \"news_search\" > < div class = \"container base news_search_container\" > < h2 > {% trans '\u641c\u7d22' %} </ h2 > < form method = \"get\" action = \"{% url 'web_search' %}\" class = \"news_search_form\" > < input class = \"news_search_input\" type = \"text\" name = \"q\" {% if query %} value = \"{{ query }}\" {% else %} value = \"\" {% endif %} placeholder = \"{% trans '\u641c\u7d22\u4f60\u60f3\u8981\u7684\u5173\u952e\u5b57' %}\" > < input type = \"submit\" value = \"\" class = \"back_submit\" > < input type = \"submit\" value = \"\" id = \"search\" style = \"background:url('/static/web/img/search_white.png') no-repeat center center;width: 60px;height: 40px;\" > </ form > < div class = \"thumb-container\" > < span >< img src = \"/static/web/img/location.png\" alt = \"\" ></ span > < a href = \"{% url 'web_search' %}\" > {% trans '\u5173\u952e\u8bcd\u641c\u7d22' %} </ a > </ div > {% if query %} < div class = \"information-list wow fadeInUp \" > < h3 > {% trans '\u641c\u7d22\u7ed3\u679c:' %} </ h3 > {% for result in object_list %} {% if result.model_name == 'news' %} < a class = \"information-item\" href = \"{{ result.object.get_absolute_url }}\" {% if result . object . url %} target = \"_blank\" {% endif %} > < div class = \"information-content\" > < div class = \"information_div\" > < p class = \"information-title\" > {% highlight result.object.title with query %} </ p > < p class = \"information-date\" > {{ result.object.publish_time.date }} </ p > </ div > < div class = \"information-summary-div\" > < p class = \"information-summary\" > {% highlight result.object.summary with query %} </ p > </ divclass > </ div > </ a > {% elif result.model_name == 'recruit' %} < a class = \"information-item\" href = \"{{ result.object.get_absolute_url }}\" {% if result . object . url %} target = \"_blank\" {% endif %} > < div class = \"information-content\" > < div class = \"information_div\" > < p class = \"information-title\" > {% highlight result.object.job with query %} </ p > < p class = \"information-date\" > {{ result.object.update_time.date }} </ p > </ div > < div > < p class = \"information-summary\" > {% highlight result.object.place with query %} </ p > </ div > </ div > </ a > {% endif %} {% empty %} < p > {% trans '\u6ca1\u6709\u627e\u5230\u60a8\u60f3\u8981\u641c\u7d22\u7684\u7ed3\u679c...' %} </ p > {% endfor %} </ div > {% include 'web/pagination.html' %} {% else %} {# Show some example queries to run, maybe query syntax, something else? #} {% endif %} </ div > </ div > {% endblock %} \u4f7f\u7528 highlight \u6807\u7b7e+\u81ea\u5b9a\u4e49\u7684 span.highlighted css \u53ef\u4ee5\u8ba9\u641c\u7d22\u7ed3\u679c\u9ad8\u4eae\uff0c\u4f46 SearchForm \u5fc5\u987b\u8981\u7ee7\u627f HighlightedSearchForm \u3002 {{ result.model_name }} \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u7ed3\u679c\u5bf9\u5e94\u7684\u6a21\u578b\u540d\uff0c\u636e\u6b64\u53ef\u5bf9\u4e0d\u540c\u7684\u641c\u7d22\u7ed3\u679c\u505a\u51fa\u4e0d\u540c\u7684\u5c55\u793a\u6548\u679c\u3002 {{ result.object }} \u65e2\u4e3a\u539f\u59cb\u5bf9\u8c61\uff0c\u53ef\u636e\u6b64\u83b7\u53d6\u5230\u539f\u59cb\u5bf9\u8c61\u7684\u5404\u4e2a\u5c5e\u6027\u3002\u82e5\u60f3\u53ef\u4ee5\u6309\u6a21\u578b\u68c0\u7d22\u8bf7\u4f7f\u7528 ModelSearchForm \u6216 HighlightedModelSearchForm \uff0c\u68c0\u7d22\u53d1\u8d77\u7684 form \u4e0d\u5b9c\u518d\u81ea\u5b9a\u4e49\uff0c\u5e94\u4f7f\u7528 {{ form.as_table }} \u3002","title":"6\u3001 \u641c\u7d22\u7ed3\u679c\u9ad8\u4eae"},{"location":"python/django/django-model/","text":"\u91cd\u5199model\u7684\u589e\u5220\u67e5\u6539\u65b9\u6cd5: class MyModel ( model . Model ): def save ( self , * args , ** kwargs ): if not self . pk : # \u589e else : # \u6539 return super ( MyModel , self ) . save ( * args , ** kwargs ) def delete ( self ): # \u5220 \u8be5\u65b9\u6cd5\u5728admin\u4e2d\u6279\u91cf\u5220\u9664\u65f6\u4e0d\u53ef\u7528 \u81f3\u9488\u5bf9\u5355\u4e2ainstant\u5220\u9664 return super ( MyModel , self ) . delete () \u5982\u679c\u9700\u8981\u5b9e\u73b0\u6279\u91cf\u5220\u9664\u9700\u8981\u91cd\u5199\u9ed8\u8ba4\u7684Manager: # multiple delete class FilesManager ( models . QuerySet ): def delete ( self , * args , ** kwargs ): for obj in self : obj . file . delete () super ( FilesManager , self ) . delete ( * args , ** kwargs ) class MyModel ( model . Model ): # change default manager to FilesManager objects = FilesManager . as_manager () def save ( self , * args , ** kwargs ): if not self . pk : # \u589e else : # \u6539 return super ( MyModel , self ) . save ( * args , ** kwargs ) def delete ( self ): # \u5220 \u8be5\u65b9\u6cd5\u5728admin\u4e2d\u6279\u91cf\u5220\u9664\u65f6\u4e0d\u53ef\u7528 \u81f3\u9488\u5bf9\u5355\u4e2ainstant\u5220\u9664 return super ( MyModel , self ) . delete () \u5224\u65ad\u5b57\u6bb5\u88ab\u6539\u52a8\u7684\u4e24\u79cd\u65b9\u6cd5 \u65b9\u6cd51:\ufeff class MyModel ( models . Model ): f1 = models . CharField ( max_length = 1 ) def save ( self , * args , ** kw ): if self . pk is not None : this = MyModel . objects . get ( pk = self . pk ) if this . f1 != self . f1 : print 'f1 changed' super ( MyModel , self ) . save ( * args , ** kw ) \u65b9\u6cd52\uff1a class Person ( models . Model ): name = models . CharField () __original_name = None def __init__ ( self , * args , ** kwargs ): super ( Person , self ) . __init__ ( * args , ** kwargs ) self . __original_name = self . name def save ( self , force_insert = False , force_update = False , * args , ** kwargs ): if self . name != self . __original_name : # name changed - do something here super ( Person , self ) . save ( force_insert , force_update , * args , ** kwargs ) self . __original_name = self . name","title":"Django\u91cd\u5199model\u7684\u589e\u5220\u67e5\u6539\u65b9\u6cd5"},{"location":"python/django/django-multiselectfield/","text":"\u5b89\u88c5 pip install django - multiselectfield model from multiselectfield import MultiSelectField MultiCategory = ( ( 0 , '\u6d4b\u8bd51' ), ( 1 , '\u6d4b\u8bd52' ), ( 2 , '\u6d4b\u8bd53' ), ( 3 , '\u6d4b\u8bd54' ), ) # \u7528\u836f\u5bf9\u8d26 class Demo ( models . Model ): # \u7c7b\u578b categories = MultiSelectField ( choices = MultiCategory , max_length = 255 , verbose_name = '\u7c7b\u578b' ) ... \u81ea\u5b9a\u4e49\u6a21\u677f It is possible to customize the HTML of this widget in your form template. To do so, you will need to loop through form.{field}.field.choices . Here is an example that displays the field label underneath/after the checkbox for a MultiSelectField called providers : {% for value, text in form.providers.field.choices %} < div class = \"ui slider checkbox\" > < input id = \"id_providers_{{ forloop.counter0 }}\" name = \"{{ form.providers.name }}\" type = \"checkbox\" value = \"{{ value }}\" {% if value in checked_providers %} checked = \"checked\" {% endif %} > < label > {{ text }} </ label > </ div > {% endfor %} \u672a\u6d4b\u8bd5\uff0c\u76f4\u63a5\u5f15\u7528\u6587\u6863\u3002\u524d\u7aef\u53ef\u914d\u5408\u5e93 multi-select \u4f7f\u7528\u3002 Django REST Framework from rest_framework import fields # \u65b0\u5efa categories\u53c2\u6570\u4f20\u9012list class DemoCreateSerializer ( ModelSerializer ): categories = fields . MultipleChoiceField ( choices = MultiCategory , label = '\u7c7b\u578b' ) ... # \u5217\u8868 \u8be6\u60c5 class DemoSerializer ( ModelSerializer ): class Meta : model = Demo fields = ( 'id' , 'category' , 'get_category_display' ) \u5217\u8868\u548c\u8be6\u60c5\u5927\u81f4\u4f1a\u8fd4\u56de\u5982\u4e0b\u683c\u5f0f\u7684\u6570\u636e\uff1a { \"id\" : 7 , \"categories\" : [ \"0\" , \"1\" , \"2\" ], \"get_categories_display\" : \"\u6d4b\u8bd51, \u6d4b\u8bd52, \u6d4b\u8bd53\" } \u9009\u9879\u503c\u4e3aInt\u7c7b\u578b\u65f6\uff0c\u62a5\u9519 TypeError: sequence item int_value: expected str instance, int found \u636e\u539f\u4f5c\u8005\u6240\u8bf4\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e3a\u4e86\u517c\u5bb9\u6027\u4e0d\u65b9\u4fbf\u4fee\u6539\u3002 \u81ea\u884c\u5728\u4ee3\u7801\u91cc\u505a\u4e86\u517c\u5bb9\uff0c from multiselectfield import MultiSelectField class MultiSelectCompatIntField ( MultiSelectField ): def get_prep_value ( self , value ): return '' if value is None else ',' . join ([ str ( x ) for x in value ]) \u4f7f\u7528 MultiSelectCompatIntField \u66ff\u6362 MultiSelectField \u5373\u53ef\uff0c\u5c06 value \u91cc\u7684 item \u7531 int \u8f6c\u4e3a str \u3002 Pull Request #86","title":"Django-multiselectfield\u5b9e\u73b0\u56fa\u5b9a\u503c\u591a\u9009"},{"location":"python/django/django-multiselectfield/#_1","text":"pip install django - multiselectfield","title":"\u5b89\u88c5"},{"location":"python/django/django-multiselectfield/#model","text":"from multiselectfield import MultiSelectField MultiCategory = ( ( 0 , '\u6d4b\u8bd51' ), ( 1 , '\u6d4b\u8bd52' ), ( 2 , '\u6d4b\u8bd53' ), ( 3 , '\u6d4b\u8bd54' ), ) # \u7528\u836f\u5bf9\u8d26 class Demo ( models . Model ): # \u7c7b\u578b categories = MultiSelectField ( choices = MultiCategory , max_length = 255 , verbose_name = '\u7c7b\u578b' ) ...","title":"model"},{"location":"python/django/django-multiselectfield/#_2","text":"It is possible to customize the HTML of this widget in your form template. To do so, you will need to loop through form.{field}.field.choices . Here is an example that displays the field label underneath/after the checkbox for a MultiSelectField called providers : {% for value, text in form.providers.field.choices %} < div class = \"ui slider checkbox\" > < input id = \"id_providers_{{ forloop.counter0 }}\" name = \"{{ form.providers.name }}\" type = \"checkbox\" value = \"{{ value }}\" {% if value in checked_providers %} checked = \"checked\" {% endif %} > < label > {{ text }} </ label > </ div > {% endfor %} \u672a\u6d4b\u8bd5\uff0c\u76f4\u63a5\u5f15\u7528\u6587\u6863\u3002\u524d\u7aef\u53ef\u914d\u5408\u5e93 multi-select \u4f7f\u7528\u3002","title":"\u81ea\u5b9a\u4e49\u6a21\u677f"},{"location":"python/django/django-multiselectfield/#django-rest-framework","text":"from rest_framework import fields # \u65b0\u5efa categories\u53c2\u6570\u4f20\u9012list class DemoCreateSerializer ( ModelSerializer ): categories = fields . MultipleChoiceField ( choices = MultiCategory , label = '\u7c7b\u578b' ) ... # \u5217\u8868 \u8be6\u60c5 class DemoSerializer ( ModelSerializer ): class Meta : model = Demo fields = ( 'id' , 'category' , 'get_category_display' ) \u5217\u8868\u548c\u8be6\u60c5\u5927\u81f4\u4f1a\u8fd4\u56de\u5982\u4e0b\u683c\u5f0f\u7684\u6570\u636e\uff1a { \"id\" : 7 , \"categories\" : [ \"0\" , \"1\" , \"2\" ], \"get_categories_display\" : \"\u6d4b\u8bd51, \u6d4b\u8bd52, \u6d4b\u8bd53\" }","title":"Django REST Framework"},{"location":"python/django/django-multiselectfield/#inttypeerror-sequence-item-int_value-expected-str-instance-int-found","text":"\u636e\u539f\u4f5c\u8005\u6240\u8bf4\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e3a\u4e86\u517c\u5bb9\u6027\u4e0d\u65b9\u4fbf\u4fee\u6539\u3002 \u81ea\u884c\u5728\u4ee3\u7801\u91cc\u505a\u4e86\u517c\u5bb9\uff0c from multiselectfield import MultiSelectField class MultiSelectCompatIntField ( MultiSelectField ): def get_prep_value ( self , value ): return '' if value is None else ',' . join ([ str ( x ) for x in value ]) \u4f7f\u7528 MultiSelectCompatIntField \u66ff\u6362 MultiSelectField \u5373\u53ef\uff0c\u5c06 value \u91cc\u7684 item \u7531 int \u8f6c\u4e3a str \u3002 Pull Request #86","title":"\u9009\u9879\u503c\u4e3aInt\u7c7b\u578b\u65f6\uff0c\u62a5\u9519TypeError: sequence item int_value: expected str instance, int found"},{"location":"python/django/django-note/","text":"Model\u76f8\u5173 ForeignKey \u662f\u5426\u6709\u503c \u5916\u952e\u662f\u5426\u6709\u503c ForeignKey__isnull = True / False \u8bbe\u7f6erelated_name \u5728\u4e0d\u8bbe\u7f6e\u7684\u65f6\u5019\u9ed8\u8ba4\u540d\u79f0\u662f modelname_set ManyToMnay \u6a21\u578b\uff1a # \u73ed\u7ea7 class MyClass ( models . Model ): # \u540d\u79f0 name = models . CharField ( max_length = 255 , null = True , verbose_name = u '\u540d\u79f0' ) # \u5b66\u5458 students = models . ManyToManyField ( 'education.Student' , blank = True , verbose_name = u '\u5b66\u5458' ) \u6dfb\u52a0\u3001\u79fb\u9664 \u7c7b\u578b\u5bf9\u5e94\u7684\u64cd\u4f5c\u4e3a add/remove \u6279\u91cf\u6dfb\u52a0 add \u4e00\u6b21\u6dfb\u52a0\u4e00\u4e2a queryset \u65f6\uff0c\u7528\u6cd5\u4e3a manytomany.add(*queryset) \u6216\u8005 manytomany.set(queryset) courses = Course . objects . filter ( id__in = request . data . getlist ( 'courses' )) interview . pre_student . courses . add ( * courses ) \u8bbe\u7f6e related_name \u5728\u4e0d\u8bbe\u7f6e\u7684\u65f6\u5019\u9ed8\u8ba4\u540d\u79f0\u662f modelname_set \u53cd\u5411\u68c0\u7d22 \u5b66\u5458\u83b7\u53d6\u81ea\u5df1\u53c2\u52a0\u7684\u6240\u6709\u8bfe\u7a0b\uff1a courses = request . user . prestudent . student . myclass_set . all () # \u4ee5myclass_set\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u53cd\u5411\u68c0\u7d22 myclass\u4e3a\u7c7b\u540d\u540e\u9762\u63a5_set print ( courses ) # , , ]> M2M\u5230 self \u65f6\u7684\u95ee\u9898 \u793a\u4f8b : # \u90e8\u95e8 class Department ( models . Model ): # \u90e8\u95e8\u540d\u79f0 name = models . CharField ( max_length = 255 , verbose_name = u '\u540d\u79f0' ) # \u5b50\u90e8\u95e8 \u5199\u6210'self'\u65f6\u4f1a\u51fa\u73b0\u6dfb\u52a0\u90e8\u95e81\u7684\u5b50\u90e8\u95e8\u4e3a\u90e8\u95e82\u65f6 # \u90e8\u95e82\u7684\u5b50\u90e8\u95e8\u91cc\u4e5f\u4f1a\u6709\u90e8\u95e81\u7684bug departments = models . ManyToManyField ( 'school.Department' , blank = True , verbose_name = '\u5b50\u90e8\u95e8' ) \u6b64\u5904\u5b50\u90e8\u95e8 M2M\u7684\u5173\u8054\u5199\u6210 'self' \u65f6\u4f1a\u51fa\u73b0\u6dfb\u52a0\u90e8\u95e81\u7684\u5b50\u90e8\u95e8\u4e3a\u90e8\u95e82\u65f6\uff0c\u90e8\u95e82\u7684\u5b50\u90e8\u95e8\u91cc\u4e5f\u4f1a\u6709\u90e8\u95e81\u7684bug\u3002 \u5176\u5b9e\u8fd9\u4e0d\u662fbug,\u89e3\u51b3\u65b9\u6cd5\u4e3a \uff081\uff09\u5c06 'self' \u6362\u6210 'department.Department' (2) \u5728 departments \u5b57\u6bb5\u4e2d\u52a0\u5165 'symmetrical=False' \uff0c\u8be6\u7ec6\u4ecb\u7ecd\u89c1 ManyToManyField.symmetrical \u3002 Only used in the definition of ManyToManyFields on self. Consider the following model: from django.db import models class Person ( models . Model ): friends = models . ManyToManyField ( \"self\" ) When Django processes this model, it identifies that it has a ManyToManyField on itself, and as a result, it doesn\u2019t add a person_set attribute to the Person class. Instead, the ManyToManyField is assumed to be symmetrical \u2013 that is, if I am your friend, then you are my friend. If you do not want symmetry in many-to-many relationships with self, set symmetrical to False. This will force Django to add the descriptor for the reverse relationship, allowing ManyToManyField relationships to be non-symmetrical. \u5916\u952e\u5230\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u7c7b\u7684\u5bf9\u8c61 from django.apps import apps from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes.fields import GenericForeignKey class UnSureModel ( models . Model ): # \u7c7b\u7684content_type content_type = models . ForeignKey ( ContentType , null = True , blank = True , verbose_name = u '\u6570\u636e\u6765\u6e90' ) # \u5bf9\u5e94\u7c7b\u578b\u5b9e\u4f8bID object_id = models . PositiveIntegerField ( null = True , blank = True , verbose_name = u '\u5b9e\u4f8bID' ) # \u5bf9\u5e94\u7684\u5b9e\u4f8b content_object = GenericForeignKey ( 'content_type' , 'object_id' ) def get_select_object ( self ): if self . content_type and self . object_id : select_model = apps . get_model ( app_label = self . content_type . app_label , model_name = self . content_type . model ) try : select_object = select_model . objects . get ( id = self . object_id ) return select_object except ObjectDoesNotExist : return None else : return None DurationField \u4f7f\u7528 \u65b0\u589e\u65f6\u4f20\u5165 timedelta \u5bf9\u8c61\uff1a craft = Craft . objects . create ( name = '\u6d4b\u8bd5' , craft_duration = timedelta ( minutes = 10 )) DRF\u5728\u65b0\u589e\u8be5\u5b57\u6bb5\u65f6\u662f\u4ee5\u79d2\u4e3a\u5355\u4f4d\u3002 bulk_create \u4f7f\u7528 PostMan \u53d1\u9001\u6570\u636e\uff1a choices \uff1a { 'name' : 'c' , 'content' : 'sss' , 'is_right' : False } choices \uff1a { 'name' : 'd' , 'content' : 'sssssss' , 'is_right' : 2 } \u4ee3\u7801\uff1a choices = dict_to_query_dict ( request . data ) . getlist ( 'choices' ) # \u83b7\u53d6choices\u7684list # list\u4e2dstr\u8f6c\u6362\u4e3adict,dict\u518d\u8f6c\u6362\u4e3aChoice\u7c7b\u5b9e\u4f8b\uff0c\u6240\u6709\u7684\u7c7b\u5b9e\u4f8b\u5408\u5e76\u4e3alist # bulk_create\u5165\u53c2\u8be5list,\u5176\u5185\u90e8\u5c01\u88c5\u597d\u4e8b\u52a1,\u82e5\u5176\u4e2d\u4e00\u4e2a\u751f\u4ea7\u9519\u8bef\uff0c\u5219\u4f1a\u81ea\u52a8\u64a4\u9500\u4e4b\u524d\u64cd\u4f5c choice_list = Choice . objects . bulk_create ([ Choice ( ** ast . literal_eval ( choice )) for choice in choices ]) # PS\uff1abulk_create\u4e0d\u4f1a\u8c03\u7528\u5b9e\u4f8b\u7684save\u65b9\u6cd5,\u4e0d\u4f1a\u53d1\u51fapost_save\u4fe1\u53f7,\u8fd4\u56de\u5b9e\u4f8b\u65e0ID,\u9700\u8981\u518d\u6b21\u624b\u52a8\u8c03\u7528save() for choice in choice_list : choice . save () instance = question_serializer . save () instance . choices . add ( * choice_list ) chapter . questions . add ( instance ) \u4e0a\u8ff0 PostMan \u53d1\u9001\u7684\u7b2c\u4e8c\u6761\u6570\u636e is_right \u7c7b\u578b\u9519\u8bef\uff0c\u65e0\u6cd5\u4fdd\u5b58\uff0c\u63d0\u793a\u9519\u8bef\uff1aValidationError: ['\u20192\u2018 \u5fc5\u987b\u4e3a True \u6216\u8005 False\u3002']\uff0cbulk_create\u65b9\u6cd5\u5185\u90e8\u5c01\u88c5\u597d\u4e8b\u52a1\uff0c\u5219\u7b2c\u4e00\u6761\u6b63\u786e\u7684\u8bb0\u5f55\u4e5f\u4e0d\u4f1a\u88ab\u65b0\u589e\u3002 \u91d1\u989d\u64cd\u4f5c \u5bf9\u91d1\u989d\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u4e00\u5f8b\u4f7f\u7528 DecimalField \u800c\u4e0d\u4f7f\u7528 FloatFiled \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c DecimalField \u5728\u6a21\u578b\u4e2d\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u65f6\uff0c\u5e94\u662f\uff1a price = models . DecimalField ( default = Decimal ( 0.00 ), max_digits = 16 , decimal_places = 4 , verbose_name = '\u552e\u4ef7' ) \u800c\u4e0d\u662f price = models . DecimalField ( default = 0.00 , max_digits = 16 , decimal_places = 4 , verbose_name = '\u552e\u4ef7' ) \u867d\u7136\u4e0d\u652f\u6301 Decimal \u7c7b\u578b\u4e0e float \u7c7b\u578b\u8fdb\u884c\u6df7\u5408\u64cd\u4f5c\uff0c\u5219\u5168\u90e8\u8f6c\u6362\u4e3a Decimal \u7c7b\u578b\u518d\u8fdb\u884c\u56db\u5219\u8fd0\u7b97\u3002 from decimal import Decimal discounted_price = Decimal ( self . discount_event . calculate_discount ( self . real_price )) self . discounted_event_price = self . real_price - discounted_price float\u7c7b\u578b\u7684str\u8f6c\u4e3aint\uff0c\u9700\u8981\u5148\u8f6c\u5316\u4e3afloat\u518d\u8f6c\u5316\u4e3aint\uff0c\u4e0d\u53ef\u76f4\u63a5\u8f6c\u6362: class_hours = int ( float ( request . data [ 'class_hours' ])) \u4e0d\u7136\u4f1a\u5c06DecimalField\u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a\u4e00\u4e2afloat,\u5728\u8ba1\u7b97\u65f6\u4f1a\u5e26\u6765\u7c7b\u4f3c TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal' \u8fd9\u6837\u7684\u9519\u8bef\u3002 \u9a8c\u8bc1\u76f8\u5173 \u9650\u5236\u56fe\u7247\u5927\u5c0f def validate_image_size ( value ): \"\"\" \u9650\u5236\u56fe\u7247\u6587\u4ef6\u5927\u5c0f\u4e3a2M 2M=2*1024KB=2*1024*1024Byte (Byte\u65e2\u5b57\u8282) :param value:\u6587\u4ef6\u5b9e\u4f8b :return: raise \u6587\u4ef6\u5927\u5c0f\u8d85\u8fc72MB \"\"\" if value . size > 2097152 : raise ValidationError ( u '\u6587\u4ef6\u5927\u5c0f\u8d85\u8fc72MB' ) image = models . ImageField ( upload_to = get_image_path , validators = [ validate_image_size ], verbose_name = '\u56fe\u7247' ) model\u4e2d\u4f7f\u7528clean\u65b9\u6cd5\u53bb\u63a7\u5236\u4e00\u4e0b\u6bd4\u8f83\u590d\u6742\u7684\u6a21\u578b\u9a8c\u8bc1 # \u6536\u652f\u6b3e\u9879 class IncomeExpense ( models . Model ): .... def clean ( self ): point , is_created = Point . objects . get_or_create ( user = self . user ) if self . pk : this = IncomeExpense . objects . get ( id = self . id ) # \u672a\u652f\u4ed8->\u652f\u4ed8 if this . payment_state == 0 and self . payment_state == 1 : # \u6536\u5165 \u4f7f\u7528\u4f59\u989d\u652f\u4ed8 if self . category . income_expense == 0 and self . payment_category . code == 1 : if point . value < self . amount : raise ValidationError ({ 'payment_category' : '\u8d26\u6237\u4f59\u989d\u4e0d\u8db3 \u4f59\u989d: {} \u5f85\u652f\u4ed8: {} ' . format ( point . value , self . amount )}) else : # \u5df2\u652f\u4ed8 \u6536\u5165 \u4f7f\u7528\u4f59\u989d\u652f\u4ed8 if self . payment_state == 1 and self . category . income_expense == 0 and self . payment_category . code == 1 : if point . value < self . amount : raise ValidationError ( { 'payment_category' : '\u8d26\u6237\u4f59\u989d\u4e0d\u8db3 \u4f59\u989d: {} \u5f85\u652f\u4ed8: {} ' . format ( point . value , self . amount )}) property \u6bd4\u5982\u8bf4\u73b0\u5728\u7528\u6237\u4fe1\u606f\u4e2d\u5b58\u50a8\u4e86\u751f\u65e5\u7684\u4fe1\u606f \uff0c \u73b0\u5728\u9700\u8981\u6839\u636e\u751f\u65e5\u53bb\u83b7\u53d6\u5e74\u9f84 \uff0c \u4e00\u822c\u65b9\u6cd5\u4e3a\u5b9a\u4e49\u4e00\u4e2aget_age\u7684\u65b9\u6cd5 \uff0c \u5982\u4e0b \uff1a class BaseProfile ( models . Model ): birthdate = models . DateField () #... def get_age ( self ): today = datetime . date . today () return ( today . year - self . birthdate . year ) - int ( ( today . month , today . day ) < ( self . birthdate . month , self . birthdate . day )) \u4f7f\u7528 ` profile . get_age () ` \u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7528\u6237\u5e74\u9f84\u4fe1\u606f \uff0c \u4f46\u662fprofile . age\u4f1a\u66f4\u5177\u6709\u53ef\u8bfb\u6027\u4e5f\u66f4\u7b26\u5408python\u7684\u7f16\u7a0b\u7406\u5ff5 \uff0c \u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 ` property ` \u88c5\u9970\u5668\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd : @property def age ( self ): \u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 ` profile . age ` \u6765\u83b7\u53d6\u7528\u6237\u7684\u5e74\u9f84\u4fe1\u606f\u4e86 \u3002 \u4f46\u662f ` profile ` \u6709\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\u548c\u7c7b\u7684\u5185\u90e8\u65b9\u6cd5\u4e00\u6837\u65e0\u6cd5\u5728ORM\u4e2d\u4f7f\u7528 \u3002 > Django Design Patterns and Best Practices P45 Cached properties ` cached_property ` \u6bd4\u5bf9 ` property ` \u53ef\u4ee5\u7f13\u5b58\u8ba1\u7b97\u7ed3\u679c \uff0c \u9002\u5408\u9891\u7e41\u8c03\u7528\u7684\u53c2\u6570\u6216\u8005\u8ba1\u7b97\u5f00\u9500\u8fc7\u5927\u7684\u53c2\u6570 \u3002 from django.utils.functional import cached_property #... @cached_property def full_name ( self ): return \" {0} {1} \" . format ( self . firstname , self . lastname ) > Django Design Patterns and Best Practices P45 unique_together \u5176\u4e2d\u6709Char\u5b57\u6bb5 null=True,blank=True unique_together \u5176\u4e2d\u6709Char\u5b57\u6bb5 null=True,blank=True \uff0c\u5bfc\u81f4\u8f93\u5165null\u4e5f\u4f1a\u62a5\u91cd\u590d\u9519\u8bef\uff0c\u6b64\u65f6\u5c06 CharField \u66ff\u6362\u4e3a CharNullField \u5b57\u6bb5\u5373\u53ef\u3002 # issue null=True\u548cunique=True # \u540c\u65f6\u4f7f\u7528\u4f1a\u5bfc\u81f4\u7a7a\u503c\u88ab\u5224\u65ad\u4e3a\u76f8\u540c class CharNullField ( models . CharField ): description = \"CharField that stores NULL\" def get_db_prep_value ( self , value , connection = None , prepared = False ): value = super ( CharNullField , self ) . get_db_prep_value ( value , connection , prepared ) if value == \"\" : return None else : return value \u68c0\u7d22\u76f8\u5173 queryset \u5185\u64cd\u4f5c get_object_or_404 \u7528\u6cd5\uff1a `get_object_or_404(model,filter)` get_or_create instance, is_created = Model.object.get_or_create(name='my_name') instance \u4e3a\u65b0\u589e\u6216\u8005\u8bfb\u53d6\u5230\u7684\u5b9e\u4f8b\uff0c is_created \u4ee3\u8868\u662f\u5426\u662f\u65b0\u5efa\u7684 instance \u3002 \u6c42querySet\u67d0\u4e00\u5b57\u6bb5\u7684\u548c Annotate adds a field to results: >> Order . objects . annotate ( total_price = > > > ( 'price' )) , ] > >> orders . first () . total_price Decimal ( '340.00' ) Aggregate returns a dict with asked result: >> Order . objects . aggregate ( total_price = Sum ( 'price' )) { 'total_price' : Decimal ( '1260.00' )} eg\uff1a from django.db.models import Sum current_arrange_hours = class_schedule_my_draft . aggregate ( Sum ( 'hours' ))[ 'hours__sum' ] \u65b9\u6cd5\u8fd4\u56de\u7684\u662fdict\u5bf9\u8c61\uff0c\u952e\u7684\u540d\u79f0\u4e3a \u6c42\u548c\u5b57\u6bb5\u540d__sum\uff0c\u83b7\u53d6\u8be5dict\u5bf9\u8c61\uff0c\u53d6\u503c\u5373\u53ef\u5f97\u5230\u548c\u3002 update() \u65b9\u6cd5\u6ce8\u610f\u4e8b\u9879 QuerySet\u7684update()\u65b9\u6cd5\u4f1a\u76f4\u63a5\u751f\u6210SQL\u8868\u8fbe\u5f0f\uff0c\u4e0d\u4f1a\u8c03\u7528\u6a21\u578b\u7684save()\u65b9\u6cd5\u3002 Be aware that the update() method is converted directly to an SQL statement. It is a bulk operation for direct updates. It doesn\u2019t run anysave() methods on your models, or emit the pre save or post save signals (which are a consequence of calling save()), or honor the auto_now field option. If you want to save every item in a QuerySet and make sure that the save() method is called on each instance, you don\u2019t need any special function to handle that. Just loop over them and call save(): for item in my_queryset : item . save () updating-multiple-objects-at-once annotate \u548c aggregat\u200ce \u51fd\u6570 aggregat\u200ce (\u805a\u5408)\u751f\u6210\u7684\u65b0\u53c2\u6570\u76f4\u63a5\u52a0\u5165 queryset \u7684\u5c5e\u6027\u4e2d\uff0c\u800c annotate (\u5907\u6ce8)\u662f\u9488\u5bf9 queryset \u4e2d\u7684\u6bcf\u4e2aitem\u65b0\u589e\u4e00\u4e2a\u5c5e\u6027\uff0c\u5176\u4f5c\u7528\u5bf9\u8c61\u4e0d\u540c\u3002 \u9700\u8981\u6ce8\u610f\uff0c\u5728 queryset \u4f7f\u7528 annotate \u548c aggregate \u4e4b\u524d\uff0c\u82e5\u662f\u4f7f\u7528\u4e86 filter \u6216\u8005 exclude \uff0c filter \u548c exclude \u4e2d\u7684\u68c0\u7d22\u6761\u4ef6\u4f1a\u88ab\u76f8\u5e94\u7684\u8003\u8651\u5230 annotate \u548c aggregate \u51fd\u6570\u4e4b\u4e2d\uff0c\u82e5\u628a filter \u548c exclude \u653e\u5728 annotate \u548c aggregate \u51fd\u6570\u7684\u540e\u9762\u6267\u884c\u5219\u4e0d\u4f1a\u6709\u5f71\u54cd\uff0c\u8be6\u89c1\u6b64\u5904\u3002 \u793a\u4f8b\uff1a from django.db.models import Count tags = [ 1 , 2 ] similar_posts = Message . objects . filter ( tag__in = tags ) similar_posts = similar_posts . annotate ( same_tags = Count ( 'tag' )) for x in similar_posts : print ( x . id , x . same_tags , x . tag . all ()) 13 1 , ] > 14 2 , , ] > \u53ef\u89c1ID\u4e3a13\u7684message\u771f\u6b63\u67092\u4e2a\u6807\u7b7e\uff0c\u4f46\u662f\u7b26\u5408filter\u4e2d\u6761\u4ef6\u7684\u53ea\u67091\u4e2a\uff1bID\u4e3a14\u7684message\u771f\u6b63\u67093\u4e2a\u6807\u7b7e\uff0c\u7b26\u5408filter\u4e2d\u6761\u4ef6\u7684\u53ea\u67092\u4e2a\u3002 similar_posts = Message . objects . all () # \u5220\u9664filter\u540e 13 2 , ] > 14 3 , , ] > \u53ef\u89c1\u5220\u9664filter\u540e\u5f97\u5230\u7684\u6807\u7b7e\u603b\u548c\u624d\u662fMessage\u5305\u542b\u7684\u771f\u6b63\u6807\u7b7e\u6570\u91cf\u3002 values_list \u53bb\u91cd distinct \u51fd\u6570\u5fc5\u987b\u548c order_by \u914d\u5408\u624d\u751f\u6548\uff0c order_by \u5728 distinct \u4e4b\u524d\u4e4b\u540e\u90fd\u53ef\u4ee5\u3002 Craft . objects . values_list ( 'stage_num' , flat = True ) . distinct () Craft . objects . values_list ( 'stage_num' , flat = True ) . distinct () . order_by ( 'stage_num' ) Doc model queryset distinct Note queryset\u83b7\u53d6\u5916\u952e\u5217\u8868 # fk_ids = [x.fk.id for x in instance.items.all()] fk_ids = instance . items . values_list ( 'fk_id' , flat = True ) FK . objects . filter ( id__in = fk_ids ) . all () \u5148\u83b7\u53d6\u5916\u952eID\u5217\u8868\uff0c\u88ab\u6ce8\u91ca\u7684\u65b9\u6cd5\u8017\u65f6\u4e3a0.0020s\uff0c\u672a\u6ce8\u91ca\u7684\u65b9\u6cd5\u8017\u65f6\u4e3a0:00:00\uff0c\u63a8\u8350\u4f7f\u7528\u672a\u6ce8\u91ca\u7684\u65b9\u6cd5\uff0c\u4e0d\u7528\u904d\u5386\u5217\u8868\uff0c\u76f4\u63a5\u7531\u6570\u636e\u5e93\u64cd\u4f5c\u83b7\u53d6\u5916\u952eID\u5217\u8868\uff0c\u8017\u65f6\u66f4\u4f4e\u4e5f\u66f4\u4e3a\u7b80\u6d01\u3002 \u81ea\u5b9a\u4e49Manager # \u516c\u5f00\u6587\u7ae0Manager class PublicManager ( models . Manager ): def get_queryset ( self ): return super ( PublicManager , self ) . get_queryset () . filter ( is_public = True ) # \u6587\u7ae0 class Article ( models . Model ): is_public = models . BooleanField ( default = False , verbose_name = '\u516c\u5f00' ) objects = models . Manager () public = PublicManager () \u83b7\u53d6\u516c\u5f00\u7684\u6587\u7ae0\u65f6\u76f4\u63a5\u8bbf\u95ee Article.public.all() \u5373\u53ef\uff0c\u4e0d\u9700\u8981\u4f7f\u7528 Article.objects.filter(is_public=True) ,\u4f7f\u7528\u8d77\u6765\u66f4\u65b9\u4fbf\u3002 queryset \u95f4\u64cd\u4f5c queryset \u76f8\u51cf \u6709\u7236\u5206\u7c7b\u7684\u6240\u6709\u542b\u91cf \u51cf\u53bb \u8be5\u5546\u54c1\u5df2\u6709\u7684\u542b\u91cf \u4f5c\u4e3a\u5f85\u9009\u7684\u542b\u91cf\u96c6\uff1a category_list = Category . object . filter ( parent__isnull = False ) . exclude ( pk__in = goods . category . all ()) . all () queryset \u76f8\u52a0 queryset = queryset1 | queryset2 \u6ce8\u610f\uff0c | \u64cd\u4f5c\u4f1a\u5bf9\u4e24\u4e2aqueryset\u95f4\u7684\u91cd\u590d\u90e8\u5206\u8fdb\u884c\u53bb\u91cd\u3002 \u5b9e\u73b0\u539f\u7406\uff1a \u67d0\u4e00\u5929\u53d1\u73b0\u4e86\u4e00\u4e2a\u5947\u602a\u7684\u95ee\u9898\uff0c\u5982\u4e0b\uff1a \u8f93\u5165\u5982\u4e0b\uff1a \u4e00\u4e2a\u957f\u5ea6\u4e3a2\u7684 queryset \u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a0\u7684 queryset \u5408\u5e76\u5f97\u5230\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a3\u7684 queryset ,\u68c0\u7d22\u5176 query \u8bed\u53e5\u624d\u53d1\u73b0\u8fd9\u662f\u6709\u53ef\u80fd\u7684\uff0c\u9700\u8981\u5bf9\u5f97\u5230\u7684\u7ed3\u679c\u518d\u6b21\u53bb\u91cd\u3002\u672c\u8d28\u4e0a | \u64cd\u4f5c\u662f\u5bf9sql\u8bed\u53e5\u8fdb\u884c OR ,\u5176\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a models/query.py : def __or__ ( self , other ): self . _merge_sanity_check ( other ) if isinstance ( self , EmptyQuerySet ): return other if isinstance ( other , EmptyQuerySet ): return self combined = self . _chain () combined . _merge_known_related_objects ( other ) combined . query . combine ( other . query , sql . OR ) return combined migrations \u6587\u4ef6\u51b2\u7a81 # \u5408\u5e76\u591a\u4e2amigrations\u6587\u4ef6\u81f3\u4e00\u4e2a python manage . py squashmigrations app_name 0015 # \u6709conflicting\u65f6\u5408\u5e76 python manage . py makemigrations \u2013 merge migrate --fake python manage . py migrate -- fake Url\u76f8\u5173 \u91cd\u5b9a\u5411 \u91cd\u5b9a\u5411\u662f\u6307\u5c06\u5f53\u524d\u7684url\u53d1\u9001/\u8f6c\u8bd1\u4e3a\u5176\u5b83url\u518d\u8fdb\u884c\u5904\u7406\uff0c\u800c\u4e0d\u662f\u6307\u8fd4\u56de\u7684url\uff0c\u4e0d\u80fd\u7528\u4e8e\u9875\u9762\u5237\u65b0\u3002 \u6b63\u5219 url ( r 'author/(?P[0-9]+)/$' , AuthorUpdate . as_view (), name = 'author-update' ), url ( r 'author/(?P\\d+)/$' , AuthorUpdate . as_view (), name = 'author-update' ), View\u76f8\u5173 render\u51fd\u6570 return render(request,template,data) \u52a8\u6001 success_url def get_success_url ( self ): return reverse ( 'author-detail' , kwargs = { 'pk' : self . object . pk }) \u57fa\u7c7b\u7ee7\u627f\u4fe1\u606f\u65f6\uff0c\u57fa\u7c7b\u8981\u4f18\u5148\u7ee7\u627f\uff0c\u4e0d\u7136\u4e0d\u8d77\u4f5c\u7528 class BaseMixin ( View ): def get_context_data ( self , ** kwargs ): kwargs [ 'example' ] = 'example' return super ( BaseMixin , self ) . get_context_data ( ** kwargs ) class NewsUpdateView ( BaseMixin , UpdateView ): # \u6709\u7528 example\u5728\u9875\u9762\u4e2d\u53ef\u4ee5\u663e\u793a class NewsUpdateView ( UpdateView , BaseMixin ): # \u6ca1\u7528 example\u5728\u9875\u9762\u4e2d\u4e0d\u53ef\u663e\u793a ListView\u4e2dqueryset\u4f7f\u7528\u9677\u9631 class NewsAllListView ( ListContextMixin , ListView ): queryset = News . objects . language ( 'all' ) . in_current_lang () . order_by ( '-id' ) template_name = 'news/list_all.html' context_object_name = 'news_list' paginate_by = settings . PAGE_NUM # def get_queryset(self): # return News.objects.language('all').in_current_lang().order_by('-id') \u5199\u6210\u5458\u53d8\u91cfqueryset runserver\u65f6\u8f93\u51fa,\u8f93\u51fa\u6765\u6e90\u4e8e in_current_lang() ,\u8be5\u65b9\u6cd5\u7528\u4e8e\u9650\u5236\u5f53\u524d\u8bed\u8a00\u73af\u5883\uff0c in_current_lang \u53ea\u4f1a\u5728runserver\u65f6\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u4e4b\u540e\u5c31\u7b97\u4fee\u6539\u4e86\u8bed\u8a00\u73af\u5883\uff0cqueryset\u6210\u5458\u53d8\u91cf\u4e5f\u4e0d\u4f1a\u518d\u6b21\u6839\u636e\u8bed\u8a00\u73af\u5883\u8fdb\u884c\u8c03\u6574\uff0c\u53ea\u6709\u5f53\u518d\u6b21\u91cd\u542f\u670d\u52a1\u5668\u65f6\u624d\u4f1a\u8c03\u6574\u8bed\u8a00\u73af\u5883\uff0c\u4f18\u70b9\u662f\u52a0\u8f7d\u5feb\uff0c\u4f46\u662f\u65e0\u6cd5\u5b9e\u73b0\u8bed\u8a00\u73af\u5883\u7684\u53d8\u5316\u3002 , , ] > , ] > System check identified no issues ( 0 silenced ) . July 18 , 2017 - 10 : 38 : 29 Django version 1.11.2 , using settings 'Portal.settings' Starting development server at http : // 0.0.0.0 : 80 / Quit the server with CTRL - BREAK . Performing system checks ... \u5199\u6210\u5458\u65b9\u6cd5 get_queryset \u65f6\uff0c\u6bcf\u6b21\u90fd\u4f1a\u6839\u636e\u8bed\u8a00\u73af\u5883\u53bb\u8c03\u6574queryset\u6765\u6e90\uff0c\u7f3a\u70b9\u662f\u5f00\u9500\u6bd4\u5199\u6210\u5458\u53d8\u91cf\u5927\uff0crunserver\u540e\u8f93\u51fa\uff0c\u6bcf\u6b21\u8bf7\u6c42\u8be5 listview in_current_lang \u90fd\u4f1a\u88ab\u8c03\u7528\uff1a System check identified no issues ( 0 silenced ) . July 18 , 2017 - 10 : 42 : 47 Django version 1.11.2 , using settings 'Portal.settings' Starting development server at http : // 0.0.0.0 : 80 / Quit the server with CTRL - BREAK . 2017 - 07 - 18 10 : 42 : 52 , 375 [ INFO ] - \"GET /manage/ HTTP/1.1\" 200 6224 2017 - 07 - 18 10 : 42 : 52 , 442 [ INFO ] - \"GET /manage/home/ HTTP/1.1\" 200 1412 2017 - 07 - 18 10 : 42 : 52 , 788 [ INFO ] - \"GET /static/images/favicon.ico HTTP/1.1\" 200 1099 , , ] > , ] > Form\u76f8\u5173 \u4f7f\u7528\u9884\u8bbe\u7684\u9519\u8bef class LoginForm ( forms . Form ): error_messages = { 'login_error' : \"\u8d26\u6237\u540d\u6216\u5bc6\u7801\u8f93\u5165\u9519\u8bef\" , } raise forms . ValidationError ( self . error_messages [ \"login_error\" ]) \u52a8\u6001\u6dfb\u52a0\u9519\u8bef self . add_error ( \"username\" , \"\u8d26\u6237\u540d\u6216\u5bc6\u7801\u8f93\u5165\u9519\u8bef\" ) # username\u4e3a\u9519\u8bef\u53d1\u751f\u7684\u5b57\u6bb5 Template\u76f8\u5173 \u6e32\u67d3\u53d8\u91cf\u81f3html \u5728\u754c\u9762\u4e2d\u5c06\u67d0\u4e2a\u53d8\u91cf\u6e32\u67d3\u6210\u4e3ahtml\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a {% autoescape off %} {{content}} {% endautoescape %} {{content|safe}} templet\u5e38\u7528\u8fc7\u6ee4\u5668 {{ solution . title | truncatechars : 20 }} # 20\u4e2a\u5b57\u7b26\u540e\u663e\u793a... {{ solution . create_time | date : \"Y-m-d H:i:s\" }} # datatime\u683c\u5f0f \u68c0\u6d4b\u7528\u6237\u662f\u5426\u6709\u67d0\u9879\u6743\u9650 { % if perms . app_label . can_do_something % } { % endif % } perms \u662f\u4e00\u4e2a django.contrib.auth.context_processors.PermWrapper \u5bf9\u8c61\uff0c\u6587\u6863 \u89c1\u6b64 \u3002 \u82e5\u4f7f\u7528 get_template \u6765\u6e32\u67d3\u9875\u9762\u65f6\u9700\u8981 perms \u5bf9\u8c61\uff1a from django.template.loader import get_template from django.contrib.auth.context_processors import PermWrapper for article in article_list : html += get_template ( 'article/article_item.html' ) . render ({ 'article' : article , 'perms' : PermWrapper ( request . user )}) \u4f20\u9012boolean\u81f3js context [ 'is_html' ] = True {{ is_html | yesno : \"true,false\" }} \u4f20\u9012list\u81f3js kwargs [ 'tags' ] = [ '1' , '2' ] var tags = {{ tags | safe }}; \u7edd\u5bf9\u8def\u5f84\u751f\u6210 \u751f\u6210\u672c\u9875\u7684\u7edd\u5bf9\u8def\u5f84 {{ request.build_absolute_uri }} \u751f\u6210\u6709 url name \u7684 url \u7684\u7edd\u5bf9\u8def\u5f84 {% absurl 'web_news_detail' news.id %} \u751f\u6210\u9759\u6001\u6587\u4ef6\u5bf9\u5e94\u7684\u7edd\u5bf9\u8def\u5f84 {{ news.cover.url|absolute_media_url:request }} \u4f7f\u7528\u7684\u6a21\u677f\u6807\u7b7e\u6587\u4ef6 \u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u65f6\u52a1\u5fc5\u4f7f\u7528 {% load absolute_url %} \u52a0\u8f7d\u6807\u7b7e absolute_url.py : from django.template import Library from django.template.defaulttags import URLNode , url from urllib.parse import urlencode register = Library () class AbsoluteURL ( str ): pass class AbsoluteURLNode ( URLNode ): \"\"\"\u751f\u6210\u7edd\u5bf9\u8def\u5f84\u7684url\u6807\u7b7e\"\"\" def render ( self , context ): asvar , self . asvar = self . asvar , None path = super ( AbsoluteURLNode , self ) . render ( context ) request = context [ 'request' ] abs_url = AbsoluteURL ( request . build_absolute_uri ( path )) # \u4fdd\u6301request parameters\u4e0d\u4e22\u5931 parameters = urlencode ( request . GET , doseq = True ) if parameters : abs_url = ' {} ? {} ' . format ( abs_url , parameters ) if not asvar : return str ( abs_url ) else : if path == request . path : abs_url . active = 'active' else : abs_url . active = '' context [ asvar ] = abs_url return '' @register . tag def absurl ( parser , token ): node = url ( parser , token ) return AbsoluteURLNode ( view_name = node . view_name , args = node . args , kwargs = node . kwargs , asvar = node . asvar ) @register . filter def absolute_url ( url , request ): \"\"\" Usage: {{ url|absolute_url:request }} \"\"\" return request . build_absolute_uri ( url ) Django-filter filter.qs\u4e3a\u8fc7\u6ee4\u540e\u7684queryset\uff1b filter.data\u4e3a\u5f53\u524d\u8fc7\u6ee4\u53d6\u5f97\u7684\u6570\u636e\uff0c\u5982filter.data.category\u65e2\u4e3a\u5f53\u524d\u53d6\u5f97\u7684\u7c7b\u578bID\u3002 \u81ea\u5b9a\u4e49Tags \u793a\u4f8b Tags \u7684\u4f5c\u7528\u662f\u9ad8\u4eae\u5f53\u524d Navbar \u9009\u4e2d\u7684\u9009\u9879\u3002 (1) \u65b0\u5efa templatetags \u6587\u4ef6\u5939\uff0c\u653e\u5165\u7a7a\u7684 __init__.py \u6587\u4ef6\u3002 (2) app/templatetags/nav.py \uff1a from django.core.urlresolvers import resolve from django.template import Library register = Library () @register . simple_tag def active_nav ( request , url ): url_name = resolve ( request . path ) . url_name if url_name == url : return \"active\" return \"\" (3) \u7528\u6cd5 {% active_nav request 'pattern_name' %} Admin\u76f8\u5173 \u65b9\u6cd5\u7ed3\u679c\u663e\u793a\u5728list\u4e2d \u5199\u5728 admins.py \u4e2d\uff1a # \u8bd5\u542c class AuditionAdmin ( admin . ModelAdmin ): list_display = [ 'id' , 'pre_student' , 'follower' , 'course' , 'teacher' , 'class_room' , 'state' , 'feed_back_staff' , 'feed_back_time' ] list_filter = ( 'state' , ) \u3000 \uff03 \u6a2a\u5411\u8fc7\u6ee4\u5668 def course ( self , obj ): #list_display \u5916\u952e return obj . class_schedule . course course . short_description = '\u8bfe\u7a0b' \u5199\u5728 models.py \u4e2d\uff1a class User ( models . Model ): ... # \u83b7\u53d6\u5168\u540d def get_full_name ( self ): if self . name == '' : return self . username else : return self . name get_full_name . short_description = '\u5168\u540d' class MyUserAdmin ( UserAdmin ): list_display = [ 'id' , 'username' , 'get_full_name' , 'tel' , 'email' , 'token' , 'gender' ] \u8bbe\u7f6e\u5b57\u6bb5\u53ea\u8bfb \u53ef\u89c1\u4f46\u4e0d\u63a5\u4fee\u6539 readonly_fields = ( 'word_count' ,) \u8bbe\u7f6e\u5b57\u6bb5\u4e0d\u51fa\u73b0\u5728admin\u4e2d \u5219\u5728 model \u5b57\u6bb5\u4e2d\u8bbe\u7f6e editable=False \u5373\u53ef \u4fee\u6539SuperUser\u5bc6\u7801 python manage.py changepassword \u4fee\u6539admin\u5bc6\u7801 python manage.py changepassword username \u6307\u5b9a\u7528\u6237\u4fee\u6539admin\u5bc6\u7801 \u8bbe\u7f6e\u7ad9\u70b9admin\u663e\u793atitle admin.site.site_title = '\u6d4b\u8bd5' \u8bbe\u7f6eapp\u7684 verbose_name apps.py : class UserConfig ( AppConfig ): name = 'user' verbose_name = '\u7528\u6237' __init__.py : default_app_config = 'user.apps.UserConfig' \u8bbe\u7f6emodel\u7684verbose_name models.py class Meta : verbose_name = _ ( '\u7528\u6237' ) verbose_name_plural = _ ( '\u7528\u6237' ) # \u590d\u6570\u65f6\u663e\u793a\u7684\u503c \u8bbe\u7f6e\u5217\u8868\u53ef\u7f16\u8f91\u5b57\u6bb5 \u8bbe\u7f6e list_editable = ( 'user' , 'is_locked' ) \u5373\u53ef\u4e00\u6b21\u7f16\u8f91\u5217\u8868\u4e0a\u591a\u884c\u6570\u636e\u5bf9\u5e94\u7684\u67d0\u4e9b\u5b57\u6bb5\uff0c\u4f46\u662f\u8981\u6c42\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u5728 list_display \u4e2d\u3002 Utils\u76f8\u5173 \u5b57\u7b26\u62fc\u63a5 '\u6570\u5b57\uff1a%d \u5b57\u7b26\u4e32 %s'%(instance.pk,instance.name) \u5355\u4e2a\u53d8\u91cf\u65f6\u540e\u9762\u53ef\u4e0d\u7528\u62ec\u53f7\uff0c\u5982\uff1a'\u5b57\u7b26\u4e32:%s'%instance.name '{}{}'.format(str1, str2) \u4f18\u4e8e\u4f7f\u7528% '{one}{two}'.format(one=str1, two=str2) \u9875\u9762\u95f4\u6d88\u606f\u4f20\u9012 Django\u7684message\u6846\u67b6\u53ef\u4ee5\u7528\u6765\u4f20\u9012\u9875\u9762\u4e4b\u95f4\u7684\u6d88\u606f \u5224\u65adstr\u662f\u5426\u4e3a\u6570\u5b57 >>> a = \"03523\" # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6570\u5b57 >>> a . isdigit () True >>> b = \"963spam\" >>> b . isdigit () False \u5c01\u88c5\u540e\uff1a def isdigit ( string ): \"\"\" :param string: :return: \u8be5\u5b57\u7b26\u662f\u5426\u662f\u6570\u5b57 \"\"\" if isinstance ( string , int ): return True else : return isinstance ( string , str ) and string . isdigit () \u7531\u6570\u636e\u5e93\u8868\u540d\u79f0\u83b7\u53d6\u5bf9\u5e94\u7684model from django.apps import apps model = next (( m for m in apps . get_models () if m . _meta . db_table == 'family_smstemplate' ), None ) print ( model ) \u5b57\u7b26\u4e32\u8fde\u7eed\u5b9a\u4e49 \u907f\u514d\u5199\u591a\u884c\uff0c\u66f4\u7b80\u6d01\u3002 subject, from_email, to = 'hello', settings.EMAIL_HOST_USER, '614457662@qq.com' Python\u7c7b\u578b\u5224\u65ad class Foo ( object ): pass class Bar ( Foo ): pass print type ( Foo ()) == Foo True print type ( Bar ()) == Foo False print isinstance ( Bar (), Foo ) True type \u4e0d\u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c isinstance \u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\u3002 \u4fe1\u53f7 request_finished from django.core.signals import request_finished from django.dispatch import receiver @receiver ( request_finished ) def my_callback ( sender , ** kwargs ): print ( \"Request finished!\" ) from django.dispatch import Signal request_started = Signal ( providing_args = [ \"environ\" ]) request_finished = Signal () got_request_exception = Signal ( providing_args = [ \"request\" ]) setting_changed = Signal ( providing_args = [ \"setting\" , \"value\" , \"enter\" ]) \u81ea\u5b9a\u4e49\u4fe1\u53f7 from django.dispatch import receiver post_viewed = django . dispatch . Signal ( providing_args = [ \"post\" , \"request\" ]) @receiver ( post_viewed ) def handle_post_viewed ( sender , ** kwargs ): print ( '------------------' ) # \u7528\u6237 class UserViewSet ( ModelViewSet ): queryset = UserMessage . objects . all () serializer_class = UserSerializer @list_route ( methods = [ 'GET' ]) def sender ( self , request ): # \u53d1\u51fa\u4fe1\u53f7 post_viewed . send ( sender = self . __class__ ) return Response ( 'sender' ) @list_route ( methods = [ 'GET' ]) # \u4e0d\u53d1\u51fa\u4fe1\u53f7 def receiver ( self , request ): return Response ( '' ) pre_save it's used before the transaction saves. post_save it's used after the transaction saves. from django.dispatch import receiver from django.db.models.signals import post_save @receiver ( post_save , sender = settings . AUTH_USER_MODEL ) def user_create ( sender , instance = None , created = False , ** kwargs ): if created : member = Member . objects . create ( user = instance ) family = Family . objects . create () family . members . add ( member ) \u4fe1\u53f7\u4e0d\u89e6\u53d1\u95ee\u9898 \u65b0\u5efa signals.py \u6587\u4ef6\u5199\u4fe1\u53f7\u76f8\u5173\u7684\u4ee3\u7801\u65f6\uff0c\u9700\u8981\u5728 apps.py \u4e2d\u65b0\u589e ready \u51fd\u6570 class UserConfig ( AppConfig ): name = 'user' verbose_name = '\u7528\u6237' def ready ( self ): import user.signals \u4e0d\u7136\u4f1a\u5bfc\u81f4 signals.py \u4e2d\u7684\u4ee3\u7801\u65e0\u6cd5\u751f\u6548\u3002\u800c\u4e14\u5fc5\u987b\u8981\u7528 import user.signals \u5bfc\u5165\u800c\u4e0d\u53ef\u7528 from .signals import * \u5bfc\u5165,\u4e0d\u7136\u4f1a\u63d0\u793a SyntaxError: import * only allowed at module level \u9519\u8bef\u3002 \u6d4b\u8bd5 \u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1 \u65e2\u5728\u5199\u529f\u80fd\u4ee3\u7801\u524d\uff0c\u4f18\u5148\u5199\u6d4b\u8bd5\u4ee3\u7801\uff0c\u867d\u7136\u4e0e\u76f4\u89c9\u76f8\u6096\uff0c\u4f46\u662f\u8fd9\u4e0e\u4e00\u822c\u4eba\u505a\u4e8b\u7684\u987a\u5e8f\u76f8\u540c\uff0c\u5148\u53d1\u73b0\u95ee\u9898\uff0c\u518d\u5199\u4ee3\u7801\u53bb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u662f \u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1 \u628a\u8fd9\u4e2a\u8fc7\u7a0b\u5f62\u5f0f\u5316\u4e86\u3002 basic-testing-strategies \u6d4b\u8bd5\u51fd\u6570 \u51fd\u6570\u5fc5\u987b\u4ee5\u5c0f\u5199\u7684test\u5f00\u5934\uff0c\u5404\u4e2a\u6d4b\u8bd5\u4e4b\u95f4\u8981\u72ec\u7acb\uff0c\u8c03\u7528\u7684\u987a\u5e8f\u4e3a\u51fd\u6570\u540d\u7684\u5b57\u6bcd\u987a\u5e8f\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u51fd\u6570\u6d4b\u8bd5\u5b8c\u6210\u540e\u6570\u636e\u5e93\u5c06\u81ea\u52a8\u56de\u6eda\u81f3\u521d\u59cb\u72b6\u6001\u3002 Pycharm\u4e2d\u8fd0\u884c\u6d4b\u8bd5\u7684\u6ce8\u610f\u4e8b\u9879 \u9f20\u6807\u6307\u9488\u4f4d\u4e8e\u6d4b\u8bd5\u6848\u4f8b\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5185\u5c06\u53ea\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f4d\u4e8e\u6d4b\u8bd5\u6848\u4f8b\u7684\u4f5c\u7528\u57df\u5185\u5c06\u6267\u884c\u6574\u4e2a\u6d4b\u8bd5\u6848\u4f8b\u3002 \u8bbe\u7f6e\u65ad\u70b9 import pdb pdb.set_trace() \u4e4b\u540e\u5728\u63a7\u5236\u53f0\u5c06\u770b\u5230 \uff08Pdb\uff09: \uff0c\u53ef\u4ee5\u8f93\u5165Python\u8bed\u53e5\u8fdb\u884c\u4ea4\u4e92\u68c0\u67e5\u3002 \u7b2c\u4e09\u65b9\u5de5\u5177\u53ca\u4f5c\u7528\u7b80\u4ecb django-celery \u5f02\u6b65\u53d1\u9001\u90ae\u4ef6\u3001\u5904\u7406\u4efb\u52a1\u4f7f\u7528\u5e93 \u5176\u4ed6 \u5b9a\u4e49\u7c7b\u5185\u90e8\u65b9\u6cd5 \u53cc\u4e0b\u5212\u7ebf\uff08double undersocres\uff09\u7528\u6237\u5b9a\u4e49\u7c7b\u7684\u5185\u90e8\u5c5e\u6027 \u7528\u4e8e\u5b9a\u4e49\u53ea\u53ef\u5728\u7c7b\u7684\u5185\u90e8\u4f7f\u7528\u7684\u53c2\u6570\u548c\u65b9\u6cd5 # __\u4fdd\u8bc1\u8be5\u51fd\u6570\u4e0d\u53ef\u88ab\u5916\u90e8\u8c03\u7528 def __send_sms(self, tel, content): \u4e09\u76ee\u8fd0\u7b97\u7cbe\u7b80\u4ee3\u7801 state = True if day == date else False \u7b49\u4ef7\u4e8e\uff1a if day == date : state = True else : state = False request.data\u7c7b\u578b\u662fDict\u4e0d\u662fQueryDict \u4f7f\u7528requests\u5e93\u76f4\u63a5\u5411Django\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u63a5\u6536\u5230\u7684request.data\u7c7b\u578b\u662fDict\u4e0d\u662fQueryDict\uff0c\u4f1a\u5bfc\u81f4request.data\u7684getlist\u65b9\u6cd5\u65e0\u6cd5\u4f7f\u7528\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a \u76f4\u63a5\u5224\u65ad\u7c7b\u578b dict\u7c7b\u578b\u65f6\u4f7f\u7528dict['name']\uff0cQueryDict\u7c7b\u578b\u65f6\u4f7f\u7528querydict.getlist('name')\uff0c PS:dict['name']\u7b49\u4ef7\u4e8equerydict.getlist('name') \u8fdb\u884c\u7c7b\u578b\u8f6c\u6362 Django1.11\u5982\u4e0b\uff1a from django.http import QueryDict from django.utils.datastructures import MultiValueDict data = QueryDict('', mutable=True) data.update(MultiValueDict(request.data)) print(data.getlist('id')) def dict to query_dict( dict): \"\"\" requests\u5e93\u8bf7\u6c42\u65f6request.data\u4e3adict \u9700\u8981\u8f6c\u6362\u4e3aquery dict\u624d\u80fd\u4f7f\u7528getlist\u65b9\u6cd5 :param dict: dict :return: query*dict \"\"\" query*dict = QueryDict('', mutable=True) query dict.update(MultiValueDict( dict)) return query dict data = dict to query_dict(request.data) if isinstance(request.data, dict) else request.data items = data.getlist('items') MultiValueDict \u4ecb\u7ecd\u5982\u4e0b\uff1a class MultiValueDict ( dict ): \"\"\" A subclass of dictionary customized to handle multiple values for the same key. >>> d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']}) >>> d['name'] 'Simon' >>> d.getlist('name') ['Adrian', 'Simon'] >>> d.getlist('doesnotexist') [] >>> d.getlist('doesnotexist', ['Adrian', 'Simon']) ['Adrian', 'Simon'] >>> d.get('lastname', 'nonexistent') 'nonexistent' >>> d.setlist('lastname', ['Holovaty', 'Willison']) This class exists to solve the irritating problem raised by cgi.parse_qs, which returns a list for every key, even though most Web forms submit single name-value pairs. \"\"\" requets\u53d1\u8d77\u8bf7\u6c42\uff1a import requests data = { 'id' : [ 7 , 8 ], 'ss' : 'sss' } print ( type ( data )) print ( data ) r = requests . post ( url = 'http://192.168.1.108/purchase_courses/test/' , json = data , headers = { 'Authorization' : 'Token 75xxxxxxxxxxxxxxxxxxxxxfb4' }) print ( r . text ) \u539f\u751fsql\u9632\u6ce8\u5165 c = db . cursor () max_price = 5 c . execute ( \"\"\"SELECT spam, eggs, sausage FROM breakfast WHERE price < %s \"\"\" , ( max_price ,)) \u800c\u4e0d\u662f c . execute ( \"\"\"SELECT spam, eggs, sausage FROM breakfast WHERE price < %s \"\"\" % ( max_price ,)) Python best practice and securest to connect to MySQL and execute queries","title":"Django\u7b14\u8bb0"},{"location":"python/django/django-note/#model","text":"","title":"Model\u76f8\u5173"},{"location":"python/django/django-note/#foreignkey","text":"","title":"ForeignKey"},{"location":"python/django/django-note/#_1","text":"\u5916\u952e\u662f\u5426\u6709\u503c ForeignKey__isnull = True / False","title":"\u662f\u5426\u6709\u503c"},{"location":"python/django/django-note/#related_name","text":"\u5728\u4e0d\u8bbe\u7f6e\u7684\u65f6\u5019\u9ed8\u8ba4\u540d\u79f0\u662f modelname_set","title":"\u8bbe\u7f6erelated_name"},{"location":"python/django/django-note/#manytomnay","text":"\u6a21\u578b\uff1a # \u73ed\u7ea7 class MyClass ( models . Model ): # \u540d\u79f0 name = models . CharField ( max_length = 255 , null = True , verbose_name = u '\u540d\u79f0' ) # \u5b66\u5458 students = models . ManyToManyField ( 'education.Student' , blank = True , verbose_name = u '\u5b66\u5458' )","title":"ManyToMnay"},{"location":"python/django/django-note/#_2","text":"\u7c7b\u578b\u5bf9\u5e94\u7684\u64cd\u4f5c\u4e3a add/remove","title":"\u6dfb\u52a0\u3001\u79fb\u9664"},{"location":"python/django/django-note/#_3","text":"add \u4e00\u6b21\u6dfb\u52a0\u4e00\u4e2a queryset \u65f6\uff0c\u7528\u6cd5\u4e3a manytomany.add(*queryset) \u6216\u8005 manytomany.set(queryset) courses = Course . objects . filter ( id__in = request . data . getlist ( 'courses' )) interview . pre_student . courses . add ( * courses )","title":"\u6279\u91cf\u6dfb\u52a0"},{"location":"python/django/django-note/#related_name_1","text":"\u5728\u4e0d\u8bbe\u7f6e\u7684\u65f6\u5019\u9ed8\u8ba4\u540d\u79f0\u662f modelname_set","title":"\u8bbe\u7f6erelated_name"},{"location":"python/django/django-note/#_4","text":"\u5b66\u5458\u83b7\u53d6\u81ea\u5df1\u53c2\u52a0\u7684\u6240\u6709\u8bfe\u7a0b\uff1a courses = request . user . prestudent . student . myclass_set . all () # \u4ee5myclass_set\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u53cd\u5411\u68c0\u7d22 myclass\u4e3a\u7c7b\u540d\u540e\u9762\u63a5_set print ( courses ) # , , ]>","title":"\u53cd\u5411\u68c0\u7d22"},{"location":"python/django/django-note/#m2mself","text":"\u793a\u4f8b : # \u90e8\u95e8 class Department ( models . Model ): # \u90e8\u95e8\u540d\u79f0 name = models . CharField ( max_length = 255 , verbose_name = u '\u540d\u79f0' ) # \u5b50\u90e8\u95e8 \u5199\u6210'self'\u65f6\u4f1a\u51fa\u73b0\u6dfb\u52a0\u90e8\u95e81\u7684\u5b50\u90e8\u95e8\u4e3a\u90e8\u95e82\u65f6 # \u90e8\u95e82\u7684\u5b50\u90e8\u95e8\u91cc\u4e5f\u4f1a\u6709\u90e8\u95e81\u7684bug departments = models . ManyToManyField ( 'school.Department' , blank = True , verbose_name = '\u5b50\u90e8\u95e8' ) \u6b64\u5904\u5b50\u90e8\u95e8 M2M\u7684\u5173\u8054\u5199\u6210 'self' \u65f6\u4f1a\u51fa\u73b0\u6dfb\u52a0\u90e8\u95e81\u7684\u5b50\u90e8\u95e8\u4e3a\u90e8\u95e82\u65f6\uff0c\u90e8\u95e82\u7684\u5b50\u90e8\u95e8\u91cc\u4e5f\u4f1a\u6709\u90e8\u95e81\u7684bug\u3002 \u5176\u5b9e\u8fd9\u4e0d\u662fbug,\u89e3\u51b3\u65b9\u6cd5\u4e3a \uff081\uff09\u5c06 'self' \u6362\u6210 'department.Department' (2) \u5728 departments \u5b57\u6bb5\u4e2d\u52a0\u5165 'symmetrical=False' \uff0c\u8be6\u7ec6\u4ecb\u7ecd\u89c1 ManyToManyField.symmetrical \u3002 Only used in the definition of ManyToManyFields on self. Consider the following model: from django.db import models class Person ( models . Model ): friends = models . ManyToManyField ( \"self\" ) When Django processes this model, it identifies that it has a ManyToManyField on itself, and as a result, it doesn\u2019t add a person_set attribute to the Person class. Instead, the ManyToManyField is assumed to be symmetrical \u2013 that is, if I am your friend, then you are my friend. If you do not want symmetry in many-to-many relationships with self, set symmetrical to False. This will force Django to add the descriptor for the reverse relationship, allowing ManyToManyField relationships to be non-symmetrical.","title":"M2M\u5230self\u65f6\u7684\u95ee\u9898"},{"location":"python/django/django-note/#_5","text":"from django.apps import apps from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes.fields import GenericForeignKey class UnSureModel ( models . Model ): # \u7c7b\u7684content_type content_type = models . ForeignKey ( ContentType , null = True , blank = True , verbose_name = u '\u6570\u636e\u6765\u6e90' ) # \u5bf9\u5e94\u7c7b\u578b\u5b9e\u4f8bID object_id = models . PositiveIntegerField ( null = True , blank = True , verbose_name = u '\u5b9e\u4f8bID' ) # \u5bf9\u5e94\u7684\u5b9e\u4f8b content_object = GenericForeignKey ( 'content_type' , 'object_id' ) def get_select_object ( self ): if self . content_type and self . object_id : select_model = apps . get_model ( app_label = self . content_type . app_label , model_name = self . content_type . model ) try : select_object = select_model . objects . get ( id = self . object_id ) return select_object except ObjectDoesNotExist : return None else : return None","title":"\u5916\u952e\u5230\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u7c7b\u7684\u5bf9\u8c61"},{"location":"python/django/django-note/#durationfield","text":"\u65b0\u589e\u65f6\u4f20\u5165 timedelta \u5bf9\u8c61\uff1a craft = Craft . objects . create ( name = '\u6d4b\u8bd5' , craft_duration = timedelta ( minutes = 10 )) DRF\u5728\u65b0\u589e\u8be5\u5b57\u6bb5\u65f6\u662f\u4ee5\u79d2\u4e3a\u5355\u4f4d\u3002","title":"DurationField\u4f7f\u7528"},{"location":"python/django/django-note/#bulk_create","text":"PostMan \u53d1\u9001\u6570\u636e\uff1a choices \uff1a { 'name' : 'c' , 'content' : 'sss' , 'is_right' : False } choices \uff1a { 'name' : 'd' , 'content' : 'sssssss' , 'is_right' : 2 } \u4ee3\u7801\uff1a choices = dict_to_query_dict ( request . data ) . getlist ( 'choices' ) # \u83b7\u53d6choices\u7684list # list\u4e2dstr\u8f6c\u6362\u4e3adict,dict\u518d\u8f6c\u6362\u4e3aChoice\u7c7b\u5b9e\u4f8b\uff0c\u6240\u6709\u7684\u7c7b\u5b9e\u4f8b\u5408\u5e76\u4e3alist # bulk_create\u5165\u53c2\u8be5list,\u5176\u5185\u90e8\u5c01\u88c5\u597d\u4e8b\u52a1,\u82e5\u5176\u4e2d\u4e00\u4e2a\u751f\u4ea7\u9519\u8bef\uff0c\u5219\u4f1a\u81ea\u52a8\u64a4\u9500\u4e4b\u524d\u64cd\u4f5c choice_list = Choice . objects . bulk_create ([ Choice ( ** ast . literal_eval ( choice )) for choice in choices ]) # PS\uff1abulk_create\u4e0d\u4f1a\u8c03\u7528\u5b9e\u4f8b\u7684save\u65b9\u6cd5,\u4e0d\u4f1a\u53d1\u51fapost_save\u4fe1\u53f7,\u8fd4\u56de\u5b9e\u4f8b\u65e0ID,\u9700\u8981\u518d\u6b21\u624b\u52a8\u8c03\u7528save() for choice in choice_list : choice . save () instance = question_serializer . save () instance . choices . add ( * choice_list ) chapter . questions . add ( instance ) \u4e0a\u8ff0 PostMan \u53d1\u9001\u7684\u7b2c\u4e8c\u6761\u6570\u636e is_right \u7c7b\u578b\u9519\u8bef\uff0c\u65e0\u6cd5\u4fdd\u5b58\uff0c\u63d0\u793a\u9519\u8bef\uff1aValidationError: ['\u20192\u2018 \u5fc5\u987b\u4e3a True \u6216\u8005 False\u3002']\uff0cbulk_create\u65b9\u6cd5\u5185\u90e8\u5c01\u88c5\u597d\u4e8b\u52a1\uff0c\u5219\u7b2c\u4e00\u6761\u6b63\u786e\u7684\u8bb0\u5f55\u4e5f\u4e0d\u4f1a\u88ab\u65b0\u589e\u3002","title":"bulk_create\u4f7f\u7528"},{"location":"python/django/django-note/#_6","text":"\u5bf9\u91d1\u989d\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u4e00\u5f8b\u4f7f\u7528 DecimalField \u800c\u4e0d\u4f7f\u7528 FloatFiled \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c DecimalField \u5728\u6a21\u578b\u4e2d\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u65f6\uff0c\u5e94\u662f\uff1a price = models . DecimalField ( default = Decimal ( 0.00 ), max_digits = 16 , decimal_places = 4 , verbose_name = '\u552e\u4ef7' ) \u800c\u4e0d\u662f price = models . DecimalField ( default = 0.00 , max_digits = 16 , decimal_places = 4 , verbose_name = '\u552e\u4ef7' ) \u867d\u7136\u4e0d\u652f\u6301 Decimal \u7c7b\u578b\u4e0e float \u7c7b\u578b\u8fdb\u884c\u6df7\u5408\u64cd\u4f5c\uff0c\u5219\u5168\u90e8\u8f6c\u6362\u4e3a Decimal \u7c7b\u578b\u518d\u8fdb\u884c\u56db\u5219\u8fd0\u7b97\u3002 from decimal import Decimal discounted_price = Decimal ( self . discount_event . calculate_discount ( self . real_price )) self . discounted_event_price = self . real_price - discounted_price float\u7c7b\u578b\u7684str\u8f6c\u4e3aint\uff0c\u9700\u8981\u5148\u8f6c\u5316\u4e3afloat\u518d\u8f6c\u5316\u4e3aint\uff0c\u4e0d\u53ef\u76f4\u63a5\u8f6c\u6362: class_hours = int ( float ( request . data [ 'class_hours' ])) \u4e0d\u7136\u4f1a\u5c06DecimalField\u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a\u4e00\u4e2afloat,\u5728\u8ba1\u7b97\u65f6\u4f1a\u5e26\u6765\u7c7b\u4f3c TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal' \u8fd9\u6837\u7684\u9519\u8bef\u3002","title":"\u91d1\u989d\u64cd\u4f5c"},{"location":"python/django/django-note/#_7","text":"\u9650\u5236\u56fe\u7247\u5927\u5c0f def validate_image_size ( value ): \"\"\" \u9650\u5236\u56fe\u7247\u6587\u4ef6\u5927\u5c0f\u4e3a2M 2M=2*1024KB=2*1024*1024Byte (Byte\u65e2\u5b57\u8282) :param value:\u6587\u4ef6\u5b9e\u4f8b :return: raise \u6587\u4ef6\u5927\u5c0f\u8d85\u8fc72MB \"\"\" if value . size > 2097152 : raise ValidationError ( u '\u6587\u4ef6\u5927\u5c0f\u8d85\u8fc72MB' ) image = models . ImageField ( upload_to = get_image_path , validators = [ validate_image_size ], verbose_name = '\u56fe\u7247' ) model\u4e2d\u4f7f\u7528clean\u65b9\u6cd5\u53bb\u63a7\u5236\u4e00\u4e0b\u6bd4\u8f83\u590d\u6742\u7684\u6a21\u578b\u9a8c\u8bc1 # \u6536\u652f\u6b3e\u9879 class IncomeExpense ( models . Model ): .... def clean ( self ): point , is_created = Point . objects . get_or_create ( user = self . user ) if self . pk : this = IncomeExpense . objects . get ( id = self . id ) # \u672a\u652f\u4ed8->\u652f\u4ed8 if this . payment_state == 0 and self . payment_state == 1 : # \u6536\u5165 \u4f7f\u7528\u4f59\u989d\u652f\u4ed8 if self . category . income_expense == 0 and self . payment_category . code == 1 : if point . value < self . amount : raise ValidationError ({ 'payment_category' : '\u8d26\u6237\u4f59\u989d\u4e0d\u8db3 \u4f59\u989d: {} \u5f85\u652f\u4ed8: {} ' . format ( point . value , self . amount )}) else : # \u5df2\u652f\u4ed8 \u6536\u5165 \u4f7f\u7528\u4f59\u989d\u652f\u4ed8 if self . payment_state == 1 and self . category . income_expense == 0 and self . payment_category . code == 1 : if point . value < self . amount : raise ValidationError ( { 'payment_category' : '\u8d26\u6237\u4f59\u989d\u4e0d\u8db3 \u4f59\u989d: {} \u5f85\u652f\u4ed8: {} ' . format ( point . value , self . amount )})","title":"\u9a8c\u8bc1\u76f8\u5173"},{"location":"python/django/django-note/#property","text":"\u6bd4\u5982\u8bf4\u73b0\u5728\u7528\u6237\u4fe1\u606f\u4e2d\u5b58\u50a8\u4e86\u751f\u65e5\u7684\u4fe1\u606f \uff0c \u73b0\u5728\u9700\u8981\u6839\u636e\u751f\u65e5\u53bb\u83b7\u53d6\u5e74\u9f84 \uff0c \u4e00\u822c\u65b9\u6cd5\u4e3a\u5b9a\u4e49\u4e00\u4e2aget_age\u7684\u65b9\u6cd5 \uff0c \u5982\u4e0b \uff1a class BaseProfile ( models . Model ): birthdate = models . DateField () #... def get_age ( self ): today = datetime . date . today () return ( today . year - self . birthdate . year ) - int ( ( today . month , today . day ) < ( self . birthdate . month , self . birthdate . day )) \u4f7f\u7528 ` profile . get_age () ` \u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7528\u6237\u5e74\u9f84\u4fe1\u606f \uff0c \u4f46\u662fprofile . age\u4f1a\u66f4\u5177\u6709\u53ef\u8bfb\u6027\u4e5f\u66f4\u7b26\u5408python\u7684\u7f16\u7a0b\u7406\u5ff5 \uff0c \u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 ` property ` \u88c5\u9970\u5668\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd : @property def age ( self ): \u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 ` profile . age ` \u6765\u83b7\u53d6\u7528\u6237\u7684\u5e74\u9f84\u4fe1\u606f\u4e86 \u3002 \u4f46\u662f ` profile ` \u6709\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\u548c\u7c7b\u7684\u5185\u90e8\u65b9\u6cd5\u4e00\u6837\u65e0\u6cd5\u5728ORM\u4e2d\u4f7f\u7528 \u3002 > Django Design Patterns and Best Practices P45","title":"property"},{"location":"python/django/django-note/#cached-properties","text":"` cached_property ` \u6bd4\u5bf9 ` property ` \u53ef\u4ee5\u7f13\u5b58\u8ba1\u7b97\u7ed3\u679c \uff0c \u9002\u5408\u9891\u7e41\u8c03\u7528\u7684\u53c2\u6570\u6216\u8005\u8ba1\u7b97\u5f00\u9500\u8fc7\u5927\u7684\u53c2\u6570 \u3002 from django.utils.functional import cached_property #... @cached_property def full_name ( self ): return \" {0} {1} \" . format ( self . firstname , self . lastname ) > Django Design Patterns and Best Practices P45","title":"Cached properties"},{"location":"python/django/django-note/#unique_togethercharnulltrueblanktrue","text":"unique_together \u5176\u4e2d\u6709Char\u5b57\u6bb5 null=True,blank=True \uff0c\u5bfc\u81f4\u8f93\u5165null\u4e5f\u4f1a\u62a5\u91cd\u590d\u9519\u8bef\uff0c\u6b64\u65f6\u5c06 CharField \u66ff\u6362\u4e3a CharNullField \u5b57\u6bb5\u5373\u53ef\u3002 # issue null=True\u548cunique=True # \u540c\u65f6\u4f7f\u7528\u4f1a\u5bfc\u81f4\u7a7a\u503c\u88ab\u5224\u65ad\u4e3a\u76f8\u540c class CharNullField ( models . CharField ): description = \"CharField that stores NULL\" def get_db_prep_value ( self , value , connection = None , prepared = False ): value = super ( CharNullField , self ) . get_db_prep_value ( value , connection , prepared ) if value == \"\" : return None else : return value","title":"unique_together\u5176\u4e2d\u6709Char\u5b57\u6bb5null=True,blank=True"},{"location":"python/django/django-note/#_8","text":"","title":"\u68c0\u7d22\u76f8\u5173"},{"location":"python/django/django-note/#queryset","text":"","title":"queryset\u5185\u64cd\u4f5c"},{"location":"python/django/django-note/#get_object_or_404","text":"\u7528\u6cd5\uff1a `get_object_or_404(model,filter)`","title":"get_object_or_404"},{"location":"python/django/django-note/#get_or_create","text":"instance, is_created = Model.object.get_or_create(name='my_name') instance \u4e3a\u65b0\u589e\u6216\u8005\u8bfb\u53d6\u5230\u7684\u5b9e\u4f8b\uff0c is_created \u4ee3\u8868\u662f\u5426\u662f\u65b0\u5efa\u7684 instance \u3002","title":"get_or_create"},{"location":"python/django/django-note/#queryset_1","text":"Annotate adds a field to results: >> Order . objects . annotate ( total_price = > > > ( 'price' )) , ] > >> orders . first () . total_price Decimal ( '340.00' ) Aggregate returns a dict with asked result: >> Order . objects . aggregate ( total_price = Sum ( 'price' )) { 'total_price' : Decimal ( '1260.00' )} eg\uff1a from django.db.models import Sum current_arrange_hours = class_schedule_my_draft . aggregate ( Sum ( 'hours' ))[ 'hours__sum' ] \u65b9\u6cd5\u8fd4\u56de\u7684\u662fdict\u5bf9\u8c61\uff0c\u952e\u7684\u540d\u79f0\u4e3a \u6c42\u548c\u5b57\u6bb5\u540d__sum\uff0c\u83b7\u53d6\u8be5dict\u5bf9\u8c61\uff0c\u53d6\u503c\u5373\u53ef\u5f97\u5230\u548c\u3002","title":"\u6c42querySet\u67d0\u4e00\u5b57\u6bb5\u7684\u548c"},{"location":"python/django/django-note/#update","text":"QuerySet\u7684update()\u65b9\u6cd5\u4f1a\u76f4\u63a5\u751f\u6210SQL\u8868\u8fbe\u5f0f\uff0c\u4e0d\u4f1a\u8c03\u7528\u6a21\u578b\u7684save()\u65b9\u6cd5\u3002 Be aware that the update() method is converted directly to an SQL statement. It is a bulk operation for direct updates. It doesn\u2019t run anysave() methods on your models, or emit the pre save or post save signals (which are a consequence of calling save()), or honor the auto_now field option. If you want to save every item in a QuerySet and make sure that the save() method is called on each instance, you don\u2019t need any special function to handle that. Just loop over them and call save(): for item in my_queryset : item . save () updating-multiple-objects-at-once","title":"update()\u65b9\u6cd5\u6ce8\u610f\u4e8b\u9879"},{"location":"python/django/django-note/#annotateaggregate","text":"aggregat\u200ce (\u805a\u5408)\u751f\u6210\u7684\u65b0\u53c2\u6570\u76f4\u63a5\u52a0\u5165 queryset \u7684\u5c5e\u6027\u4e2d\uff0c\u800c annotate (\u5907\u6ce8)\u662f\u9488\u5bf9 queryset \u4e2d\u7684\u6bcf\u4e2aitem\u65b0\u589e\u4e00\u4e2a\u5c5e\u6027\uff0c\u5176\u4f5c\u7528\u5bf9\u8c61\u4e0d\u540c\u3002 \u9700\u8981\u6ce8\u610f\uff0c\u5728 queryset \u4f7f\u7528 annotate \u548c aggregate \u4e4b\u524d\uff0c\u82e5\u662f\u4f7f\u7528\u4e86 filter \u6216\u8005 exclude \uff0c filter \u548c exclude \u4e2d\u7684\u68c0\u7d22\u6761\u4ef6\u4f1a\u88ab\u76f8\u5e94\u7684\u8003\u8651\u5230 annotate \u548c aggregate \u51fd\u6570\u4e4b\u4e2d\uff0c\u82e5\u628a filter \u548c exclude \u653e\u5728 annotate \u548c aggregate \u51fd\u6570\u7684\u540e\u9762\u6267\u884c\u5219\u4e0d\u4f1a\u6709\u5f71\u54cd\uff0c\u8be6\u89c1\u6b64\u5904\u3002 \u793a\u4f8b\uff1a from django.db.models import Count tags = [ 1 , 2 ] similar_posts = Message . objects . filter ( tag__in = tags ) similar_posts = similar_posts . annotate ( same_tags = Count ( 'tag' )) for x in similar_posts : print ( x . id , x . same_tags , x . tag . all ()) 13 1 , ] > 14 2 , , ] > \u53ef\u89c1ID\u4e3a13\u7684message\u771f\u6b63\u67092\u4e2a\u6807\u7b7e\uff0c\u4f46\u662f\u7b26\u5408filter\u4e2d\u6761\u4ef6\u7684\u53ea\u67091\u4e2a\uff1bID\u4e3a14\u7684message\u771f\u6b63\u67093\u4e2a\u6807\u7b7e\uff0c\u7b26\u5408filter\u4e2d\u6761\u4ef6\u7684\u53ea\u67092\u4e2a\u3002 similar_posts = Message . objects . all () # \u5220\u9664filter\u540e 13 2 , ] > 14 3 , , ] > \u53ef\u89c1\u5220\u9664filter\u540e\u5f97\u5230\u7684\u6807\u7b7e\u603b\u548c\u624d\u662fMessage\u5305\u542b\u7684\u771f\u6b63\u6807\u7b7e\u6570\u91cf\u3002","title":"annotate\u548caggregat\u200ce\u51fd\u6570"},{"location":"python/django/django-note/#values_list","text":"distinct \u51fd\u6570\u5fc5\u987b\u548c order_by \u914d\u5408\u624d\u751f\u6548\uff0c order_by \u5728 distinct \u4e4b\u524d\u4e4b\u540e\u90fd\u53ef\u4ee5\u3002 Craft . objects . values_list ( 'stage_num' , flat = True ) . distinct () Craft . objects . values_list ( 'stage_num' , flat = True ) . distinct () . order_by ( 'stage_num' ) Doc model queryset distinct Note","title":"values_list\u53bb\u91cd"},{"location":"python/django/django-note/#queryset_2","text":"# fk_ids = [x.fk.id for x in instance.items.all()] fk_ids = instance . items . values_list ( 'fk_id' , flat = True ) FK . objects . filter ( id__in = fk_ids ) . all () \u5148\u83b7\u53d6\u5916\u952eID\u5217\u8868\uff0c\u88ab\u6ce8\u91ca\u7684\u65b9\u6cd5\u8017\u65f6\u4e3a0.0020s\uff0c\u672a\u6ce8\u91ca\u7684\u65b9\u6cd5\u8017\u65f6\u4e3a0:00:00\uff0c\u63a8\u8350\u4f7f\u7528\u672a\u6ce8\u91ca\u7684\u65b9\u6cd5\uff0c\u4e0d\u7528\u904d\u5386\u5217\u8868\uff0c\u76f4\u63a5\u7531\u6570\u636e\u5e93\u64cd\u4f5c\u83b7\u53d6\u5916\u952eID\u5217\u8868\uff0c\u8017\u65f6\u66f4\u4f4e\u4e5f\u66f4\u4e3a\u7b80\u6d01\u3002","title":"queryset\u83b7\u53d6\u5916\u952e\u5217\u8868"},{"location":"python/django/django-note/#manager","text":"# \u516c\u5f00\u6587\u7ae0Manager class PublicManager ( models . Manager ): def get_queryset ( self ): return super ( PublicManager , self ) . get_queryset () . filter ( is_public = True ) # \u6587\u7ae0 class Article ( models . Model ): is_public = models . BooleanField ( default = False , verbose_name = '\u516c\u5f00' ) objects = models . Manager () public = PublicManager () \u83b7\u53d6\u516c\u5f00\u7684\u6587\u7ae0\u65f6\u76f4\u63a5\u8bbf\u95ee Article.public.all() \u5373\u53ef\uff0c\u4e0d\u9700\u8981\u4f7f\u7528 Article.objects.filter(is_public=True) ,\u4f7f\u7528\u8d77\u6765\u66f4\u65b9\u4fbf\u3002","title":"\u81ea\u5b9a\u4e49Manager"},{"location":"python/django/django-note/#queryset_3","text":"","title":"queryset\u95f4\u64cd\u4f5c"},{"location":"python/django/django-note/#queryset_4","text":"\u6709\u7236\u5206\u7c7b\u7684\u6240\u6709\u542b\u91cf \u51cf\u53bb \u8be5\u5546\u54c1\u5df2\u6709\u7684\u542b\u91cf \u4f5c\u4e3a\u5f85\u9009\u7684\u542b\u91cf\u96c6\uff1a category_list = Category . object . filter ( parent__isnull = False ) . exclude ( pk__in = goods . category . all ()) . all ()","title":"queryset\u76f8\u51cf"},{"location":"python/django/django-note/#queryset_5","text":"queryset = queryset1 | queryset2 \u6ce8\u610f\uff0c | \u64cd\u4f5c\u4f1a\u5bf9\u4e24\u4e2aqueryset\u95f4\u7684\u91cd\u590d\u90e8\u5206\u8fdb\u884c\u53bb\u91cd\u3002 \u5b9e\u73b0\u539f\u7406\uff1a \u67d0\u4e00\u5929\u53d1\u73b0\u4e86\u4e00\u4e2a\u5947\u602a\u7684\u95ee\u9898\uff0c\u5982\u4e0b\uff1a \u8f93\u5165\u5982\u4e0b\uff1a \u4e00\u4e2a\u957f\u5ea6\u4e3a2\u7684 queryset \u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a0\u7684 queryset \u5408\u5e76\u5f97\u5230\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a3\u7684 queryset ,\u68c0\u7d22\u5176 query \u8bed\u53e5\u624d\u53d1\u73b0\u8fd9\u662f\u6709\u53ef\u80fd\u7684\uff0c\u9700\u8981\u5bf9\u5f97\u5230\u7684\u7ed3\u679c\u518d\u6b21\u53bb\u91cd\u3002\u672c\u8d28\u4e0a | \u64cd\u4f5c\u662f\u5bf9sql\u8bed\u53e5\u8fdb\u884c OR ,\u5176\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a models/query.py : def __or__ ( self , other ): self . _merge_sanity_check ( other ) if isinstance ( self , EmptyQuerySet ): return other if isinstance ( other , EmptyQuerySet ): return self combined = self . _chain () combined . _merge_known_related_objects ( other ) combined . query . combine ( other . query , sql . OR ) return combined","title":"queryset\u76f8\u52a0"},{"location":"python/django/django-note/#migrations","text":"# \u5408\u5e76\u591a\u4e2amigrations\u6587\u4ef6\u81f3\u4e00\u4e2a python manage . py squashmigrations app_name 0015 # \u6709conflicting\u65f6\u5408\u5e76 python manage . py makemigrations \u2013 merge","title":"migrations\u6587\u4ef6\u51b2\u7a81"},{"location":"python/django/django-note/#migrate-fake","text":"python manage . py migrate -- fake","title":"migrate --fake"},{"location":"python/django/django-note/#url","text":"","title":"Url\u76f8\u5173"},{"location":"python/django/django-note/#_9","text":"\u91cd\u5b9a\u5411\u662f\u6307\u5c06\u5f53\u524d\u7684url\u53d1\u9001/\u8f6c\u8bd1\u4e3a\u5176\u5b83url\u518d\u8fdb\u884c\u5904\u7406\uff0c\u800c\u4e0d\u662f\u6307\u8fd4\u56de\u7684url\uff0c\u4e0d\u80fd\u7528\u4e8e\u9875\u9762\u5237\u65b0\u3002","title":"\u91cd\u5b9a\u5411"},{"location":"python/django/django-note/#_10","text":"url ( r 'author/(?P[0-9]+)/$' , AuthorUpdate . as_view (), name = 'author-update' ), url ( r 'author/(?P\\d+)/$' , AuthorUpdate . as_view (), name = 'author-update' ),","title":"\u6b63\u5219"},{"location":"python/django/django-note/#view","text":"","title":"View\u76f8\u5173"},{"location":"python/django/django-note/#render","text":"return render(request,template,data)","title":"render\u51fd\u6570"},{"location":"python/django/django-note/#success_url","text":"def get_success_url ( self ): return reverse ( 'author-detail' , kwargs = { 'pk' : self . object . pk })","title":"\u52a8\u6001success_url"},{"location":"python/django/django-note/#_11","text":"class BaseMixin ( View ): def get_context_data ( self , ** kwargs ): kwargs [ 'example' ] = 'example' return super ( BaseMixin , self ) . get_context_data ( ** kwargs ) class NewsUpdateView ( BaseMixin , UpdateView ): # \u6709\u7528 example\u5728\u9875\u9762\u4e2d\u53ef\u4ee5\u663e\u793a class NewsUpdateView ( UpdateView , BaseMixin ): # \u6ca1\u7528 example\u5728\u9875\u9762\u4e2d\u4e0d\u53ef\u663e\u793a","title":"\u57fa\u7c7b\u7ee7\u627f\u4fe1\u606f\u65f6\uff0c\u57fa\u7c7b\u8981\u4f18\u5148\u7ee7\u627f\uff0c\u4e0d\u7136\u4e0d\u8d77\u4f5c\u7528"},{"location":"python/django/django-note/#listviewqueryset","text":"class NewsAllListView ( ListContextMixin , ListView ): queryset = News . objects . language ( 'all' ) . in_current_lang () . order_by ( '-id' ) template_name = 'news/list_all.html' context_object_name = 'news_list' paginate_by = settings . PAGE_NUM # def get_queryset(self): # return News.objects.language('all').in_current_lang().order_by('-id') \u5199\u6210\u5458\u53d8\u91cfqueryset runserver\u65f6\u8f93\u51fa,\u8f93\u51fa\u6765\u6e90\u4e8e in_current_lang() ,\u8be5\u65b9\u6cd5\u7528\u4e8e\u9650\u5236\u5f53\u524d\u8bed\u8a00\u73af\u5883\uff0c in_current_lang \u53ea\u4f1a\u5728runserver\u65f6\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u4e4b\u540e\u5c31\u7b97\u4fee\u6539\u4e86\u8bed\u8a00\u73af\u5883\uff0cqueryset\u6210\u5458\u53d8\u91cf\u4e5f\u4e0d\u4f1a\u518d\u6b21\u6839\u636e\u8bed\u8a00\u73af\u5883\u8fdb\u884c\u8c03\u6574\uff0c\u53ea\u6709\u5f53\u518d\u6b21\u91cd\u542f\u670d\u52a1\u5668\u65f6\u624d\u4f1a\u8c03\u6574\u8bed\u8a00\u73af\u5883\uff0c\u4f18\u70b9\u662f\u52a0\u8f7d\u5feb\uff0c\u4f46\u662f\u65e0\u6cd5\u5b9e\u73b0\u8bed\u8a00\u73af\u5883\u7684\u53d8\u5316\u3002 , , ] > , ] > System check identified no issues ( 0 silenced ) . July 18 , 2017 - 10 : 38 : 29 Django version 1.11.2 , using settings 'Portal.settings' Starting development server at http : // 0.0.0.0 : 80 / Quit the server with CTRL - BREAK . Performing system checks ... \u5199\u6210\u5458\u65b9\u6cd5 get_queryset \u65f6\uff0c\u6bcf\u6b21\u90fd\u4f1a\u6839\u636e\u8bed\u8a00\u73af\u5883\u53bb\u8c03\u6574queryset\u6765\u6e90\uff0c\u7f3a\u70b9\u662f\u5f00\u9500\u6bd4\u5199\u6210\u5458\u53d8\u91cf\u5927\uff0crunserver\u540e\u8f93\u51fa\uff0c\u6bcf\u6b21\u8bf7\u6c42\u8be5 listview in_current_lang \u90fd\u4f1a\u88ab\u8c03\u7528\uff1a System check identified no issues ( 0 silenced ) . July 18 , 2017 - 10 : 42 : 47 Django version 1.11.2 , using settings 'Portal.settings' Starting development server at http : // 0.0.0.0 : 80 / Quit the server with CTRL - BREAK . 2017 - 07 - 18 10 : 42 : 52 , 375 [ INFO ] - \"GET /manage/ HTTP/1.1\" 200 6224 2017 - 07 - 18 10 : 42 : 52 , 442 [ INFO ] - \"GET /manage/home/ HTTP/1.1\" 200 1412 2017 - 07 - 18 10 : 42 : 52 , 788 [ INFO ] - \"GET /static/images/favicon.ico HTTP/1.1\" 200 1099 , , ] > , ] >","title":"ListView\u4e2dqueryset\u4f7f\u7528\u9677\u9631"},{"location":"python/django/django-note/#form","text":"","title":"Form\u76f8\u5173"},{"location":"python/django/django-note/#_12","text":"class LoginForm ( forms . Form ): error_messages = { 'login_error' : \"\u8d26\u6237\u540d\u6216\u5bc6\u7801\u8f93\u5165\u9519\u8bef\" , } raise forms . ValidationError ( self . error_messages [ \"login_error\" ])","title":"\u4f7f\u7528\u9884\u8bbe\u7684\u9519\u8bef"},{"location":"python/django/django-note/#_13","text":"self . add_error ( \"username\" , \"\u8d26\u6237\u540d\u6216\u5bc6\u7801\u8f93\u5165\u9519\u8bef\" ) # username\u4e3a\u9519\u8bef\u53d1\u751f\u7684\u5b57\u6bb5","title":"\u52a8\u6001\u6dfb\u52a0\u9519\u8bef"},{"location":"python/django/django-note/#template","text":"","title":"Template\u76f8\u5173"},{"location":"python/django/django-note/#html","text":"\u5728\u754c\u9762\u4e2d\u5c06\u67d0\u4e2a\u53d8\u91cf\u6e32\u67d3\u6210\u4e3ahtml\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a {% autoescape off %} {{content}} {% endautoescape %} {{content|safe}}","title":"\u6e32\u67d3\u53d8\u91cf\u81f3html"},{"location":"python/django/django-note/#templet","text":"{{ solution . title | truncatechars : 20 }} # 20\u4e2a\u5b57\u7b26\u540e\u663e\u793a... {{ solution . create_time | date : \"Y-m-d H:i:s\" }} # datatime\u683c\u5f0f","title":"templet\u5e38\u7528\u8fc7\u6ee4\u5668"},{"location":"python/django/django-note/#_14","text":"{ % if perms . app_label . can_do_something % } { % endif % } perms \u662f\u4e00\u4e2a django.contrib.auth.context_processors.PermWrapper \u5bf9\u8c61\uff0c\u6587\u6863 \u89c1\u6b64 \u3002 \u82e5\u4f7f\u7528 get_template \u6765\u6e32\u67d3\u9875\u9762\u65f6\u9700\u8981 perms \u5bf9\u8c61\uff1a from django.template.loader import get_template from django.contrib.auth.context_processors import PermWrapper for article in article_list : html += get_template ( 'article/article_item.html' ) . render ({ 'article' : article , 'perms' : PermWrapper ( request . user )})","title":"\u68c0\u6d4b\u7528\u6237\u662f\u5426\u6709\u67d0\u9879\u6743\u9650"},{"location":"python/django/django-note/#booleanjs","text":"context [ 'is_html' ] = True {{ is_html | yesno : \"true,false\" }}","title":"\u4f20\u9012boolean\u81f3js"},{"location":"python/django/django-note/#listjs","text":"kwargs [ 'tags' ] = [ '1' , '2' ] var tags = {{ tags | safe }};","title":"\u4f20\u9012list\u81f3js"},{"location":"python/django/django-note/#_15","text":"\u751f\u6210\u672c\u9875\u7684\u7edd\u5bf9\u8def\u5f84 {{ request.build_absolute_uri }} \u751f\u6210\u6709 url name \u7684 url \u7684\u7edd\u5bf9\u8def\u5f84 {% absurl 'web_news_detail' news.id %} \u751f\u6210\u9759\u6001\u6587\u4ef6\u5bf9\u5e94\u7684\u7edd\u5bf9\u8def\u5f84 {{ news.cover.url|absolute_media_url:request }} \u4f7f\u7528\u7684\u6a21\u677f\u6807\u7b7e\u6587\u4ef6 \u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u65f6\u52a1\u5fc5\u4f7f\u7528 {% load absolute_url %} \u52a0\u8f7d\u6807\u7b7e absolute_url.py : from django.template import Library from django.template.defaulttags import URLNode , url from urllib.parse import urlencode register = Library () class AbsoluteURL ( str ): pass class AbsoluteURLNode ( URLNode ): \"\"\"\u751f\u6210\u7edd\u5bf9\u8def\u5f84\u7684url\u6807\u7b7e\"\"\" def render ( self , context ): asvar , self . asvar = self . asvar , None path = super ( AbsoluteURLNode , self ) . render ( context ) request = context [ 'request' ] abs_url = AbsoluteURL ( request . build_absolute_uri ( path )) # \u4fdd\u6301request parameters\u4e0d\u4e22\u5931 parameters = urlencode ( request . GET , doseq = True ) if parameters : abs_url = ' {} ? {} ' . format ( abs_url , parameters ) if not asvar : return str ( abs_url ) else : if path == request . path : abs_url . active = 'active' else : abs_url . active = '' context [ asvar ] = abs_url return '' @register . tag def absurl ( parser , token ): node = url ( parser , token ) return AbsoluteURLNode ( view_name = node . view_name , args = node . args , kwargs = node . kwargs , asvar = node . asvar ) @register . filter def absolute_url ( url , request ): \"\"\" Usage: {{ url|absolute_url:request }} \"\"\" return request . build_absolute_uri ( url )","title":"\u7edd\u5bf9\u8def\u5f84\u751f\u6210"},{"location":"python/django/django-note/#django-filter","text":"filter.qs\u4e3a\u8fc7\u6ee4\u540e\u7684queryset\uff1b filter.data\u4e3a\u5f53\u524d\u8fc7\u6ee4\u53d6\u5f97\u7684\u6570\u636e\uff0c\u5982filter.data.category\u65e2\u4e3a\u5f53\u524d\u53d6\u5f97\u7684\u7c7b\u578bID\u3002","title":"Django-filter"},{"location":"python/django/django-note/#tags","text":"\u793a\u4f8b Tags \u7684\u4f5c\u7528\u662f\u9ad8\u4eae\u5f53\u524d Navbar \u9009\u4e2d\u7684\u9009\u9879\u3002 (1) \u65b0\u5efa templatetags \u6587\u4ef6\u5939\uff0c\u653e\u5165\u7a7a\u7684 __init__.py \u6587\u4ef6\u3002 (2) app/templatetags/nav.py \uff1a from django.core.urlresolvers import resolve from django.template import Library register = Library () @register . simple_tag def active_nav ( request , url ): url_name = resolve ( request . path ) . url_name if url_name == url : return \"active\" return \"\" (3) \u7528\u6cd5 {% active_nav request 'pattern_name' %}","title":"\u81ea\u5b9a\u4e49Tags"},{"location":"python/django/django-note/#admin","text":"","title":"Admin\u76f8\u5173"},{"location":"python/django/django-note/#list","text":"\u5199\u5728 admins.py \u4e2d\uff1a # \u8bd5\u542c class AuditionAdmin ( admin . ModelAdmin ): list_display = [ 'id' , 'pre_student' , 'follower' , 'course' , 'teacher' , 'class_room' , 'state' , 'feed_back_staff' , 'feed_back_time' ] list_filter = ( 'state' , ) \u3000 \uff03 \u6a2a\u5411\u8fc7\u6ee4\u5668 def course ( self , obj ): #list_display \u5916\u952e return obj . class_schedule . course course . short_description = '\u8bfe\u7a0b' \u5199\u5728 models.py \u4e2d\uff1a class User ( models . Model ): ... # \u83b7\u53d6\u5168\u540d def get_full_name ( self ): if self . name == '' : return self . username else : return self . name get_full_name . short_description = '\u5168\u540d' class MyUserAdmin ( UserAdmin ): list_display = [ 'id' , 'username' , 'get_full_name' , 'tel' , 'email' , 'token' , 'gender' ]","title":"\u65b9\u6cd5\u7ed3\u679c\u663e\u793a\u5728list\u4e2d"},{"location":"python/django/django-note/#_16","text":"\u53ef\u89c1\u4f46\u4e0d\u63a5\u4fee\u6539 readonly_fields = ( 'word_count' ,)","title":"\u8bbe\u7f6e\u5b57\u6bb5\u53ea\u8bfb"},{"location":"python/django/django-note/#admin_1","text":"\u5219\u5728 model \u5b57\u6bb5\u4e2d\u8bbe\u7f6e editable=False \u5373\u53ef","title":"\u8bbe\u7f6e\u5b57\u6bb5\u4e0d\u51fa\u73b0\u5728admin\u4e2d"},{"location":"python/django/django-note/#superuser","text":"python manage.py changepassword \u4fee\u6539admin\u5bc6\u7801 python manage.py changepassword username \u6307\u5b9a\u7528\u6237\u4fee\u6539admin\u5bc6\u7801","title":"\u4fee\u6539SuperUser\u5bc6\u7801"},{"location":"python/django/django-note/#admintitle","text":"admin.site.site_title = '\u6d4b\u8bd5'","title":"\u8bbe\u7f6e\u7ad9\u70b9admin\u663e\u793atitle"},{"location":"python/django/django-note/#appverbose_name","text":"apps.py : class UserConfig ( AppConfig ): name = 'user' verbose_name = '\u7528\u6237' __init__.py : default_app_config = 'user.apps.UserConfig'","title":"\u8bbe\u7f6eapp\u7684verbose_name"},{"location":"python/django/django-note/#modelverbose_name","text":"models.py class Meta : verbose_name = _ ( '\u7528\u6237' ) verbose_name_plural = _ ( '\u7528\u6237' ) # \u590d\u6570\u65f6\u663e\u793a\u7684\u503c","title":"\u8bbe\u7f6emodel\u7684verbose_name"},{"location":"python/django/django-note/#_17","text":"\u8bbe\u7f6e list_editable = ( 'user' , 'is_locked' ) \u5373\u53ef\u4e00\u6b21\u7f16\u8f91\u5217\u8868\u4e0a\u591a\u884c\u6570\u636e\u5bf9\u5e94\u7684\u67d0\u4e9b\u5b57\u6bb5\uff0c\u4f46\u662f\u8981\u6c42\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u5728 list_display \u4e2d\u3002","title":"\u8bbe\u7f6e\u5217\u8868\u53ef\u7f16\u8f91\u5b57\u6bb5"},{"location":"python/django/django-note/#utils","text":"","title":"Utils\u76f8\u5173"},{"location":"python/django/django-note/#_18","text":"'\u6570\u5b57\uff1a%d \u5b57\u7b26\u4e32 %s'%(instance.pk,instance.name) \u5355\u4e2a\u53d8\u91cf\u65f6\u540e\u9762\u53ef\u4e0d\u7528\u62ec\u53f7\uff0c\u5982\uff1a'\u5b57\u7b26\u4e32:%s'%instance.name '{}{}'.format(str1, str2) \u4f18\u4e8e\u4f7f\u7528% '{one}{two}'.format(one=str1, two=str2)","title":"\u5b57\u7b26\u62fc\u63a5"},{"location":"python/django/django-note/#_19","text":"Django\u7684message\u6846\u67b6\u53ef\u4ee5\u7528\u6765\u4f20\u9012\u9875\u9762\u4e4b\u95f4\u7684\u6d88\u606f","title":"\u9875\u9762\u95f4\u6d88\u606f\u4f20\u9012"},{"location":"python/django/django-note/#str","text":">>> a = \"03523\" # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6570\u5b57 >>> a . isdigit () True >>> b = \"963spam\" >>> b . isdigit () False \u5c01\u88c5\u540e\uff1a def isdigit ( string ): \"\"\" :param string: :return: \u8be5\u5b57\u7b26\u662f\u5426\u662f\u6570\u5b57 \"\"\" if isinstance ( string , int ): return True else : return isinstance ( string , str ) and string . isdigit ()","title":"\u5224\u65adstr\u662f\u5426\u4e3a\u6570\u5b57"},{"location":"python/django/django-note/#model_1","text":"from django.apps import apps model = next (( m for m in apps . get_models () if m . _meta . db_table == 'family_smstemplate' ), None ) print ( model )","title":"\u7531\u6570\u636e\u5e93\u8868\u540d\u79f0\u83b7\u53d6\u5bf9\u5e94\u7684model"},{"location":"python/django/django-note/#_20","text":"\u907f\u514d\u5199\u591a\u884c\uff0c\u66f4\u7b80\u6d01\u3002 subject, from_email, to = 'hello', settings.EMAIL_HOST_USER, '614457662@qq.com'","title":"\u5b57\u7b26\u4e32\u8fde\u7eed\u5b9a\u4e49"},{"location":"python/django/django-note/#python","text":"class Foo ( object ): pass class Bar ( Foo ): pass print type ( Foo ()) == Foo True print type ( Bar ()) == Foo False print isinstance ( Bar (), Foo ) True type \u4e0d\u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c isinstance \u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\u3002","title":"Python\u7c7b\u578b\u5224\u65ad"},{"location":"python/django/django-note/#_21","text":"","title":"\u4fe1\u53f7"},{"location":"python/django/django-note/#request_finished","text":"from django.core.signals import request_finished from django.dispatch import receiver @receiver ( request_finished ) def my_callback ( sender , ** kwargs ): print ( \"Request finished!\" ) from django.dispatch import Signal request_started = Signal ( providing_args = [ \"environ\" ]) request_finished = Signal () got_request_exception = Signal ( providing_args = [ \"request\" ]) setting_changed = Signal ( providing_args = [ \"setting\" , \"value\" , \"enter\" ])","title":"request_finished"},{"location":"python/django/django-note/#_22","text":"from django.dispatch import receiver post_viewed = django . dispatch . Signal ( providing_args = [ \"post\" , \"request\" ]) @receiver ( post_viewed ) def handle_post_viewed ( sender , ** kwargs ): print ( '------------------' ) # \u7528\u6237 class UserViewSet ( ModelViewSet ): queryset = UserMessage . objects . all () serializer_class = UserSerializer @list_route ( methods = [ 'GET' ]) def sender ( self , request ): # \u53d1\u51fa\u4fe1\u53f7 post_viewed . send ( sender = self . __class__ ) return Response ( 'sender' ) @list_route ( methods = [ 'GET' ]) # \u4e0d\u53d1\u51fa\u4fe1\u53f7 def receiver ( self , request ): return Response ( '' )","title":"\u81ea\u5b9a\u4e49\u4fe1\u53f7"},{"location":"python/django/django-note/#pre_save","text":"it's used before the transaction saves.","title":"pre_save"},{"location":"python/django/django-note/#post_save","text":"it's used after the transaction saves. from django.dispatch import receiver from django.db.models.signals import post_save @receiver ( post_save , sender = settings . AUTH_USER_MODEL ) def user_create ( sender , instance = None , created = False , ** kwargs ): if created : member = Member . objects . create ( user = instance ) family = Family . objects . create () family . members . add ( member )","title":"post_save"},{"location":"python/django/django-note/#_23","text":"\u65b0\u5efa signals.py \u6587\u4ef6\u5199\u4fe1\u53f7\u76f8\u5173\u7684\u4ee3\u7801\u65f6\uff0c\u9700\u8981\u5728 apps.py \u4e2d\u65b0\u589e ready \u51fd\u6570 class UserConfig ( AppConfig ): name = 'user' verbose_name = '\u7528\u6237' def ready ( self ): import user.signals \u4e0d\u7136\u4f1a\u5bfc\u81f4 signals.py \u4e2d\u7684\u4ee3\u7801\u65e0\u6cd5\u751f\u6548\u3002\u800c\u4e14\u5fc5\u987b\u8981\u7528 import user.signals \u5bfc\u5165\u800c\u4e0d\u53ef\u7528 from .signals import * \u5bfc\u5165,\u4e0d\u7136\u4f1a\u63d0\u793a SyntaxError: import * only allowed at module level \u9519\u8bef\u3002","title":"\u4fe1\u53f7\u4e0d\u89e6\u53d1\u95ee\u9898"},{"location":"python/django/django-note/#_24","text":"","title":"\u6d4b\u8bd5"},{"location":"python/django/django-note/#_25","text":"\u65e2\u5728\u5199\u529f\u80fd\u4ee3\u7801\u524d\uff0c\u4f18\u5148\u5199\u6d4b\u8bd5\u4ee3\u7801\uff0c\u867d\u7136\u4e0e\u76f4\u89c9\u76f8\u6096\uff0c\u4f46\u662f\u8fd9\u4e0e\u4e00\u822c\u4eba\u505a\u4e8b\u7684\u987a\u5e8f\u76f8\u540c\uff0c\u5148\u53d1\u73b0\u95ee\u9898\uff0c\u518d\u5199\u4ee3\u7801\u53bb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u662f \u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1 \u628a\u8fd9\u4e2a\u8fc7\u7a0b\u5f62\u5f0f\u5316\u4e86\u3002 basic-testing-strategies","title":"\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1"},{"location":"python/django/django-note/#_26","text":"\u51fd\u6570\u5fc5\u987b\u4ee5\u5c0f\u5199\u7684test\u5f00\u5934\uff0c\u5404\u4e2a\u6d4b\u8bd5\u4e4b\u95f4\u8981\u72ec\u7acb\uff0c\u8c03\u7528\u7684\u987a\u5e8f\u4e3a\u51fd\u6570\u540d\u7684\u5b57\u6bcd\u987a\u5e8f\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u51fd\u6570\u6d4b\u8bd5\u5b8c\u6210\u540e\u6570\u636e\u5e93\u5c06\u81ea\u52a8\u56de\u6eda\u81f3\u521d\u59cb\u72b6\u6001\u3002","title":"\u6d4b\u8bd5\u51fd\u6570"},{"location":"python/django/django-note/#pycharm","text":"\u9f20\u6807\u6307\u9488\u4f4d\u4e8e\u6d4b\u8bd5\u6848\u4f8b\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u57df\u5185\u5c06\u53ea\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f4d\u4e8e\u6d4b\u8bd5\u6848\u4f8b\u7684\u4f5c\u7528\u57df\u5185\u5c06\u6267\u884c\u6574\u4e2a\u6d4b\u8bd5\u6848\u4f8b\u3002","title":"Pycharm\u4e2d\u8fd0\u884c\u6d4b\u8bd5\u7684\u6ce8\u610f\u4e8b\u9879"},{"location":"python/django/django-note/#_27","text":"import pdb pdb.set_trace() \u4e4b\u540e\u5728\u63a7\u5236\u53f0\u5c06\u770b\u5230 \uff08Pdb\uff09: \uff0c\u53ef\u4ee5\u8f93\u5165Python\u8bed\u53e5\u8fdb\u884c\u4ea4\u4e92\u68c0\u67e5\u3002","title":"\u8bbe\u7f6e\u65ad\u70b9"},{"location":"python/django/django-note/#_28","text":"","title":"\u7b2c\u4e09\u65b9\u5de5\u5177\u53ca\u4f5c\u7528\u7b80\u4ecb"},{"location":"python/django/django-note/#django-celery","text":"\u5f02\u6b65\u53d1\u9001\u90ae\u4ef6\u3001\u5904\u7406\u4efb\u52a1\u4f7f\u7528\u5e93","title":"django-celery"},{"location":"python/django/django-note/#_29","text":"","title":"\u5176\u4ed6"},{"location":"python/django/django-note/#_30","text":"\u53cc\u4e0b\u5212\u7ebf\uff08double undersocres\uff09\u7528\u6237\u5b9a\u4e49\u7c7b\u7684\u5185\u90e8\u5c5e\u6027 \u7528\u4e8e\u5b9a\u4e49\u53ea\u53ef\u5728\u7c7b\u7684\u5185\u90e8\u4f7f\u7528\u7684\u53c2\u6570\u548c\u65b9\u6cd5 # __\u4fdd\u8bc1\u8be5\u51fd\u6570\u4e0d\u53ef\u88ab\u5916\u90e8\u8c03\u7528 def __send_sms(self, tel, content):","title":"\u5b9a\u4e49\u7c7b\u5185\u90e8\u65b9\u6cd5"},{"location":"python/django/django-note/#_31","text":"state = True if day == date else False \u7b49\u4ef7\u4e8e\uff1a if day == date : state = True else : state = False","title":"\u4e09\u76ee\u8fd0\u7b97\u7cbe\u7b80\u4ee3\u7801"},{"location":"python/django/django-note/#requestdatadictquerydict","text":"\u4f7f\u7528requests\u5e93\u76f4\u63a5\u5411Django\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u63a5\u6536\u5230\u7684request.data\u7c7b\u578b\u662fDict\u4e0d\u662fQueryDict\uff0c\u4f1a\u5bfc\u81f4request.data\u7684getlist\u65b9\u6cd5\u65e0\u6cd5\u4f7f\u7528\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a \u76f4\u63a5\u5224\u65ad\u7c7b\u578b dict\u7c7b\u578b\u65f6\u4f7f\u7528dict['name']\uff0cQueryDict\u7c7b\u578b\u65f6\u4f7f\u7528querydict.getlist('name')\uff0c PS:dict['name']\u7b49\u4ef7\u4e8equerydict.getlist('name') \u8fdb\u884c\u7c7b\u578b\u8f6c\u6362 Django1.11\u5982\u4e0b\uff1a from django.http import QueryDict from django.utils.datastructures import MultiValueDict data = QueryDict('', mutable=True) data.update(MultiValueDict(request.data)) print(data.getlist('id')) def dict to query_dict( dict): \"\"\" requests\u5e93\u8bf7\u6c42\u65f6request.data\u4e3adict \u9700\u8981\u8f6c\u6362\u4e3aquery dict\u624d\u80fd\u4f7f\u7528getlist\u65b9\u6cd5 :param dict: dict :return: query*dict \"\"\" query*dict = QueryDict('', mutable=True) query dict.update(MultiValueDict( dict)) return query dict data = dict to query_dict(request.data) if isinstance(request.data, dict) else request.data items = data.getlist('items') MultiValueDict \u4ecb\u7ecd\u5982\u4e0b\uff1a class MultiValueDict ( dict ): \"\"\" A subclass of dictionary customized to handle multiple values for the same key. >>> d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']}) >>> d['name'] 'Simon' >>> d.getlist('name') ['Adrian', 'Simon'] >>> d.getlist('doesnotexist') [] >>> d.getlist('doesnotexist', ['Adrian', 'Simon']) ['Adrian', 'Simon'] >>> d.get('lastname', 'nonexistent') 'nonexistent' >>> d.setlist('lastname', ['Holovaty', 'Willison']) This class exists to solve the irritating problem raised by cgi.parse_qs, which returns a list for every key, even though most Web forms submit single name-value pairs. \"\"\" requets\u53d1\u8d77\u8bf7\u6c42\uff1a import requests data = { 'id' : [ 7 , 8 ], 'ss' : 'sss' } print ( type ( data )) print ( data ) r = requests . post ( url = 'http://192.168.1.108/purchase_courses/test/' , json = data , headers = { 'Authorization' : 'Token 75xxxxxxxxxxxxxxxxxxxxxfb4' }) print ( r . text )","title":"request.data\u7c7b\u578b\u662fDict\u4e0d\u662fQueryDict"},{"location":"python/django/django-note/#sql","text":"c = db . cursor () max_price = 5 c . execute ( \"\"\"SELECT spam, eggs, sausage FROM breakfast WHERE price < %s \"\"\" , ( max_price ,)) \u800c\u4e0d\u662f c . execute ( \"\"\"SELECT spam, eggs, sausage FROM breakfast WHERE price < %s \"\"\" % ( max_price ,)) Python best practice and securest to connect to MySQL and execute queries","title":"\u539f\u751fsql\u9632\u6ce8\u5165"},{"location":"python/django/django-orm/","text":"__exact \u7cbe\u786e\u7b49\u4e8e __iexact \u7cbe\u786e\u7b49\u4e8e \u5ffd\u7565\u5927\u5c0f\u5199 __contains \u5305\u542b __icontains \u5305\u542b \u5ffd\u7565\u5927\u5c0f\u5199 __gt \u5927\u4e8e __gte \u5927\u4e8e\u7b49\u4e8e __lt \u5c0f\u4e8e __lte \u5c0f\u4e8e\u7b49\u4e8e __in \u5b58\u5728\u4e8e\u67d0\u4e2alist\u4e2d __startswith \u4ee5...\u5f00\u5934 __istartswith \u4ee5...\u5f00\u5934 \u5ffd\u7565\u5927\u5c0f\u5199 __endswith \u4ee5...\u7ed3\u5c3e \u5ffd\u7565\u5927\u5c0f\u5199 __iendwith \u4ee5...\u7ed3\u5c3e \u5ffd\u7565\u5927\u5c0f\u5199 __range \u5728...\u8303\u56f4\u5185 __year \u65e5\u671f\u5b57\u6bb5\u7684\u5e74\u4efd __month \u65e5\u671f\u5b57\u6bb5\u7684\u6708\u4efd __day \u65e5\u671f\u5b57\u6bb5\u7684\u65e5\u671f __isnull \u5916\u952e\u662f\u5426\u6709\u503c filter \u7b5b\u9009 exists \u662f\u5426\u5b58\u5728 exclude \u53cd\u9009 distinct \u53bb\u91cd relation->from_member->user \u7531relation\u7684queryset\u6620\u5c04\u5230user\u7684queryset users = User.objects.filter(pk__in=[relation.from_member.user.pk for relation in relations])","title":"Django-orm"},{"location":"python/django/django-oss/","text":"\u5b89\u88c5 pip install oss2 == 2.5.0 storage \u7531\u4e8e\u5b98\u65b9\u7684 django-oss-storage \u5e93\u6700\u65b0\u7684 v1.11 \u7248\u672c\u4f9d\u65e7\u6709 url \u65e0\u5904\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u7684bug\uff0c\u5e76\u4e14\u4e00\u76f4\u4e0d\u63a5\u53d7PR,\u5bf9\u5176\u6e90\u7801\u8fdb\u884c\u62bd\u53d6\u5e76\u4fee\u6539\u5f97\u5230 storage.py \u6587\u4ef6\u5982\u4e0b\uff1a import os import six import shutil from urllib.parse import urljoin from datetime import datetime from tempfile import SpooledTemporaryFile from django.core.files import File from django.core.exceptions import ImproperlyConfigured , SuspiciousOperation from django.core.files.storage import Storage from django.conf import settings from django.utils.encoding import force_text from django.utils.deconstruct import deconstructible from django.utils.timezone import utc import oss2.utils import oss2.exceptions from oss2 import Auth , Service , Bucket , ObjectIterator def _get_config ( name ): config = os . environ . get ( name , getattr ( settings , name , None )) if config is not None : if isinstance ( config , six . string_types ): return config . strip () else : return config else : raise ImproperlyConfigured ( \"' %s not found in env variables or setting.py\" % name ) def _normalize_endpoint ( endpoint ): if not endpoint . startswith ( 'http://' ) and not endpoint . startswith ( 'https://' ): return 'https://' + endpoint else : return endpoint class OssError ( Exception ): def __init__ ( self , value ): self . value = value def __str__ ( self ): return repr ( self . value ) @deconstructible class OssStorage ( Storage ): \"\"\" Aliyun OSS Storage \"\"\" def __init__ ( self , access_key_id = None , access_key_secret = None , end_point = None , bucket_name = None ): self . access_key_id = access_key_id if access_key_id else _get_config ( 'OSS_ACCESS_KEY_ID' ) self . access_key_secret = access_key_secret if access_key_secret else _get_config ( 'OSS_ACCESS_KEY_SECRET' ) self . end_point = _normalize_endpoint ( end_point if end_point else _get_config ( 'OSS_ENDPOINT' )) self . bucket_name = bucket_name if bucket_name else _get_config ( 'OSS_BUCKET_NAME' ) self . auth = Auth ( self . access_key_id , self . access_key_secret ) self . service = Service ( self . auth , self . end_point ) self . bucket = Bucket ( self . auth , self . end_point , self . bucket_name ) # try to get bucket acl to check bucket exist or not try : self . bucket . get_bucket_acl () . acl except oss2 . exceptions . NoSuchBucket : raise SuspiciousOperation ( \"Bucket ' %s ' does not exist.\" % self . bucket_name ) def _get_key_name ( self , name ): \"\"\" Get the object key name in OSS, e.g., location: /media/ input : test.txt output : media/test.txt \"\"\" base_path = force_text ( self . location ) final_path = urljoin ( base_path + \"/\" , name ) name = os . path . normpath ( final_path . lstrip ( '/' )) if six . PY2 : name = name . encode ( 'utf-8' ) return name def _open ( self , name , mode = 'rb' ): if mode != \"rb\" : raise ValueError ( \"OSS files can only be opened in read-only mode\" ) target_name = self . _get_key_name ( name ) try : # Load the key into a temporary file tmpf = SpooledTemporaryFile ( max_size = 10 * 1024 * 1024 ) # 10MB obj = self . bucket . get_object ( target_name ) if obj . content_length is None : shutil . copyfileobj ( obj , tmpf ) else : oss2 . utils . copyfileobj_and_verify ( obj , tmpf , obj . content_length , request_id = obj . request_id ) tmpf . seek ( 0 ) return OssFile ( tmpf , target_name , self ) except oss2 . exceptions . NoSuchKey : raise OssError ( \" %s does not exist\" % name ) except : raise OssError ( \"Failed to open %s \" % name ) def _save ( self , name , content ): target_name = self . _get_key_name ( name ) self . bucket . put_object ( target_name , content ) return os . path . normpath ( name ) def create_dir ( self , dirname ): target_name = self . _get_key_name ( dirname ) if not target_name . endswith ( '/' ): target_name += '/' self . bucket . put_object ( target_name , '' ) def exists ( self , name ): target_name = self . _get_key_name ( name ) if name . endswith ( \"/\" ): # This looks like a directory, but OSS has no concept of directories # need to check whether the key starts with this prefix result = self . bucket . list_objects ( prefix = target_name , delimiter = '' , marker = '' , max_keys = 1 ) return bool ( result . object_list ) exist = self . bucket . object_exists ( target_name ) if not exist : # It's not a file, but it might be a directory. Check again that it's not a directory. name2 = name + \"/\" return self . exists ( name2 ) return exist def get_file_meta ( self , name ): name = self . _get_key_name ( name ) return self . bucket . get_object_meta ( name ) def size ( self , name ): file_meta = self . get_file_meta ( name ) return file_meta . content_length def modified_time ( self , name ): file_meta = self . get_file_meta ( name ) return datetime . fromtimestamp ( file_meta . last_modified ) created_time = accessed_time = modified_time def get_modified_time ( self , name ): file_meta = self . get_file_meta ( name ) if settings . USE_TZ : return datetime . utcfromtimestamp ( file_meta . last_modified ) . replace ( tzinfo = utc ) else : return datetime . fromtimestamp ( file_meta . last_modified ) get_created_time = get_accessed_time = get_modified_time def content_type ( self , name ): name = self . _get_key_name ( name ) file_info = self . bucket . head_object ( name ) return file_info . content_type def listdir ( self , name ): if name == \".\" : name = \"\" name = self . _get_key_name ( name ) if not name . endswith ( '/' ): name += \"/\" files = [] dirs = [] for obj in ObjectIterator ( self . bucket , prefix = name , delimiter = '/' ): if obj . is_prefix (): dirs . append ( obj . key ) else : files . append ( obj . key ) return dirs , files def url ( self , name ): key = self . _get_key_name ( name ) return self . bucket . sign_url ( 'GET' , key , settings . OSS_EXPIRE ) def delete ( self , name ): name = self . _get_key_name ( name ) result = self . bucket . delete_object ( name ) def delete_with_slash ( self , dirname ): name = self . _get_key_name ( dirname ) if not name . endswith ( '/' ): name += '/' result = self . bucket . delete_object ( name ) class OssMediaStorage ( OssStorage ): def __init__ ( self ): self . location = settings . MEDIA_URL super ( OssMediaStorage , self ) . __init__ () def save ( self , name , content , max_length = None ): return super ( OssMediaStorage , self ) . _save ( name , content ) class OssStaticStorage ( OssStorage ): def __init__ ( self ): self . location = settings . STATIC_URL super ( OssStaticStorage , self ) . __init__ () def save ( self , name , content , max_length = None ): return super ( OssStaticStorage , self ) . _save ( name , content ) class OssFile ( File ): \"\"\" A file returned from AliCloud OSS \"\"\" def __init__ ( self , content , name , storage ): super ( OssFile , self ) . __init__ ( content , name ) self . _storage = storage def open ( self , mode = \"rb\" ): if self . closed : self . file = self . _storage . open ( self . name , mode ) . file return super ( OssFile , self ) . open ( mode ) \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4f60\u7684 Bucket \u7684 ACL \u7c7b\u578b\u4e3a\u79c1\u6709\u7684\u65f6\u5019\uff0c\u5728 storage.py \u7684 line 179 \u7684 url \u65b9\u6cd5\u5e94\u4e3a\uff1a def url ( self , name ): key = self . _get_key_name ( name ) return self . bucket . sign_url ( 'GET' , key , settings . OSS_EXPIRE ) \u5f53ACL\u7c7b\u578b\u4e3a\u79c1\u6709\u516c\u5f00\u8bfb\u3001\u516c\u5f00\u8bfb\u5199\u65f6\uff0c\u53ef\u4fee\u6539\u4e3a\uff1a def url ( self , name ): key = self . _get_key_name ( name ) return self . bucket . _make_url ( self . bucket_name , key ) \u533a\u522b\u662f\u662f\u5426\u5bf9\u94fe\u63a5\u8fdb\u884c\u7b7e\u540d\uff0c\u4ee5\u6388\u6743\u524d\u7aef\u83b7\u53d6\u5230\u8be5\u6587\u4ef6\u3002 settings.py # OSS\u914d\u7f6e OSS_ACCESS_KEY_ID = \"\" OSS_ACCESS_KEY_SECRET = \"\" OSS_ENDPOINT = \"oss-cn-hangzhou.aliyuncs.com\" OSS_BUCKET_NAME = \"demo\" # OSS_EXPIRE = 3600 # \u79c1\u6709\u94fe\u63a5\u8d85\u65f6\u65f6\u95f4 \u5355\u4f4d\u79d2 USE_OSS = not DEBUG if USE_OSS : DEFAULT_FILE_STORAGE = 'common.storage.OssMediaStorage' \u5728\u8fd9\u91cc\u8bbe\u7f6e USE_OSS \u5224\u65ad\u662f\u4e3a\u4e86\u5c06\u7ebf\u4e0b\u6d4b\u8bd5\u73af\u5883\u7684 media \u6570\u636e\u4e0e\u7ebf\u4e0a\u751f\u4ea7\u73af\u5883\u7684 media \u6570\u636e\u9694\u79bb\u5f00\u6765\uff0c\u4e0d\u9700\u8981\u9694\u79bb\u5219\u76f4\u63a5\u5220\u9664 USE_OSS \u5224\u65ad\u5373\u53ef\u3002 \u56fe\u7247\u5904\u7406\uff08\u7f29\u7565\u56fe\uff09 \u963f\u91cc\u4e91\u63d0\u4f9b\u4e862\u79cd oss \u7f29\u7565\u56fe\u751f\u6210\u7b56\u7565 \u4e00\u79cd\u662f\u9884\u8bbe\u5904\u7406\u89c4\u5219\uff0c\u4e4b\u540e\u901a\u8fc7\u89c4\u5219\u540d\u79f0\u53bb\u8c03\u7528\u5904\u7406\u89c4\u5219\uff0c\u5904\u7406\u89c4\u5219\u53ef\u4ee5\u5728\u963f\u91cc\u4e91\u7684OSS\u63a7\u5236\u53f0\u4e2d\u7684\u56fe\u7247\u5904\u7406\u9009\u9879\u4e2d\u7ba1\u7406\u3002\u9ed8\u8ba4\u7684\u8c03\u7528\u89c4\u5219\u4e3a \u57df\u540d/sample.jpg?x-oss-process=style/stylename \u3002 \u53e6\u5916\u4e00\u79cd\u662f\u901a\u8fc7url\u53c2\u6570\u6765\u63a7\u5236\u56fe\u7247\u7684\u7f29\u653e\u3001\u88c1\u526a\u548c\u6c34\u5370\u7b49\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u66f4\u52a0\u7684\u7075\u6d3b\uff0c\u4f46\u76f8\u5e94\u7684url\u5c06\u53d8\u5f97\u4e0d\u518d\u7b80\u4ecb\u7f8e\u89c2\u3002\u8be6\u60c5\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u89c1\u963f\u91cc\u4e91OSS\u6587\u6863\u4e2d\u7684 \u56fe\u7247\u5904\u7406\u6307\u5357 \u90e8\u5206\u3002","title":"\u5728Django\u4e2d\u4f7f\u7528OSS"},{"location":"python/django/django-oss/#_1","text":"pip install oss2 == 2.5.0","title":"\u5b89\u88c5"},{"location":"python/django/django-oss/#storage","text":"\u7531\u4e8e\u5b98\u65b9\u7684 django-oss-storage \u5e93\u6700\u65b0\u7684 v1.11 \u7248\u672c\u4f9d\u65e7\u6709 url \u65e0\u5904\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u7684bug\uff0c\u5e76\u4e14\u4e00\u76f4\u4e0d\u63a5\u53d7PR,\u5bf9\u5176\u6e90\u7801\u8fdb\u884c\u62bd\u53d6\u5e76\u4fee\u6539\u5f97\u5230 storage.py \u6587\u4ef6\u5982\u4e0b\uff1a import os import six import shutil from urllib.parse import urljoin from datetime import datetime from tempfile import SpooledTemporaryFile from django.core.files import File from django.core.exceptions import ImproperlyConfigured , SuspiciousOperation from django.core.files.storage import Storage from django.conf import settings from django.utils.encoding import force_text from django.utils.deconstruct import deconstructible from django.utils.timezone import utc import oss2.utils import oss2.exceptions from oss2 import Auth , Service , Bucket , ObjectIterator def _get_config ( name ): config = os . environ . get ( name , getattr ( settings , name , None )) if config is not None : if isinstance ( config , six . string_types ): return config . strip () else : return config else : raise ImproperlyConfigured ( \"' %s not found in env variables or setting.py\" % name ) def _normalize_endpoint ( endpoint ): if not endpoint . startswith ( 'http://' ) and not endpoint . startswith ( 'https://' ): return 'https://' + endpoint else : return endpoint class OssError ( Exception ): def __init__ ( self , value ): self . value = value def __str__ ( self ): return repr ( self . value ) @deconstructible class OssStorage ( Storage ): \"\"\" Aliyun OSS Storage \"\"\" def __init__ ( self , access_key_id = None , access_key_secret = None , end_point = None , bucket_name = None ): self . access_key_id = access_key_id if access_key_id else _get_config ( 'OSS_ACCESS_KEY_ID' ) self . access_key_secret = access_key_secret if access_key_secret else _get_config ( 'OSS_ACCESS_KEY_SECRET' ) self . end_point = _normalize_endpoint ( end_point if end_point else _get_config ( 'OSS_ENDPOINT' )) self . bucket_name = bucket_name if bucket_name else _get_config ( 'OSS_BUCKET_NAME' ) self . auth = Auth ( self . access_key_id , self . access_key_secret ) self . service = Service ( self . auth , self . end_point ) self . bucket = Bucket ( self . auth , self . end_point , self . bucket_name ) # try to get bucket acl to check bucket exist or not try : self . bucket . get_bucket_acl () . acl except oss2 . exceptions . NoSuchBucket : raise SuspiciousOperation ( \"Bucket ' %s ' does not exist.\" % self . bucket_name ) def _get_key_name ( self , name ): \"\"\" Get the object key name in OSS, e.g., location: /media/ input : test.txt output : media/test.txt \"\"\" base_path = force_text ( self . location ) final_path = urljoin ( base_path + \"/\" , name ) name = os . path . normpath ( final_path . lstrip ( '/' )) if six . PY2 : name = name . encode ( 'utf-8' ) return name def _open ( self , name , mode = 'rb' ): if mode != \"rb\" : raise ValueError ( \"OSS files can only be opened in read-only mode\" ) target_name = self . _get_key_name ( name ) try : # Load the key into a temporary file tmpf = SpooledTemporaryFile ( max_size = 10 * 1024 * 1024 ) # 10MB obj = self . bucket . get_object ( target_name ) if obj . content_length is None : shutil . copyfileobj ( obj , tmpf ) else : oss2 . utils . copyfileobj_and_verify ( obj , tmpf , obj . content_length , request_id = obj . request_id ) tmpf . seek ( 0 ) return OssFile ( tmpf , target_name , self ) except oss2 . exceptions . NoSuchKey : raise OssError ( \" %s does not exist\" % name ) except : raise OssError ( \"Failed to open %s \" % name ) def _save ( self , name , content ): target_name = self . _get_key_name ( name ) self . bucket . put_object ( target_name , content ) return os . path . normpath ( name ) def create_dir ( self , dirname ): target_name = self . _get_key_name ( dirname ) if not target_name . endswith ( '/' ): target_name += '/' self . bucket . put_object ( target_name , '' ) def exists ( self , name ): target_name = self . _get_key_name ( name ) if name . endswith ( \"/\" ): # This looks like a directory, but OSS has no concept of directories # need to check whether the key starts with this prefix result = self . bucket . list_objects ( prefix = target_name , delimiter = '' , marker = '' , max_keys = 1 ) return bool ( result . object_list ) exist = self . bucket . object_exists ( target_name ) if not exist : # It's not a file, but it might be a directory. Check again that it's not a directory. name2 = name + \"/\" return self . exists ( name2 ) return exist def get_file_meta ( self , name ): name = self . _get_key_name ( name ) return self . bucket . get_object_meta ( name ) def size ( self , name ): file_meta = self . get_file_meta ( name ) return file_meta . content_length def modified_time ( self , name ): file_meta = self . get_file_meta ( name ) return datetime . fromtimestamp ( file_meta . last_modified ) created_time = accessed_time = modified_time def get_modified_time ( self , name ): file_meta = self . get_file_meta ( name ) if settings . USE_TZ : return datetime . utcfromtimestamp ( file_meta . last_modified ) . replace ( tzinfo = utc ) else : return datetime . fromtimestamp ( file_meta . last_modified ) get_created_time = get_accessed_time = get_modified_time def content_type ( self , name ): name = self . _get_key_name ( name ) file_info = self . bucket . head_object ( name ) return file_info . content_type def listdir ( self , name ): if name == \".\" : name = \"\" name = self . _get_key_name ( name ) if not name . endswith ( '/' ): name += \"/\" files = [] dirs = [] for obj in ObjectIterator ( self . bucket , prefix = name , delimiter = '/' ): if obj . is_prefix (): dirs . append ( obj . key ) else : files . append ( obj . key ) return dirs , files def url ( self , name ): key = self . _get_key_name ( name ) return self . bucket . sign_url ( 'GET' , key , settings . OSS_EXPIRE ) def delete ( self , name ): name = self . _get_key_name ( name ) result = self . bucket . delete_object ( name ) def delete_with_slash ( self , dirname ): name = self . _get_key_name ( dirname ) if not name . endswith ( '/' ): name += '/' result = self . bucket . delete_object ( name ) class OssMediaStorage ( OssStorage ): def __init__ ( self ): self . location = settings . MEDIA_URL super ( OssMediaStorage , self ) . __init__ () def save ( self , name , content , max_length = None ): return super ( OssMediaStorage , self ) . _save ( name , content ) class OssStaticStorage ( OssStorage ): def __init__ ( self ): self . location = settings . STATIC_URL super ( OssStaticStorage , self ) . __init__ () def save ( self , name , content , max_length = None ): return super ( OssStaticStorage , self ) . _save ( name , content ) class OssFile ( File ): \"\"\" A file returned from AliCloud OSS \"\"\" def __init__ ( self , content , name , storage ): super ( OssFile , self ) . __init__ ( content , name ) self . _storage = storage def open ( self , mode = \"rb\" ): if self . closed : self . file = self . _storage . open ( self . name , mode ) . file return super ( OssFile , self ) . open ( mode ) \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4f60\u7684 Bucket \u7684 ACL \u7c7b\u578b\u4e3a\u79c1\u6709\u7684\u65f6\u5019\uff0c\u5728 storage.py \u7684 line 179 \u7684 url \u65b9\u6cd5\u5e94\u4e3a\uff1a def url ( self , name ): key = self . _get_key_name ( name ) return self . bucket . sign_url ( 'GET' , key , settings . OSS_EXPIRE ) \u5f53ACL\u7c7b\u578b\u4e3a\u79c1\u6709\u516c\u5f00\u8bfb\u3001\u516c\u5f00\u8bfb\u5199\u65f6\uff0c\u53ef\u4fee\u6539\u4e3a\uff1a def url ( self , name ): key = self . _get_key_name ( name ) return self . bucket . _make_url ( self . bucket_name , key ) \u533a\u522b\u662f\u662f\u5426\u5bf9\u94fe\u63a5\u8fdb\u884c\u7b7e\u540d\uff0c\u4ee5\u6388\u6743\u524d\u7aef\u83b7\u53d6\u5230\u8be5\u6587\u4ef6\u3002","title":"storage"},{"location":"python/django/django-oss/#settingspy","text":"# OSS\u914d\u7f6e OSS_ACCESS_KEY_ID = \"\" OSS_ACCESS_KEY_SECRET = \"\" OSS_ENDPOINT = \"oss-cn-hangzhou.aliyuncs.com\" OSS_BUCKET_NAME = \"demo\" # OSS_EXPIRE = 3600 # \u79c1\u6709\u94fe\u63a5\u8d85\u65f6\u65f6\u95f4 \u5355\u4f4d\u79d2 USE_OSS = not DEBUG if USE_OSS : DEFAULT_FILE_STORAGE = 'common.storage.OssMediaStorage' \u5728\u8fd9\u91cc\u8bbe\u7f6e USE_OSS \u5224\u65ad\u662f\u4e3a\u4e86\u5c06\u7ebf\u4e0b\u6d4b\u8bd5\u73af\u5883\u7684 media \u6570\u636e\u4e0e\u7ebf\u4e0a\u751f\u4ea7\u73af\u5883\u7684 media \u6570\u636e\u9694\u79bb\u5f00\u6765\uff0c\u4e0d\u9700\u8981\u9694\u79bb\u5219\u76f4\u63a5\u5220\u9664 USE_OSS \u5224\u65ad\u5373\u53ef\u3002","title":"settings.py"},{"location":"python/django/django-oss/#_2","text":"\u963f\u91cc\u4e91\u63d0\u4f9b\u4e862\u79cd oss \u7f29\u7565\u56fe\u751f\u6210\u7b56\u7565 \u4e00\u79cd\u662f\u9884\u8bbe\u5904\u7406\u89c4\u5219\uff0c\u4e4b\u540e\u901a\u8fc7\u89c4\u5219\u540d\u79f0\u53bb\u8c03\u7528\u5904\u7406\u89c4\u5219\uff0c\u5904\u7406\u89c4\u5219\u53ef\u4ee5\u5728\u963f\u91cc\u4e91\u7684OSS\u63a7\u5236\u53f0\u4e2d\u7684\u56fe\u7247\u5904\u7406\u9009\u9879\u4e2d\u7ba1\u7406\u3002\u9ed8\u8ba4\u7684\u8c03\u7528\u89c4\u5219\u4e3a \u57df\u540d/sample.jpg?x-oss-process=style/stylename \u3002 \u53e6\u5916\u4e00\u79cd\u662f\u901a\u8fc7url\u53c2\u6570\u6765\u63a7\u5236\u56fe\u7247\u7684\u7f29\u653e\u3001\u88c1\u526a\u548c\u6c34\u5370\u7b49\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u66f4\u52a0\u7684\u7075\u6d3b\uff0c\u4f46\u76f8\u5e94\u7684url\u5c06\u53d8\u5f97\u4e0d\u518d\u7b80\u4ecb\u7f8e\u89c2\u3002\u8be6\u60c5\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u89c1\u963f\u91cc\u4e91OSS\u6587\u6863\u4e2d\u7684 \u56fe\u7247\u5904\u7406\u6307\u5357 \u90e8\u5206\u3002","title":"\u56fe\u7247\u5904\u7406\uff08\u7f29\u7565\u56fe\uff09"},{"location":"python/django/django-permissions/","text":"Model Permissions \u200b Django\u539f\u751f\u6743\u9650\u673a\u5236\u57fa\u4e8eModel\ufeff\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2aModel\u800c\u8a00\uff0c\u7cfb\u7edf\u5c06\u81ea\u52a8\u6dfb\u52a0add\u3001change\u548cdelete\u8fd9\u4e09\u4e2a\u6743\u9650\u3002 \u81ea\u5b9a\u4e49\u7684\u6743\u9650\u9700\u8981\u5728model\u4e2d\u624b\u52a8\u6dfb\u52a0\uff1a class Token ( models . Model ): class Meta : permissions = ( ( \"view_token\" , \"Can see token\" ), ) \u6bcf\u4e2a\u6743\u9650\u5305\u542b content_type \u5bf9\u5e94\u8be5\u6743\u9650\u4f5c\u7528\u7684\u6a21\u578b\uff0c\u65e2Token\u3002 code_name \u5bf9\u5e94\u8be5\u6743\u9650\u529f\u80fd\uff0c\u65e2view_token\uff0c\u5728\u68c0\u67e5\u6743\u9650\u65f6\u4f1a\u4f7f\u7528\u3002 name \u5bf9\u5e94\u8be5\u6743\u9650\u529f\u80fd\u7684\u63cf\u8ff0\uff0c\u65e2Can see token\u3002 \u81ea\u5b9a\u4e49\u6743\u9650\u4f7f\u7528\u4ee3\u7801\u65b0\u5efa\uff1a from django.contrib.auth.models import Permission from django.contrib.contenttypes.models import ContentType content_type = ContentType . objects . get_for_model ( Token ) permission = Permission . objects . create ( codename = 'view_token' , name = 'Can see token' , content_type = content_type ) print ( request . user . has_perm ( 'user.add_token' )) # \u68c0\u67e5\u7528\u6237\u662f\u5426\u62e5\u6709\u67d0\u9879\u6743\u9650 has_perm\uff08app_name.permission_codename\uff09 permission = Permission . objects . get ( codename = 'add_token' ) # \u83b7\u53d6\u6743\u9650\u5b9e\u4f8b request . user . user_permissions . add ( permission ) # \u4e3a\u7528\u6237\u65b0\u589e\u6743\u9650 print ( request . user . get_all_permissions ()) # \u67e5\u770b\u7528\u6237\u5168\u90e8\u6743\u9650 # \u7531\u4e8e\u6743\u9650\u7f13\u5b58\u673a\u5236 \u7528\u6237\u7684\u6743\u9650\u5728\u7b2c\u4e00\u6b21\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b\u65f6\u4f1a\u88ab\u7f13\u5b58\u4e0b\u6765 # \u4e3a\u7528\u6237\u589e\u52a0\u4e86\u6743\u9650\u540e\u4e0d\u4f1a\u7acb\u5373\u66f4\u65b0 \u82e5\u60f3\u7acb\u5373\u67e5\u8be2\u7528\u6237\u7684\u65b0\u7684\u6743\u9650\u72b6\u6001 # \u9700\u8981\u91cd\u65b0\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b \u8be6\u89c1\uff1adjangoproject-permission-caching user = User . objects . get ( pk = request . user . id ) print ( user . has_perm ( 'user.add_token' )) # \u7acb\u5373\u68c0\u67e5\u65b0\u6743\u9650\u6dfb\u52a0\u72b6\u6001 user . user_permissions . remove ( permission ) # \u4e3a\u7528\u6237\u5220\u9664\u6743\u9650 request . user . user_permissions . clear () # \u6e05\u9664\u7528\u6237\u5168\u90e8\u6743\u9650 http://blog.igevin.info/posts/django-permission/ https://docs.djangoproject.com/en/1.10/ref/contrib/auth/ Group Permission Group Permission\u7684\u7ba1\u7406\u673a\u5236\u57fa\u672c\u4e0a\u548cMoedl Permission\u4e00\u76f4\uff0c\u57fa\u672c\u65b9\u6cd5\u5982\u4e0b\uff1a group . permissions . set ([ permission_list ]) group . permissions . add ( permission , permission , ... ) group . permissions . remove ( permission , permission , ... ) group . permissions . clear () \u6743\u9650\u68c0\u67e5\u4f9d\u65e7\u4f7f\u7528model.has_permission()\u65b9\u6cd5\u3002 new_group, created = Group.objects.get_or_create(name='new_group') new_group.permissions.add(permission) request.user.groups.add(new_group) DRF\u4e2d\u81ea\u5b9a\u4e49\u6743\u9650\u68c0\u67e5 # override GET /user/ # \u67e5\u770b\u7528\u6237\u5217\u8868 def list ( self , request , * args , ** kwargs ): permission_required ( request . user , [ 'user.view_user' ]) users = User . objects . all () serializer = UserListSerializer ( users , many = True ) return Response ( serializer . data ) from rest_framework.exceptions import PermissionDenied , MethodNotAllowed from .models import * # \u83b7\u53d6\u67d0\u4e2amodel\u7684\u5168\u90e8\u6743\u9650\u5217\u8868 # Receive ---------------------------------- # model: a model # Return ----------------------------------- # permissions: all permission related to this model def get_model_permission ( model ): content_type = ContentType . objects . get_for_model ( model ) permissions = Permission . objects . filter ( content_type = content_type ) return permissions def permission_required ( user , perm_list ): if user . has_perms ( perm_list ): pass else : raise PermissionDenied def list ( self , request , * args , ** kwargs ): self . add_log ( request = request ) permission_list = [] import django.apps for model in django . apps . apps . get_models (): # \u83b7\u53d6\u6240\u6709\u7684model data = {} content_type = ContentType . objects . get_for_model ( model ) # \u83b7\u53d6model\u5bf9\u5e94\u7684content_type permissions = Permission . objects . filter ( content_type = content_type ) # \u83b7\u53d6\u8be5model\u7684\u6240\u6709permission serializer = self . get_serializer ( permissions , many = True ) # \u5e8f\u5217\u5316 data [ 'name' ] = str ( model . _meta . verbose_name ) # \u538b\u5165json\u4e2d data [ 'content_type' ] = str ( content_type . id ) data [ 'permissions' ] = serializer . data permission_list . append ( data ) # json\u538b\u5165list\u4e2d # \u5c06list\u6309\u7167json\u4e2d\u7684content_type\u6b63\u5e8f\u6392\u5217 # \u4e0d\u52a0int(x['content_type])\u5c06\u6309\u7167str\u7c7b\u578b\u6392\u5e8f \u987a\u5e8f\uff1a1 10 11... 2 20 # reverse \u53cd\u5e8f permission_list = sorted ( permission_list , key = lambda x : int ( x [ 'content_type' ]), reverse = False ) return success_response ( permission_list ) from rest_framework.permissions import IsAdminUser class IsVbAdminUser ( IsAdminUser ): \"\"\" Allows access only to admin users. \"\"\" def has_object_permission ( self , request , view , obj ): \"\"\" Return `True` if permission is granted, `False` otherwise. \"\"\" return self . has_permission ( request , view ) \u7136\u540e\u5728 viewset \u4e2d\uff0c\u4f8b\u5982\u83b7\u53d6\u8be6\u60c5\u63a5\u53e3\uff0c\u8fd9\u6837\u7528\uff0c @wrap_permission ( IsVbAdminUser ) def retrieve ( self , request , * args , ** kwargs ): superuser\u5728\u6240\u6709\u6743\u9650\u68c0\u6d4bhas_perm\u5747\u8fd4\u56deTrue","title":"Django\u6743\u9650\u673a\u5236"},{"location":"python/django/django-permissions/#model-permissions","text":"\u200b Django\u539f\u751f\u6743\u9650\u673a\u5236\u57fa\u4e8eModel\ufeff\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2aModel\u800c\u8a00\uff0c\u7cfb\u7edf\u5c06\u81ea\u52a8\u6dfb\u52a0add\u3001change\u548cdelete\u8fd9\u4e09\u4e2a\u6743\u9650\u3002 \u81ea\u5b9a\u4e49\u7684\u6743\u9650\u9700\u8981\u5728model\u4e2d\u624b\u52a8\u6dfb\u52a0\uff1a class Token ( models . Model ): class Meta : permissions = ( ( \"view_token\" , \"Can see token\" ), ) \u6bcf\u4e2a\u6743\u9650\u5305\u542b content_type \u5bf9\u5e94\u8be5\u6743\u9650\u4f5c\u7528\u7684\u6a21\u578b\uff0c\u65e2Token\u3002 code_name \u5bf9\u5e94\u8be5\u6743\u9650\u529f\u80fd\uff0c\u65e2view_token\uff0c\u5728\u68c0\u67e5\u6743\u9650\u65f6\u4f1a\u4f7f\u7528\u3002 name \u5bf9\u5e94\u8be5\u6743\u9650\u529f\u80fd\u7684\u63cf\u8ff0\uff0c\u65e2Can see token\u3002 \u81ea\u5b9a\u4e49\u6743\u9650\u4f7f\u7528\u4ee3\u7801\u65b0\u5efa\uff1a from django.contrib.auth.models import Permission from django.contrib.contenttypes.models import ContentType content_type = ContentType . objects . get_for_model ( Token ) permission = Permission . objects . create ( codename = 'view_token' , name = 'Can see token' , content_type = content_type ) print ( request . user . has_perm ( 'user.add_token' )) # \u68c0\u67e5\u7528\u6237\u662f\u5426\u62e5\u6709\u67d0\u9879\u6743\u9650 has_perm\uff08app_name.permission_codename\uff09 permission = Permission . objects . get ( codename = 'add_token' ) # \u83b7\u53d6\u6743\u9650\u5b9e\u4f8b request . user . user_permissions . add ( permission ) # \u4e3a\u7528\u6237\u65b0\u589e\u6743\u9650 print ( request . user . get_all_permissions ()) # \u67e5\u770b\u7528\u6237\u5168\u90e8\u6743\u9650 # \u7531\u4e8e\u6743\u9650\u7f13\u5b58\u673a\u5236 \u7528\u6237\u7684\u6743\u9650\u5728\u7b2c\u4e00\u6b21\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b\u65f6\u4f1a\u88ab\u7f13\u5b58\u4e0b\u6765 # \u4e3a\u7528\u6237\u589e\u52a0\u4e86\u6743\u9650\u540e\u4e0d\u4f1a\u7acb\u5373\u66f4\u65b0 \u82e5\u60f3\u7acb\u5373\u67e5\u8be2\u7528\u6237\u7684\u65b0\u7684\u6743\u9650\u72b6\u6001 # \u9700\u8981\u91cd\u65b0\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b \u8be6\u89c1\uff1adjangoproject-permission-caching user = User . objects . get ( pk = request . user . id ) print ( user . has_perm ( 'user.add_token' )) # \u7acb\u5373\u68c0\u67e5\u65b0\u6743\u9650\u6dfb\u52a0\u72b6\u6001 user . user_permissions . remove ( permission ) # \u4e3a\u7528\u6237\u5220\u9664\u6743\u9650 request . user . user_permissions . clear () # \u6e05\u9664\u7528\u6237\u5168\u90e8\u6743\u9650 http://blog.igevin.info/posts/django-permission/ https://docs.djangoproject.com/en/1.10/ref/contrib/auth/","title":"Model Permissions"},{"location":"python/django/django-permissions/#group-permission","text":"Group Permission\u7684\u7ba1\u7406\u673a\u5236\u57fa\u672c\u4e0a\u548cMoedl Permission\u4e00\u76f4\uff0c\u57fa\u672c\u65b9\u6cd5\u5982\u4e0b\uff1a group . permissions . set ([ permission_list ]) group . permissions . add ( permission , permission , ... ) group . permissions . remove ( permission , permission , ... ) group . permissions . clear () \u6743\u9650\u68c0\u67e5\u4f9d\u65e7\u4f7f\u7528model.has_permission()\u65b9\u6cd5\u3002 new_group, created = Group.objects.get_or_create(name='new_group') new_group.permissions.add(permission) request.user.groups.add(new_group)","title":"Group Permission"},{"location":"python/django/django-permissions/#drf","text":"# override GET /user/ # \u67e5\u770b\u7528\u6237\u5217\u8868 def list ( self , request , * args , ** kwargs ): permission_required ( request . user , [ 'user.view_user' ]) users = User . objects . all () serializer = UserListSerializer ( users , many = True ) return Response ( serializer . data ) from rest_framework.exceptions import PermissionDenied , MethodNotAllowed from .models import * # \u83b7\u53d6\u67d0\u4e2amodel\u7684\u5168\u90e8\u6743\u9650\u5217\u8868 # Receive ---------------------------------- # model: a model # Return ----------------------------------- # permissions: all permission related to this model def get_model_permission ( model ): content_type = ContentType . objects . get_for_model ( model ) permissions = Permission . objects . filter ( content_type = content_type ) return permissions def permission_required ( user , perm_list ): if user . has_perms ( perm_list ): pass else : raise PermissionDenied def list ( self , request , * args , ** kwargs ): self . add_log ( request = request ) permission_list = [] import django.apps for model in django . apps . apps . get_models (): # \u83b7\u53d6\u6240\u6709\u7684model data = {} content_type = ContentType . objects . get_for_model ( model ) # \u83b7\u53d6model\u5bf9\u5e94\u7684content_type permissions = Permission . objects . filter ( content_type = content_type ) # \u83b7\u53d6\u8be5model\u7684\u6240\u6709permission serializer = self . get_serializer ( permissions , many = True ) # \u5e8f\u5217\u5316 data [ 'name' ] = str ( model . _meta . verbose_name ) # \u538b\u5165json\u4e2d data [ 'content_type' ] = str ( content_type . id ) data [ 'permissions' ] = serializer . data permission_list . append ( data ) # json\u538b\u5165list\u4e2d # \u5c06list\u6309\u7167json\u4e2d\u7684content_type\u6b63\u5e8f\u6392\u5217 # \u4e0d\u52a0int(x['content_type])\u5c06\u6309\u7167str\u7c7b\u578b\u6392\u5e8f \u987a\u5e8f\uff1a1 10 11... 2 20 # reverse \u53cd\u5e8f permission_list = sorted ( permission_list , key = lambda x : int ( x [ 'content_type' ]), reverse = False ) return success_response ( permission_list ) from rest_framework.permissions import IsAdminUser class IsVbAdminUser ( IsAdminUser ): \"\"\" Allows access only to admin users. \"\"\" def has_object_permission ( self , request , view , obj ): \"\"\" Return `True` if permission is granted, `False` otherwise. \"\"\" return self . has_permission ( request , view ) \u7136\u540e\u5728 viewset \u4e2d\uff0c\u4f8b\u5982\u83b7\u53d6\u8be6\u60c5\u63a5\u53e3\uff0c\u8fd9\u6837\u7528\uff0c @wrap_permission ( IsVbAdminUser ) def retrieve ( self , request , * args , ** kwargs ): superuser\u5728\u6240\u6709\u6743\u9650\u68c0\u6d4bhas_perm\u5747\u8fd4\u56deTrue","title":"DRF\u4e2d\u81ea\u5b9a\u4e49\u6743\u9650\u68c0\u67e5"},{"location":"python/django/django-popup/","text":"Update 2018/05/15 \u5df2\u5c01\u88c5\u4e3a\u8f6e\u5b50\uff0c\u9700\u8981\u4f7f\u7528\u7684\u5c0f\u4f19\u4f34\u8bf7\u76f4\u63a5\u8bbf\u95ee Github \u6216\u8005 \u793a\u4f8b\u7f51\u7ad9 \u3002 \u9700\u8981\u4e86\u89e3\u5de5\u4f5c\u539f\u7406\u7684\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002 \u539f\u56e0 Django\u81ea\u5e26\u7684admin\u4e2d\u53ef\u4ee5\u4f7f\u7528PopupWindow\u6765\u65b0\u589e\u548c\u4fee\u6539ForeignKey(\u7b80\u79f0FK)\u3001\u65b0\u589eManyToMany(\u7b80\u79f0M2M)\u5b57\u6bb5\uff0c\u53ef\u4ee5\u5728\u65b0\u589e\u6216\u8005\u4fee\u6539\u67d0\u4e2a\u5bf9\u8c61\u65f6\u5feb\u901f\u7684\u4fee\u6539\u4e0e\u5176\u76f8\u5173\u7684\u5176\u4ed6\u5b9e\u4f8b\uff0c\u4f7f\u7528\u8d77\u6765\u65b9\u4fbf\u5feb\u6377\u3002\u5728\u5b9e\u4f8b\u9879\u76ee\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u4e86\u76f8\u5173\u7684\u7c7b\u4f3c\u9700\u6c42\uff0c\u5728\u6b64\u8bb0\u5f55\u4e0b\u76f8\u5173\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002 \u53ef\u884c\u7684\u5b9e\u73b0\u65b9\u6848 Ajax \u6700\u5f00\u59cb\u8003\u8651\u4f7f\u7528Ajax\u4ee5\u53caDjangoRestFramework\u6765\u5b9e\u73b0\u8fd9\u9879\u529f\u80fd\uff0c\u4f46\u662f\u7f3a\u70b9\u5341\u5206\u660e\u663e\uff0c\u5bf9\u4e8e\u7eafWeb\u7684\u9879\u76ee\u6765\u8bf4\u9700\u8981\u5f15\u5165\u7b2c\u4e09\u65b9\u5e93\uff0c\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664FK\\M2M\u65f6\uff0c\u5176\u4e2d\u7684\u903b\u8f91\u9519\u8bef\u5747\u9700\u8981\u624b\u52a8\u53bb\u5904\u7406\uff0c\u6bd4\u8f83\u7e41\u7410\u5e76\u4e14\u4e0d\u5229\u4e8e\u79fb\u690d\u590d\u7528\u3002 \u76f4\u63a5\u8c03\u7528 RelatedFieldWidgetWrapper \u5728StackOverflow\u4e0a\u641c\u7d22\u5f97\u5230\u7684\u7b54\u6848\u5747\u4e3a\u4f7f\u7528 RelatedFieldWidgetWrapper \u8c03\u7528\u539f\u751fadmin\u7684 PopupWindow \uff0c\u7f3a\u70b9\u6bd4\u8f83\u660e\u663e\uff0c\u5bf9\u4e8e\u6709\u4e00\u5957\u81ea\u5df1\u7684UI\u98ce\u683c\u7684Web\u7cfb\u7edf\u6765\u8bf4\uff0c\u754c\u9762\u95f4\u7684\u98ce\u683c\u5dee\u5f02\u662f\u4e0d\u53ef\u5bb9\u5fcd\u7684\u3002 JS \u53c2\u8003\u4e86Django 1.11.6 admin\u4e2d\u7684\u5b9e\u73b0\u4ee3\u7801\uff0c\u7406\u51fa\u5176\u5b9e\u73b0\u7684\u4e3b\u8981\u601d\u8def\u5982\u4e0b\uff1a RelatedFieldWidgetWrapper \u662f\u4e2a\u7ee7\u627f\u4e8eforms.Widget\u7684\u7c7b\uff0c\u6e90\u7801( /django/contrib/admin/widgets.py )\u5982\u4e0b(\u672a\u663e\u793a\u90e8\u5206\u65e0\u5173\u4ee3\u7801)\uff1a class RelatedFieldWidgetWrapper(forms.Widget): \"\"\" This class is a wrapper to a given widget to add the add icon for the admin interface. \"\"\" template name = 'admin/widgets/related widget_wrapper.html' def __init__ ( self , widget , rel , admin_site , can_add_related = None , can_change_related = False , can_delete_related = False ): self . needs_multipart_form = widget . needs_multipart_form self . attrs = widget . attrs self . choices = widget . choices self . widget = widget self . rel = rel # Backwards compatible check for whether a user can add related # objects. if can_add_related is None : can_add_related = rel . model in admin_site . _registry self . can_add_related = can_add_related # XXX: The UX does not support multiple selected values. multiple = getattr ( widget , 'allow_multiple_selected' , False ) self . can_change_related = not multiple and can_change_related # XXX: The deletion UX can be confusing when dealing with cascading deletion. cascade = getattr ( rel , 'on_delete' , None ) is CASCADE self . can_delete_related = not multiple and not cascade and can_delete_related # so we can check if the related object is registered with this AdminSite self . admin_site = admin_site def get_related_url ( self , info , action , * args ): return reverse ( \"admin: %s _ %s _ %s \" % ( info + ( action ,)), current_app = self . admin_site . name , args = args ) def get_context ( self , name , value , attrs ): from django.contrib.admin.views.main import IS_POPUP_VAR , TO_FIELD_VAR rel_opts = self . rel . model . _meta info = ( rel_opts . app_label , rel_opts . model_name ) self . widget . choices = self . choices url_params = '&' . join ( \" %s = %s \" % param for param in [ ( TO_FIELD_VAR , self . rel . get_related_field () . name ), ( IS_POPUP_VAR , 1 ), ]) context = { 'rendered_widget' : self . widget . render ( name , value , attrs ), 'name' : name , 'url_params' : url_params , 'model' : rel_opts . verbose_name , } if self . can_change_related : change_related_template_url = self . get_related_url ( info , 'change' , '__fk__' ) context . update ( can_change_related = True , change_related_template_url = change_related_template_url , ) if self . can_add_related : add_related_url = self . get_related_url ( info , 'add' ) context . update ( can_add_related = True , add_related_url = add_related_url , ) if self . can_delete_related : delete_related_template_url = self . get_related_url ( info , 'delete' , '__fk__' ) context . update ( can_delete_related = True , delete_related_template_url = delete_related_template_url , ) return context \u63a5\u6536 rel \u53c2\u6570\uff0c\u5176\u4e3a\u4e00\u4e2aFK\u7c7b\uff0c\u5728 get_context \u51fd\u6570\u4e2d\uff0c rel_opts \u4e3a\u8be5\u7c7b\u7684 Meta \u5c5e\u6027\uff0c info \u4e3a\u8be5\u7c7b\u6240\u5728\u7684 app \u548c model \u540d\u79f0\u7ec4\u6210\u7684\u5143\u7ec4\u3002\u5b9a\u4e49\u51fd\u6570 get_related_url \u7528\u4e8e\u751f\u6210\u76f8\u5173\u7684\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664 url , url_params \u9ed8\u8ba4\u6709 TO_FIELD_VAR \u7528\u4e8e\u6807\u8bb0\u4fee\u6539\u7684 field , IS_POPUP_VAR \u7528\u4e8e\u6807\u8bb0\u662f\u4ee5 PopupWindow \u7684\u65b9\u5f0f\u6253\u5f00\u3002 \u5904\u7406\u524d\u9762\u751f\u6210\u7684url\u7684\u89c6\u56fe\u4ee3\u7801\u4f4d\u4e8e /django/contrib/options.py/ModelAdmin/ \u3002\u5904\u7406\u65b0\u589e\u4e3a\u51fd\u6570 response_add \uff0c\u622a\u53d6\u5904\u7406\u5176\u7c7b\u578b\u4e3a popup \u7684\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a if IS_POPUP_VAR in request . POST : to_field = request . POST . get ( TO_FIELD_VAR ) if to_field : attr = str ( to_field ) else : attr = obj . _meta . pk . attname value = obj . serializable_value ( attr ) popup_response_data = json . dumps ({ 'value' : six . text_type ( value ), 'obj' : six . text_type ( obj ), }) return TemplateResponse ( request , self . popup_response_template or [ 'admin/ %s / %s /popup_response.html' % ( opts . app_label , opts . model_name ), 'admin/ %s /popup_response.html' % opts . app_label , 'admin/popup_response.html' , ], { 'popup_response_data' : popup_response_data , }) popup_response_data \u662f\u4e00\u4e2a\u5305\u542b\u4e86\u65b0\u589e\u7684 FK\\M2M \u7684value(\u663e\u793a\u7684\u503c)\u3001obj(\u65b0\u589e\u7684\u5bf9\u8c61\u5b9e\u4f8bID)json\uff0c\u51fd\u6570\u8fd4\u56de\u7684\u4e3a TemplateResponse \uff0c\u751f\u6548\u90e8\u5206\u4e3a 'admin/popup_response.html' \uff0c\u5176\u6e90\u4ee3\u7801\u5982\u4e0b\uff1a { % load i18n static % } < ! DOCTYPE html > < html > < head >< title > { % trans 'Popup closing...' % } </ title ></ head > < body > < script type = \"text/javascript\" id = \"django-admin-popup-response-constants\" src = \"{ % s tatic \" admin / js / popup_response . js \" %}\" data - popup - response = \"{{ popup_response_data }}\" > </ script > </ body > </ html > \u53ea\u5305\u542b\u4e86\u4e00\u4e2a admin/js/popup_response.js \u6587\u4ef6\uff0c\u5176\u6e90\u7801\u5982\u4e0b\uff1a /* global opener */ ( function () { 'use strict' ; var initData = JSON . parse ( document . getElementById ( 'django-admin-popup-response-constants' ) . dataset . popupResponse ); switch ( initData . action ) { case 'change' : opener . dismissChangeRelatedObjectPopup ( window , initData . value , initData . obj , initData . new_value ); break ; case 'delete' : opener . dismissDeleteRelatedObjectPopup ( window , initData . value ); break ; default : opener . dismissAddRelatedObjectPopup ( window , initData . value , initData . obj ); break ; } })(); \u8fd9\u6bb5js\u5c06\u5173\u95ed PopupWindow \u5e76\u5c06\u5f97\u5230\u7684 popup_response_data \u63d2\u5165\u6216\u8005\u4fee\u6539\u81f3\u5bf9\u5e94\u7684 field, \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cadmin\u5728\u5bfb\u627e\u63d2\u5165\u7684 field_id \u662f\u6839\u636e\u6253\u5f00\u7684 PopupWindow \u7684url,\u4f7f\u7528\u4f4d\u4e8e django/contrib/admin/static/js/admin/RelatedObjectLookups.js \u4e2d\u7684 windowname_to_id \u51fd\u6570\u4ece\u5f53\u524d\u7a97\u53e3\u7684url\u622a\u53d6\u5e76\u751f\u6210\u5176\u5728\u7236\u9875\u9762\u5f85\u64cd\u4f5c\u7684 field_id \u3002 \u8fd9\u6837\u7684\u5b9e\u73b0\u65b9\u5f0f\u7684\u4f18\u70b9\u662f\u4fbf\u4e8e\u4f7f\u7528modelform\u4ee5\u53ca\u76f8\u5173\u903b\u8f91\uff0c\u8ba9\u5176\u81ea\u52a8\u751f\u6210\u76f8\u5173\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664\u754c\u9762\u5e76\u5904\u7406\u76f8\u5173\u9519\u8bef\uff0c\u4fbf\u4e8e\u590d\u7528\u79fb\u81f3\uff0c\u4f46\u662f\u9700\u8981\u5bf9\u6837\u5f0f\u8fdb\u884c\u4fee\u6539\u3002 FK\u5b9e\u73b0\u65b9\u6cd5 \u5b9a\u4e49\u4e00\u4e2a Widget : from django.forms.widgets import Select class ForeignKeyWidget ( Select ): template_name = 'widgets/foreign_key_select.html' def __init__ ( self , url_template , * args , ** kw ): super ( ForeignKeyWidget , self ) . __init__ ( * args , ** kw ) self . url_template = url_template def get_context ( self , name , value , attrs ): context = super ( ForeignKeyWidget , self ) . get_context ( name , value , attrs ) context [ 'add_url' ] = self . url_template context [ 'update_url' ] = self . url_template context [ 'delete_url' ] = self . url_template + 'delete/' return context \u5176\u63a5\u53d7\u4e00\u4e2a url_template \u53c2\u6570\uff0c\u5982 url_template \u4e3a /post/ ,\u5219\u9ed8\u8ba4\u7684url\u4e3a\uff1a \u65b0\u589e\uff1a /post/ ; \u4fee\u6539\uff1a /post/id/ ; \u5220\u9664\uff1a /post/delete/id/ \uff1b \u5199\u8be5 Widget \u5bf9\u5e94\u7684 template ,\u793a\u4f8b\u4e2d\u4f7f\u7528 layui2.0 \u4f5c\u4e3a popup \u7684\u6253\u5f00\u65b9\u5f0f\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u81ea\u884c\u9009\u62e9\u3002 < style > # { { widget.attrs.id } } _add , # { { widget.attrs.id } } _change , # { { widget.attrs.id } } _delete { margin-top : 10 px ; padding : 0 10 px ; height : 25 px ; line-height : 25 px ; } </ style > < div class = \"row\" > < div class = \"col-sm-6\" > {% include \"django/forms/widgets/select.html\" %} </ div > < div class = \"col-sm-6 layui-btn-group\" > < a class = \"layui-btn layui-btn-mini\" id = \"{{ widget.attrs.id }}_add\" > \u65b0\u589e </ a > < a class = \"layui-btn layui-btn-mini layui-btn-disabled layui-btn-normal\" id = \"{{ widget.attrs.id }}_change\" > \u4fee\u6539 </ a > < a class = \"layui-btn layui-btn-mini layui-btn-disabled layui-btn-danger\" id = \"{{ widget.attrs.id }}_delete\" > \u5220\u9664 </ a > </ div > </ div > < script > $ ( '#{{ widget.attrs.id }}_add' ). click ( function () { var index = layui . layer . open ({ title : \"\u6dfb\u52a0\u5206\u7c7b\" , type : 2 , area : [ '700px' , '500px' ], content : \"{{ add_url }}\" + '?popup=1&to_field={{ widget.attrs.id }}' , success : function ( layer , index ) { } }); }); $ ( \"#{{ widget.attrs.id }}_change\" ). click ( function () { var id = $ ( '#{{ widget.attrs.id }}' ). val (); if ( id ) { var index = layui . layer . open ({ title : \"\u4fee\u6539\u5206\u7c7b\" , type : 2 , area : [ '700px' , '500px' ], content : '{{ update_url }}' + id + '?popup=1&to_field={{ widget.attrs.id }}' , success : function ( layer , index ) { } }); } }); $ ( \"#{{ widget.attrs.id }}_delete\" ). click ( function () { var id = $ ( '#{{ widget.attrs.id }}' ). val (); var value = $ ( '#{{ widget.attrs.id }} option[value=' + id + ']' ). text (); var indexGood = value . lastIndexOf ( '>' ); var valueN = indexGood > 0 ? value . substring ( indexGood + 1 , value . length ) : value ; if ( id ) { layer . confirm ( '\u786e\u8ba4\u5220\u9664 ' + valueN + ' \u5417?' , { icon : 3 , title : '\u5220\u9664' }, function ( index ) { $ . ajax ({ type : \"POST\" , data : {}, url : '{{ delete_url }}' + id + '/' , beforeSend : function ( xhr ) { xhr . setRequestHeader ( \"X-CSRFToken\" , $ . cookie ( 'csrftoken' )); }, success : function ( data , textStatus ) { <!-- \u5173\u95ed\u5f39\u7a97 \u8fd4\u56de\u5217\u8868 --> layer . close ( index ); $ ( '#{{ widget.attrs.id }} option[value=' + data . id + ']' ). remove (); $ ( \"#{{ widget.attrs.id }}_change,#{{ widget.attrs.id }}_delete\" ). addClass ( 'layui-btn-disabled' ); return false ; }, error : function ( XMLHttpRequest , textStatus , errorThrown ) { layer . alert ( '\u5220\u9664\u5931\u8d25 ' + XMLHttpRequest . responseText ) } }); }); } }); /********select\u7ed1\u5b9achange\u4e8b\u4ef6\uff0c\u5982\u679cvalue\u6709\u503c\uff0c\u5c31\u53ef\u4fee\u6539\u53ca\u5220\u9664 \u9875\u9762\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\u505a\u76f8\u540c\u5224\u65ad**********/ function {{ widget . attrs . id }} _isDisabled () { if ( $ ( '#{{ widget.attrs.id }}' ). val ()) { $ ( \"#{{ widget.attrs.id }}_change,#{{ widget.attrs.id }}_delete\" ). removeClass ( 'layui-btn-disabled' ); } else { $ ( \"#{{ widget.attrs.id }}_change,#{{ widget.attrs.id }}_delete\" ). addClass ( 'layui-btn-disabled' ); } } $ ( '#{{ widget.attrs.id }}' ). change ( function () { {{ widget . attrs . id }} _isDisabled (); }); {{ widget . attrs . id }} _isDisabled (); </ script > \u4ee5\u4fee\u6539\u5206\u7c7b\u4e3a\u4f8b\uff0c\u5176popup\u6253\u5f00\u7684url\u4e3a '{{ update_url }}' + id + '?popup=1&to_field={{ widget.attrs.id }}' \uff0curl\u4e2d\u7684\u53c2\u6570\u5305\u542b\u4e86popup=1\u7528\u4e8e\u6807\u8bb0\u4ee5popup\u65b9\u5f0f\u6253\u5f00\uff0cto_field\u76f4\u63a5\u53d6\u4e86\u8be5\u63a7\u4ef6\u7684id\u800c\u6ca1\u6709\u60f3admin\u4e2d\u90a3\u6837\u76f4\u63a5\u53bburl\u4e2d\u622a\u53d6\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u4e00\u822c\u9879\u76ee\u7684url\u6a21\u5f0f\u6ca1\u6709admin\u4e2d\u90a3\u6837\u89c4\u6574\u3002 forms.py\u58f0\u660e\u63a7\u4ef6 from django import forms from common.fields import ForeignKeyWidget from django.core.urlresolvers import reverse_lazy from .models import * class ArticleForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): super ( ArticleForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'title' ] . widget . attrs . update ({ 'class' : 'form-control' }) self . fields [ 'category' ] . widget . attrs . update ({ 'class' : 'form-control' }) class Meta : model = Article fields = [ 'title' , 'category' ] widgets = { 'category' : ForeignKeyWidget ( url_template = reverse_lazy ( 'category_popup_create' )), } class CategoryForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): super ( CategoryForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'name' ] . widget . attrs . update ({ 'class' : 'form-control' }) self . fields [ 'parent' ] . widget . attrs . update ({ 'class' : 'form-control' }) class Meta : model = Category fields = [ 'name' , 'parent' ] views.py # ------------------------------ \u535a\u5ba2\u7c7b\u578bPopup \u5f00\u59cb ------------------------------ class CategoryPopupCreateView ( PermissionRequiredMixin , CreateView ): form_class = CategoryForm template_name = 'category_popup/create.html' permission_required = 'article.add_category' def get_context_data ( self , ** kwargs ): if 'to_field' in self . request . GET : kwargs [ 'to_field' ] = self . request . GET [ 'to_field' ] return super ( CategoryPopupCreateView , self ) . get_context_data ( ** kwargs ) def form_valid ( self , form ): self . object = form . save () context = { 'op' : 'create' , 'id' : self . object . id , 'value' : self . object . __str__ ()} if 'to_field' in self . request . GET : context [ 'to_field' ] = self . request . GET [ 'to_field' ] return TemplateResponse ( self . request , 'category_popup/success.html' , context = context ) class CategoryPopupUpdateView ( PermissionRequiredMixin , UpdateView ): model = Category form_class = CategoryForm slug_field = 'id' context_object_name = 'category' template_name = 'category_popup/update.html' permission_required = 'article.change_category' def get_context_data ( self , ** kwargs ): if 'to_field' in self . request . GET : kwargs [ 'to_field' ] = self . request . GET [ 'to_field' ] return super ( CategoryPopupUpdateView , self ) . get_context_data ( ** kwargs ) def form_valid ( self , form ): self . object = form . save () context = { 'op' : 'update' , 'id' : self . object . id , 'value' : self . object . __str__ ()} if 'to_field' in self . request . GET : context [ 'to_field' ] = self . request . GET [ 'to_field' ] return TemplateResponse ( self . request , 'category_popup/success.html' , context = context ) class CategoryPopupDeleteView ( PermissionRequiredMixin , DeleteView ): model = Category slug_field = 'id' permission_required = 'article.delete_category' def delete ( self , request , * args , ** kwargs ): self . object = self . get_object () data = { 'op' : 'delete' , 'id' : self . object . id , 'value' : self . object . __str__ ()} self . object . delete () return JsonResponse ( data = data ) # ------------------------------ \u535a\u5ba2\u7c7b\u578bPopup \u7ed3\u675f ------------------------------ \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0curl\u53c2\u6570\u4e2d\u7684to field\u53c2\u6570\u5728get->post\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u4e00\u76f4\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5219\u5728get context_data\u4e2d\u83b7\u53d6\u8be5\u53c2\u6570\uff0c\u4f20\u9012\u81f3 category_popup/update.html ,\u5176\u6e90\u7801\u5982\u4e0b\uff1a {% extends \"category_popup/base.html\" %} {% block main %} < div style = \"margin: 4px\" > < form class = \"form-horizontal\" enctype = \"multipart/form-data\" action = \"{% url 'category_popup_update' category.id %}{% if to_field %}?to_field={{ to_field }}{% endif %}\" method = \"post\" > {% include 'widgets/form.html' %} < div class = \"form-group\" > < div class = \"col-sm-10\" > < input class = \"btn btn-raised btn-info\" type = \"submit\" value = \"\u4fee\u6539\u5206\u7c7b\" /> </ div > </ div > </ form > </ div > {% endblock %} success.html\u4ee3\u7801\uff1a {% extends \"category_popup/base.html\" %} {% block main %} < script > var to_field = '#{{ to_field }}' , op = '{{ op }}' , id = '{{ id }}' , value = '{{ value }}' ; if ( to_field ) { switch ( op ) { case 'create' : if ( id ) { var index = parent . layer . getFrameIndex ( window . name ); //\u5148\u5f97\u5230\u5f53\u524diframe\u5c42\u7684\u7d22\u5f15 parent . layer . close ( index ); //\u518d\u6267\u884c\u5173\u95ed $option = '<option value=' + id + ' selected>' + value + '</option>' ; $ ( to_field , window . parent . document ). append ( $option ); $ ( to_field + '_change,' + to_field + '_delete' , window . parent . document ). removeClass ( 'layui-btn-disabled' ); } break ; case 'update' : if ( id ) { var index = parent . layer . getFrameIndex ( window . name ); //\u5148\u5f97\u5230\u5f53\u524diframe\u5c42\u7684\u7d22\u5f15 parent . layer . close ( index ); //\u518d\u6267\u884c\u5173\u95ed $ ( to_field + ' option[value=' + id + ']' , window . parent . document ). html ( value ); } break ; } } </ script > {% endblock %} urls.py category_urlpatterns = [ url ( r '^popup/$' , CategoryPopupCreateView . as_view (), name = 'category_popup_create' ), url ( r '^popup/(?P<pk>\\d+)/$' , CategoryPopupUpdateView . as_view (), name = 'category_popup_update' ), url ( r '^popup/delete/(?P<pk>\\d+)/$' , CategoryPopupDeleteView . as_view (), name = 'category_popup_delete' ), ] M2M\u5b9e\u73b0 M2M\u5b9e\u73b0\u4e0eFK\u7684\u5b9e\u73b0\u65b9\u6cd5\u57fa\u672c\u7c7b\u4f3c\uff0c\u53ea\u662f\u5728\u5224\u65ad\u662f\u5426\u4eae\u8d77\u4fee\u6539\u3001\u5220\u9664\u6309\u94ae\u7684\u903b\u8f91\u4e0a\u6709\u4e9b\u8bb8\u6539\u53d8\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002 \u6700\u7ec8\u7684\u6548\u679c","title":"Django\u5f39\u7a97\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664ForeignKey\u3001ManyToMany"},{"location":"python/django/django-popup/#update-20180515","text":"\u5df2\u5c01\u88c5\u4e3a\u8f6e\u5b50\uff0c\u9700\u8981\u4f7f\u7528\u7684\u5c0f\u4f19\u4f34\u8bf7\u76f4\u63a5\u8bbf\u95ee Github \u6216\u8005 \u793a\u4f8b\u7f51\u7ad9 \u3002 \u9700\u8981\u4e86\u89e3\u5de5\u4f5c\u539f\u7406\u7684\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002","title":"Update 2018/05/15"},{"location":"python/django/django-popup/#_1","text":"Django\u81ea\u5e26\u7684admin\u4e2d\u53ef\u4ee5\u4f7f\u7528PopupWindow\u6765\u65b0\u589e\u548c\u4fee\u6539ForeignKey(\u7b80\u79f0FK)\u3001\u65b0\u589eManyToMany(\u7b80\u79f0M2M)\u5b57\u6bb5\uff0c\u53ef\u4ee5\u5728\u65b0\u589e\u6216\u8005\u4fee\u6539\u67d0\u4e2a\u5bf9\u8c61\u65f6\u5feb\u901f\u7684\u4fee\u6539\u4e0e\u5176\u76f8\u5173\u7684\u5176\u4ed6\u5b9e\u4f8b\uff0c\u4f7f\u7528\u8d77\u6765\u65b9\u4fbf\u5feb\u6377\u3002\u5728\u5b9e\u4f8b\u9879\u76ee\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u4e86\u76f8\u5173\u7684\u7c7b\u4f3c\u9700\u6c42\uff0c\u5728\u6b64\u8bb0\u5f55\u4e0b\u76f8\u5173\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002","title":"\u539f\u56e0"},{"location":"python/django/django-popup/#_2","text":"","title":"\u53ef\u884c\u7684\u5b9e\u73b0\u65b9\u6848"},{"location":"python/django/django-popup/#ajax","text":"\u6700\u5f00\u59cb\u8003\u8651\u4f7f\u7528Ajax\u4ee5\u53caDjangoRestFramework\u6765\u5b9e\u73b0\u8fd9\u9879\u529f\u80fd\uff0c\u4f46\u662f\u7f3a\u70b9\u5341\u5206\u660e\u663e\uff0c\u5bf9\u4e8e\u7eafWeb\u7684\u9879\u76ee\u6765\u8bf4\u9700\u8981\u5f15\u5165\u7b2c\u4e09\u65b9\u5e93\uff0c\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664FK\\M2M\u65f6\uff0c\u5176\u4e2d\u7684\u903b\u8f91\u9519\u8bef\u5747\u9700\u8981\u624b\u52a8\u53bb\u5904\u7406\uff0c\u6bd4\u8f83\u7e41\u7410\u5e76\u4e14\u4e0d\u5229\u4e8e\u79fb\u690d\u590d\u7528\u3002","title":"Ajax"},{"location":"python/django/django-popup/#relatedfieldwidgetwrapper","text":"\u5728StackOverflow\u4e0a\u641c\u7d22\u5f97\u5230\u7684\u7b54\u6848\u5747\u4e3a\u4f7f\u7528 RelatedFieldWidgetWrapper \u8c03\u7528\u539f\u751fadmin\u7684 PopupWindow \uff0c\u7f3a\u70b9\u6bd4\u8f83\u660e\u663e\uff0c\u5bf9\u4e8e\u6709\u4e00\u5957\u81ea\u5df1\u7684UI\u98ce\u683c\u7684Web\u7cfb\u7edf\u6765\u8bf4\uff0c\u754c\u9762\u95f4\u7684\u98ce\u683c\u5dee\u5f02\u662f\u4e0d\u53ef\u5bb9\u5fcd\u7684\u3002","title":"\u76f4\u63a5\u8c03\u7528 RelatedFieldWidgetWrapper"},{"location":"python/django/django-popup/#js","text":"\u53c2\u8003\u4e86Django 1.11.6 admin\u4e2d\u7684\u5b9e\u73b0\u4ee3\u7801\uff0c\u7406\u51fa\u5176\u5b9e\u73b0\u7684\u4e3b\u8981\u601d\u8def\u5982\u4e0b\uff1a RelatedFieldWidgetWrapper \u662f\u4e2a\u7ee7\u627f\u4e8eforms.Widget\u7684\u7c7b\uff0c\u6e90\u7801( /django/contrib/admin/widgets.py )\u5982\u4e0b(\u672a\u663e\u793a\u90e8\u5206\u65e0\u5173\u4ee3\u7801)\uff1a class RelatedFieldWidgetWrapper(forms.Widget): \"\"\" This class is a wrapper to a given widget to add the add icon for the admin interface. \"\"\" template name = 'admin/widgets/related widget_wrapper.html' def __init__ ( self , widget , rel , admin_site , can_add_related = None , can_change_related = False , can_delete_related = False ): self . needs_multipart_form = widget . needs_multipart_form self . attrs = widget . attrs self . choices = widget . choices self . widget = widget self . rel = rel # Backwards compatible check for whether a user can add related # objects. if can_add_related is None : can_add_related = rel . model in admin_site . _registry self . can_add_related = can_add_related # XXX: The UX does not support multiple selected values. multiple = getattr ( widget , 'allow_multiple_selected' , False ) self . can_change_related = not multiple and can_change_related # XXX: The deletion UX can be confusing when dealing with cascading deletion. cascade = getattr ( rel , 'on_delete' , None ) is CASCADE self . can_delete_related = not multiple and not cascade and can_delete_related # so we can check if the related object is registered with this AdminSite self . admin_site = admin_site def get_related_url ( self , info , action , * args ): return reverse ( \"admin: %s _ %s _ %s \" % ( info + ( action ,)), current_app = self . admin_site . name , args = args ) def get_context ( self , name , value , attrs ): from django.contrib.admin.views.main import IS_POPUP_VAR , TO_FIELD_VAR rel_opts = self . rel . model . _meta info = ( rel_opts . app_label , rel_opts . model_name ) self . widget . choices = self . choices url_params = '&' . join ( \" %s = %s \" % param for param in [ ( TO_FIELD_VAR , self . rel . get_related_field () . name ), ( IS_POPUP_VAR , 1 ), ]) context = { 'rendered_widget' : self . widget . render ( name , value , attrs ), 'name' : name , 'url_params' : url_params , 'model' : rel_opts . verbose_name , } if self . can_change_related : change_related_template_url = self . get_related_url ( info , 'change' , '__fk__' ) context . update ( can_change_related = True , change_related_template_url = change_related_template_url , ) if self . can_add_related : add_related_url = self . get_related_url ( info , 'add' ) context . update ( can_add_related = True , add_related_url = add_related_url , ) if self . can_delete_related : delete_related_template_url = self . get_related_url ( info , 'delete' , '__fk__' ) context . update ( can_delete_related = True , delete_related_template_url = delete_related_template_url , ) return context \u63a5\u6536 rel \u53c2\u6570\uff0c\u5176\u4e3a\u4e00\u4e2aFK\u7c7b\uff0c\u5728 get_context \u51fd\u6570\u4e2d\uff0c rel_opts \u4e3a\u8be5\u7c7b\u7684 Meta \u5c5e\u6027\uff0c info \u4e3a\u8be5\u7c7b\u6240\u5728\u7684 app \u548c model \u540d\u79f0\u7ec4\u6210\u7684\u5143\u7ec4\u3002\u5b9a\u4e49\u51fd\u6570 get_related_url \u7528\u4e8e\u751f\u6210\u76f8\u5173\u7684\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664 url , url_params \u9ed8\u8ba4\u6709 TO_FIELD_VAR \u7528\u4e8e\u6807\u8bb0\u4fee\u6539\u7684 field , IS_POPUP_VAR \u7528\u4e8e\u6807\u8bb0\u662f\u4ee5 PopupWindow \u7684\u65b9\u5f0f\u6253\u5f00\u3002 \u5904\u7406\u524d\u9762\u751f\u6210\u7684url\u7684\u89c6\u56fe\u4ee3\u7801\u4f4d\u4e8e /django/contrib/options.py/ModelAdmin/ \u3002\u5904\u7406\u65b0\u589e\u4e3a\u51fd\u6570 response_add \uff0c\u622a\u53d6\u5904\u7406\u5176\u7c7b\u578b\u4e3a popup \u7684\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a if IS_POPUP_VAR in request . POST : to_field = request . POST . get ( TO_FIELD_VAR ) if to_field : attr = str ( to_field ) else : attr = obj . _meta . pk . attname value = obj . serializable_value ( attr ) popup_response_data = json . dumps ({ 'value' : six . text_type ( value ), 'obj' : six . text_type ( obj ), }) return TemplateResponse ( request , self . popup_response_template or [ 'admin/ %s / %s /popup_response.html' % ( opts . app_label , opts . model_name ), 'admin/ %s /popup_response.html' % opts . app_label , 'admin/popup_response.html' , ], { 'popup_response_data' : popup_response_data , }) popup_response_data \u662f\u4e00\u4e2a\u5305\u542b\u4e86\u65b0\u589e\u7684 FK\\M2M \u7684value(\u663e\u793a\u7684\u503c)\u3001obj(\u65b0\u589e\u7684\u5bf9\u8c61\u5b9e\u4f8bID)json\uff0c\u51fd\u6570\u8fd4\u56de\u7684\u4e3a TemplateResponse \uff0c\u751f\u6548\u90e8\u5206\u4e3a 'admin/popup_response.html' \uff0c\u5176\u6e90\u4ee3\u7801\u5982\u4e0b\uff1a { % load i18n static % } < ! DOCTYPE html > < html > < head >< title > { % trans 'Popup closing...' % } </ title ></ head > < body > < script type = \"text/javascript\" id = \"django-admin-popup-response-constants\" src = \"{ % s tatic \" admin / js / popup_response . js \" %}\" data - popup - response = \"{{ popup_response_data }}\" > </ script > </ body > </ html > \u53ea\u5305\u542b\u4e86\u4e00\u4e2a admin/js/popup_response.js \u6587\u4ef6\uff0c\u5176\u6e90\u7801\u5982\u4e0b\uff1a /* global opener */ ( function () { 'use strict' ; var initData = JSON . parse ( document . getElementById ( 'django-admin-popup-response-constants' ) . dataset . popupResponse ); switch ( initData . action ) { case 'change' : opener . dismissChangeRelatedObjectPopup ( window , initData . value , initData . obj , initData . new_value ); break ; case 'delete' : opener . dismissDeleteRelatedObjectPopup ( window , initData . value ); break ; default : opener . dismissAddRelatedObjectPopup ( window , initData . value , initData . obj ); break ; } })(); \u8fd9\u6bb5js\u5c06\u5173\u95ed PopupWindow \u5e76\u5c06\u5f97\u5230\u7684 popup_response_data \u63d2\u5165\u6216\u8005\u4fee\u6539\u81f3\u5bf9\u5e94\u7684 field, \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cadmin\u5728\u5bfb\u627e\u63d2\u5165\u7684 field_id \u662f\u6839\u636e\u6253\u5f00\u7684 PopupWindow \u7684url,\u4f7f\u7528\u4f4d\u4e8e django/contrib/admin/static/js/admin/RelatedObjectLookups.js \u4e2d\u7684 windowname_to_id \u51fd\u6570\u4ece\u5f53\u524d\u7a97\u53e3\u7684url\u622a\u53d6\u5e76\u751f\u6210\u5176\u5728\u7236\u9875\u9762\u5f85\u64cd\u4f5c\u7684 field_id \u3002 \u8fd9\u6837\u7684\u5b9e\u73b0\u65b9\u5f0f\u7684\u4f18\u70b9\u662f\u4fbf\u4e8e\u4f7f\u7528modelform\u4ee5\u53ca\u76f8\u5173\u903b\u8f91\uff0c\u8ba9\u5176\u81ea\u52a8\u751f\u6210\u76f8\u5173\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664\u754c\u9762\u5e76\u5904\u7406\u76f8\u5173\u9519\u8bef\uff0c\u4fbf\u4e8e\u590d\u7528\u79fb\u81f3\uff0c\u4f46\u662f\u9700\u8981\u5bf9\u6837\u5f0f\u8fdb\u884c\u4fee\u6539\u3002","title":"JS"},{"location":"python/django/django-popup/#fk","text":"","title":"FK\u5b9e\u73b0\u65b9\u6cd5"},{"location":"python/django/django-popup/#widget","text":"from django.forms.widgets import Select class ForeignKeyWidget ( Select ): template_name = 'widgets/foreign_key_select.html' def __init__ ( self , url_template , * args , ** kw ): super ( ForeignKeyWidget , self ) . __init__ ( * args , ** kw ) self . url_template = url_template def get_context ( self , name , value , attrs ): context = super ( ForeignKeyWidget , self ) . get_context ( name , value , attrs ) context [ 'add_url' ] = self . url_template context [ 'update_url' ] = self . url_template context [ 'delete_url' ] = self . url_template + 'delete/' return context \u5176\u63a5\u53d7\u4e00\u4e2a url_template \u53c2\u6570\uff0c\u5982 url_template \u4e3a /post/ ,\u5219\u9ed8\u8ba4\u7684url\u4e3a\uff1a \u65b0\u589e\uff1a /post/ ; \u4fee\u6539\uff1a /post/id/ ; \u5220\u9664\uff1a /post/delete/id/ \uff1b","title":"\u5b9a\u4e49\u4e00\u4e2aWidget:"},{"location":"python/django/django-popup/#widgettemplatelayui20popup","text":"< style > # { { widget.attrs.id } } _add , # { { widget.attrs.id } } _change , # { { widget.attrs.id } } _delete { margin-top : 10 px ; padding : 0 10 px ; height : 25 px ; line-height : 25 px ; } </ style > < div class = \"row\" > < div class = \"col-sm-6\" > {% include \"django/forms/widgets/select.html\" %} </ div > < div class = \"col-sm-6 layui-btn-group\" > < a class = \"layui-btn layui-btn-mini\" id = \"{{ widget.attrs.id }}_add\" > \u65b0\u589e </ a > < a class = \"layui-btn layui-btn-mini layui-btn-disabled layui-btn-normal\" id = \"{{ widget.attrs.id }}_change\" > \u4fee\u6539 </ a > < a class = \"layui-btn layui-btn-mini layui-btn-disabled layui-btn-danger\" id = \"{{ widget.attrs.id }}_delete\" > \u5220\u9664 </ a > </ div > </ div > < script > $ ( '#{{ widget.attrs.id }}_add' ). click ( function () { var index = layui . layer . open ({ title : \"\u6dfb\u52a0\u5206\u7c7b\" , type : 2 , area : [ '700px' , '500px' ], content : \"{{ add_url }}\" + '?popup=1&to_field={{ widget.attrs.id }}' , success : function ( layer , index ) { } }); }); $ ( \"#{{ widget.attrs.id }}_change\" ). click ( function () { var id = $ ( '#{{ widget.attrs.id }}' ). val (); if ( id ) { var index = layui . layer . open ({ title : \"\u4fee\u6539\u5206\u7c7b\" , type : 2 , area : [ '700px' , '500px' ], content : '{{ update_url }}' + id + '?popup=1&to_field={{ widget.attrs.id }}' , success : function ( layer , index ) { } }); } }); $ ( \"#{{ widget.attrs.id }}_delete\" ). click ( function () { var id = $ ( '#{{ widget.attrs.id }}' ). val (); var value = $ ( '#{{ widget.attrs.id }} option[value=' + id + ']' ). text (); var indexGood = value . lastIndexOf ( '>' ); var valueN = indexGood > 0 ? value . substring ( indexGood + 1 , value . length ) : value ; if ( id ) { layer . confirm ( '\u786e\u8ba4\u5220\u9664 ' + valueN + ' \u5417?' , { icon : 3 , title : '\u5220\u9664' }, function ( index ) { $ . ajax ({ type : \"POST\" , data : {}, url : '{{ delete_url }}' + id + '/' , beforeSend : function ( xhr ) { xhr . setRequestHeader ( \"X-CSRFToken\" , $ . cookie ( 'csrftoken' )); }, success : function ( data , textStatus ) { <!-- \u5173\u95ed\u5f39\u7a97 \u8fd4\u56de\u5217\u8868 --> layer . close ( index ); $ ( '#{{ widget.attrs.id }} option[value=' + data . id + ']' ). remove (); $ ( \"#{{ widget.attrs.id }}_change,#{{ widget.attrs.id }}_delete\" ). addClass ( 'layui-btn-disabled' ); return false ; }, error : function ( XMLHttpRequest , textStatus , errorThrown ) { layer . alert ( '\u5220\u9664\u5931\u8d25 ' + XMLHttpRequest . responseText ) } }); }); } }); /********select\u7ed1\u5b9achange\u4e8b\u4ef6\uff0c\u5982\u679cvalue\u6709\u503c\uff0c\u5c31\u53ef\u4fee\u6539\u53ca\u5220\u9664 \u9875\u9762\u52a0\u8f7d\u5b8c\u6210\u4e4b\u540e\u505a\u76f8\u540c\u5224\u65ad**********/ function {{ widget . attrs . id }} _isDisabled () { if ( $ ( '#{{ widget.attrs.id }}' ). val ()) { $ ( \"#{{ widget.attrs.id }}_change,#{{ widget.attrs.id }}_delete\" ). removeClass ( 'layui-btn-disabled' ); } else { $ ( \"#{{ widget.attrs.id }}_change,#{{ widget.attrs.id }}_delete\" ). addClass ( 'layui-btn-disabled' ); } } $ ( '#{{ widget.attrs.id }}' ). change ( function () { {{ widget . attrs . id }} _isDisabled (); }); {{ widget . attrs . id }} _isDisabled (); </ script > \u4ee5\u4fee\u6539\u5206\u7c7b\u4e3a\u4f8b\uff0c\u5176popup\u6253\u5f00\u7684url\u4e3a '{{ update_url }}' + id + '?popup=1&to_field={{ widget.attrs.id }}' \uff0curl\u4e2d\u7684\u53c2\u6570\u5305\u542b\u4e86popup=1\u7528\u4e8e\u6807\u8bb0\u4ee5popup\u65b9\u5f0f\u6253\u5f00\uff0cto_field\u76f4\u63a5\u53d6\u4e86\u8be5\u63a7\u4ef6\u7684id\u800c\u6ca1\u6709\u60f3admin\u4e2d\u90a3\u6837\u76f4\u63a5\u53bburl\u4e2d\u622a\u53d6\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u4e00\u822c\u9879\u76ee\u7684url\u6a21\u5f0f\u6ca1\u6709admin\u4e2d\u90a3\u6837\u89c4\u6574\u3002","title":"\u5199\u8be5Widget\u5bf9\u5e94\u7684template,\u793a\u4f8b\u4e2d\u4f7f\u7528layui2.0\u4f5c\u4e3apopup\u7684\u6253\u5f00\u65b9\u5f0f\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u81ea\u884c\u9009\u62e9\u3002"},{"location":"python/django/django-popup/#formspy","text":"from django import forms from common.fields import ForeignKeyWidget from django.core.urlresolvers import reverse_lazy from .models import * class ArticleForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): super ( ArticleForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'title' ] . widget . attrs . update ({ 'class' : 'form-control' }) self . fields [ 'category' ] . widget . attrs . update ({ 'class' : 'form-control' }) class Meta : model = Article fields = [ 'title' , 'category' ] widgets = { 'category' : ForeignKeyWidget ( url_template = reverse_lazy ( 'category_popup_create' )), } class CategoryForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): super ( CategoryForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'name' ] . widget . attrs . update ({ 'class' : 'form-control' }) self . fields [ 'parent' ] . widget . attrs . update ({ 'class' : 'form-control' }) class Meta : model = Category fields = [ 'name' , 'parent' ]","title":"forms.py\u58f0\u660e\u63a7\u4ef6"},{"location":"python/django/django-popup/#viewspy","text":"# ------------------------------ \u535a\u5ba2\u7c7b\u578bPopup \u5f00\u59cb ------------------------------ class CategoryPopupCreateView ( PermissionRequiredMixin , CreateView ): form_class = CategoryForm template_name = 'category_popup/create.html' permission_required = 'article.add_category' def get_context_data ( self , ** kwargs ): if 'to_field' in self . request . GET : kwargs [ 'to_field' ] = self . request . GET [ 'to_field' ] return super ( CategoryPopupCreateView , self ) . get_context_data ( ** kwargs ) def form_valid ( self , form ): self . object = form . save () context = { 'op' : 'create' , 'id' : self . object . id , 'value' : self . object . __str__ ()} if 'to_field' in self . request . GET : context [ 'to_field' ] = self . request . GET [ 'to_field' ] return TemplateResponse ( self . request , 'category_popup/success.html' , context = context ) class CategoryPopupUpdateView ( PermissionRequiredMixin , UpdateView ): model = Category form_class = CategoryForm slug_field = 'id' context_object_name = 'category' template_name = 'category_popup/update.html' permission_required = 'article.change_category' def get_context_data ( self , ** kwargs ): if 'to_field' in self . request . GET : kwargs [ 'to_field' ] = self . request . GET [ 'to_field' ] return super ( CategoryPopupUpdateView , self ) . get_context_data ( ** kwargs ) def form_valid ( self , form ): self . object = form . save () context = { 'op' : 'update' , 'id' : self . object . id , 'value' : self . object . __str__ ()} if 'to_field' in self . request . GET : context [ 'to_field' ] = self . request . GET [ 'to_field' ] return TemplateResponse ( self . request , 'category_popup/success.html' , context = context ) class CategoryPopupDeleteView ( PermissionRequiredMixin , DeleteView ): model = Category slug_field = 'id' permission_required = 'article.delete_category' def delete ( self , request , * args , ** kwargs ): self . object = self . get_object () data = { 'op' : 'delete' , 'id' : self . object . id , 'value' : self . object . __str__ ()} self . object . delete () return JsonResponse ( data = data ) # ------------------------------ \u535a\u5ba2\u7c7b\u578bPopup \u7ed3\u675f ------------------------------ \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0curl\u53c2\u6570\u4e2d\u7684to field\u53c2\u6570\u5728get->post\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u4e00\u76f4\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5219\u5728get context_data\u4e2d\u83b7\u53d6\u8be5\u53c2\u6570\uff0c\u4f20\u9012\u81f3 category_popup/update.html ,\u5176\u6e90\u7801\u5982\u4e0b\uff1a {% extends \"category_popup/base.html\" %} {% block main %} < div style = \"margin: 4px\" > < form class = \"form-horizontal\" enctype = \"multipart/form-data\" action = \"{% url 'category_popup_update' category.id %}{% if to_field %}?to_field={{ to_field }}{% endif %}\" method = \"post\" > {% include 'widgets/form.html' %} < div class = \"form-group\" > < div class = \"col-sm-10\" > < input class = \"btn btn-raised btn-info\" type = \"submit\" value = \"\u4fee\u6539\u5206\u7c7b\" /> </ div > </ div > </ form > </ div > {% endblock %} success.html\u4ee3\u7801\uff1a {% extends \"category_popup/base.html\" %} {% block main %} < script > var to_field = '#{{ to_field }}' , op = '{{ op }}' , id = '{{ id }}' , value = '{{ value }}' ; if ( to_field ) { switch ( op ) { case 'create' : if ( id ) { var index = parent . layer . getFrameIndex ( window . name ); //\u5148\u5f97\u5230\u5f53\u524diframe\u5c42\u7684\u7d22\u5f15 parent . layer . close ( index ); //\u518d\u6267\u884c\u5173\u95ed $option = '<option value=' + id + ' selected>' + value + '</option>' ; $ ( to_field , window . parent . document ). append ( $option ); $ ( to_field + '_change,' + to_field + '_delete' , window . parent . document ). removeClass ( 'layui-btn-disabled' ); } break ; case 'update' : if ( id ) { var index = parent . layer . getFrameIndex ( window . name ); //\u5148\u5f97\u5230\u5f53\u524diframe\u5c42\u7684\u7d22\u5f15 parent . layer . close ( index ); //\u518d\u6267\u884c\u5173\u95ed $ ( to_field + ' option[value=' + id + ']' , window . parent . document ). html ( value ); } break ; } } </ script > {% endblock %}","title":"views.py"},{"location":"python/django/django-popup/#urlspy","text":"category_urlpatterns = [ url ( r '^popup/$' , CategoryPopupCreateView . as_view (), name = 'category_popup_create' ), url ( r '^popup/(?P<pk>\\d+)/$' , CategoryPopupUpdateView . as_view (), name = 'category_popup_update' ), url ( r '^popup/delete/(?P<pk>\\d+)/$' , CategoryPopupDeleteView . as_view (), name = 'category_popup_delete' ), ]","title":"urls.py"},{"location":"python/django/django-popup/#m2m","text":"M2M\u5b9e\u73b0\u4e0eFK\u7684\u5b9e\u73b0\u65b9\u6cd5\u57fa\u672c\u7c7b\u4f3c\uff0c\u53ea\u662f\u5728\u5224\u65ad\u662f\u5426\u4eae\u8d77\u4fee\u6539\u3001\u5220\u9664\u6309\u94ae\u7684\u903b\u8f91\u4e0a\u6709\u4e9b\u8bb8\u6539\u53d8\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002","title":"M2M\u5b9e\u73b0"},{"location":"python/django/django-popup/#_3","text":"","title":"\u6700\u7ec8\u7684\u6548\u679c"},{"location":"python/django/django-smtp/","text":"\u63a5\u6536 pop3: \u670d\u52a1\u5668\u5730\u5740\uff1apop3.mxhichina.com \u7aef\u53e3\uff1a995 SSL\u52a0\u5bc6 \u53d1\u9001 smtp: \u670d\u52a1\u5668\u5730\u5740\uff1asmtp.mxhichina.com \u7aef\u53e3\uff1a465 SSL\u52a0\u5bc6 587 \u4e0d\u52a0\u5bc6 Django \u540e\u53f0\uff1a # Email\u914d\u7f6e # \u5982\u679c\u60f3\u8981\u652f\u6301ssl (\u6bd4\u5982qq\u90ae\u7bb1) \u89c1 https://github.com/bancek/django-smtp-ssl EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' EMAIL_HOST = 'smtp.mxhichina.com' # SMTP\u5730\u5740 \u4f8b\u5982: smtp.163.com EMAIL_PORT = 587 # SMTP\u7aef\u53e3 \u4f8b\u5982: 25 EMAIL_HOST_USER = 'xxx@dreamgo.tech' # \u90ae\u7bb1\u8d26\u6237 EMAIL_HOST_PASSWORD = 'xxx' # \u90ae\u7bb1\u5bc6\u7801\\\u6388\u6743\u7801 EMAIL_SUBJECT_PREFIX = u 'DreamgoBlog' # \u4e3a\u90ae\u4ef6Subject-line\u524d\u7f00,\u9ed8\u8ba4\u662f'[django]' EMAIL_USE_TLS = False # \u4e0eSMTP\u670d\u52a1\u5668\u901a\u4fe1\u65f6\uff0c\u662f\u5426\u542f\u52a8TLS\u94fe\u63a5(\u5b89\u5168\u94fe\u63a5)\u3002\u9ed8\u8ba4\u662ffalse DEFAULT_FROM_EMAIL = EMAIL_HOST_USER","title":"\u963f\u91cc\u4e91\u90ae\u7bb1 smtp/pop3 Android\u5ba2\u6237\u7aef,Django\u540e\u53f0\u8bbe\u7f6e"},{"location":"python/django/django-summernote/","text":"1\u3001\u8bbe\u7f6eMEDIA_ROOT\u548cMEDIA_URL # \u7528\u6237\u4e0a\u4f20\u6587\u4ef6 MEDIA_ROOT = 'C:\\django/blog/media/' MEDIA_URL = '/media/' 2\u3001\u8bbe\u7f6emedia\u7684url from django.conf.urls.static import static from django.conf import settings urlpatterns = [ url ( r '^admin/' , include ( admin . site . urls )), url ( r '^summernote/' , include ( 'django_summernote.urls' )), ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) 3\u3001\u8bbe\u7f6e\u56fe\u7247\u4e0a\u4f20\u8def\u5f84 def uploaded_filepath ( instance , filename ): ext = filename . split ( '.' )[ - 1 ] filename = \" %s . %s \" % ( uuid . uuid4 (), ext ) today = datetime . now () . strftime ( '%Y-%m- %d ' ) # upload path is MEDIA_ROOT/summernote/today/filename return os . path . join ( 'summernote/' , today , filename ) 4\u3001\u914d\u7f6eSummerNote SUMMERNOTE_CONFIG = { 'width' : '100%' , 'lang' : 'zh-CN' , 'iframe' : True , 'attachment_upload_to' : uploaded_filepath , 'attachment_require_authentication' : True , 'internal_js' : ( '/static/django_summernote/lang/summernote-zh-CN.min.js' , ), } 5\u3001\u5728ModelForm\u4e2d\u4f7f\u7528 # Summer noteWidget\u56fa\u5b9a\u5927\u5c0f Summer noteInplaceWidget \u81ea\u7531\u5927\u5c0f # \u4f7f\u7528Summer noteInplaceWidget \u65f6\u4f1a\u6709\u56fe\u7247\u65e0\u6cd5\u4e0a\u4f20\u7684bug from django_summernote.widgets import SummernoteWidget , SummernoteInplaceWidget # \u535a\u5ba2\u8868\u5355 class ArticleForm ( ModelForm ): def __init__ ( self , * args , ** kwargs ): super ( ArticleForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'category' ] . widget . attrs . update ({ 'class' : 'form-control' }) class Meta : model = Article fields = '__all__' widgets = { 'content' : SummernoteWidget (), } 6\u3001\u5728admin\u4e2d\u4f7f\u7528 TextField\u7c7b\u578b\u5bf9\u5e94\u7684\u5b57\u6bb5\u5728admin\u4e2d\u4f1a\u81ea\u52a8\u6e32\u67d3\u6210\u4e3a\u5bcc\u6587\u672c\u7f16\u8f91\u6846\u3002 7\u3001html\u4e2d\u8c03\u7528 \u4e00\u5b9a\u8981\u8c03\u7528form.media\u6765\u52a0\u8f7ddjango-summernote\u7cfb\u7edf\u7684\u9759\u6001\u6587\u4ef6(css\u3001js\u3001images\u7b49) < form class = \"form\" enctype = \"multipart/form-data\" action = \"{ % u rl 'article_create' %}\" method = \"post\" > { % csrf_token % } {{ form . media }} {{ form . as_p }} < input class = \"btn btn-raised btn-info\" style = \"float:right;\" type = \"submit\" value = \"\u53d1\u5e03\u535a\u5ba2\" /> </ form > 8\u3001\u5728ModelForm\u4e2d\u4f7f\u7528 \u4f7f\u7528SummernoteInplaceWidget\u6a21\u5f0f\u4f1a\u51fa\u73b0\u56fe\u7247\u65e0\u6cd5\u4e0a\u4f20\u7684bug,\u63d0\u793a403 csrf_token\u9a8c\u8bc1\u5931\u8d25\u88ab\u62d2\u7edd\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e3a\u5c06django_summernote/templates/django_summernote/widget_inplace.html\u7684\u7b2c\u516b\u884c\u7531 var csrftoken = getCookie('{{ CSRF_COOKIE_NAME }}'); \u6539\u4e3a var csrftoken = getCookie('csrftoken'); \u5373\u53ef\u6b63\u786e\u83b7\u53d6\u5230\u6b63\u786e\u7684scrf_token\u7528\u4e8e\u56fe\u7247\u4e0a\u4f20\u3002 \u5e38\u89c1\u95ee\u9898\uff1a 1 form\u4e2dSummernoteinplace\u65e0\u6cd5\u88ab\u6b63\u5e38\u52a0\u8f7d\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e3a\u5728templates\u7684form\u4e2d\u52a0\u5165{{ form.media }}\u3002","title":"Django-summernote\u5bcc\u6587\u672c"},{"location":"python/django/django-summernote/#1media_rootmedia_url","text":"# \u7528\u6237\u4e0a\u4f20\u6587\u4ef6 MEDIA_ROOT = 'C:\\django/blog/media/' MEDIA_URL = '/media/'","title":"1\u3001\u8bbe\u7f6eMEDIA_ROOT\u548cMEDIA_URL"},{"location":"python/django/django-summernote/#2mediaurl","text":"from django.conf.urls.static import static from django.conf import settings urlpatterns = [ url ( r '^admin/' , include ( admin . site . urls )), url ( r '^summernote/' , include ( 'django_summernote.urls' )), ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT )","title":"2\u3001\u8bbe\u7f6emedia\u7684url"},{"location":"python/django/django-summernote/#3","text":"def uploaded_filepath ( instance , filename ): ext = filename . split ( '.' )[ - 1 ] filename = \" %s . %s \" % ( uuid . uuid4 (), ext ) today = datetime . now () . strftime ( '%Y-%m- %d ' ) # upload path is MEDIA_ROOT/summernote/today/filename return os . path . join ( 'summernote/' , today , filename )","title":"3\u3001\u8bbe\u7f6e\u56fe\u7247\u4e0a\u4f20\u8def\u5f84"},{"location":"python/django/django-summernote/#4summernote","text":"SUMMERNOTE_CONFIG = { 'width' : '100%' , 'lang' : 'zh-CN' , 'iframe' : True , 'attachment_upload_to' : uploaded_filepath , 'attachment_require_authentication' : True , 'internal_js' : ( '/static/django_summernote/lang/summernote-zh-CN.min.js' , ), }","title":"4\u3001\u914d\u7f6eSummerNote"},{"location":"python/django/django-summernote/#5modelform","text":"# Summer noteWidget\u56fa\u5b9a\u5927\u5c0f Summer noteInplaceWidget \u81ea\u7531\u5927\u5c0f # \u4f7f\u7528Summer noteInplaceWidget \u65f6\u4f1a\u6709\u56fe\u7247\u65e0\u6cd5\u4e0a\u4f20\u7684bug from django_summernote.widgets import SummernoteWidget , SummernoteInplaceWidget # \u535a\u5ba2\u8868\u5355 class ArticleForm ( ModelForm ): def __init__ ( self , * args , ** kwargs ): super ( ArticleForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'category' ] . widget . attrs . update ({ 'class' : 'form-control' }) class Meta : model = Article fields = '__all__' widgets = { 'content' : SummernoteWidget (), }","title":"5\u3001\u5728ModelForm\u4e2d\u4f7f\u7528"},{"location":"python/django/django-summernote/#6admin","text":"TextField\u7c7b\u578b\u5bf9\u5e94\u7684\u5b57\u6bb5\u5728admin\u4e2d\u4f1a\u81ea\u52a8\u6e32\u67d3\u6210\u4e3a\u5bcc\u6587\u672c\u7f16\u8f91\u6846\u3002","title":"6\u3001\u5728admin\u4e2d\u4f7f\u7528"},{"location":"python/django/django-summernote/#7html","text":"\u4e00\u5b9a\u8981\u8c03\u7528form.media\u6765\u52a0\u8f7ddjango-summernote\u7cfb\u7edf\u7684\u9759\u6001\u6587\u4ef6(css\u3001js\u3001images\u7b49) < form class = \"form\" enctype = \"multipart/form-data\" action = \"{ % u rl 'article_create' %}\" method = \"post\" > { % csrf_token % } {{ form . media }} {{ form . as_p }} < input class = \"btn btn-raised btn-info\" style = \"float:right;\" type = \"submit\" value = \"\u53d1\u5e03\u535a\u5ba2\" /> </ form >","title":"7\u3001html\u4e2d\u8c03\u7528"},{"location":"python/django/django-summernote/#8modelform","text":"\u4f7f\u7528SummernoteInplaceWidget\u6a21\u5f0f\u4f1a\u51fa\u73b0\u56fe\u7247\u65e0\u6cd5\u4e0a\u4f20\u7684bug,\u63d0\u793a403 csrf_token\u9a8c\u8bc1\u5931\u8d25\u88ab\u62d2\u7edd\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e3a\u5c06django_summernote/templates/django_summernote/widget_inplace.html\u7684\u7b2c\u516b\u884c\u7531 var csrftoken = getCookie('{{ CSRF_COOKIE_NAME }}'); \u6539\u4e3a var csrftoken = getCookie('csrftoken'); \u5373\u53ef\u6b63\u786e\u83b7\u53d6\u5230\u6b63\u786e\u7684scrf_token\u7528\u4e8e\u56fe\u7247\u4e0a\u4f20\u3002","title":"8\u3001\u5728ModelForm\u4e2d\u4f7f\u7528"},{"location":"python/django/django-summernote/#_1","text":"1 form\u4e2dSummernoteinplace\u65e0\u6cd5\u88ab\u6b63\u5e38\u52a0\u8f7d\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e3a\u5728templates\u7684form\u4e2d\u52a0\u5165{{ form.media }}\u3002","title":"\u5e38\u89c1\u95ee\u9898\uff1a"},{"location":"python/django/django-transaction/","text":"django\u5728\u6279\u91cf\u64cd\u4f5c\u65f6\u4f1a\u4f7f\u7528for\u5faa\u73af\u521b\u5efa\u3001\u66f4\u65b0\u3001\u5220\u9664\u4e00\u7cfb\u5217\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5f80\u5f80\u662f\u6709\u5bf9\u5e94\u7684\u524d\u63d0\u6761\u4ef6\u7684\uff0c\u5982\u8981\u6c42\u53ea\u6709\u53d1\u5e03\u4eba\u624d\u80fd\u5220\u9664\u5bf9\u5e94\u7684\u6587\u7ae0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5148for\u5faa\u73af\u4e00\u904dqueryset,\u770b\u662f\u5426\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u82e5\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u6ee1\u8db3\u6761\u4ef6\u5219\u518d\u6b21for\u5faa\u73af\u8fdb\u884c\u5bf9\u5e94\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u4ee3\u7801\u6781\u5ea6\u4e0d\u7f8e\u89c2\uff0c\u6548\u7387\u5f80\u5f80\u4e5f\u4e0d\u9ad8\u3002 \u4f7f\u7528\u4e8b\u52a1\u53ef\u4ee5\u5f88\u597d\u7684\u5904\u7406\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u5728for\u5faa\u73af\u5f00\u59cb\u524d\u8bbe\u7f6e\u4fdd\u5b58\u70b9\uff0cfor\u5faa\u73af\u65f6\uff0c\u6bcf\u5bf9\u6bd4\u6210\u529f\u4e00\u4e2a\u8fdb\u884c\u4e00\u6b21\u5220\u9664\u64cd\u4f5c\uff0c\u82e5\u51fa\u73b0\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u6587\u7ae0\uff0c\u5219\u56de\u6eda\u6570\u636e\u5230for\u5faa\u73af\u524d\uff0c\u82e5for\u5faa\u73af\u5b8c\u6210\u4e86\u4e5f\u672a\u51fa\u73b0\u9519\u8bef\uff0c\u4e00\u6b21\u6027\u63d0\u4ea4\u6240\u6709\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u3002 from django.db import transaction @transaction . atomic def create ( self , request , * args , ** kwargs ): self . before_create () serializer = self . get_serializer ( data = request . data ) if serializer . is_valid (): sid = transaction . savepoint () # \u8bbe\u7f6e\u4fdd\u5b58\u70b9 items = dict_to_query_dict ( request . data ) . getlist ( 'items' ) # \u4f9d\u6b21\u6dfb\u52a0\u5b50\u9000\u8bfe\u4e1a\u52a1 for item in items : try : item_dict = ast . literal_eval ( item ) except SyntaxError : return error_response ( 1 , ' {} \u5305\u542b\u975e\u6cd5\u5b57\u7b26' . format ( item )) item_serializer = ReturnClassHourItemModifySerializer ( data = item_dict ) if item_serializer . is_valid (): item_instance = item_serializer . save () else : transaction . savepoint_rollback ( sid ) # \u53d1\u751f\u9519\u8bef \u56de\u6eda\u4e4b\u524d\u4fdd\u5b58\u7684\u6240\u6709\u5bf9\u8c61 return error_response ( 1 , convert_serializer_errors ( item_serializer . errors )) transaction . savepoint_commit ( sid ) # for\u5faa\u73af\u5b8c\u6210 \u65e0\u9519\u8bef\u53d1\u751f \u63d0\u4ea4\u4fdd\u5b58\u70b9\u5230\u6b64\u5904\u7684\u6240\u6709\u6570\u636e\u5e93\u64cd\u4f5c return success_response ( '' ) bulk_create\u5185\u90e8\u6709 with transaction.atomic(using=self.db, savepoint=False): \uff0c\u5df2\u7ecf\u5c01\u88c5\u597d\u4e86\u4e8b\u52a1\uff0c\u53ea\u4f1a\u51fa\u73b0\u4e24\u79cd\u7ed3\u679c\uff0c\u62a5\u9519\u4f46\u4e00\u4e2a\u5bf9\u8c61\u90fd\u4e0d\u751f\u6210\u6216\u8005\u5168\u90e8\u751f\u6210\u5b8c\u6bd5\u3002 # \u6279\u91cf\u6dfb\u52a0\u9009\u9879 @detail_route ( methods = [ 'POST' ]) def add_choices ( self , request , pk ): try : question = self . get_object () choices = dict_to_query_dict ( request . data ) . getlist ( 'choices' ) # list\u4e2dstr\u8f6c\u6362\u4e3adict,dict\u518d\u8f6c\u6362\u4e3aChoice\u7c7b\u5b9e\u4f8b\uff0c\u6240\u6709\u7684\u7c7b\u5b9e\u4f8b\u5408\u5e76\u4e3alist # bulk_create\u5165\u53c2\u8be5list,\u5176\u5185\u90e8\u5c01\u88c5\u597d\u4e8b\u52a1,\u82e5\u5176\u4e2d\u4e00\u4e2a\u751f\u4ea7\u9519\u8bef\uff0c\u5219\u4f1a\u81ea\u52a8\u64a4\u9500\u4e4b\u524d\u64cd\u4f5c choice_list = Choice . objects . bulk_create ([ Choice ( ** ast . literal_eval ( choice )) for choice in choices ]) # PS\uff1abulk_create\u4e0d\u4f1a\u8c03\u7528\u5b9e\u4f8b\u7684save\u65b9\u6cd5,\u4e0d\u4f1a\u53d1\u51fapost_save\u4fe1\u53f7,\u8fd4\u56de\u5b9e\u4f8b\u65e0ID,\u9700\u8981\u518d\u6b21\u624b\u52a8\u8c03\u7528save() for choice in choice_list : choice . save () question . choices . add ( * choice_list ) return success_response ( '\u6dfb\u52a0\u6210\u529f' ) except Exception as e : return error_response ( 1 , '\u53d1\u751f\u9519\u8bef\uff1a {} ' . format ( e . __str__ ()))","title":"Django\u4e8b\u52a1"},{"location":"python/django/django-translation/","text":"1 \u5f00\u542fI18N\u652f\u6301 USE_I18N = True USE_L10N = True 2 \u8bbe\u7f6e 1. \u8bbe\u7f6e\u652f\u6301\u8bed\u8a00 # \u8bed\u8a00\u9009\u9879 LANGUAGES = ( ( 'zh-hans' , '\u7b80\u4f53\u4e2d\u6587' ), ( 'zh-hant' , '\u7e41\u4f53\u4e2d\u6587' ), ( 'en' , '\u82f1\u8bed' ), ( 'es' , '\u897f\u73ed\u7259\u8bed' ), ( 'bn' , '\u5b5f\u52a0\u62c9\u8bed' ), ( 'id' , '\u5370\u5730\u8bed' ), ( 'pt' , '\u8461\u8404\u7259\u8bed' ), ( 'ru' , '\u4fc4\u8bed' ), ( 'ja' , '\u65e5\u8bed' ), ( 'de' , '\u5fb7\u8bed' ), ( 'ko' , '\u97e9\u8bed' ), ( 'fr' , '\u6cd5\u8bed' ), ( 'ar' , '\u963f\u62c9\u4f2f\u8bed' ), ) 2. \u8bbe\u7f6e\u9ed8\u8ba4\u8bed\u8a00 # \u6c49\u8bed \u4e0a\u6d77\u65f6\u533a LANGUAGE_CODE = 'zh-hans' 3. \u6dfb\u52a0 LocaleMiddleware \u81f3 MIDDLEWARE \u4e2d LocaleMiddleware \u5fc5\u987b\u5728 Session \u4e4b\u540e\uff0c\u56e0\u4e3a\u8bed\u8a00\u533a\u57df\u6765\u6e90\u4e8e session \u4e2d\u7684\u8bbe\u7f6e\uff0c\u5fc5\u987b\u5728 CommonMiddleware \u4e4b\u524d\uff0c\u56e0\u4e3a CommonMiddleware \u9700\u8981\u9009\u62e9\u4e00\u4e2a\u8bed\u8a00\u53bb\u53cd\u67e5url\u3002 MIDDLEWARE = [ 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.locale.LocaleMiddleware' , 'django.middleware.common.CommonMiddleware' , ] 4. \u8bbe\u7f6e\u7ffb\u8bd1\u6587\u4ef6\u5b58\u50a8\u4f4d\u7f6e LOCALE_PATHS = ( os . path . join ( BASE_DIR , \"locale/\" ), ) 3 \u6a21\u677f\u7ffb\u8bd1 1. \u7b80\u5355\u7ffb\u8bd1\u8bed\u6cd5 \u6240\u6709\u5f85\u7ffb\u8bd1html\u5fc5\u987b\u52a0\u5165 {% load i18n %} \u6807\u7b7e\uff0c\u5373\u4f7f\u662f\u88abinclude\u7684\u7236html\u91cc\u52a0\u8f7d\u8fc7\u8be5\u6807\u7b7e\uff0c\u88abinclude\u7684html\u4f9d\u65e7\u9700\u8981\u52a0\u8f7d\u3002 \u5355\u72ec\u6587\u5b57 {% trans \"\u6211\u662f\u5f85\u7ffb\u8bd1\u6587\u5b57\" %} \u533a\u5757\u6587\u5b57 {% blocktrans with year=product.publish_time|date:'Y' %} {{ year }}\u5e74\u4e0a\u5e02 {% endblocktrans %} 2. \u8fd0\u884c django-admin makemessages --all \u751f\u6210\u5f85\u7ffb\u8bd1\u7684 django.po \u6587\u4ef6\u3002 3. \u7ffb\u8bd1 django.po \u6587\u4ef6 \u5b89\u88c5 django-rosetta \u63d2\u4ef6\uff0c\u5373\u53ef\u5728admin\u4e2d\u770b\u5230rosetta\u9762\u677f\uff0c\u8fdb\u5165\u5373\u53ef\u5bf9\u751f\u6210\u7684\u5f85\u7ffb\u8bd1\u7684 django.po \u6587\u4ef6\u8fdb\u884c\u7ffb\u8bd1\uff0c\u65e0\u9700\u518d\u5728\u4ee3\u7801\u4e2d\u7ffb\u8bd1\u3002 \u6216\u8005\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u6253\u5f00 django.po \u6587\u4ef6\u8fdb\u884c\u7ffb\u8bd1\u3002 4. \u8fd0\u884c django-admin compilemessages \u547d\u4ee4\u7f16\u8bd1\u7ffb\u8bd1\u597d\u7684 django.po \u6587\u4ef6\u4ee5\u751f\u6210 django.mo \u6587\u4ef6\u3002 5. \u590d\u6570\u7ffb\u8bd1 {% blocktrans count news.view_times as news_view_times %} \u67e5\u770b\u6b21\u6570:{{ news_view_times }} {% plural %} \u67e5\u770b\u6b21\u6570:{{ news_view_times }} {% endblocktrans %} \u4e00\u4e2a\u672a\u53d1\u73b0\u539f\u56e0\u7684Bug,0\u4f1a\u88ab\u8bc6\u522b\u4e3a\u590d\u6570\uff0c\u6682\u672a\u627e\u5230\u89e3\u51b3\u65b9\u6cd5\uff0c\u53ef\u89c1 \u6b64\u5904 \u3002 4 \u5185\u5bb9\u7ffb\u8bd1 1. \u5b89\u88c5 django-hvad 2. models.py from django.db import models from hvad.models import TranslatableModel , TranslatedFields class Demo ( TranslatableModel ): translations = TranslatedFields ( # \u6807\u9898 title = models . CharField ( max_length = 100 , verbose_name = u '\u6807\u9898' ), ) class Meta : verbose_name = 'Demo' verbose_name_plural = 'Demo' ordering = ( '-id' ,) def trans_title ( self ): return self . lazy_translation_getter ( 'title' , str ( self . id )) def __str__ ( self ): title = self . trans_title () return title if title else '' 3. forms.py from django import forms from hvad.admin import TranslatableModelForm from .models import * class DemoForm ( TranslatableModelForm ): def __init__ ( self , * args , ** kwargs ): super ( ExhibitForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'title' ] . widget . attrs . update ({ 'class' : 'form-control' }) class Meta : model = Exhibit fields = [ 'title' ] 4. \u5982\u679c\u4f7f\u7528django rest framework\uff0c\u4e0d\u4f7f\u7528\u8bf7\u5ffd\u7565\u672c\u90e8\u5206\u3002 serializers.py from rest_framework import serializers from hvad.contrib.restframework import TranslatableModelSerializer from .models import * class DemoSerializer ( TranslatableModelSerializer ): class Meta : model = Demo fields = [ 'title' ] 5. \u5168\u90e8\u8bed\u8a00\u5217\u8868 class DemoAllListView ( ListView ): template_name = 'demo/list_all.html' context_object_name = 'demo_list' paginate_by = settings . PAGE_NUM def get_queryset ( self ): return Demo . objects . language ( 'all' ) . order_by ( '-id' ) 6. \u5f53\u524d\u8bed\u8a00\u5217\u8868 class DemoListView ( ListView ): queryset = Demo . objects . language () . order_by ( '-id' ) template_name = 'demo/list_lang.html' context_object_name = 'demo_list' paginate_by = settings . PAGE_NUM 7. \u521b\u5efa\u5f53\u524d\u8bed\u8a00\u7684\u5bf9\u8c61 class DemoCreateView ( CreateView ): form_class = DemoForm template_name = 'demo/create.html' success_url = reverse_lazy ( 'demo_list' ) 8. \u67e5\u770b\u5f53\u524d\u8bed\u8a00\u7684\u5bf9\u8c61\u8be6\u60c5 class DemoDetailView ( DetailView ): queryset = Demo . objects . language () . all () slug_field = 'id' template_name = 'demo/detail.html' 9. \u8def\u7531\u4e2d\u8bbe\u7f6e\u4e86i18n_patterns\u65f6\uff0c\u5f53\u524d\u83b7\u53d6\u5230\u7684 {{demo.title}} \u65e2\u662f\u5bf9\u5e94\u8bed\u8a00\u7684title\u3002 5 url\u8bbe\u7f6e from django.conf.urls.i18n import i18n_patterns urlpatterns += i18n_patterns ( url ( r '^' , include ( 'web.urls' )), prefix_default_language = False , ) # \u8bbe\u7f6erosetta\u652f\u6301 if 'rosetta' in settings . INSTALLED_APPS : urlpatterns += [ url ( r '^rosetta/' , include ( 'rosetta.urls' )), ] prefix_default_language \u4e3a False \u65f6\uff0c\u9ed8\u8ba4\u8bed\u8a00\u4e0d\u518d\u51fa\u73b0\u5728url\u4e2d\u3002 6 \u53ef\u76f4\u63a5\u5207\u6362\u5f53\u524durl\u8bed\u8a00\u7684\u6807\u7b7e web/templatetags/translate_url.py : from django.template import Library from django.urls.exceptions import Resolver404 from django.core.urlresolvers import resolve , reverse from django.utils.translation import activate , get_language from urllib.parse import urlencode register = Library () @register . simple_tag ( takes_context = True ) def translate_url ( context , lang = None , * args , ** kwargs ): \"\"\" \u5c06\u5f53\u524d\u9875\u9762url\u8f6c\u6362\u81f3\u5176\u4ed6\u8bed\u8a00\u7684url \u7528\u6cd5: {% translate_url language.code %} \"\"\" # request \u5bf9\u8c61 request = context [ 'request' ] # \u5f53\u524d\u8bed\u8a00\u73af\u5883 cur_language = get_language () try : # \u6839\u636e\u5f53\u524durl\u68c0\u7d22url\u522b\u540d url_parts = resolve ( request . path ) # \u6fc0\u6d3b\u6b32\u8f6c\u6362\u7684\u8bed\u8a00\u73af\u5883 activate ( lang ) # \u6839\u636eurl\u522b\u540d\u68c0\u7d22\u51fa\u5bf9\u5e94\u8bed\u8a00\u73af\u5883\u7684url url = reverse ( url_parts . url_name , args = url_parts . args , kwargs = url_parts . kwargs ) # \u4fdd\u6301request parameters\u4e0d\u4e22\u5931 parameters = urlencode ( request . GET , doseq = True ) if parameters : url = ' {} ? {} ' . format ( url , parameters ) except Resolver404 : # \u672a\u68c0\u7d22\u5230\u5219\u8fd4\u56de\u4e3b\u9875 url = '/' finally : # \u8fd8\u539f\u81f3\u5f53\u524d\u8bed\u8a00\u73af\u5883 activate ( cur_language ) return url \u4f7f\u7528\u65b9\u6cd5\uff1a navbar.html : {% load translate_url %} < div class = \"head_bg\" > < div class = \"container\" > < div class = \"row\" > < div class = \"nav_language_select\" > {% get_language_info_list for current_languages as languages %} < div class = \"col-md-2 col-sm-3 col-xs-5 text-right nav_language_div\" > < div class = \"nav_language_div2\" > {% get_language_info_list for current_languages as languages %} {% for language in languages %} {% if not forloop.first %} < span > / </ span > {% endif %} {% ifequal LANGUAGE_CODE language.code %} < a href = \"{% translate_url language.code %}\" class = 'nav_color_active' > {{ language.name_local }} </ a > {% else %} < a href = \"{% translate_url language.code %}\" > {{ language.name_local }} </ a > {% endifequal %} {% endfor %} </ div > </ div > </ div > </ div > </ div > Q&A Q:\u8fd0\u884c django-admin makemessages --all \u547d\u4ee4\u540e\u63d0\u793a can't find msguniq. make sure you have gnu gettext tools 0.15 or newer installed. \uff08window7 django1.11.1\uff09 A\uff1a\u524d\u5f80 \u6b64\u5904 \u4e0b\u8f7d\u8f6f\u4ef6\u5305\u89e3\u538b\uff0c\u5e76\u8bbe\u7f6e\u5176\u5b50bin\u76ee\u5f55\u81f3\u73af\u5883\u53d8\u91cf\u3002 Q:\u8fd0\u884c django-admin compilemessages \u547d\u4ee4\u540e\uff0cdjango\u63d0\u793a ValueError: plural forms expression could be dangerous A\uff1a\u4fee\u6539\u751f\u6210\u7684django.po\u6587\u4ef6\u4e2d\u7684 \"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\\n\"\u4e3a\"Plural-Forms: nplurals=1; plural=0;\\n\" \u5373\u53ef\u3002 Q:zh_Hans\u547d\u540d\u95ee\u9898 A\uff1asetting\u4e2d LANGUAGE_CODE = 'zh_Hans' ,locale\u4e2d\u6587\u4ef6\u5939\u540d\u79f0\u672azh_Hans,\u5176\u4f59\u5730\u65b9\u7528zh-hans,\u5982\uff1a LANGUAGES = ( ( 'en' , 'English' ), ( 'zh-hans' , 'Chinese' ), ) \u5177\u4f53\u539f\u56e0\u53c2\u89c1\u4e0b\u5217 lang2locale \u51fd\u6570\uff0c\u505a\u4e86\u5982\u4e0b\u64cd\u4f5c\uff1aBasically, for our Chinese language codes, the - is replaced with a _, and the first letter of the second word is capitalized(\u53ea\u5728\u540e\u4e00\u4e2a\u5355\u8bcd\u957f\u5ea6\u5927\u4e8e2\u7684\u65f6\u5019\u8f6c\u6362). def to_locale ( language , to_lower = False ): \"\"\" Turns a language name (en-us) into a locale name (en_US). If 'to_lower' is True, the last component is lower-cased (en_us). \"\"\" p = language . find ( '-' ) if p >= 0 : if to_lower : return language [: p ] . lower () + '_' + language [ p + 1 :] . lower () else : # Get correct locale for sr-latn if len ( language [ p + 1 :]) > 2 : return language [: p ] . lower () + '_' + language [ p + 1 ] . upper () + language [ p + 2 :] . lower () return language [: p ] . lower () + '_' + language [ p + 1 :] . upper () else : return language . lower () Q:\u52a0\u5165django-rosetta\u540e\u51fa\u73b0\u59822\u4e2d\u63cf\u8ff0\u7684\u95ee\u9898 A:\u627e\u5230rosetta\u5b89\u88c5\u76ee\u5f55\uff0c\u63092\u4e2d\u89e3\u51b3\u65b9\u6cd5\u4fee\u6539 rosetta/locale/en/LC_MESSAGE/django.po \u6587\u4ef6\u5373\u53ef\u3002 Q:\u9700\u8981\u53ea\u751f\u6210\u67d0\u4e2aapp\u7684locale\u6587\u4ef6 A:\u9700\u8981\u8fdb\u5165\u8be5app\u76ee\u5f55\u540e\u518d\u6267\u884c makemessages \u547d\u4ee4\uff0c makemessages \u547d\u4ee4\u4f1a\u751f\u6210\u5f53\u524d\u6267\u884c\u547d\u4ee4\u7684\u6587\u4ef6\u5939\u53ca\u5b50\u6587\u4ef6\u5939\u4e2d\u7684\u6240\u6709 locale \u6587\u4ef6\u3002\u6240\u4ee5\u5728\u6839\u76ee\u5f55\u6267\u884c makemessages \u547d\u4ee4\u4f1a\u51fa\u73b0 CommandError: Unable to find a locale path to store translations for file Porject\\__init__.py \u7684\u9519\u8bef\u3002 Q:\u7ffb\u8bd1\u540e\u7684\u5185\u5bb9\u4e0d\u5b9e\u65f6\u751f\u6548 A:\u91cd\u542f\u670d\u52a1\u5668\u7ffb\u8bd1\u5185\u5bb9\u624d\u80fd\u751f\u6548 \u76f8\u5173\u77e5\u8bc6 Django\u51b3\u5b9a\u5f53\u524d\u8bed\u8a00\u7684\u987a\u5e8f\uff08\u4f7f\u7528LocaleMiddleware\u7684\u60c5\u51b5\u4e0b\uff0c\u672a\u4f7f\u7528\u5219\u4f18\u5148\u4f7f\u7528LANGUAGE_CODE\uff09\uff1a \u4f7f\u7528i18_patterns\u65f6\uff0c\u5c06\u4f18\u5148\u5339\u914durl\u4e2d\u7684\u8bed\u8a00\u4ee3\u7801\u3002 \u6ca1\u6709\u8bed\u8a00\u4ee3\u7801\uff0c\u4f7f\u7528session\u4e2d\u7684LANGUAGE_SESSION_KEY\u3002 \u6ca1\u6709session\uff0c\u68c0\u7d22cookie\u4e2d\u7684django_language\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u4f7f\u7528LANGUAGE_COOKIE_NAME\u8bbe\u7f6e\u3002 \u6ca1\u6709cookie,\u4f7f\u7528http\u8bf7\u6c42\u5934\u4e2d\u7684Accept-Language\u3002 \u6ca1\u6709Accept-Language\u8bf7\u6c42\u5934\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u8bbe\u7f6e\u7684LANGUAGE_CODE\u3002 locale name \u548c language code \u4e0d\u540c\uff0c locale name \u662f\u6df7\u5408\u4e86\u8bed\u8a00\u4e0e\u57ce\u5e02\u7684\u7b80\u5199\uff0c\u8bed\u8a00\u90e8\u5206\u603b\u662f\u5c0f\u5199\uff0c\u57ce\u5e02\u90e8\u5206\u603b\u662f\u5927\u5199\uff0c\u7528\u4e0b\u5212\u7ebf\u8fde\u63a5\uff0c\u5982it,de AT,es,pt BR\u7b49;language\u603b\u662f\u5c0f\u5199\uff0c\u7528\u7834\u5219\u53f7\u8fde\u63a5\uff0c\u5982it\uff0cde-at,es,ot-br\u3002 django-admin compilemessages --settings=path.to.settings \u53ea\u7f16\u8bd1\u8bbe\u7f6e\u4e2d\u8bbe\u7f6e\u7684LOCALE_PATHS\u4e2d\u7684\u8bed\u8a00\u6587\u4ef6\u3002 Django\u9ed8\u8ba4\u5047\u8bbe\u7528\u6237\u4f7f\u7528\u7684\u53ef\u7ffb\u8bd1\u7684\u9879\u76ee\u7684\u57fa\u7840\u8bed\u8a00\u4e3a\u82f1\u6587\uff0c\u4e0d\u4f7f\u7528\u82f1\u6587\u4f7f\u7528\u82f1\u6587\u505a\u4e3a\u57fa\u7840\u8bed\u8a00\u65f6\uff08\u8be6\u89c1\u6b64\u5904\uff09\uff0c\u9700\u8981\u6ce8\u610f\uff1a gettext \u65b9\u6cd5\u4e3a\u539f\u59cb\u8bed\u8a00\u53ea\u63d0\u4f9b\u4e86\u4e24\u79cd\u590d\u6570\u5f62\u5f0f\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4e3a\u5176\u4ed6\u590d\u6570\u5f62\u5f0f\u4e0d\u540c\u4e8e\u82f1\u8bed\u7684\u8bed\u8a00\u63d0\u4f9b\u590d\u6570\u5f62\u5f0f\u89c4\u5219\u3002\u5f53\u5176\u4ed6\u82f1\u6587\u7684\u5b50\u8bed\u8a00\u88ab\u4f7f\u7528\u5e76\u4e14\u82f1\u6587\u7ffb\u8bd1\u7f3a\u5931\u65f6\uff0c\u8fd4\u56de\u7684\u8bed\u8a00\u4e0d\u4f1a\u662fLANGUAGE_CODE\u91cc\u9762\u7684\u8bed\u8a00\uff0c\u800c\u662f\u5176\u539f\u59cb\u8bed\u8a00\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u82f1\u6587\u7528\u6237\u8bbf\u95ee\u4e00\u4e2a\u897f\u73ed\u7259\u8bed\u4f5c\u4e3a\u9ed8\u8ba4\u8bed\u8a00\u7684\u7f51\u7ad9\uff0c\u5176\u539f\u59cb\u5b57\u7b26\u662f\u4f7f\u7528\u4fc4\u8bed\u5199\u7684\uff0c\u90a3\u4e48\u4ed6\u5c06\u770b\u5230\u7684\u662f\u4fc4\u8bed\u800c\u4e0d\u662f\u897f\u73ed\u7259\u8bed\u3002 \u4f7f\u7528 USE_L10N = True \u53ef\u4ee5\u542f\u7528formatting system\uff0c\u6839\u636e\u8bed\u8a00\u533a\u57df\u5bf9\u9875\u9762\u663e\u793a\u683c\u5f0f\u505a\u51fa\u4e2a\u6027\u5316\u9002\u914d\u3002 Internationalization\uff0ci \u548c n \u4e4b\u95f4\u6709 18 \u4e2a\u5b57\u6bcd\uff0c\u7b80\u79f0 I18N\u3002\u672c\u5730\u5316 -- localization\uff0c l \u548c n \u4e4b\u95f4\u6709 10 \u4e2a\u5b57\u6bcd\uff0c\u7b80\u79f0 L10N\u3002\u56fd\u9645\u5316\u610f\u5473\u7740 Web\u4ea7\u54c1\u6709\u9002\u7528\u4e8e\u4efb\u4f55\u5730\u65b9\u7684\u6f5c\u529b\uff0c\u9488\u5bf9\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\uff1b\u672c\u5730\u5316\u5219\u662f\u6307\u4f7f\u4e00\u4e2a\u56fd\u9645\u5316\u7684\u7a0b\u5e8f\u4e3a\u4e86\u5728\u67d0\u4e2a\u7279\u5b9a\u5730\u533a\u4f7f\u7528\u800c\u8fdb\u884c\u5b9e\u9645\u7ffb\u8bd1\u7684\u8fc7\u7a0b\uff0c\u9488\u5bf9\u7ffb\u8bd1\u4eba\u5458\u800c\u8a00\u3002","title":"Django\u591a\u8bed\u8a00\u652f\u6301"},{"location":"python/django/django-translation/#1-i18n","text":"USE_I18N = True USE_L10N = True","title":"1 \u5f00\u542fI18N\u652f\u6301"},{"location":"python/django/django-translation/#2","text":"","title":"2 \u8bbe\u7f6e"},{"location":"python/django/django-translation/#1","text":"# \u8bed\u8a00\u9009\u9879 LANGUAGES = ( ( 'zh-hans' , '\u7b80\u4f53\u4e2d\u6587' ), ( 'zh-hant' , '\u7e41\u4f53\u4e2d\u6587' ), ( 'en' , '\u82f1\u8bed' ), ( 'es' , '\u897f\u73ed\u7259\u8bed' ), ( 'bn' , '\u5b5f\u52a0\u62c9\u8bed' ), ( 'id' , '\u5370\u5730\u8bed' ), ( 'pt' , '\u8461\u8404\u7259\u8bed' ), ( 'ru' , '\u4fc4\u8bed' ), ( 'ja' , '\u65e5\u8bed' ), ( 'de' , '\u5fb7\u8bed' ), ( 'ko' , '\u97e9\u8bed' ), ( 'fr' , '\u6cd5\u8bed' ), ( 'ar' , '\u963f\u62c9\u4f2f\u8bed' ), )","title":"1. \u8bbe\u7f6e\u652f\u6301\u8bed\u8a00"},{"location":"python/django/django-translation/#2_1","text":"# \u6c49\u8bed \u4e0a\u6d77\u65f6\u533a LANGUAGE_CODE = 'zh-hans'","title":"2. \u8bbe\u7f6e\u9ed8\u8ba4\u8bed\u8a00"},{"location":"python/django/django-translation/#3-localemiddlewaremiddleware","text":"LocaleMiddleware \u5fc5\u987b\u5728 Session \u4e4b\u540e\uff0c\u56e0\u4e3a\u8bed\u8a00\u533a\u57df\u6765\u6e90\u4e8e session \u4e2d\u7684\u8bbe\u7f6e\uff0c\u5fc5\u987b\u5728 CommonMiddleware \u4e4b\u524d\uff0c\u56e0\u4e3a CommonMiddleware \u9700\u8981\u9009\u62e9\u4e00\u4e2a\u8bed\u8a00\u53bb\u53cd\u67e5url\u3002 MIDDLEWARE = [ 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.locale.LocaleMiddleware' , 'django.middleware.common.CommonMiddleware' , ]","title":"3. \u6dfb\u52a0LocaleMiddleware\u81f3MIDDLEWARE\u4e2d"},{"location":"python/django/django-translation/#4","text":"LOCALE_PATHS = ( os . path . join ( BASE_DIR , \"locale/\" ), )","title":"4. \u8bbe\u7f6e\u7ffb\u8bd1\u6587\u4ef6\u5b58\u50a8\u4f4d\u7f6e"},{"location":"python/django/django-translation/#3","text":"","title":"3 \u6a21\u677f\u7ffb\u8bd1"},{"location":"python/django/django-translation/#1_1","text":"\u6240\u6709\u5f85\u7ffb\u8bd1html\u5fc5\u987b\u52a0\u5165 {% load i18n %} \u6807\u7b7e\uff0c\u5373\u4f7f\u662f\u88abinclude\u7684\u7236html\u91cc\u52a0\u8f7d\u8fc7\u8be5\u6807\u7b7e\uff0c\u88abinclude\u7684html\u4f9d\u65e7\u9700\u8981\u52a0\u8f7d\u3002 \u5355\u72ec\u6587\u5b57 {% trans \"\u6211\u662f\u5f85\u7ffb\u8bd1\u6587\u5b57\" %} \u533a\u5757\u6587\u5b57 {% blocktrans with year=product.publish_time|date:'Y' %} {{ year }}\u5e74\u4e0a\u5e02 {% endblocktrans %}","title":"1. \u7b80\u5355\u7ffb\u8bd1\u8bed\u6cd5"},{"location":"python/django/django-translation/#2-django-admin-makemessages-alldjangopo","text":"","title":"2. \u8fd0\u884cdjango-admin makemessages --all\u751f\u6210\u5f85\u7ffb\u8bd1\u7684django.po\u6587\u4ef6\u3002"},{"location":"python/django/django-translation/#3-djangopo","text":"\u5b89\u88c5 django-rosetta \u63d2\u4ef6\uff0c\u5373\u53ef\u5728admin\u4e2d\u770b\u5230rosetta\u9762\u677f\uff0c\u8fdb\u5165\u5373\u53ef\u5bf9\u751f\u6210\u7684\u5f85\u7ffb\u8bd1\u7684 django.po \u6587\u4ef6\u8fdb\u884c\u7ffb\u8bd1\uff0c\u65e0\u9700\u518d\u5728\u4ee3\u7801\u4e2d\u7ffb\u8bd1\u3002 \u6216\u8005\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u6253\u5f00 django.po \u6587\u4ef6\u8fdb\u884c\u7ffb\u8bd1\u3002","title":"3. \u7ffb\u8bd1django.po\u6587\u4ef6"},{"location":"python/django/django-translation/#4-django-admin-compilemessagesdjangopodjangomo","text":"","title":"4. \u8fd0\u884cdjango-admin compilemessages\u547d\u4ee4\u7f16\u8bd1\u7ffb\u8bd1\u597d\u7684django.po\u6587\u4ef6\u4ee5\u751f\u6210django.mo\u6587\u4ef6\u3002"},{"location":"python/django/django-translation/#5","text":"{% blocktrans count news.view_times as news_view_times %} \u67e5\u770b\u6b21\u6570:{{ news_view_times }} {% plural %} \u67e5\u770b\u6b21\u6570:{{ news_view_times }} {% endblocktrans %} \u4e00\u4e2a\u672a\u53d1\u73b0\u539f\u56e0\u7684Bug,0\u4f1a\u88ab\u8bc6\u522b\u4e3a\u590d\u6570\uff0c\u6682\u672a\u627e\u5230\u89e3\u51b3\u65b9\u6cd5\uff0c\u53ef\u89c1 \u6b64\u5904 \u3002","title":"5. \u590d\u6570\u7ffb\u8bd1"},{"location":"python/django/django-translation/#4_1","text":"","title":"4 \u5185\u5bb9\u7ffb\u8bd1"},{"location":"python/django/django-translation/#1-django-hvad","text":"","title":"1. \u5b89\u88c5django-hvad"},{"location":"python/django/django-translation/#2-modelspy","text":"from django.db import models from hvad.models import TranslatableModel , TranslatedFields class Demo ( TranslatableModel ): translations = TranslatedFields ( # \u6807\u9898 title = models . CharField ( max_length = 100 , verbose_name = u '\u6807\u9898' ), ) class Meta : verbose_name = 'Demo' verbose_name_plural = 'Demo' ordering = ( '-id' ,) def trans_title ( self ): return self . lazy_translation_getter ( 'title' , str ( self . id )) def __str__ ( self ): title = self . trans_title () return title if title else ''","title":"2. models.py"},{"location":"python/django/django-translation/#3-formspy","text":"from django import forms from hvad.admin import TranslatableModelForm from .models import * class DemoForm ( TranslatableModelForm ): def __init__ ( self , * args , ** kwargs ): super ( ExhibitForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'title' ] . widget . attrs . update ({ 'class' : 'form-control' }) class Meta : model = Exhibit fields = [ 'title' ]","title":"3. forms.py"},{"location":"python/django/django-translation/#4-django-rest-framework","text":"serializers.py from rest_framework import serializers from hvad.contrib.restframework import TranslatableModelSerializer from .models import * class DemoSerializer ( TranslatableModelSerializer ): class Meta : model = Demo fields = [ 'title' ]","title":"4. \u5982\u679c\u4f7f\u7528django rest framework\uff0c\u4e0d\u4f7f\u7528\u8bf7\u5ffd\u7565\u672c\u90e8\u5206\u3002"},{"location":"python/django/django-translation/#5_1","text":"class DemoAllListView ( ListView ): template_name = 'demo/list_all.html' context_object_name = 'demo_list' paginate_by = settings . PAGE_NUM def get_queryset ( self ): return Demo . objects . language ( 'all' ) . order_by ( '-id' )","title":"5. \u5168\u90e8\u8bed\u8a00\u5217\u8868"},{"location":"python/django/django-translation/#6","text":"class DemoListView ( ListView ): queryset = Demo . objects . language () . order_by ( '-id' ) template_name = 'demo/list_lang.html' context_object_name = 'demo_list' paginate_by = settings . PAGE_NUM","title":"6. \u5f53\u524d\u8bed\u8a00\u5217\u8868"},{"location":"python/django/django-translation/#7","text":"class DemoCreateView ( CreateView ): form_class = DemoForm template_name = 'demo/create.html' success_url = reverse_lazy ( 'demo_list' )","title":"7. \u521b\u5efa\u5f53\u524d\u8bed\u8a00\u7684\u5bf9\u8c61"},{"location":"python/django/django-translation/#8","text":"class DemoDetailView ( DetailView ): queryset = Demo . objects . language () . all () slug_field = 'id' template_name = 'demo/detail.html'","title":"8. \u67e5\u770b\u5f53\u524d\u8bed\u8a00\u7684\u5bf9\u8c61\u8be6\u60c5"},{"location":"python/django/django-translation/#9-i18n_patternsdemotitletitle","text":"","title":"9. \u8def\u7531\u4e2d\u8bbe\u7f6e\u4e86i18n_patterns\u65f6\uff0c\u5f53\u524d\u83b7\u53d6\u5230\u7684{{demo.title}}\u65e2\u662f\u5bf9\u5e94\u8bed\u8a00\u7684title\u3002"},{"location":"python/django/django-translation/#5-url","text":"from django.conf.urls.i18n import i18n_patterns urlpatterns += i18n_patterns ( url ( r '^' , include ( 'web.urls' )), prefix_default_language = False , ) # \u8bbe\u7f6erosetta\u652f\u6301 if 'rosetta' in settings . INSTALLED_APPS : urlpatterns += [ url ( r '^rosetta/' , include ( 'rosetta.urls' )), ] prefix_default_language \u4e3a False \u65f6\uff0c\u9ed8\u8ba4\u8bed\u8a00\u4e0d\u518d\u51fa\u73b0\u5728url\u4e2d\u3002","title":"5 url\u8bbe\u7f6e"},{"location":"python/django/django-translation/#6-url","text":"web/templatetags/translate_url.py : from django.template import Library from django.urls.exceptions import Resolver404 from django.core.urlresolvers import resolve , reverse from django.utils.translation import activate , get_language from urllib.parse import urlencode register = Library () @register . simple_tag ( takes_context = True ) def translate_url ( context , lang = None , * args , ** kwargs ): \"\"\" \u5c06\u5f53\u524d\u9875\u9762url\u8f6c\u6362\u81f3\u5176\u4ed6\u8bed\u8a00\u7684url \u7528\u6cd5: {% translate_url language.code %} \"\"\" # request \u5bf9\u8c61 request = context [ 'request' ] # \u5f53\u524d\u8bed\u8a00\u73af\u5883 cur_language = get_language () try : # \u6839\u636e\u5f53\u524durl\u68c0\u7d22url\u522b\u540d url_parts = resolve ( request . path ) # \u6fc0\u6d3b\u6b32\u8f6c\u6362\u7684\u8bed\u8a00\u73af\u5883 activate ( lang ) # \u6839\u636eurl\u522b\u540d\u68c0\u7d22\u51fa\u5bf9\u5e94\u8bed\u8a00\u73af\u5883\u7684url url = reverse ( url_parts . url_name , args = url_parts . args , kwargs = url_parts . kwargs ) # \u4fdd\u6301request parameters\u4e0d\u4e22\u5931 parameters = urlencode ( request . GET , doseq = True ) if parameters : url = ' {} ? {} ' . format ( url , parameters ) except Resolver404 : # \u672a\u68c0\u7d22\u5230\u5219\u8fd4\u56de\u4e3b\u9875 url = '/' finally : # \u8fd8\u539f\u81f3\u5f53\u524d\u8bed\u8a00\u73af\u5883 activate ( cur_language ) return url \u4f7f\u7528\u65b9\u6cd5\uff1a navbar.html : {% load translate_url %} < div class = \"head_bg\" > < div class = \"container\" > < div class = \"row\" > < div class = \"nav_language_select\" > {% get_language_info_list for current_languages as languages %} < div class = \"col-md-2 col-sm-3 col-xs-5 text-right nav_language_div\" > < div class = \"nav_language_div2\" > {% get_language_info_list for current_languages as languages %} {% for language in languages %} {% if not forloop.first %} < span > / </ span > {% endif %} {% ifequal LANGUAGE_CODE language.code %} < a href = \"{% translate_url language.code %}\" class = 'nav_color_active' > {{ language.name_local }} </ a > {% else %} < a href = \"{% translate_url language.code %}\" > {{ language.name_local }} </ a > {% endifequal %} {% endfor %} </ div > </ div > </ div > </ div > </ div >","title":"6 \u53ef\u76f4\u63a5\u5207\u6362\u5f53\u524durl\u8bed\u8a00\u7684\u6807\u7b7e"},{"location":"python/django/django-translation/#qa","text":"Q:\u8fd0\u884c django-admin makemessages --all \u547d\u4ee4\u540e\u63d0\u793a can't find msguniq. make sure you have gnu gettext tools 0.15 or newer installed. \uff08window7 django1.11.1\uff09 A\uff1a\u524d\u5f80 \u6b64\u5904 \u4e0b\u8f7d\u8f6f\u4ef6\u5305\u89e3\u538b\uff0c\u5e76\u8bbe\u7f6e\u5176\u5b50bin\u76ee\u5f55\u81f3\u73af\u5883\u53d8\u91cf\u3002 Q:\u8fd0\u884c django-admin compilemessages \u547d\u4ee4\u540e\uff0cdjango\u63d0\u793a ValueError: plural forms expression could be dangerous A\uff1a\u4fee\u6539\u751f\u6210\u7684django.po\u6587\u4ef6\u4e2d\u7684 \"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\\n\"\u4e3a\"Plural-Forms: nplurals=1; plural=0;\\n\" \u5373\u53ef\u3002 Q:zh_Hans\u547d\u540d\u95ee\u9898 A\uff1asetting\u4e2d LANGUAGE_CODE = 'zh_Hans' ,locale\u4e2d\u6587\u4ef6\u5939\u540d\u79f0\u672azh_Hans,\u5176\u4f59\u5730\u65b9\u7528zh-hans,\u5982\uff1a LANGUAGES = ( ( 'en' , 'English' ), ( 'zh-hans' , 'Chinese' ), ) \u5177\u4f53\u539f\u56e0\u53c2\u89c1\u4e0b\u5217 lang2locale \u51fd\u6570\uff0c\u505a\u4e86\u5982\u4e0b\u64cd\u4f5c\uff1aBasically, for our Chinese language codes, the - is replaced with a _, and the first letter of the second word is capitalized(\u53ea\u5728\u540e\u4e00\u4e2a\u5355\u8bcd\u957f\u5ea6\u5927\u4e8e2\u7684\u65f6\u5019\u8f6c\u6362). def to_locale ( language , to_lower = False ): \"\"\" Turns a language name (en-us) into a locale name (en_US). If 'to_lower' is True, the last component is lower-cased (en_us). \"\"\" p = language . find ( '-' ) if p >= 0 : if to_lower : return language [: p ] . lower () + '_' + language [ p + 1 :] . lower () else : # Get correct locale for sr-latn if len ( language [ p + 1 :]) > 2 : return language [: p ] . lower () + '_' + language [ p + 1 ] . upper () + language [ p + 2 :] . lower () return language [: p ] . lower () + '_' + language [ p + 1 :] . upper () else : return language . lower () Q:\u52a0\u5165django-rosetta\u540e\u51fa\u73b0\u59822\u4e2d\u63cf\u8ff0\u7684\u95ee\u9898 A:\u627e\u5230rosetta\u5b89\u88c5\u76ee\u5f55\uff0c\u63092\u4e2d\u89e3\u51b3\u65b9\u6cd5\u4fee\u6539 rosetta/locale/en/LC_MESSAGE/django.po \u6587\u4ef6\u5373\u53ef\u3002 Q:\u9700\u8981\u53ea\u751f\u6210\u67d0\u4e2aapp\u7684locale\u6587\u4ef6 A:\u9700\u8981\u8fdb\u5165\u8be5app\u76ee\u5f55\u540e\u518d\u6267\u884c makemessages \u547d\u4ee4\uff0c makemessages \u547d\u4ee4\u4f1a\u751f\u6210\u5f53\u524d\u6267\u884c\u547d\u4ee4\u7684\u6587\u4ef6\u5939\u53ca\u5b50\u6587\u4ef6\u5939\u4e2d\u7684\u6240\u6709 locale \u6587\u4ef6\u3002\u6240\u4ee5\u5728\u6839\u76ee\u5f55\u6267\u884c makemessages \u547d\u4ee4\u4f1a\u51fa\u73b0 CommandError: Unable to find a locale path to store translations for file Porject\\__init__.py \u7684\u9519\u8bef\u3002 Q:\u7ffb\u8bd1\u540e\u7684\u5185\u5bb9\u4e0d\u5b9e\u65f6\u751f\u6548 A:\u91cd\u542f\u670d\u52a1\u5668\u7ffb\u8bd1\u5185\u5bb9\u624d\u80fd\u751f\u6548","title":"Q&amp;A"},{"location":"python/django/django-translation/#_1","text":"Django\u51b3\u5b9a\u5f53\u524d\u8bed\u8a00\u7684\u987a\u5e8f\uff08\u4f7f\u7528LocaleMiddleware\u7684\u60c5\u51b5\u4e0b\uff0c\u672a\u4f7f\u7528\u5219\u4f18\u5148\u4f7f\u7528LANGUAGE_CODE\uff09\uff1a \u4f7f\u7528i18_patterns\u65f6\uff0c\u5c06\u4f18\u5148\u5339\u914durl\u4e2d\u7684\u8bed\u8a00\u4ee3\u7801\u3002 \u6ca1\u6709\u8bed\u8a00\u4ee3\u7801\uff0c\u4f7f\u7528session\u4e2d\u7684LANGUAGE_SESSION_KEY\u3002 \u6ca1\u6709session\uff0c\u68c0\u7d22cookie\u4e2d\u7684django_language\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u4f7f\u7528LANGUAGE_COOKIE_NAME\u8bbe\u7f6e\u3002 \u6ca1\u6709cookie,\u4f7f\u7528http\u8bf7\u6c42\u5934\u4e2d\u7684Accept-Language\u3002 \u6ca1\u6709Accept-Language\u8bf7\u6c42\u5934\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u8bbe\u7f6e\u7684LANGUAGE_CODE\u3002 locale name \u548c language code \u4e0d\u540c\uff0c locale name \u662f\u6df7\u5408\u4e86\u8bed\u8a00\u4e0e\u57ce\u5e02\u7684\u7b80\u5199\uff0c\u8bed\u8a00\u90e8\u5206\u603b\u662f\u5c0f\u5199\uff0c\u57ce\u5e02\u90e8\u5206\u603b\u662f\u5927\u5199\uff0c\u7528\u4e0b\u5212\u7ebf\u8fde\u63a5\uff0c\u5982it,de AT,es,pt BR\u7b49;language\u603b\u662f\u5c0f\u5199\uff0c\u7528\u7834\u5219\u53f7\u8fde\u63a5\uff0c\u5982it\uff0cde-at,es,ot-br\u3002 django-admin compilemessages --settings=path.to.settings \u53ea\u7f16\u8bd1\u8bbe\u7f6e\u4e2d\u8bbe\u7f6e\u7684LOCALE_PATHS\u4e2d\u7684\u8bed\u8a00\u6587\u4ef6\u3002 Django\u9ed8\u8ba4\u5047\u8bbe\u7528\u6237\u4f7f\u7528\u7684\u53ef\u7ffb\u8bd1\u7684\u9879\u76ee\u7684\u57fa\u7840\u8bed\u8a00\u4e3a\u82f1\u6587\uff0c\u4e0d\u4f7f\u7528\u82f1\u6587\u4f7f\u7528\u82f1\u6587\u505a\u4e3a\u57fa\u7840\u8bed\u8a00\u65f6\uff08\u8be6\u89c1\u6b64\u5904\uff09\uff0c\u9700\u8981\u6ce8\u610f\uff1a gettext \u65b9\u6cd5\u4e3a\u539f\u59cb\u8bed\u8a00\u53ea\u63d0\u4f9b\u4e86\u4e24\u79cd\u590d\u6570\u5f62\u5f0f\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4e3a\u5176\u4ed6\u590d\u6570\u5f62\u5f0f\u4e0d\u540c\u4e8e\u82f1\u8bed\u7684\u8bed\u8a00\u63d0\u4f9b\u590d\u6570\u5f62\u5f0f\u89c4\u5219\u3002\u5f53\u5176\u4ed6\u82f1\u6587\u7684\u5b50\u8bed\u8a00\u88ab\u4f7f\u7528\u5e76\u4e14\u82f1\u6587\u7ffb\u8bd1\u7f3a\u5931\u65f6\uff0c\u8fd4\u56de\u7684\u8bed\u8a00\u4e0d\u4f1a\u662fLANGUAGE_CODE\u91cc\u9762\u7684\u8bed\u8a00\uff0c\u800c\u662f\u5176\u539f\u59cb\u8bed\u8a00\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u82f1\u6587\u7528\u6237\u8bbf\u95ee\u4e00\u4e2a\u897f\u73ed\u7259\u8bed\u4f5c\u4e3a\u9ed8\u8ba4\u8bed\u8a00\u7684\u7f51\u7ad9\uff0c\u5176\u539f\u59cb\u5b57\u7b26\u662f\u4f7f\u7528\u4fc4\u8bed\u5199\u7684\uff0c\u90a3\u4e48\u4ed6\u5c06\u770b\u5230\u7684\u662f\u4fc4\u8bed\u800c\u4e0d\u662f\u897f\u73ed\u7259\u8bed\u3002 \u4f7f\u7528 USE_L10N = True \u53ef\u4ee5\u542f\u7528formatting system\uff0c\u6839\u636e\u8bed\u8a00\u533a\u57df\u5bf9\u9875\u9762\u663e\u793a\u683c\u5f0f\u505a\u51fa\u4e2a\u6027\u5316\u9002\u914d\u3002 Internationalization\uff0ci \u548c n \u4e4b\u95f4\u6709 18 \u4e2a\u5b57\u6bcd\uff0c\u7b80\u79f0 I18N\u3002\u672c\u5730\u5316 -- localization\uff0c l \u548c n \u4e4b\u95f4\u6709 10 \u4e2a\u5b57\u6bcd\uff0c\u7b80\u79f0 L10N\u3002\u56fd\u9645\u5316\u610f\u5473\u7740 Web\u4ea7\u54c1\u6709\u9002\u7528\u4e8e\u4efb\u4f55\u5730\u65b9\u7684\u6f5c\u529b\uff0c\u9488\u5bf9\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\uff1b\u672c\u5730\u5316\u5219\u662f\u6307\u4f7f\u4e00\u4e2a\u56fd\u9645\u5316\u7684\u7a0b\u5e8f\u4e3a\u4e86\u5728\u67d0\u4e2a\u7279\u5b9a\u5730\u533a\u4f7f\u7528\u800c\u8fdb\u884c\u5b9e\u9645\u7ffb\u8bd1\u7684\u8fc7\u7a0b\uff0c\u9488\u5bf9\u7ffb\u8bd1\u4eba\u5458\u800c\u8a00\u3002","title":"\u76f8\u5173\u77e5\u8bc6"},{"location":"python/django/django-wysiwyg/","text":"1\u3001 django-summernote \u652f\u6301Admin\u548c\u7a97\u53e3\u4f7f\u7528 \u53ef\u81ea\u7531\u65b9\u6cd5\u7f29\u5c0f\u7a97\u53e3 \u53ef\u76f4\u63a5\u4e0a\u4f20\u56fe\u7247 \u53ef\u63d2\u5165youtube\u548cyouku\u89c6\u9891\u94fe\u63a5 \u5168\u5c4f\u7f16\u8f91\u65f6\u6709\u65e0\u6cd5\u4e0a\u4f20\u56fe\u7247\u7684bug\u5f85\u89e3\u51b3 \u53ef\u5728modelForm\u4e2d\u4f7f\u7528 \u53ef\u6307\u5b9acss \u652f\u6301\u4e2d\u6587 \u4e0d\u53ef\u4e0a\u4f20\u6587\u4ef6\u3002 2\u3001 django-redactor \u652f\u6301admin\u548c\u7a97\u53e3\u4f7f\u7528 \u4e0d\u53ef\u81ea\u7531\u65b9\u6cd5\u7f29\u5c0f\u7a97\u53e3 \u53ef\u4e0a\u4f20\u56fe\u7247\u548c\u6587\u4ef6 \u4e0d\u53ef\u5168\u5c4f\u7f16\u8f91\u7a97\u53e3 \u53ef\u5728modelForm\u4e2d\u4f7f\u7528 \u4e0d\u53ef\u6307\u5b9acss \u652f\u6301\u4e2d\u6587 \u4e0d\u53ef\u63d2\u5165\u89c6\u9891\u94fe\u63a5 3\u3001 django-tinymce \u529f\u80fd\u4e30\u5bcc \u4e0d\u652f\u6301\u56fe\u7247\u4e0a\u4f20\u529f\u80fd \u652f\u6301\u4e2d\u6587 \u652f\u6301\u89c6\u9891\u7a97\u53e3\u5927\u5c0f\u7f16\u8f91 4\u3001 django-froala-editor \u529f\u80fd\u4e30\u5bcc \u53ef\u4e0a\u4f20\u56fe\u7247\u3001\u6587\u4ef6 \u4e0d\u652f\u6301youku\u89c6\u9891 \u6536\u8d39 \u4f46\u754c\u9762\u7f8e\u89c2\u7cbe\u81f4","title":"Django\u5bcc\u6587\u672c\u7f16\u8f91\u5668(wysiwyg)\u5bf9\u6bd4"},{"location":"python/django/django-wysiwyg/#1django-summernote","text":"\u652f\u6301Admin\u548c\u7a97\u53e3\u4f7f\u7528 \u53ef\u81ea\u7531\u65b9\u6cd5\u7f29\u5c0f\u7a97\u53e3 \u53ef\u76f4\u63a5\u4e0a\u4f20\u56fe\u7247 \u53ef\u63d2\u5165youtube\u548cyouku\u89c6\u9891\u94fe\u63a5 \u5168\u5c4f\u7f16\u8f91\u65f6\u6709\u65e0\u6cd5\u4e0a\u4f20\u56fe\u7247\u7684bug\u5f85\u89e3\u51b3 \u53ef\u5728modelForm\u4e2d\u4f7f\u7528 \u53ef\u6307\u5b9acss \u652f\u6301\u4e2d\u6587 \u4e0d\u53ef\u4e0a\u4f20\u6587\u4ef6\u3002","title":"1\u3001django-summernote"},{"location":"python/django/django-wysiwyg/#2django-redactor","text":"\u652f\u6301admin\u548c\u7a97\u53e3\u4f7f\u7528 \u4e0d\u53ef\u81ea\u7531\u65b9\u6cd5\u7f29\u5c0f\u7a97\u53e3 \u53ef\u4e0a\u4f20\u56fe\u7247\u548c\u6587\u4ef6 \u4e0d\u53ef\u5168\u5c4f\u7f16\u8f91\u7a97\u53e3 \u53ef\u5728modelForm\u4e2d\u4f7f\u7528 \u4e0d\u53ef\u6307\u5b9acss \u652f\u6301\u4e2d\u6587 \u4e0d\u53ef\u63d2\u5165\u89c6\u9891\u94fe\u63a5","title":"2\u3001django-redactor"},{"location":"python/django/django-wysiwyg/#3django-tinymce","text":"\u529f\u80fd\u4e30\u5bcc \u4e0d\u652f\u6301\u56fe\u7247\u4e0a\u4f20\u529f\u80fd \u652f\u6301\u4e2d\u6587 \u652f\u6301\u89c6\u9891\u7a97\u53e3\u5927\u5c0f\u7f16\u8f91","title":"3\u3001django-tinymce"},{"location":"python/django/django-wysiwyg/#4django-froala-editor","text":"\u529f\u80fd\u4e30\u5bcc \u53ef\u4e0a\u4f20\u56fe\u7247\u3001\u6587\u4ef6 \u4e0d\u652f\u6301youku\u89c6\u9891 \u6536\u8d39 \u4f46\u754c\u9762\u7f8e\u89c2\u7cbe\u81f4","title":"4\u3001django-froala-editor"},{"location":"python/django/fabric/","text":"Fabric\u7684\u5e94\u7528\u8303\u56f4\u662f\u81ea\u52a8\u5316\u8fd0\u7ef4\uff0c\u53ef\u4ee5\u8ba9\u4ee5\u5f80\u9700\u8981ssh\u94fe\u63a5\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u6267\u884c\u7684\u90e8\u7f72\u3001\u66f4\u65b0\u547d\u4ee4\u5199\u5165\u811a\u672c\u4e2d\u81ea\u52a8\u5b8c\u6210\uff0c\u5927\u5927\u964d\u4f4e\u9879\u76ee\u90e8\u7f72\u3001\u7ef4\u62a4\u7684\u6210\u672c\uff0c \u5b98\u65b9\u6587\u6863\uff1ahttp://www.fabfile.org/\u3002 \u6307\u5b9a hosts : from fabric.api import * env . hosts = [ 'dreamgo@192.168.1.102:22' , ] env . passwords = { 'dreamgo@192.168.1.102:22' : 'dreamgo' , } # >fab -H dreamgo@192.168.1.10:22 host_type @hosts ( 'dreamgo@192.168.1.102:22' ) def host_type (): with cd ( '/django/SchoolMS_Server/SchoolMS' ): run ( 'uname -s' ) run ( 'service apache2 reload' ) \u6307\u5b9a roles : from fabric.api import * env . roledefs = { 'test_server' : [ 'dreamgo@192.168.1.102:22' ], } env . passwords = { 'dreamgo@192.168.1.102:22' : 'dreamgo' , } # >fab -R test_server host_type @roles ( 'test_server' ) def host_type (): with cd ( '/django/SchoolMS_Server/SchoolMS' ): run ( 'uname -s' ) run ( 'service apache2 reload' ) Django \u5237\u65b0\u7a0b\u5e8f\u547d\u4ee4\uff1a from fabric.api import * from contextlib import contextmanager as _contextmanager env . roledefs = { 'test_server' : [ 'dreamgo@192.168.1.102:22' ], } env . passwords = { 'dreamgo@192.168.1.102:22' : 'dreamgo' , } env . directory = '/django/SchoolMS_Server/' env . activate = 'source environment/bin/activate' @_contextmanager def virtualenv (): with cd ( env . directory ): with prefix ( env . activate ): yield @roles ( 'test_server' ) def update (): with virtualenv (): run ( 'git pull origin master' ) run ( 'python manage.py makemigrations' ) run ( 'python manage.py migrate' ) run ( 'deactivate' ) run ( 'service apache2 reload' ) \u6267\u884c\u7ed3\u679c\uff1a (environment) C:\\django\\SchoolMS\\SchoolMS>fab update [dreamgo@192.168.1.102:22] Executing task 'update' [dreamgo@192.168.1.102:22] run: git pull origin master [dreamgo@192.168.1.102:22] out: \u6765\u81ea https://git.coding.net/name/xxxx.git [dreamgo@192.168.1.102:22] out: * branch master -> FETCH_HEAD [dreamgo@192.168.1.102:22] out: \u66f4\u65b0 94bdffc..6e43223 [dreamgo@192.168.1.102:22] out: Fast-forward [dreamgo@192.168.1.102:22] out: SchoolMS/fabfile.py | 30 ?[32m++++++++++++++++++++++++++++++?[m [dreamgo@192.168.1.102:22] out: requirements.txt | 3 ?[32m++?[m?[31m-?[m [dreamgo@192.168.1.102:22] out: 2 files changed, 32 insertions(+), 1 deletion(-) [dreamgo@192.168.1.102:22] out: create mode 100644 SchoolMS/fabfile.py [dreamgo@192.168.1.102:22] out: [dreamgo@192.168.1.102:22] run: python manage.py makemigrations [dreamgo@192.168.1.102:22] out: No changes detected [dreamgo@192.168.1.102:22] out: [dreamgo@192.168.1.102:22] run: python manage.py migrate [dreamgo@192.168.1.102:22] out: ?[36;1mOperations to perform:?[0m [dreamgo@192.168.1.102:22] out: ?[1m Apply all migrations: ?[0madmin, auth.... [dreamgo@192.168.1.102:22] out: ?[36;1mRunning migrations:?[0m [dreamgo@192.168.1.102:22] out: No migrations to apply. [dreamgo@192.168.1.102:22] out: [dreamgo@192.168.1.102:22] run: deactivate [dreamgo@192.168.1.102:22] run: service apache2 reload [dreamgo@192.168.1.102:22] out: * Reloading web server apache2 [dreamgo@192.168.1.102:22] out: * [dreamgo@192.168.1.102:22] out: Done. Disconnecting from dreamgo@192.168.1.102... done. \u521b\u5efa\u6570\u636e\u5e93\u7684\u4e24\u79cd\u65b9\u6cd5\uff1a run('echo \"drop database if exists {};\"|mysql --batch --user=root --password'.format(env.db), pty=True) run('echo \"create database {} default character set utf8;\"|mysql --batch --user=root --password'.format(env.db), pty=True) run('mysql -uroot -p -e \"drop database if exists {}\"'.format(env.db)) run('mysql -uroot -proot -e \"CREATE DATABASE {} DEFAULT CHARACTER set utf8\"'.format(env.db)) \u5e38\u7528\u547d\u4ee4\uff1a fab -R [role_name] \u51fd\u6570\u540d\u79f0 fab -H [host_name] \u51fd\u6570\u540d\u79f0 \u5c0f\u6280\u5de7\uff1a passwords\u6307\u5b9a\u4e3a''\u65f6\u8fd0\u884c\u547d\u4ee4\u65f6\u4f1a\u63d0\u793a\u8f93\u5165\u5bc6\u7801\u3002 \u8fdc\u7a0b\u670d\u52a1\u5668\u4e3a python2 \u548c python3 \u5171\u5b58\uff0c\u4ee5 python3 \u4e3a\u9ed8\u8ba4 python \u7684\u670d\u52a1\u5668\uff0c\u4f7f\u7528\u547d\u4ee4 python2 -m pip install Fabric \u6765\u5b89\u88c5\u3002\u672c\u5730\u670d\u52a1\u5668\u53ea\u6709 python3 \u73af\u5883\uff0c\u4f7f\u7528\u547d\u4ee4 pip install Fabric3 \u6765\u5b89\u88c5\u3002 Fabric3 \u7684 requirements.txt \u5e94\u5199\u4e3a Fabric3==1.13.1.post1 \u3002 \u53ea\u9700\u8981\u672c\u5730\u5b89\u88c5Fabric\u5373\u53ef\uff0c\u4e0d\u8981\u6c42\u8fdc\u7a0b\u4e5f\u5b89\u88c5Fabric(\u6240\u4ee5\u65e0\u9700\u628a Fabric3==1.13.1.post1 \u5199\u5165 requirements.txt \u6587\u4ef6)\u3002 Django \u5e38\u7528\u7684\u90e8\u7f72\u3001\u66f4\u65b0\u811a\u672c fabfile.py (\u63a8\u8350\u653e\u7f6e\u5728 manage.py`\u6240\u5728\u7684\u6839\u76ee\u5f55)\uff1a from fabric.api import * from fabric.contrib import django , files from contextlib import contextmanager as _contextmanager django . settings_module ( 'NingTe.settings' ) from django.conf import settings _ = settings . INSTALLED_APPS env . roledefs = { 'test_server' : [ 'dreamgo@192.168.1.102:22' ], } env . passwords = { 'dreamgo@192.168.1.102:22' : '' , } # \u9879\u76ee\u5b58\u653e\u76ee\u5f55 env . directory = '/django/portal/' # \u865a\u62df\u73af\u5883\u76ee\u5f55 \u4ece\u9879\u76ee\u6839\u76ee\u5f55\u7b97\u8d77 environment\u4e3a\u9ed8\u8ba4\u7684\u865a\u62df\u73af\u5883\u6587\u4ef6\u5939\u540d\u79f0 env . activate = 'source environment/bin/activate' # git\u4ed3\u5e93\u5730\u5740 env . repo = '' env . db = settings . DATABASES [ 'default' ][ 'NAME' ] @_contextmanager def virtualenv (): with cd ( env . directory ): with prefix ( env . activate ): yield # \u6570\u636e\u5e93\u3001\u76ee\u5f55\u3001\u514b\u9686\u4ee3\u7801\u3001\u73af\u5883\u5b89\u88c5\u3001\u63d2\u4ef6\u5b89\u88c5\u3001\u8fc1\u79fb\u6570\u636e\u5e93\u3001\u521b\u5efa\u8d85\u7ba1 # >fab create \u4e00\u952e\u90e8\u7f72 @roles ( 'test_server' ) def create (): run ( 'mysql -uroot -p -e \"drop database if exists {} \"' . format ( env . db )) run ( 'mysql -uroot -p -e \"create database {} default character set utf8\"' . format ( env . db )) run ( 'rm -rf {} ' . format ( env . directory )) run ( 'mkdir {} ' . format ( env . directory )) run ( 'git clone {} {} ' . format ( env . repo , env . directory )) with cd ( env . directory ): run ( 'virtualenv environment' ) with virtualenv (): run ( 'pip install -r requirements.txt -i https://pypi.douban.com/simple' ) run ( 'python manage.py makemigrations' ) run ( 'python manage.py migrate' ) run ( 'python manage.py createsuperuser --username=username --email=ykh@dreamgo.tech' ) run ( 'deactivate' ) # \u62c9\u53d6\u4ee3\u7801\u3001\u8fc1\u79fb\u6570\u636e\u5e93\u3001\u91cd\u8f7dApache # >fab update \u4e00\u952e\u7ef4\u62a4 @roles ( 'remote_server' ) def update (): with virtualenv (): run ( 'git stash' ) run ( 'git pull' ) run ( 'git stash pop' ) run ( 'pip install -r requirements.txt -i https://pypi.douban.com/simple' ) run ( 'python manage.py makemigrations' ) run ( 'python manage.py migrate' ) run ( 'deactivate' ) run ( 'service apache2 reload' ) # \u521b\u5efa\u5e76\u914d\u7f6eApache\u7684conf\u6587\u4ef6 server_name-\u57df\u540d\u6216IP environment\u4e3a\u9ed8\u8ba4\u7684\u865a\u62df\u73af\u5883\u6587\u4ef6\u5939\u540d\u79f0 # >fab apache_conf \u4e00\u952e\u914d\u7f6eApache\u8bbe\u7f6e @roles ( 'test_server' ) def apache_conf (): directory = env . directory . rstrip ( '/' ) run ( 'chmod -R 777 {} ' . format ( env . directory )) file_path = '/etc/apache2/sites-available/' filename = 'portal.conf' with cd ( file_path ): run ( 'rm -f {} ' . format ( filename )) run ( 'touch {} ' . format ( filename )) server_name = 'blog.dreamgotech.com' apache_template = \\ '<VirtualHost *:8001> \\n ' \\ ' ServerName {server_name} \\n ' \\ ' ServerAdmin ykh@dreamgo.tech \\n ' \\ ' DocumentRoot {document_root} \\n ' \\ ' \\n ' \\ ' Alias /static {document_root} /static \\n ' \\ ' <Directory {document_root} /static> \\n ' \\ ' Require all granted \\n ' \\ ' </Directory> \\n ' \\ ' \\n ' \\ ' Alias /media {document_root} /media \\n ' \\ ' <Directory {document_root} /media> \\n ' \\ ' Require all granted \\n ' \\ ' </Directory> \\n ' \\ ' \\n ' \\ ' <Directory {document_root} /Portal> \\n ' \\ ' <Files wsgi.py> \\n ' \\ ' Require all granted \\n ' \\ ' </Files> \\n ' \\ ' </Directory> \\n ' \\ ' \\n ' \\ ' WSGIPassAuthorization On \\n ' \\ ' WSGIDaemonProcess {server_name} python-path= {document_root} python-home= {document_root} /environment \\n ' \\ ' WSGIProcessGroup {server_name} \\n ' \\ ' WSGIScriptAlias / {document_root} /Portal/wsgi.py \\n ' \\ ' \\n ' \\ ' ErrorLog {document_root} /log/error.log \\n ' \\ '</VirtualHost> \\n ' . format ( server_name = server_name , document_root = directory ) files . append ( filename , apache_template ) run ( 'sudo a2dissite {} ' . format ( filename )) run ( 'sudo a2ensite {} ' . format ( filename )) run ( 'service apache2 reload' ) # usage:fab cmd:\"service apache2 reload\" @roles ( 'test_server' ) def cmd ( cmd_str = '' ): run ( cmd_str )","title":"Fabric\u90e8\u7f72\u3001\u7ef4\u62a4"},{"location":"python/django/html-email/","text":"Django\u53d1\u9001\u6587\u5b57\u90ae\u4ef6 message = \"\" . join ([ u \"\u3010 {} \u3011\u60a8\u672c\u6b21\u64cd\u4f5c\u7684\u9a8c\u8bc1\u7801\u5982\u4e0b: {} \\n\\n \" . format ( email_verify . get_purpose_display (), email_verify . code ), u \"\u5982\u679c\u8fd9\u4e0d\u662f\u60a8\u672c\u4eba\u7684\u64cd\u4f5c\uff0c\u8bf7\u5ffd\u7565\u672c\u90ae\u4ef6! \\n \" , u \"DreamGo\u5b98\u7f51\uff1ahttp:// {} \\n\\n \" . format ( 'www.dreamgo.tech' ), \"\u8c22\u8c22! \\n \" , \"\u5357\u4eac\u8bd7\u8fdc\u542f\u8d26\u6237\u56e2\u961f \\n \" , ]) from_email = 'verify@dreamgo.tech' try : send_mail ( 'DreamGo\u8d26\u6237\u90ae\u7bb1\u8ba4\u8bc1' , message , from_email , [ tel_email ]) return success_response ( '\u90ae\u4ef6\u5df2\u53d1\u9001' ) except Exception as e : return error_response ( 5 , '\u90ae\u4ef6\u53d1\u9001\u5931\u8d25 \u539f\u56e0\uff1a' + str ( e )) Django\u53d1\u9001Html\u90ae\u4ef6 \u65b9\u6cd51\uff1a from django.template.loader import get_template from django.core.mail import EmailMessage message = get_template ( 'page.html' ) . render ({ 'bg_url' : bg_url , }) msg = EmailMessage ( subject , message , to = [ to ], from_email = from_email ) msg . content_subtype = 'html' msg . send () \u65b9\u6cd52\uff1a from django.core.mail import EmailMultiAlternatives from django.template.loader import render_to_string subject , from_email , to = get_value ( settings . SITE_NAME ), 'DreamGoTech@dreamgo.tech' , '614457662@qq.com' msg_html = render_to_string ( 'page.html' , context = { 'bg_url' : bg_url , }, request = request ) msg = EmailMultiAlternatives ( subject , '' , 'Dreamgo<verify@dreamgo.tech>' , [ to ]) msg . attach_alternative ( msg_html , \"text/html\" ) msg . send () \u4f7f\u7528\u65b9\u6cd52\u53d1\u9001\u5e26\u9759\u6001\u6587\u4ef6\u7684Html bg_url = request . build_absolute_uri ( '/static/images/email_verify_head.jpg' ) user_name = request . user . get_full_name () if request . user . is_authenticated else '' msg_html = render_to_string ( 'email/verify.html' , context = { 'bg_url' : bg_url , 'user_name' : user_name , 'verify_purpose' : email_verify . get_purpose_display (), 'verify_code' : email_verify . code , 'verify_duration' : email_verify . duration , 'current_time' : datetime . now () . date () }, request = request ) subject = ' {} {} ' . format ( get_value ( settings . SITE_NAME ), email_verify . get_purpose_display ()) msg = EmailMultiAlternatives ( subject , '' , settings . DEFAULT_FROM_EMAIL , [ tel_email ]) msg . attach_alternative ( msg_html , \"text/html\" ) try : msg . send () return success_response ( '\u90ae\u4ef6\u5df2\u53d1\u9001' ) except Exception as e : return error_response ( 5 , '\u90ae\u4ef6\u53d1\u9001\u5931\u8d25 \u539f\u56e0\uff1a' + str ( e )) \u9759\u6001\u6587\u4ef6\u4f7f\u7528request.build_absolute_uri\u65b9\u6cd5\u83b7\u53d6\u7edd\u5bf9\u8def\u5f84\uff0c\u5728html\u4e2d\u4f7f\u7528\u683c\u5f0f\u4e3a < div class = \"header\" > < img src = \"{{ bg_url }}\" /> </ div > Email\u4e2dhtml\u8bed\u6cd5\u7684\u7279\u6b8a\u8981\u6c42 Html\u5728\u53d1\u9001\u90ae\u4ef6\u65f6\uff0cGmail\u4e0d\u652f\u6301 \u6807\u7b7e\u4e2d\u7684background\u5b9e\u73b0\uff0c\u4f1a\u5bfc\u81f4\u56fe\u7247\u65e0\u6cd5\u52a0\u8f7d\u3002\u5177\u4f53\u652f\u6301\u8bed\u6cd5\u60c5\u51b5\u53ef\u81f3 \u6b64\u5904 \u67e5\u770b\u3002 \u4e00\u822c\u6765\u8bf4\uff0cemail\u4e2d\u7684html\u6709\u5982\u4e0b\u51e0\u70b9\u8981\u6c42\uff1a \u4e0d\u53ef\u4ee5: Include a section with styles. Apple Mail.app supports it, but Gmail and Hotmail do not, so it's a no-no. Hotmail will support a style section in the body but Gmail still doesn't. Link to an external stylesheet. Not many email clients support this, best to just forget it. Background-image / Background-position. Gmail is also the culprit on this one. Clear your floats. Gmail again. Margin. Yep, seriously, Hotmail ignores margins. Basically any CSS positioning at all doesn't work. Font-anything. Chances are Eudora will ignore anything you try to declare with fonts. \u53ea\u53ef\u4ee5\u4f7f\u7528 inline styles \u6765\u5b8c\u6210Html\u6837\u5f0f\u5b9e\u73b0. https://css-tricks.com/using-css-in-html-emails-the-real-story/ \u53d1\u4ef6\u90ae\u7bb1\u8bbe\u7f6e\u522b\u540d\u663e\u793a\uff1a \u8bbe\u7f6esend_email\u65b9\u6cd5\u7684from_user\u4e3a 'DreamGo<verify@dreamgo.tech>' <>\u91cc\u5fc5\u987b\u4e3a\u81ea\u5df1\u7684\u53d1\u4ef6\u90ae\u7bb1\u5730\u5740\uff0c\u524d\u9762\u4e3a\u771f\u6b63\u663e\u793a\u5728\u5ba2\u6237\u7aef\u7684\u90ae\u7bb1\u522b\u540d\u3002","title":"Django\u53d1\u9001Html\u90ae\u4ef6"},{"location":"python/django/nginx-uwsgi/","text":"Nginx vs Apache Nginx(\u9002\u5408\u7f51\u7edc\u5bc6\u96c6\u578b)\u662f\u4e8b\u4ef6\u9a71\u52a8\u578b\uff0c\u5f53\u5176\u5728\u7cfb\u7edf\u8d44\u6e90\u4e0d\u53ef\u7528\u65f6\uff0c\u5bf9\u5e94\u7684\u8fdb\u7a0b\u5c06\u88ab\u6302\u8d77\u76f4\u81f3\u7cfb\u7edf\u8d44\u6e90\u53ef\u7528\u65f6\u624d\u4f1a\u88ab\u5524\u9192(\u5f02\u6b65\u975e\u963b\u585e)\u3002\u800cApache(\u9002\u5408\u8ba1\u7b97\u5bc6\u96c6\u578b)\u5728\u7cfb\u7edf\u8d44\u6e90\u4e0d\u53ef\u7528\u65f6\uff0c\u5c06\u4e00\u76f4\u7b49\u5f85\u76f4\u81f3\u7cfb\u7edf\u8d44\u6e90\u53ef\u7528(\u963b\u585e\u578b)\u3002\u8fd9\u5c06\u5bfc\u81f4Apache\u5bf9\u6bd4Nginx\u4f1a\u6709\u66f4\u5927\u7684\u5185\u5b58\u5360\u7528\u3001\u66f4\u5c11\u7684\u5e76\u53d1\u91cf\u652f\u6301\u3002 Why nginx is faster than Apache, and why you needn\u2019t necessarily care \u5b89\u88c5 sudo apt - get install nginx sudo apt - get install python3 - pip # pip3 install uwsgi python3 .6 - m pip install uwsgi \u914d\u7f6e \u62f7\u8d1d uwsgi_params \uff1a #\u5c06uwsgi_params\u62f7\u8d1d\u5230django\u9879\u76ee\u6587\u4ef6\u5939\u4e0b cp / etc / nginx / uwsgi_params project_folder / django / project_nginx.conf \uff1a # the upstream component nginx needs to connect to upstream django { server unix : /// django / TisaneMS / mysite . sock ; # for a file socket #server 127.0.0.1:8001; # for a web port socket (we'll use this first) } # configuration of the server server { # the port your site will be served on listen 8000 ; # the domain name it will serve for server_name 192.168.1.2 ; # substitute your machine's IP address or FQDN charset utf - 8 ; # max upload size client_max_body_size 75 M ; # adjust to taste # Django media location / media { alias / django / TisaneMS / media ; # your Django project's media files - amend as required } location / static { alias / django / TisaneMS / static ; # your Django project's static files - amend as required } # Finally, send all non-media requests to the Django server. location / { uwsgi_pass django ; include / django / TisaneMS / uwsgi_params ; # the uwsgi_params file you installed } } \u4f7f\u7528\u8f6f\u94fe\u63a5\u5f00\u542f\u7ad9\u70b9\uff1a sudo ln -s /path/to/your/mysite/project_nginx.conf /etc/nginx/sites-enabled/ \u914d\u7f6e\u6587\u4ef6 project_uwsgi.ini \uff1a [ uwsgi ] # Django-related settings the base directory (full path) chdir = / django / TisaneMS # Django's wsgi file module = TisaneMS . wsgi # the virtualenv (full path) home = / django / TisaneMS / environment # process-related settings master master = true # maximum number of worker processes processes = 4 # \u591a\u7ebf\u7a0b\u652f\u6301 enable - threads = true # the socket (use the full path to be safe socket = / django / TisaneMS / mysite . sock # ... with appropriate permissions - may be needed chmod-socket = 664 clear environment on exit \u8fd0\u884c uwsgi : uwsgi --ini project_uwsgi.ini \u751f\u4ea7\u73af\u5883\u4e0b\u9700\u8981\u4f7f\u7528 nohup command & \u6216\u8005 supervisord \u6765\u8fd0\u884c\u8be5\u547d\u4ee4\u4ee5\u4fdd\u8bc1\u5176\u4e00\u76f4\u5904\u4e8e\u540e\u53f0\u8fd0\u884c\u7684\u72b6\u6001\u3002 Https\u652f\u6301 \u57fa\u7840\u914d\u7f6e\uff1a server { listen 80 ; listen [::]:80 ; server_name demo.example.com ; return 301 https:// $server_name$request_uri ; } server { listen 443 ; server_name demo.example.com ; ssl on ; ssl_certificate /etc/nginx/cert/materia_tisane_cn/1542222634451.pem ; ssl_certificate_key /etc/nginx/cert/materia_tisane_cn/1542222634451.key ; root /django/Materia_Web ; index index.html ; } \u5982\u679c\u63d0\u793akey\u4e0d\u5339\u914d\uff0c\u53ef\u4f7f\u7528openssl\u5de5\u5177\u6838\u5bf9\uff1a openssl x509 -noout -modulus -in demo.crt | openssl md5 openssl rsa -noout -modulus -in demo.key | openssl md5 \u5e76\u53d1 \u8bbe\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u4e3at(\u5355\u4f4d\u4e3a\u6beb\u79d2), \u5e76\u53d1\u91cf\u4e3ac\uff0c\u6bcf\u79d2\u5904\u7406\u8bf7\u6c42\u6570\u4e3aq\uff0c\u5219\uff1a q = ( 1000 / t ) * c \u8d1f\u8f7d\u5747\u8861 Nginx\u8d1f\u8f7d\u5747\u8861\u914d\u7f6e uwsgitop \u72b6\u6001\u76d1\u63a7 \u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u67e5\u770b uwsgi \u8fd0\u884c\u72b6\u6001\u7684\u63d2\u4ef6\uff0c\u8be6\u7ec6\u6587\u6863\u89c1 uwsgi at githb \u3002 Note \u53ef\u80fd\u9700\u8981\u4fee\u6539 /etc/nginx/nginx.conf \u4e2d\u7684 user \u81f3 root . Nginx\u548cuWsgi\u4e4b\u95f4\u6709Web Socket\u548cFile Socket\u4e24\u79cd\u901a\u8baf\u65b9\u6cd5\uff0c\u63a8\u8350\u4f7f\u7528File Socket\u3002 \u5168\u5c40\u5b89\u88c5uwsgi\u65f6\uff0c\u9700\u8981\u7248\u672c\u9ed8\u8ba4\u7684python\u7248\u672c\u548cvirtualenv\u5bf9\u5e94\u7684\u7248\u672c\u76f8\u540c\uff0c\u4e0d\u7136\u4f1a\u51fa\u73b0\u53ef\u4ee5\u5728virtualenv\u4e2d\u5f00\u542fuwsgi\u800c\u4e0d\u53ef\u5168\u5c40\u5f00\u542fuwsgi\u7684\u9519\u8bef\uff0c\u62a5\u9519\u4fe1\u606f\u4e3a\uff1a Traceback ( most recent call last ): File \"./TisaneMS/wsgi.py\" , line 12 , in < module > from django.core.wsgi import get_wsgi_application ImportError : No module named 'django' \u82e5\u5168\u5c40python\u7248\u672c\u548cvirtualenv\u5bf9\u5e94\u7684python\u7248\u672c\u4e0d\u540c\uff0c\u53ef\u7528\u4ee5\u4e0b\u547d\u4ee4\u6307\u5b9a\u5b89\u88c5\u65f6\u4f7f\u7528\u7684py\u7248\u672c\uff1a pip is bundled with Python > 3.4 On Unix-like systems use: python3.6 -m pip install [ Package_to_install ] On a Windows system use: py -m pip install [ Package_to_install ] \u53ef\u4ee5\u4f7f\u7528 uwsgi --python-version \u67e5\u770b\u5f53\u524d\u7f16\u8bd1 uwsgi \u4f7f\u7528\u7684 python \u7248\u672c \u5f00\u542f\u7ad9\u70b9\u4e00\u822c\u4f7f\u7528\u8f6f\u94fe\u63a5\u7684\u65b9\u5f0f\u5c06 sites-available \u76ee\u5f55\u4e0b\u7684conf\u6587\u4ef6\u94fe\u63a5\u5230 sites-enabled \u76ee\u5f55\u4e0b\u3002 ln -s /etc/nginx/sites-available/tisanepms_web.conf /etc/nginx/sites-enabled/ \u914d\u7f6e\u9759\u6001\u7f51\u7ad9(\u5982VUE) server { listen 80 ; server_name clinicis.tisane.cn ; root /django/TisanePMS_Web ; index index.html ; } uwsgi.ini\u53c2\u6570\u8bf4\u660e threads help: run each worker in prethreaded mode with the specified number of threads processes help: spawn the specified number of workers/processes \u5f00\u542f\u7ad9\u70b9\u65f6\u751f\u6210\u7684\u6587\u4ef6\u65e0\u6cd5\u8bfb\u53d6\uff08\u5e26\u4e2d\u6a2a\u7ebf\uff09 \u8def\u5f84\u5fc5\u987b\u7531\u6839\u76ee\u5f55\u5f00\u59cb sudo ln -s /etc/nginx/sites-available/materia_wechat.conf /etc/nginx/sites-enabled/ nginx\u914d\u7f6e\u5c5e\u6027 client_max_body_size 50m; \u9879\u662f\u7528\u4e8e\u8bbe\u7f6e http \u8bf7\u6c42\u7684 body \u6700\u5927\u5927\u5c0f\u3002\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u4e2d\u6709\u6587\u4ef6\u4e0a\u4f20\u7684\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6839\u636e\u81ea\u8eab\u60c5\u51b5\u6765\u8bbe\u7f6e\u5141\u8bb8\u4e0a\u4f20\u6587\u4ef6\u7684\u6700\u5927\u503c\u3002 invalid request block size: 4126 (max 4096) uwsgi\u8bbe\u7f6e buffer-size=32768\uff1b \uff0c\u8be6\u89c1 StackOverflow \u3002 \u79c1\u6709\u6587\u4ef6\u4fdd\u62a4 \u5982\u8be5\u6587\u4ef6\u5939\u540d\u79f0\u4e3a protected ,\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a file_path = os . path . join ( settings . BASE_DIR , 'protected/' ) file_name = os . path . join ( settings . BASE_DIR , 'protected/stock.xlsx' ) if not os . path . exists ( file_path ): os . mkdir ( file_path ) wb . save ( file_name ) wb . close () file = open ( file_name , 'rb' ) . read () if settings . DEBUG : response = HttpResponse ( file , content_type = 'application/force-download' ) else : response = HttpResponse ( content_type = 'application/force-download' ) response [ 'X-Accel-Redirect' ] = '/protected/stock.xlsx' response [ 'Content-Disposition' ] = 'attachment; filename= {} ' . format ( urlquote ( 'ExcelDemo.xlsx' )) return response Nginx\u914d\u7f6e\u4e3a\uff1a location /protected/ { internal ; alias /django/Materia/protected/ ; } \u82e5\u4e0b\u8f7d\u6587\u4ef6\u65f6\u51fa\u73b0CORS\u9519\u8bef\uff0cNginx\u914d\u7f6e\u8bf7\u4fee\u6539\u4e3a\uff1a location /protected/ { internal ; add_header Access-Control-Allow-Origin * ; alias /django/Materia/protected/ ; } \u4ee5\u5141\u8bb8\u8f6c\u53d1\u7684\u8bf7\u6c42\u5934\u8fdb\u884c\u8de8\u57df\u8bbf\u95ee\u3002 Access Log\u8bb0\u5f55\u8bf7\u6c42\u7528\u65f6 \u9ed8\u8ba4\u7684 log_format \u4e3a\uff1a log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; log_format \u53ef\u9009\u53c2\u6570\u5982\u4e0b\uff1a \u53c2\u6570 \u8bf4\u660e \u793a\u4f8b $remote_addr \u5ba2\u6237\u7aef\u5730\u5740 211.28.65.253 $remote_user \u5ba2\u6237\u7aef\u7528\u6237\u540d\u79f0 -- $time_local \u8bbf\u95ee\u65f6\u95f4\u548c\u65f6\u533a 18/Jul/2012:17:00:01 +0800 $request \u8bf7\u6c42\u7684URI\u548cHTTP\u534f\u8bae \"GET /article-10000.html HTTP/1.1\" $http_host \u8bf7\u6c42\u5730\u5740\uff0c\u5373\u6d4f\u89c8\u5668\u4e2d\u4f60\u8f93\u5165\u7684\u5730\u5740\uff08IP\u6216\u57df\u540d\uff09 www.wang.com 192.168.100.100 $status HTTP\u8bf7\u6c42\u72b6\u6001 200 $upstream_status upstream\u72b6\u6001 200 $body_bytes_sent \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u6587\u4ef6\u5185\u5bb9\u5927\u5c0f 1547 $http_referer url\u8df3\u8f6c\u6765\u6e90 https://www.baidu.com/ $http_user_agent \u7528\u6237\u7ec8\u7aef\u6d4f\u89c8\u5668\u7b49\u4fe1\u606f \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C; $ssl_protocol SSL\u534f\u8bae\u7248\u672c TLSv1 $ssl_cipher \u4ea4\u6362\u6570\u636e\u4e2d\u7684\u7b97\u6cd5 RC4-SHA $upstream_addr \u540e\u53f0upstream\u7684\u5730\u5740\uff0c\u5373\u771f\u6b63\u63d0\u4f9b\u670d\u52a1\u7684\u4e3b\u673a\u5730\u5740 10.10.10.100:80 $request_time \u6574\u4e2a\u8bf7\u6c42\u7684\u603b\u65f6\u95f4 0.205 $upstream_response_time \u8bf7\u6c42\u8fc7\u7a0b\u4e2d\uff0cupstream\u54cd\u5e94\u65f6\u95f4 0.002 \u4fee\u6539\u4e3a\uff1a log_format timed_combined '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $body_bytes_sent ' '\"$http_referer\" \"$http_user_agent\" ' '$request_time $upstream_response_time $pipe'; \u6700\u540e\u7684 Nginx \u914d\u7f6e\uff1a log_format timed_combined ' $remote_addr - $remote_user [ $time_local] ' '\" $request\" $status $body_bytes_sent ' '\" $http_referer\" \" $http_user_agent\" ' ' $request_time $upstream_response_time $pipe' ; # configuration of the server server { # the port your site will be served on listen 80 ; access_log /django/log/access.log timed_combined ; ... } \u8fd9\u6837\u5373\u53ef\u5728 access_log \u4e2d\u770b\u5230\u6b64\u6b21\u8bf7\u6c42\u7684\u5904\u7406\u65f6\u957f\u3002","title":"Nginx+uWsgi\u90e8\u7f72Django"},{"location":"python/django/nginx-uwsgi/#nginx-vs-apache","text":"Nginx(\u9002\u5408\u7f51\u7edc\u5bc6\u96c6\u578b)\u662f\u4e8b\u4ef6\u9a71\u52a8\u578b\uff0c\u5f53\u5176\u5728\u7cfb\u7edf\u8d44\u6e90\u4e0d\u53ef\u7528\u65f6\uff0c\u5bf9\u5e94\u7684\u8fdb\u7a0b\u5c06\u88ab\u6302\u8d77\u76f4\u81f3\u7cfb\u7edf\u8d44\u6e90\u53ef\u7528\u65f6\u624d\u4f1a\u88ab\u5524\u9192(\u5f02\u6b65\u975e\u963b\u585e)\u3002\u800cApache(\u9002\u5408\u8ba1\u7b97\u5bc6\u96c6\u578b)\u5728\u7cfb\u7edf\u8d44\u6e90\u4e0d\u53ef\u7528\u65f6\uff0c\u5c06\u4e00\u76f4\u7b49\u5f85\u76f4\u81f3\u7cfb\u7edf\u8d44\u6e90\u53ef\u7528(\u963b\u585e\u578b)\u3002\u8fd9\u5c06\u5bfc\u81f4Apache\u5bf9\u6bd4Nginx\u4f1a\u6709\u66f4\u5927\u7684\u5185\u5b58\u5360\u7528\u3001\u66f4\u5c11\u7684\u5e76\u53d1\u91cf\u652f\u6301\u3002 Why nginx is faster than Apache, and why you needn\u2019t necessarily care","title":"Nginx vs Apache"},{"location":"python/django/nginx-uwsgi/#_1","text":"sudo apt - get install nginx sudo apt - get install python3 - pip # pip3 install uwsgi python3 .6 - m pip install uwsgi","title":"\u5b89\u88c5"},{"location":"python/django/nginx-uwsgi/#_2","text":"\u62f7\u8d1d uwsgi_params \uff1a #\u5c06uwsgi_params\u62f7\u8d1d\u5230django\u9879\u76ee\u6587\u4ef6\u5939\u4e0b cp / etc / nginx / uwsgi_params project_folder / django / project_nginx.conf \uff1a # the upstream component nginx needs to connect to upstream django { server unix : /// django / TisaneMS / mysite . sock ; # for a file socket #server 127.0.0.1:8001; # for a web port socket (we'll use this first) } # configuration of the server server { # the port your site will be served on listen 8000 ; # the domain name it will serve for server_name 192.168.1.2 ; # substitute your machine's IP address or FQDN charset utf - 8 ; # max upload size client_max_body_size 75 M ; # adjust to taste # Django media location / media { alias / django / TisaneMS / media ; # your Django project's media files - amend as required } location / static { alias / django / TisaneMS / static ; # your Django project's static files - amend as required } # Finally, send all non-media requests to the Django server. location / { uwsgi_pass django ; include / django / TisaneMS / uwsgi_params ; # the uwsgi_params file you installed } } \u4f7f\u7528\u8f6f\u94fe\u63a5\u5f00\u542f\u7ad9\u70b9\uff1a sudo ln -s /path/to/your/mysite/project_nginx.conf /etc/nginx/sites-enabled/ \u914d\u7f6e\u6587\u4ef6 project_uwsgi.ini \uff1a [ uwsgi ] # Django-related settings the base directory (full path) chdir = / django / TisaneMS # Django's wsgi file module = TisaneMS . wsgi # the virtualenv (full path) home = / django / TisaneMS / environment # process-related settings master master = true # maximum number of worker processes processes = 4 # \u591a\u7ebf\u7a0b\u652f\u6301 enable - threads = true # the socket (use the full path to be safe socket = / django / TisaneMS / mysite . sock # ... with appropriate permissions - may be needed chmod-socket = 664 clear environment on exit \u8fd0\u884c uwsgi : uwsgi --ini project_uwsgi.ini \u751f\u4ea7\u73af\u5883\u4e0b\u9700\u8981\u4f7f\u7528 nohup command & \u6216\u8005 supervisord \u6765\u8fd0\u884c\u8be5\u547d\u4ee4\u4ee5\u4fdd\u8bc1\u5176\u4e00\u76f4\u5904\u4e8e\u540e\u53f0\u8fd0\u884c\u7684\u72b6\u6001\u3002","title":"\u914d\u7f6e"},{"location":"python/django/nginx-uwsgi/#https","text":"\u57fa\u7840\u914d\u7f6e\uff1a server { listen 80 ; listen [::]:80 ; server_name demo.example.com ; return 301 https:// $server_name$request_uri ; } server { listen 443 ; server_name demo.example.com ; ssl on ; ssl_certificate /etc/nginx/cert/materia_tisane_cn/1542222634451.pem ; ssl_certificate_key /etc/nginx/cert/materia_tisane_cn/1542222634451.key ; root /django/Materia_Web ; index index.html ; } \u5982\u679c\u63d0\u793akey\u4e0d\u5339\u914d\uff0c\u53ef\u4f7f\u7528openssl\u5de5\u5177\u6838\u5bf9\uff1a openssl x509 -noout -modulus -in demo.crt | openssl md5 openssl rsa -noout -modulus -in demo.key | openssl md5","title":"Https\u652f\u6301"},{"location":"python/django/nginx-uwsgi/#_3","text":"\u8bbe\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u4e3at(\u5355\u4f4d\u4e3a\u6beb\u79d2), \u5e76\u53d1\u91cf\u4e3ac\uff0c\u6bcf\u79d2\u5904\u7406\u8bf7\u6c42\u6570\u4e3aq\uff0c\u5219\uff1a q = ( 1000 / t ) * c","title":"\u5e76\u53d1"},{"location":"python/django/nginx-uwsgi/#_4","text":"Nginx\u8d1f\u8f7d\u5747\u8861\u914d\u7f6e","title":"\u8d1f\u8f7d\u5747\u8861"},{"location":"python/django/nginx-uwsgi/#uwsgitop","text":"\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u67e5\u770b uwsgi \u8fd0\u884c\u72b6\u6001\u7684\u63d2\u4ef6\uff0c\u8be6\u7ec6\u6587\u6863\u89c1 uwsgi at githb \u3002","title":"uwsgitop\u72b6\u6001\u76d1\u63a7"},{"location":"python/django/nginx-uwsgi/#note","text":"\u53ef\u80fd\u9700\u8981\u4fee\u6539 /etc/nginx/nginx.conf \u4e2d\u7684 user \u81f3 root . Nginx\u548cuWsgi\u4e4b\u95f4\u6709Web Socket\u548cFile Socket\u4e24\u79cd\u901a\u8baf\u65b9\u6cd5\uff0c\u63a8\u8350\u4f7f\u7528File Socket\u3002 \u5168\u5c40\u5b89\u88c5uwsgi\u65f6\uff0c\u9700\u8981\u7248\u672c\u9ed8\u8ba4\u7684python\u7248\u672c\u548cvirtualenv\u5bf9\u5e94\u7684\u7248\u672c\u76f8\u540c\uff0c\u4e0d\u7136\u4f1a\u51fa\u73b0\u53ef\u4ee5\u5728virtualenv\u4e2d\u5f00\u542fuwsgi\u800c\u4e0d\u53ef\u5168\u5c40\u5f00\u542fuwsgi\u7684\u9519\u8bef\uff0c\u62a5\u9519\u4fe1\u606f\u4e3a\uff1a Traceback ( most recent call last ): File \"./TisaneMS/wsgi.py\" , line 12 , in < module > from django.core.wsgi import get_wsgi_application ImportError : No module named 'django' \u82e5\u5168\u5c40python\u7248\u672c\u548cvirtualenv\u5bf9\u5e94\u7684python\u7248\u672c\u4e0d\u540c\uff0c\u53ef\u7528\u4ee5\u4e0b\u547d\u4ee4\u6307\u5b9a\u5b89\u88c5\u65f6\u4f7f\u7528\u7684py\u7248\u672c\uff1a pip is bundled with Python > 3.4 On Unix-like systems use: python3.6 -m pip install [ Package_to_install ] On a Windows system use: py -m pip install [ Package_to_install ] \u53ef\u4ee5\u4f7f\u7528 uwsgi --python-version \u67e5\u770b\u5f53\u524d\u7f16\u8bd1 uwsgi \u4f7f\u7528\u7684 python \u7248\u672c \u5f00\u542f\u7ad9\u70b9\u4e00\u822c\u4f7f\u7528\u8f6f\u94fe\u63a5\u7684\u65b9\u5f0f\u5c06 sites-available \u76ee\u5f55\u4e0b\u7684conf\u6587\u4ef6\u94fe\u63a5\u5230 sites-enabled \u76ee\u5f55\u4e0b\u3002 ln -s /etc/nginx/sites-available/tisanepms_web.conf /etc/nginx/sites-enabled/ \u914d\u7f6e\u9759\u6001\u7f51\u7ad9(\u5982VUE) server { listen 80 ; server_name clinicis.tisane.cn ; root /django/TisanePMS_Web ; index index.html ; } uwsgi.ini\u53c2\u6570\u8bf4\u660e threads help: run each worker in prethreaded mode with the specified number of threads processes help: spawn the specified number of workers/processes \u5f00\u542f\u7ad9\u70b9\u65f6\u751f\u6210\u7684\u6587\u4ef6\u65e0\u6cd5\u8bfb\u53d6\uff08\u5e26\u4e2d\u6a2a\u7ebf\uff09 \u8def\u5f84\u5fc5\u987b\u7531\u6839\u76ee\u5f55\u5f00\u59cb sudo ln -s /etc/nginx/sites-available/materia_wechat.conf /etc/nginx/sites-enabled/ nginx\u914d\u7f6e\u5c5e\u6027 client_max_body_size 50m; \u9879\u662f\u7528\u4e8e\u8bbe\u7f6e http \u8bf7\u6c42\u7684 body \u6700\u5927\u5927\u5c0f\u3002\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u4e2d\u6709\u6587\u4ef6\u4e0a\u4f20\u7684\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6839\u636e\u81ea\u8eab\u60c5\u51b5\u6765\u8bbe\u7f6e\u5141\u8bb8\u4e0a\u4f20\u6587\u4ef6\u7684\u6700\u5927\u503c\u3002 invalid request block size: 4126 (max 4096) uwsgi\u8bbe\u7f6e buffer-size=32768\uff1b \uff0c\u8be6\u89c1 StackOverflow \u3002 \u79c1\u6709\u6587\u4ef6\u4fdd\u62a4 \u5982\u8be5\u6587\u4ef6\u5939\u540d\u79f0\u4e3a protected ,\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a file_path = os . path . join ( settings . BASE_DIR , 'protected/' ) file_name = os . path . join ( settings . BASE_DIR , 'protected/stock.xlsx' ) if not os . path . exists ( file_path ): os . mkdir ( file_path ) wb . save ( file_name ) wb . close () file = open ( file_name , 'rb' ) . read () if settings . DEBUG : response = HttpResponse ( file , content_type = 'application/force-download' ) else : response = HttpResponse ( content_type = 'application/force-download' ) response [ 'X-Accel-Redirect' ] = '/protected/stock.xlsx' response [ 'Content-Disposition' ] = 'attachment; filename= {} ' . format ( urlquote ( 'ExcelDemo.xlsx' )) return response Nginx\u914d\u7f6e\u4e3a\uff1a location /protected/ { internal ; alias /django/Materia/protected/ ; } \u82e5\u4e0b\u8f7d\u6587\u4ef6\u65f6\u51fa\u73b0CORS\u9519\u8bef\uff0cNginx\u914d\u7f6e\u8bf7\u4fee\u6539\u4e3a\uff1a location /protected/ { internal ; add_header Access-Control-Allow-Origin * ; alias /django/Materia/protected/ ; } \u4ee5\u5141\u8bb8\u8f6c\u53d1\u7684\u8bf7\u6c42\u5934\u8fdb\u884c\u8de8\u57df\u8bbf\u95ee\u3002 Access Log\u8bb0\u5f55\u8bf7\u6c42\u7528\u65f6 \u9ed8\u8ba4\u7684 log_format \u4e3a\uff1a log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; log_format \u53ef\u9009\u53c2\u6570\u5982\u4e0b\uff1a \u53c2\u6570 \u8bf4\u660e \u793a\u4f8b $remote_addr \u5ba2\u6237\u7aef\u5730\u5740 211.28.65.253 $remote_user \u5ba2\u6237\u7aef\u7528\u6237\u540d\u79f0 -- $time_local \u8bbf\u95ee\u65f6\u95f4\u548c\u65f6\u533a 18/Jul/2012:17:00:01 +0800 $request \u8bf7\u6c42\u7684URI\u548cHTTP\u534f\u8bae \"GET /article-10000.html HTTP/1.1\" $http_host \u8bf7\u6c42\u5730\u5740\uff0c\u5373\u6d4f\u89c8\u5668\u4e2d\u4f60\u8f93\u5165\u7684\u5730\u5740\uff08IP\u6216\u57df\u540d\uff09 www.wang.com 192.168.100.100 $status HTTP\u8bf7\u6c42\u72b6\u6001 200 $upstream_status upstream\u72b6\u6001 200 $body_bytes_sent \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u6587\u4ef6\u5185\u5bb9\u5927\u5c0f 1547 $http_referer url\u8df3\u8f6c\u6765\u6e90 https://www.baidu.com/ $http_user_agent \u7528\u6237\u7ec8\u7aef\u6d4f\u89c8\u5668\u7b49\u4fe1\u606f \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C; $ssl_protocol SSL\u534f\u8bae\u7248\u672c TLSv1 $ssl_cipher \u4ea4\u6362\u6570\u636e\u4e2d\u7684\u7b97\u6cd5 RC4-SHA $upstream_addr \u540e\u53f0upstream\u7684\u5730\u5740\uff0c\u5373\u771f\u6b63\u63d0\u4f9b\u670d\u52a1\u7684\u4e3b\u673a\u5730\u5740 10.10.10.100:80 $request_time \u6574\u4e2a\u8bf7\u6c42\u7684\u603b\u65f6\u95f4 0.205 $upstream_response_time \u8bf7\u6c42\u8fc7\u7a0b\u4e2d\uff0cupstream\u54cd\u5e94\u65f6\u95f4 0.002 \u4fee\u6539\u4e3a\uff1a log_format timed_combined '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $body_bytes_sent ' '\"$http_referer\" \"$http_user_agent\" ' '$request_time $upstream_response_time $pipe'; \u6700\u540e\u7684 Nginx \u914d\u7f6e\uff1a log_format timed_combined ' $remote_addr - $remote_user [ $time_local] ' '\" $request\" $status $body_bytes_sent ' '\" $http_referer\" \" $http_user_agent\" ' ' $request_time $upstream_response_time $pipe' ; # configuration of the server server { # the port your site will be served on listen 80 ; access_log /django/log/access.log timed_combined ; ... } \u8fd9\u6837\u5373\u53ef\u5728 access_log \u4e2d\u770b\u5230\u6b64\u6b21\u8bf7\u6c42\u7684\u5904\u7406\u65f6\u957f\u3002","title":"Note"},{"location":"python/django/order-id/","text":"\u8fc4\u4eca\u4e3a\u6b62\u5728\u9879\u76ee\u4e2d\u9047\u5230\u4e09\u79cd\u8ba2\u5355\u7f16\u53f7\u751f\u6210\u9700\u6c42\uff0c\u5206\u522b\u7528\u4e8e\u4e0d\u540c\u7684\u73af\u5883\u3002 \u9700\u6c42\u4e00 \u8ba2\u5355\u53f7\u89c4\u5219\u4e3a\u524d\u7f00+\u5c3e\u7f00\uff0c\u524d\u7f00\u53ef\u4ee5\u52a8\u6001\u4fee\u6539\uff0c\u5c3e\u7f00\u4e3a3\u52305\u4f4d\u9012\u589e\u6570\u5b57\u3002\u8fd9\u79cd\u89c4\u5219\u5e38\u7528\u4e8e\u5458\u5de5\u3001\u8bbe\u5907\u7b49\u8303\u56f4\u8f83\u5c0f\u7684\u7f16\u53f7\u3002 \u9700\u8981\u501f\u52a9\u4e00\u4e2a\u5e8f\u53f7\u751f\u6210\u5668\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u63a8\u8350\u4f7f\u7528 django-sequences \u3002\u672c\u6587\u5e76\u672a\u76f4\u63a5\u4f7f\u7528 django-sequences \uff0c\u800c\u662f\u5bf9\u5176\u8fdb\u884c\u6539\u9020\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a models.py \"\"\" \u53c2\u8003 \u5e93django-sequences \u5730\u5740:https://github.com/aaugustin/django-sequences \"\"\" from django.db import models # \u5e8f\u5217\u5668 class Sequence ( models . Model ): # \u540d\u79f0 name = models . CharField ( max_length = 255 , primary_key = True , verbose_name = '\u540d\u79f0' ) # \u6700\u8fd1\u503c last = models . PositiveIntegerField ( verbose_name = '\u6700\u8fd1\u503c' ) # \u65f6\u95f4 time = models . DateTimeField ( verbose_name = '\u65f6\u95f4' ) class Meta : verbose_name = '\u5e8f\u5217\u5668' verbose_name_plural = '\u5e8f\u5217\u5668' def __str__ ( self ): return '[ {} ] name= {} last= {} ' . format ( self . time , self . name , self . last ) utils.py: def get_next_value ( sequence_name ): now = timezone . now () sequence , created = Sequence . objects . get_or_create ( name = sequence_name , defaults = { 'last' : 0 , 'time' : now }) # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u6700\u65b0\u503c sequence . last += 1 sequence . time = now sequence . save () return sequence . last def get_next_no ( sequence_name , suffix_format , prefix = None ): now = timezone . now () sequence , created = Sequence . objects . get_or_create ( name = sequence_name , defaults = { 'last' : 0 , 'time' : now }) # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u6700\u65b0\u503c next_value = sequence . last + 1 # \u5c3e\u7f00 if suffix_format == 1 : suffix = ' {:01} ' . format ( next_value ) elif suffix_format == 2 : suffix = ' {:02} ' . format ( next_value ) elif suffix_format == 3 : suffix = ' {:03} ' . format ( next_value ) elif suffix_format == 4 : suffix = ' {:04} ' . format ( next_value ) elif suffix_format == 5 : suffix = ' {:05} ' . format ( next_value ) else : suffix = ' {} ' . format ( next_value ) # \u751f\u6210\u7f16\u53f7 if prefix is not None : no = ' {}{} ' . format ( prefix , suffix ) else : no = suffix # \u66f4\u65b0\u5e8f\u5217\u5668 sequence . last += 1 sequence . time = now sequence . save () return no \u4f7f\u7528DRF\u65b0\u589e\u65f6\uff0c\u5e8f\u53f7\u4ea7\u751f\u65b9\u6cd5\u5982\u4e0b\uff1a constance.py: STAFF_PREFIX = 'staff_prefix' STAFF_SUFFIX = 'staff_suffix' CONSTANCE_CONFIG = OrderedDict ([ # \u5de5\u53f7 ( STAFF_PREFIX , ( 'Staff' , '\u5de5\u53f7\u56fa\u5b9a\u4ee3\u7801' )), ( STAFF_SUFFIX , ( 3 , '\u5de5\u53f7\u5c3e\u7f00' , 'suffix_select' )), ]) CONSTANCE_CONFIG_FIELDSETS = OrderedDict ([ ( '\u5458\u5de5' , ( STAFF_PREFIX , STAFF_SUFFIX )), ]) models.py # \u5458\u5de5 class Staff ( models . Model ): # \u5de5\u53f7 no = models . CharField ( max_length = 255 , unique = True , verbose_name = '\u5de5\u53f7' ) serializers.py # \u521b\u5efa\u5458\u5de5 class StaffCreateSerializer ( ModelSerializer ): no = None def validate ( self , data ): suffix_format = int ( get_value ( settings . STAFF_SUFFIX )) self . no = get_next_no ( 'staff' , suffix_format , prefix = get_value ( settings . STAFF_PREFIX )) while self . Meta . model . objects . filter ( no = self . no ) . exists (): self . no = get_next_no ( 'staff' , suffix_format , prefix = get_value ( settings . STAFF_PREFIX )) return data class Meta : model = Staff fields = ( 'job_state' , 'bank_no' , 'social_security_no' , 'on_job' ) views.py: # \u5458\u5de5 class StaffViewSet ( ModelViewSet ): ... def perform_create ( self , serializer ): return serializer . save ( no = serializer . no ) \u6574\u4f53\u601d\u8def\u4e3a\u4f7f\u7528\u5e8f\u53f7\u751f\u6210\u5668\u8bb0\u5f55\u5f53\u524d\u751f\u6210\u5230\u7684\u7f16\u53f7\uff0c\u4e4b\u540e\u6bcf\u6b21\u751f\u6210\u7f16\u53f7\u65f6\uff0c\u90fd\u8ba9\u5e8f\u53f7\u751f\u6210\u5668\u7ee7\u7eed\u751f\u6210\u4e0b\u4e00\u4e2a\u7f16\u53f7\uff0c\u82e5\u4e0b\u4e00\u4e2a\u7f16\u53f7\u672a\u88ab\u4f7f\u7528\uff0c\u5219\u4f7f\u7528\u8be5\u5e8f\u53f7\u4f5c\u4e3a\u5f53\u524d\u5b9e\u4f8b\u7684\u7f16\u53f7\u3002\u5e8f\u53f7\u751f\u6210\u9700\u8981\u5728 validate \u4e2d\u6700\u540e\u8fdb\u884c\uff0c\u4ee5\u514d\u53d1\u751f\u5e8f\u53f7\u751f\u6210\u6210\u529f\u800c validate \u672a\u901a\u8fc7\u5bfc\u81f4\u7684\u7f16\u53f7\u6d6a\u8d39\u95ee\u9898\u3002\u7f16\u53f7\u751f\u6210\u6210\u529f\u65f6\uff0c\u5728 serializer.save() \u65f6\u4fdd\u5b58\u81f3\u5b9e\u4f8b\u4e2d\u3002 \u9700\u6c42\u4e8c \u8ba2\u5355\u53f7\u89c4\u5219\u4e3a \u524d\u7f00+\u65e5\u671f+\u65f6\u95f4+\u5c3e\u7f00\uff0c\u524d\u7f00\u8981\u6c42\u4e3a\u53ef\u52a8\u6001\u4fee\u6539\uff0c\u65e5\u671f\u9009\u9879\u6709(\"\u5e74+\u6708+\u65e5\", \"\u5e74+\u6708\", \"\u5e74\", \"\u5ffd\u7565\")\uff0c\u65f6\u95f4\u9009\u9879\u6709(\"\u65f6+\u5206+\u79d2\", \"\u65f6+\u5206\", \"\u65f6\", \"\u5ffd\u7565\")\uff0c\u5c3e\u7f00\u4e3a3\u52305\u4f4d\u6570\u5b57\u5e76\u4e14\u6bcf\u5929\u4ece1\u5f00\u59cb\u56de\u6eda\u3002 constance.py: CONSTANCE_ADDITIONAL_FIELDS = { 'date_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"\u5e74+\u6708+\u65e5\" ), ( 1 , \"\u5e74+\u6708\" ), ( 2 , \"\u5e74\" ), ( 3 , \"\u5ffd\u7565\" )) }], 'time_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"\u65f6+\u5206+\u79d2\" ), ( 1 , \"\u65f6+\u5206\" ), ( 2 , \"\u65f6\" ), ( 3 , \"\u5ffd\u7565\" )) }], 'suffix_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"3\u4f4d\u6570\u5b57\" ), ( 1 , \"4\u4f4d\u6570\u5b57\" ), ( 2 , \"5\u4f4d\u6570\u5b57\" )) }], } BALANCE_RECHARGE_FIX_CODE = 'balance_recharge_fix_code' BALANCE_RECHARGE_DATE_FORMAT = 'balance_recharge_date_format' BALANCE_RECHARGE_TIME_FORMAT = 'balance_recharge_time_format' BALANCE_RECHARGE_SUFFIX = 'balance_recharge_time_suffix' CONSTANCE_CONFIG = OrderedDict ([ # \u4f59\u989d\u5145\u503c ( BALANCE_RECHARGE_FIX_CODE , ( 'YE-CZ' , BALANCE_RECHARGE_FIX_CODE )), ( BALANCE_RECHARGE_DATE_FORMAT , ( 0 , BALANCE_RECHARGE_DATE_FORMAT , 'date_select' )), ( BALANCE_RECHARGE_TIME_FORMAT , ( 0 , BALANCE_RECHARGE_TIME_FORMAT , 'time_select' )), ( BALANCE_RECHARGE_SUFFIX , ( 0 , BALANCE_RECHARGE_SUFFIX , 'suffix_select' )), ]) CONSTANCE_CONFIG_FIELDSETS = OrderedDict ([ ( '\u8d22\u52a1' , ( BALANCE_RECHARGE_FIX_CODE , BALANCE_RECHARGE_DATE_FORMAT , BALANCE_RECHARGE_TIME_FORMAT , BALANCE_RECHARGE_SUFFIX )), ]) models.py from datetime import datetime # \u4f59\u989d\u5145\u503c class BalanceRecharge ( models . Model ): # \u7f16\u53f7 no = models . CharField ( unique = True , max_length = 255 , null = True , blank = True , verbose_name = u '\u7f16\u53f7' ) # \u7f16\u53f7\u5c3e\u7f00 no_suffix = models . PositiveIntegerField ( default = 0 , null = True , blank = True , verbose_name = u '\u7f16\u53f7\u5c3e\u7f00' ) def save ( self , * args , ** kwargs ): if not self . pk : # \u6839\u636e\u56fa\u5b9a\u4ee3\u7801-\u65f6\u95f4\u683c\u5f0f\u751f\u6210\u7f16\u53f7\u524d\u7f00 date_format = int ( get_value ( settings . BALANCE_RECHARGE_DATE_FORMAT )) time_format = int ( get_value ( settings . BALANCE_RECHARGE_TIME_FORMAT )) formatted_datetime = no_format_datetime ( date_format , time_format ) no = ' {}{} ' . format ( get_value ( settings . BALANCE_RECHARGE_FIX_CODE ), formatted_datetime ) # \u751f\u6210\u5f53\u5929\u7684\u9012\u589e\u7f16\u53f7\u5c3e\u7f00 first = BalanceRecharge . objects . filter ( create_time__day = datetime . now () . day ) . order_by ( '-no_suffix' ) . first () if first : current_no_suffix = first . no_suffix if first . no_suffix else 0 else : current_no_suffix = 0 self . no_suffix = current_no_suffix + 1 # \u6839\u636e\u524d\u7f00\u548c\u540e\u7f00\u6570\u5b57\u663e\u793a\u4e2a\u6570\u751f\u6210\u7f16\u53f7 suffix_format = int ( get_value ( settings . BALANCE_RECHARGE_SUFFIX )) no_suffix = no_format_suffix ( self . no_suffix , suffix_format ) self . no = ' {}{} ' . format ( self . no , no_suffix ) return super ( BalanceRecharge , self ) . save ( * args , ** kwargs ) utils.py: def no_format_datetime ( date_format , time_format ): \"\"\" :param date_format: 0 \u5e74\u6708\u65e5 1 \u5e74\u6708 2 \u5e74 :param time_format: 0 \u65f6\u5206\u79d2 2 \u65f6\u5206 3 \u65f6 :return: \u5bf9\u5e94\u65f6\u95f4\u683c\u5f0f\u7684\u7f16\u53f7\u7247\u6bb5 \"\"\" now = datetime . now () # \u65e5\u671f if date_format == 0 : time_data = now . strftime ( '%Y%m %d ' ) elif date_format == 1 : time_data = now . strftime ( '%Y%m' ) elif date_format == 2 : time_data = now . strftime ( '%Y' ) else : time_data = '' # \u65f6\u95f4 if time_format == 0 : time_time = now . strftime ( '%H%M%S' ) elif time_format == 1 : time_time = now . strftime ( '%H%M' ) elif time_format == 2 : time_time = now . strftime ( '%H' ) else : time_time = '' return ' {}{} ' . format ( time_data , time_time ) def no_format_suffix ( no_suffix , suffix_format ): \"\"\" :param no_suffix: \u539f\u7f16\u53f7\u5c3e\u7f00 :param suffix_format: \u5c3e\u7f00\u683c\u5f0f 0-3\u4f4d\u6570\u5b57 1-4\u4f4d\u6570\u5b57 2-5\u4f4d\u6570\u5b57 :return: \u5bf9\u5e94\u683c\u5f0f\u7684\u7f16\u53f7\u5c3e\u7f00 \"\"\" if suffix_format == 0 : no_suffix = ' {:03} ' . format ( no_suffix ) elif suffix_format == 1 : no_suffix = ' {:04} ' . format ( no_suffix ) elif suffix_format == 2 : no_suffix = ' {:05} ' . format ( no_suffix ) else : no_suffix = ' {:04} ' . format ( no_suffix ) return no_suffix \u6574\u4f53\u601d\u8def\u4e3a\u8bbe\u7f6e\u5c3e\u7f00\u4e3a int \u7c7b\u578b\uff0c\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u751f\u6210\u7684\u4e3a\u5f53\u5929\u7b2c\u591a\u5c11\u4e2a\u8ba2\u5355\u3002\u5728\u5b9e\u4f8b\u88ab\u521b\u5efa\u65f6\uff0c\u5148\u83b7\u53d6\u524d\u7f00\u548c\u65f6\u95f4\u683c\u5f0f\u8fdb\u884c\u62fc\u63a5\uff0c\u518d\u67e5\u8be2\u5f53\u5929\u751f\u6210\u7684\u5c3e\u7f00\u6700\u5927\u503c\uff0c\u5c06\u5c3e\u7f00\u52a0\u4e00\u4f5c\u4e3a\u672c\u5b9e\u4f8b\u7684\u5c3e\u7f00\u3002\u518d\u683c\u5f0f\u5316\u5c3e\u7f00\u5230\u76f8\u5e94\u7684\u683c\u5f0f\uff0c\u7528\u524d\u7f00+\u65e5\u671f\u65f6\u95f4+\u5c3e\u7f00\u5373\u53ef\u5f97\u5230\u5f53\u524d\u8ba2\u5355\u53f7\u3002 \u9700\u6c42\u4e09 \u8ba2\u5355\u53f7\u89c4\u5219\u4e3a \u524d\u7f00+\u65e5\u671f\u65f6\u95f4+\u5c3e\u7f00\uff0c\u524d\u7f00\u8981\u6c42\u4e3a\u53ef\u52a8\u6001\u4fee\u6539\uff0c\u65e5\u671f\u65f6\u95f4\u9009\u9879\u6709(\"\u5e74\", \"\u6708\", \"\u65e5\", \"\u65f6\", \"\u5206\", \"\u79d2\")\uff0c\u5c3e\u7f00\u4e3a3\u52305\u4f4d\u6570\u5b57\uff0c\u5c3e\u7f00\u6839\u636e\u65e5\u671f\u65f6\u95f4\u9009\u9879\u7684\u7cbe\u5ea6\u6765\u5224\u65ad\u65f6\u5019\u56de\u6eda\u3002\u5982\u65e5\u671f\u65f6\u95f4\u9009\u62e9\u4e86\u65e5\uff0c\u5219\u5c3e\u7f00\u6bcf\u5929\u4ece1\u56de\u6eda\uff1b\u82e5\u65e5\u671f\u65f6\u95f4\u9009\u62e9\u4e86\u5206\uff0c\u5219\u5c3e\u7f00\u6bcf\u5206\u949f\u4ece1\u56de\u6eda\uff0c\u82e5\u5f53\u524d\u5206\u949f\u5c3e\u7f00\u751f\u6210\u81f35\uff0c\u4e0b\u4e00\u5206\u949f\u5c3e\u7f00\u4f9d\u65e7\u91cd\u65b0\u4ece1\u5f00\u59cb\u8ba1\u7b97\u3002 constances.py CONSTANCE_ADDITIONAL_FIELDS = { 'datetime_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"\u5e74\" ), ( 1 , \"\u6708\" ), ( 2 , \"\u65e5\" ), ( 3 , \"\u65f6\" ), ( 4 , \"\u5206\" ), ( 5 , \"\u79d2\" )) }], 'suffix_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 3 , \"3\u4f4d\u6570\u5b57\" ), ( 4 , \"4\u4f4d\u6570\u5b57\" ), ( 5 , \"5\u4f4d\u6570\u5b57\" )) }], } ALLOT_PREFIX = 'allot_prefix' ALLOT_DATETIME = 'allot_datetime' ALLOT_SUFFIX = 'allot_suffix' CONSTANCE_CONFIG = OrderedDict ([ # \u8c03\u62e8\u7ba1\u7406 ( ALLOT_PREFIX , ( 'Allot' , '\u8c03\u62e8\u7ba1\u7406\u56fa\u5b9a\u4ee3\u7801' )), ( ALLOT_DATETIME , ( 4 , '\u8c03\u62e8\u7ba1\u7406\u65f6\u95f4' , 'datetime_select' )), ( ALLOT_SUFFIX , ( 3 , '\u8c03\u62e8\u7ba1\u7406\u5c3e\u7f00' , 'suffix_select' )), ]) CONSTANCE_CONFIG_FIELDSETS = OrderedDict ([ ( '\u8c03\u62e8\u7533\u8bf7' , ( ALLOT_APPLY_PREFIX , ALLOT_APPLY_DATETIME , ALLOT_APPLY_SUFFIX )), ]) models.py # \u8c03\u62e8\u7533\u8bf7 class AllotApply ( models . Model ): # \u4e1a\u52a1\u5355\u53f7 no = models . CharField ( max_length = 255 , unique = True , verbose_name = '\u4e1a\u52a1\u5355\u53f7' ) serializers.py # \u521b\u5efa\u8c03\u62e8\u7533\u8bf7 class AllotApplyCreateSerializer ( ModelSerializer ): no = None def validate ( self , data ): prefix = get_value ( settings . ALLOT_APPLY_PREFIX ) datetime_format = int ( get_value ( settings . ALLOT_APPLY_DATETIME )) suffix_format = int ( get_value ( settings . ALLOT_APPLY_SUFFIX )) self . no = get_next_no ( 'allot_apply' , suffix_format , prefix = prefix , datetime_format = datetime_format ) return data class Meta : model = AllotApply views.py: # \u8c03\u62e8\u7533\u8bf7 class AllotApplyViewSet ( ModelViewSet ): ... # \u6267\u884c\u65b0\u589e def perform_create ( self , serializer ): return serializer . save ( no = serializer . no ) utils.py def get_next_value ( sequence_name ): now = timezone . now () sequence , created = Sequence . objects . get_or_create ( name = sequence_name , defaults = { 'last' : 0 , 'time' : now }) # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u6700\u65b0\u503c sequence . last += 1 sequence . time = now sequence . save () return sequence . last def get_next_no ( sequence_name , suffix_format , prefix = None , datetime_format = None ): now = timezone . now () new_period = False datetime_str = None sequence , created = Sequence . objects . get_or_create ( name = sequence_name , defaults = { 'last' : 0 , 'time' : now }) if datetime_format is not None : # \u662f\u5426\u5728\u540c\u4e00\u65f6\u95f4\u5468\u671f if datetime_format == 0 : datetime_str = now . strftime ( '%Y' ) if now . year != sequence . time . year : new_period = True elif datetime_format == 1 : datetime_str = now . strftime ( '%Y%m' ) if ( now . year != sequence . time . year ) or ( now . month != sequence . time . month ): new_period = True elif datetime_format == 2 : datetime_str = now . strftime ( '%Y%m %d ' ) if now . date () != sequence . time . date (): new_period = True elif datetime_format == 3 : datetime_str = now . strftime ( '%Y%m %d %H' ) if ( now . date () != sequence . time . date ()) or ( now . hour != sequence . time . hour ): new_period = True elif datetime_format == 4 : datetime_str = now . strftime ( '%Y%m %d %H%M' ) if ( now . date () != sequence . time . date ()) or ( now . hour != sequence . time . hour ) or \\ ( now . minute != sequence . time . minute ): new_period = True elif datetime_format == 5 : datetime_str = now . strftime ( '%Y%m %d %H%M%S' ) if ( now . date () != sequence . time . date ()) or ( now . hour != sequence . time . hour ) or \\ ( now . minute != sequence . time . minute ) or ( now . second != sequence . time . second ): new_period = True # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u6700\u65b0\u503c next_value = 1 if new_period else sequence . last + 1 # \u5c3e\u7f00 if suffix_format == 1 : suffix = ' {:01} ' . format ( next_value ) elif suffix_format == 2 : suffix = ' {:02} ' . format ( next_value ) elif suffix_format == 3 : suffix = ' {:03} ' . format ( next_value ) elif suffix_format == 4 : suffix = ' {:04} ' . format ( next_value ) elif suffix_format == 5 : suffix = ' {:05} ' . format ( next_value ) else : suffix = ' {} ' . format ( next_value ) # \u751f\u6210\u7f16\u53f7 if prefix is not None : if datetime_format is not None : no = ' {}{}{} ' . format ( prefix , datetime_str , suffix ) else : no = ' {}{} ' . format ( prefix , suffix ) else : if datetime_format is not None : no = ' {}{} ' . format ( datetime_str , suffix ) else : no = suffix # \u66f4\u65b0\u5e8f\u5217\u5668 if new_period : sequence . last = 1 else : sequence . last += 1 sequence . time = now sequence . save () return no \u6574\u4f53\u601d\u8def\u540c\u9700\u6c42\u4e00\uff0c\u5bf9 get_next_no \u65b9\u6cd5\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4f7f\u5176\u80fd\u591f\u5224\u65ad\u5f53\u524d\u65f6\u95f4\u662f\u5426\u8fdb\u5165\u4e86\u4e0b\u4e00\u8f6e\u7684\u5c3e\u7f00\u5faa\u73af\u3002","title":"Django\u8ba2\u5355\u7f16\u53f7\u751f\u6210"},{"location":"python/django/order-id/#_1","text":"\u8ba2\u5355\u53f7\u89c4\u5219\u4e3a\u524d\u7f00+\u5c3e\u7f00\uff0c\u524d\u7f00\u53ef\u4ee5\u52a8\u6001\u4fee\u6539\uff0c\u5c3e\u7f00\u4e3a3\u52305\u4f4d\u9012\u589e\u6570\u5b57\u3002\u8fd9\u79cd\u89c4\u5219\u5e38\u7528\u4e8e\u5458\u5de5\u3001\u8bbe\u5907\u7b49\u8303\u56f4\u8f83\u5c0f\u7684\u7f16\u53f7\u3002 \u9700\u8981\u501f\u52a9\u4e00\u4e2a\u5e8f\u53f7\u751f\u6210\u5668\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u63a8\u8350\u4f7f\u7528 django-sequences \u3002\u672c\u6587\u5e76\u672a\u76f4\u63a5\u4f7f\u7528 django-sequences \uff0c\u800c\u662f\u5bf9\u5176\u8fdb\u884c\u6539\u9020\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a models.py \"\"\" \u53c2\u8003 \u5e93django-sequences \u5730\u5740:https://github.com/aaugustin/django-sequences \"\"\" from django.db import models # \u5e8f\u5217\u5668 class Sequence ( models . Model ): # \u540d\u79f0 name = models . CharField ( max_length = 255 , primary_key = True , verbose_name = '\u540d\u79f0' ) # \u6700\u8fd1\u503c last = models . PositiveIntegerField ( verbose_name = '\u6700\u8fd1\u503c' ) # \u65f6\u95f4 time = models . DateTimeField ( verbose_name = '\u65f6\u95f4' ) class Meta : verbose_name = '\u5e8f\u5217\u5668' verbose_name_plural = '\u5e8f\u5217\u5668' def __str__ ( self ): return '[ {} ] name= {} last= {} ' . format ( self . time , self . name , self . last ) utils.py: def get_next_value ( sequence_name ): now = timezone . now () sequence , created = Sequence . objects . get_or_create ( name = sequence_name , defaults = { 'last' : 0 , 'time' : now }) # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u6700\u65b0\u503c sequence . last += 1 sequence . time = now sequence . save () return sequence . last def get_next_no ( sequence_name , suffix_format , prefix = None ): now = timezone . now () sequence , created = Sequence . objects . get_or_create ( name = sequence_name , defaults = { 'last' : 0 , 'time' : now }) # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u6700\u65b0\u503c next_value = sequence . last + 1 # \u5c3e\u7f00 if suffix_format == 1 : suffix = ' {:01} ' . format ( next_value ) elif suffix_format == 2 : suffix = ' {:02} ' . format ( next_value ) elif suffix_format == 3 : suffix = ' {:03} ' . format ( next_value ) elif suffix_format == 4 : suffix = ' {:04} ' . format ( next_value ) elif suffix_format == 5 : suffix = ' {:05} ' . format ( next_value ) else : suffix = ' {} ' . format ( next_value ) # \u751f\u6210\u7f16\u53f7 if prefix is not None : no = ' {}{} ' . format ( prefix , suffix ) else : no = suffix # \u66f4\u65b0\u5e8f\u5217\u5668 sequence . last += 1 sequence . time = now sequence . save () return no \u4f7f\u7528DRF\u65b0\u589e\u65f6\uff0c\u5e8f\u53f7\u4ea7\u751f\u65b9\u6cd5\u5982\u4e0b\uff1a constance.py: STAFF_PREFIX = 'staff_prefix' STAFF_SUFFIX = 'staff_suffix' CONSTANCE_CONFIG = OrderedDict ([ # \u5de5\u53f7 ( STAFF_PREFIX , ( 'Staff' , '\u5de5\u53f7\u56fa\u5b9a\u4ee3\u7801' )), ( STAFF_SUFFIX , ( 3 , '\u5de5\u53f7\u5c3e\u7f00' , 'suffix_select' )), ]) CONSTANCE_CONFIG_FIELDSETS = OrderedDict ([ ( '\u5458\u5de5' , ( STAFF_PREFIX , STAFF_SUFFIX )), ]) models.py # \u5458\u5de5 class Staff ( models . Model ): # \u5de5\u53f7 no = models . CharField ( max_length = 255 , unique = True , verbose_name = '\u5de5\u53f7' ) serializers.py # \u521b\u5efa\u5458\u5de5 class StaffCreateSerializer ( ModelSerializer ): no = None def validate ( self , data ): suffix_format = int ( get_value ( settings . STAFF_SUFFIX )) self . no = get_next_no ( 'staff' , suffix_format , prefix = get_value ( settings . STAFF_PREFIX )) while self . Meta . model . objects . filter ( no = self . no ) . exists (): self . no = get_next_no ( 'staff' , suffix_format , prefix = get_value ( settings . STAFF_PREFIX )) return data class Meta : model = Staff fields = ( 'job_state' , 'bank_no' , 'social_security_no' , 'on_job' ) views.py: # \u5458\u5de5 class StaffViewSet ( ModelViewSet ): ... def perform_create ( self , serializer ): return serializer . save ( no = serializer . no ) \u6574\u4f53\u601d\u8def\u4e3a\u4f7f\u7528\u5e8f\u53f7\u751f\u6210\u5668\u8bb0\u5f55\u5f53\u524d\u751f\u6210\u5230\u7684\u7f16\u53f7\uff0c\u4e4b\u540e\u6bcf\u6b21\u751f\u6210\u7f16\u53f7\u65f6\uff0c\u90fd\u8ba9\u5e8f\u53f7\u751f\u6210\u5668\u7ee7\u7eed\u751f\u6210\u4e0b\u4e00\u4e2a\u7f16\u53f7\uff0c\u82e5\u4e0b\u4e00\u4e2a\u7f16\u53f7\u672a\u88ab\u4f7f\u7528\uff0c\u5219\u4f7f\u7528\u8be5\u5e8f\u53f7\u4f5c\u4e3a\u5f53\u524d\u5b9e\u4f8b\u7684\u7f16\u53f7\u3002\u5e8f\u53f7\u751f\u6210\u9700\u8981\u5728 validate \u4e2d\u6700\u540e\u8fdb\u884c\uff0c\u4ee5\u514d\u53d1\u751f\u5e8f\u53f7\u751f\u6210\u6210\u529f\u800c validate \u672a\u901a\u8fc7\u5bfc\u81f4\u7684\u7f16\u53f7\u6d6a\u8d39\u95ee\u9898\u3002\u7f16\u53f7\u751f\u6210\u6210\u529f\u65f6\uff0c\u5728 serializer.save() \u65f6\u4fdd\u5b58\u81f3\u5b9e\u4f8b\u4e2d\u3002","title":"\u9700\u6c42\u4e00"},{"location":"python/django/order-id/#_2","text":"\u8ba2\u5355\u53f7\u89c4\u5219\u4e3a \u524d\u7f00+\u65e5\u671f+\u65f6\u95f4+\u5c3e\u7f00\uff0c\u524d\u7f00\u8981\u6c42\u4e3a\u53ef\u52a8\u6001\u4fee\u6539\uff0c\u65e5\u671f\u9009\u9879\u6709(\"\u5e74+\u6708+\u65e5\", \"\u5e74+\u6708\", \"\u5e74\", \"\u5ffd\u7565\")\uff0c\u65f6\u95f4\u9009\u9879\u6709(\"\u65f6+\u5206+\u79d2\", \"\u65f6+\u5206\", \"\u65f6\", \"\u5ffd\u7565\")\uff0c\u5c3e\u7f00\u4e3a3\u52305\u4f4d\u6570\u5b57\u5e76\u4e14\u6bcf\u5929\u4ece1\u5f00\u59cb\u56de\u6eda\u3002 constance.py: CONSTANCE_ADDITIONAL_FIELDS = { 'date_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"\u5e74+\u6708+\u65e5\" ), ( 1 , \"\u5e74+\u6708\" ), ( 2 , \"\u5e74\" ), ( 3 , \"\u5ffd\u7565\" )) }], 'time_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"\u65f6+\u5206+\u79d2\" ), ( 1 , \"\u65f6+\u5206\" ), ( 2 , \"\u65f6\" ), ( 3 , \"\u5ffd\u7565\" )) }], 'suffix_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"3\u4f4d\u6570\u5b57\" ), ( 1 , \"4\u4f4d\u6570\u5b57\" ), ( 2 , \"5\u4f4d\u6570\u5b57\" )) }], } BALANCE_RECHARGE_FIX_CODE = 'balance_recharge_fix_code' BALANCE_RECHARGE_DATE_FORMAT = 'balance_recharge_date_format' BALANCE_RECHARGE_TIME_FORMAT = 'balance_recharge_time_format' BALANCE_RECHARGE_SUFFIX = 'balance_recharge_time_suffix' CONSTANCE_CONFIG = OrderedDict ([ # \u4f59\u989d\u5145\u503c ( BALANCE_RECHARGE_FIX_CODE , ( 'YE-CZ' , BALANCE_RECHARGE_FIX_CODE )), ( BALANCE_RECHARGE_DATE_FORMAT , ( 0 , BALANCE_RECHARGE_DATE_FORMAT , 'date_select' )), ( BALANCE_RECHARGE_TIME_FORMAT , ( 0 , BALANCE_RECHARGE_TIME_FORMAT , 'time_select' )), ( BALANCE_RECHARGE_SUFFIX , ( 0 , BALANCE_RECHARGE_SUFFIX , 'suffix_select' )), ]) CONSTANCE_CONFIG_FIELDSETS = OrderedDict ([ ( '\u8d22\u52a1' , ( BALANCE_RECHARGE_FIX_CODE , BALANCE_RECHARGE_DATE_FORMAT , BALANCE_RECHARGE_TIME_FORMAT , BALANCE_RECHARGE_SUFFIX )), ]) models.py from datetime import datetime # \u4f59\u989d\u5145\u503c class BalanceRecharge ( models . Model ): # \u7f16\u53f7 no = models . CharField ( unique = True , max_length = 255 , null = True , blank = True , verbose_name = u '\u7f16\u53f7' ) # \u7f16\u53f7\u5c3e\u7f00 no_suffix = models . PositiveIntegerField ( default = 0 , null = True , blank = True , verbose_name = u '\u7f16\u53f7\u5c3e\u7f00' ) def save ( self , * args , ** kwargs ): if not self . pk : # \u6839\u636e\u56fa\u5b9a\u4ee3\u7801-\u65f6\u95f4\u683c\u5f0f\u751f\u6210\u7f16\u53f7\u524d\u7f00 date_format = int ( get_value ( settings . BALANCE_RECHARGE_DATE_FORMAT )) time_format = int ( get_value ( settings . BALANCE_RECHARGE_TIME_FORMAT )) formatted_datetime = no_format_datetime ( date_format , time_format ) no = ' {}{} ' . format ( get_value ( settings . BALANCE_RECHARGE_FIX_CODE ), formatted_datetime ) # \u751f\u6210\u5f53\u5929\u7684\u9012\u589e\u7f16\u53f7\u5c3e\u7f00 first = BalanceRecharge . objects . filter ( create_time__day = datetime . now () . day ) . order_by ( '-no_suffix' ) . first () if first : current_no_suffix = first . no_suffix if first . no_suffix else 0 else : current_no_suffix = 0 self . no_suffix = current_no_suffix + 1 # \u6839\u636e\u524d\u7f00\u548c\u540e\u7f00\u6570\u5b57\u663e\u793a\u4e2a\u6570\u751f\u6210\u7f16\u53f7 suffix_format = int ( get_value ( settings . BALANCE_RECHARGE_SUFFIX )) no_suffix = no_format_suffix ( self . no_suffix , suffix_format ) self . no = ' {}{} ' . format ( self . no , no_suffix ) return super ( BalanceRecharge , self ) . save ( * args , ** kwargs ) utils.py: def no_format_datetime ( date_format , time_format ): \"\"\" :param date_format: 0 \u5e74\u6708\u65e5 1 \u5e74\u6708 2 \u5e74 :param time_format: 0 \u65f6\u5206\u79d2 2 \u65f6\u5206 3 \u65f6 :return: \u5bf9\u5e94\u65f6\u95f4\u683c\u5f0f\u7684\u7f16\u53f7\u7247\u6bb5 \"\"\" now = datetime . now () # \u65e5\u671f if date_format == 0 : time_data = now . strftime ( '%Y%m %d ' ) elif date_format == 1 : time_data = now . strftime ( '%Y%m' ) elif date_format == 2 : time_data = now . strftime ( '%Y' ) else : time_data = '' # \u65f6\u95f4 if time_format == 0 : time_time = now . strftime ( '%H%M%S' ) elif time_format == 1 : time_time = now . strftime ( '%H%M' ) elif time_format == 2 : time_time = now . strftime ( '%H' ) else : time_time = '' return ' {}{} ' . format ( time_data , time_time ) def no_format_suffix ( no_suffix , suffix_format ): \"\"\" :param no_suffix: \u539f\u7f16\u53f7\u5c3e\u7f00 :param suffix_format: \u5c3e\u7f00\u683c\u5f0f 0-3\u4f4d\u6570\u5b57 1-4\u4f4d\u6570\u5b57 2-5\u4f4d\u6570\u5b57 :return: \u5bf9\u5e94\u683c\u5f0f\u7684\u7f16\u53f7\u5c3e\u7f00 \"\"\" if suffix_format == 0 : no_suffix = ' {:03} ' . format ( no_suffix ) elif suffix_format == 1 : no_suffix = ' {:04} ' . format ( no_suffix ) elif suffix_format == 2 : no_suffix = ' {:05} ' . format ( no_suffix ) else : no_suffix = ' {:04} ' . format ( no_suffix ) return no_suffix \u6574\u4f53\u601d\u8def\u4e3a\u8bbe\u7f6e\u5c3e\u7f00\u4e3a int \u7c7b\u578b\uff0c\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u751f\u6210\u7684\u4e3a\u5f53\u5929\u7b2c\u591a\u5c11\u4e2a\u8ba2\u5355\u3002\u5728\u5b9e\u4f8b\u88ab\u521b\u5efa\u65f6\uff0c\u5148\u83b7\u53d6\u524d\u7f00\u548c\u65f6\u95f4\u683c\u5f0f\u8fdb\u884c\u62fc\u63a5\uff0c\u518d\u67e5\u8be2\u5f53\u5929\u751f\u6210\u7684\u5c3e\u7f00\u6700\u5927\u503c\uff0c\u5c06\u5c3e\u7f00\u52a0\u4e00\u4f5c\u4e3a\u672c\u5b9e\u4f8b\u7684\u5c3e\u7f00\u3002\u518d\u683c\u5f0f\u5316\u5c3e\u7f00\u5230\u76f8\u5e94\u7684\u683c\u5f0f\uff0c\u7528\u524d\u7f00+\u65e5\u671f\u65f6\u95f4+\u5c3e\u7f00\u5373\u53ef\u5f97\u5230\u5f53\u524d\u8ba2\u5355\u53f7\u3002","title":"\u9700\u6c42\u4e8c"},{"location":"python/django/order-id/#_3","text":"\u8ba2\u5355\u53f7\u89c4\u5219\u4e3a \u524d\u7f00+\u65e5\u671f\u65f6\u95f4+\u5c3e\u7f00\uff0c\u524d\u7f00\u8981\u6c42\u4e3a\u53ef\u52a8\u6001\u4fee\u6539\uff0c\u65e5\u671f\u65f6\u95f4\u9009\u9879\u6709(\"\u5e74\", \"\u6708\", \"\u65e5\", \"\u65f6\", \"\u5206\", \"\u79d2\")\uff0c\u5c3e\u7f00\u4e3a3\u52305\u4f4d\u6570\u5b57\uff0c\u5c3e\u7f00\u6839\u636e\u65e5\u671f\u65f6\u95f4\u9009\u9879\u7684\u7cbe\u5ea6\u6765\u5224\u65ad\u65f6\u5019\u56de\u6eda\u3002\u5982\u65e5\u671f\u65f6\u95f4\u9009\u62e9\u4e86\u65e5\uff0c\u5219\u5c3e\u7f00\u6bcf\u5929\u4ece1\u56de\u6eda\uff1b\u82e5\u65e5\u671f\u65f6\u95f4\u9009\u62e9\u4e86\u5206\uff0c\u5219\u5c3e\u7f00\u6bcf\u5206\u949f\u4ece1\u56de\u6eda\uff0c\u82e5\u5f53\u524d\u5206\u949f\u5c3e\u7f00\u751f\u6210\u81f35\uff0c\u4e0b\u4e00\u5206\u949f\u5c3e\u7f00\u4f9d\u65e7\u91cd\u65b0\u4ece1\u5f00\u59cb\u8ba1\u7b97\u3002 constances.py CONSTANCE_ADDITIONAL_FIELDS = { 'datetime_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 0 , \"\u5e74\" ), ( 1 , \"\u6708\" ), ( 2 , \"\u65e5\" ), ( 3 , \"\u65f6\" ), ( 4 , \"\u5206\" ), ( 5 , \"\u79d2\" )) }], 'suffix_select' : [ 'django.forms.fields.ChoiceField' , { 'widget' : 'django.forms.Select' , 'choices' : (( 3 , \"3\u4f4d\u6570\u5b57\" ), ( 4 , \"4\u4f4d\u6570\u5b57\" ), ( 5 , \"5\u4f4d\u6570\u5b57\" )) }], } ALLOT_PREFIX = 'allot_prefix' ALLOT_DATETIME = 'allot_datetime' ALLOT_SUFFIX = 'allot_suffix' CONSTANCE_CONFIG = OrderedDict ([ # \u8c03\u62e8\u7ba1\u7406 ( ALLOT_PREFIX , ( 'Allot' , '\u8c03\u62e8\u7ba1\u7406\u56fa\u5b9a\u4ee3\u7801' )), ( ALLOT_DATETIME , ( 4 , '\u8c03\u62e8\u7ba1\u7406\u65f6\u95f4' , 'datetime_select' )), ( ALLOT_SUFFIX , ( 3 , '\u8c03\u62e8\u7ba1\u7406\u5c3e\u7f00' , 'suffix_select' )), ]) CONSTANCE_CONFIG_FIELDSETS = OrderedDict ([ ( '\u8c03\u62e8\u7533\u8bf7' , ( ALLOT_APPLY_PREFIX , ALLOT_APPLY_DATETIME , ALLOT_APPLY_SUFFIX )), ]) models.py # \u8c03\u62e8\u7533\u8bf7 class AllotApply ( models . Model ): # \u4e1a\u52a1\u5355\u53f7 no = models . CharField ( max_length = 255 , unique = True , verbose_name = '\u4e1a\u52a1\u5355\u53f7' ) serializers.py # \u521b\u5efa\u8c03\u62e8\u7533\u8bf7 class AllotApplyCreateSerializer ( ModelSerializer ): no = None def validate ( self , data ): prefix = get_value ( settings . ALLOT_APPLY_PREFIX ) datetime_format = int ( get_value ( settings . ALLOT_APPLY_DATETIME )) suffix_format = int ( get_value ( settings . ALLOT_APPLY_SUFFIX )) self . no = get_next_no ( 'allot_apply' , suffix_format , prefix = prefix , datetime_format = datetime_format ) return data class Meta : model = AllotApply views.py: # \u8c03\u62e8\u7533\u8bf7 class AllotApplyViewSet ( ModelViewSet ): ... # \u6267\u884c\u65b0\u589e def perform_create ( self , serializer ): return serializer . save ( no = serializer . no ) utils.py def get_next_value ( sequence_name ): now = timezone . now () sequence , created = Sequence . objects . get_or_create ( name = sequence_name , defaults = { 'last' : 0 , 'time' : now }) # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u6700\u65b0\u503c sequence . last += 1 sequence . time = now sequence . save () return sequence . last def get_next_no ( sequence_name , suffix_format , prefix = None , datetime_format = None ): now = timezone . now () new_period = False datetime_str = None sequence , created = Sequence . objects . get_or_create ( name = sequence_name , defaults = { 'last' : 0 , 'time' : now }) if datetime_format is not None : # \u662f\u5426\u5728\u540c\u4e00\u65f6\u95f4\u5468\u671f if datetime_format == 0 : datetime_str = now . strftime ( '%Y' ) if now . year != sequence . time . year : new_period = True elif datetime_format == 1 : datetime_str = now . strftime ( '%Y%m' ) if ( now . year != sequence . time . year ) or ( now . month != sequence . time . month ): new_period = True elif datetime_format == 2 : datetime_str = now . strftime ( '%Y%m %d ' ) if now . date () != sequence . time . date (): new_period = True elif datetime_format == 3 : datetime_str = now . strftime ( '%Y%m %d %H' ) if ( now . date () != sequence . time . date ()) or ( now . hour != sequence . time . hour ): new_period = True elif datetime_format == 4 : datetime_str = now . strftime ( '%Y%m %d %H%M' ) if ( now . date () != sequence . time . date ()) or ( now . hour != sequence . time . hour ) or \\ ( now . minute != sequence . time . minute ): new_period = True elif datetime_format == 5 : datetime_str = now . strftime ( '%Y%m %d %H%M%S' ) if ( now . date () != sequence . time . date ()) or ( now . hour != sequence . time . hour ) or \\ ( now . minute != sequence . time . minute ) or ( now . second != sequence . time . second ): new_period = True # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u6700\u65b0\u503c next_value = 1 if new_period else sequence . last + 1 # \u5c3e\u7f00 if suffix_format == 1 : suffix = ' {:01} ' . format ( next_value ) elif suffix_format == 2 : suffix = ' {:02} ' . format ( next_value ) elif suffix_format == 3 : suffix = ' {:03} ' . format ( next_value ) elif suffix_format == 4 : suffix = ' {:04} ' . format ( next_value ) elif suffix_format == 5 : suffix = ' {:05} ' . format ( next_value ) else : suffix = ' {} ' . format ( next_value ) # \u751f\u6210\u7f16\u53f7 if prefix is not None : if datetime_format is not None : no = ' {}{}{} ' . format ( prefix , datetime_str , suffix ) else : no = ' {}{} ' . format ( prefix , suffix ) else : if datetime_format is not None : no = ' {}{} ' . format ( datetime_str , suffix ) else : no = suffix # \u66f4\u65b0\u5e8f\u5217\u5668 if new_period : sequence . last = 1 else : sequence . last += 1 sequence . time = now sequence . save () return no \u6574\u4f53\u601d\u8def\u540c\u9700\u6c42\u4e00\uff0c\u5bf9 get_next_no \u65b9\u6cd5\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4f7f\u5176\u80fd\u591f\u5224\u65ad\u5f53\u524d\u65f6\u95f4\u662f\u5426\u8fdb\u5165\u4e86\u4e0b\u4e00\u8f6e\u7684\u5c3e\u7f00\u5faa\u73af\u3002","title":"\u9700\u6c42\u4e09"},{"location":"python/django/sitemap-rss-robots/","text":"\u7ad9\u70b9\u5730\u56fe sitemap.xml \u7528\u9014 \u544a\u8bc9\u641c\u7d22\u5f15\u64ce\u7ad9\u70b9\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u65b9\u4fbf\u641c\u7d22\u5f15\u64ce\u6536\u5f55\u7ad9\u70b9\u3002 \u5b9e\u73b0 urls.py : from django.contrib.sitemaps.views import sitemap from common.sitemaps import sitemaps urlpatterns = [ path ( '' , IndexView . as_view (), name = 'index' ), path ( 'admin/' , admin . site . urls ), ... path ( 'sitemap.xml' , sitemap , { 'sitemaps' : sitemaps }, name = 'sitemap' ), ] common/sitemaps.py \uff1a from django.contrib.sitemaps import Sitemap from django.urls import reverse_lazy from article.models import Article class StaticViewSitemap ( Sitemap ): priority = 0.5 changefreq = 'weekly' def items ( self ): # \u9759\u6001url\u7684name return [ 'index' , 'article_index' , 'article_all' , 'news_index' , 'user_login' , 'user_register' , 'user_forget_pwd' , 'version' , 'rss' ] def location ( self , item ): return reverse_lazy ( item ) class ArticleSitemap ( Sitemap ): priority = 0.5 changefreq = 'weekly' def items ( self ): return Article . objects . filter ( is_public = True ) . all () . order_by ( '-id' ) def location ( self , item ): return reverse_lazy ( 'article_detail' , kwargs = { 'pk' : item . id }) sitemaps = { 'static' : StaticViewSitemap , 'article' : ArticleSitemap , ... } RSS\u8ba2\u9605 \u7528\u9014 \u8ba9\u8ba2\u9605\u4f60\u7ad9\u70b9\u7684\u7528\u6237\u80fd\u7b2c\u4e00\u65f6\u95f4\u6536\u5230\u7ad9\u70b9\u4fe1\u606f\u66f4\u65b0\u63d0\u9192\uff0c\u76f8\u5f53\u4e8e\u7ad9\u70b9\u76ee\u5f55\u7684\u529f\u80fd\u3002 \u5b9e\u73b0 from common.feeds import BlogFeed urlpatterns = [ path ( '' , IndexView . as_view (), name = 'index' ), path ( 'admin/' , admin . site . urls ), ... path ( 'rss/' , BlogFeed (), name = 'rss' ), ] common/feeds.py : from django.conf import settings from django.urls import reverse_lazy from django.utils.feedgenerator import Rss201rev2Feed from django.contrib.syndication.views import Feed from article.models import Article class BlogFeed ( Feed ): feed_type = Rss201rev2Feed link = reverse_lazy ( 'index' ) feed_url = reverse_lazy ( 'rss' ) def title ( self ): return get_value ( settings . WEBSITE_TITLE ) def description ( self ): return get_value ( settings . WEBSITE_SEO_DESCRIPTION ) def items ( self ): return Article . objects . order_by ( '-pk' )[: 10 ] def item_title ( self , item ): return item . title def item_description ( self , item ): return item . summary def item_link ( self , item ): return reverse_lazy ( 'article_detail' , kwargs = { 'pk' : item . id }) def feed_copyright ( self ): return \"Copyright &copy; 2015-2018 yinkh\" robots.txt \u7528\u9014 robots.txt \u914d\u5408\u7ad9\u70b9\u5730\u56fe sitemaps.xml \u4f7f\u7528\uff0c\u7528\u4e8e\u544a\u8bc9\u641c\u7d22\u5f15\u64ce\uff0c\u54ea\u4e9b\u8def\u5f84\u4e0b\u7684\u8d44\u6e90\u53ef\u4ee5\u6293\u53d6\uff0c\u54ea\u4e9b\u8def\u5f84\u4e0b\u7684\u8d44\u6e90\u4e0d\u53ef\u4ee5\u6293\u53d6\u3002 \u5b9e\u73b0\u65b9\u6cd5 \u65b9\u6cd51 \u7531 Django \u63d0\u4f9b robots.txt \u6587\u4ef6(\u4e0d\u63a8\u8350)\uff1a urls.py : from django.views.generic import TemplateView path ( 'robots.txt' , TemplateView . as_view ( template_name = \"robots.txt\" , content_type = \"text/plain\" ), name = \"robots\" ), \u65b9\u6cd52 robots.txt \u6587\u4ef6\u662f\u9759\u6001\u6587\u4ef6\uff0c\u76f4\u63a5\u7531web\u670d\u52a1\u5668\u5206\u53d1\u4f1a\u66f4\u6709\u6548(\u63a8\u8350)\u3002 Nginx : location /robots.txt { alias /path/to/static/robots.txt ; } Apache2 : Alias /robots.txt /django/Blog/static/robots.txt robots.txt \u6587\u672c\u5185\u5bb9 robots.txt \uff1a User-agent: * Disallow: \u7528\u6cd5\u7b80\u4ecb\uff1a User-agent \u662f\u7528\u6765\u5339\u914d\u722c\u866b\u7684\uff0c\u6bcf\u4e2a\u722c\u866b\u90fd\u4f1a\u6709\u4e00\u4e2a\u540d\u5b57\uff0c\u5982\u679c\u4f60\u6709\u5b89\u88c5awstats\u7edf\u8ba1\u5de5\u5177\uff0c\u4f60\u5c31\u80fd\u67e5\u770b\u5230\u722c\u866b\u7684\u540d\u5b57\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u722c\u866b\u53ebBaiDuSpider\uff0cGoogle\u7684\u722c\u866b\u53ebGooglebot\uff0c*\u8868\u793a\u6240\u6709\u722c\u866b\u3002 Disallow \u8868\u793a\u7981\u6b62\u722c\u866b\u8bbf\u95ee\u7684\u76ee\u5f55\u3002 Disallow: / \u8868\u793a\u62e6\u622a\u6574\u7ad9\u3002 Allow \u8868\u793a\u5141\u8bb8\u722c\u866b\u8bbf\u95ee\u7684\u76ee\u5f55\u3002 Allow: / \u8868\u793a\u5141\u8bb8\u6574\u7ad9\u3002 Sitemap \u7528\u6765\u6307\u5b9a sitemap \u7684\u4f4d\u7f6e\u3002 Crawl-delay \u7528\u6765\u544a\u8bc9\u722c\u866b\u4e24\u6b21\u8bbf\u95ee\u7684\u95f4\u9694\uff0c\u5355\u4f4d\u662f\u79d2\u3002\u722c\u866b\u5982\u679c\u722c\u5f97\u5f88\u52e4\uff0c\u5bf9\u52a8\u6001\u7f51\u7ad9\u6765\u8bf4\uff0c\u538b\u529b\u6709\u70b9\u5927\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u670d\u52a1\u5668\u8d1f\u8f7d\u589e\u9ad8\uff0c\u7528\u6237\u8bbf\u95ee\u53d8\u6162\u3002 django serving robots.txt efficiently robots.txt\u7528\u6cd5","title":"Django\u641c\u7d22\u4f18\u5316sitemap\u3001RSS\u3001robots"},{"location":"python/django/sitemap-rss-robots/#sitemapxml","text":"","title":"\u7ad9\u70b9\u5730\u56fe sitemap.xml"},{"location":"python/django/sitemap-rss-robots/#_1","text":"\u544a\u8bc9\u641c\u7d22\u5f15\u64ce\u7ad9\u70b9\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u65b9\u4fbf\u641c\u7d22\u5f15\u64ce\u6536\u5f55\u7ad9\u70b9\u3002","title":"\u7528\u9014"},{"location":"python/django/sitemap-rss-robots/#_2","text":"urls.py : from django.contrib.sitemaps.views import sitemap from common.sitemaps import sitemaps urlpatterns = [ path ( '' , IndexView . as_view (), name = 'index' ), path ( 'admin/' , admin . site . urls ), ... path ( 'sitemap.xml' , sitemap , { 'sitemaps' : sitemaps }, name = 'sitemap' ), ] common/sitemaps.py \uff1a from django.contrib.sitemaps import Sitemap from django.urls import reverse_lazy from article.models import Article class StaticViewSitemap ( Sitemap ): priority = 0.5 changefreq = 'weekly' def items ( self ): # \u9759\u6001url\u7684name return [ 'index' , 'article_index' , 'article_all' , 'news_index' , 'user_login' , 'user_register' , 'user_forget_pwd' , 'version' , 'rss' ] def location ( self , item ): return reverse_lazy ( item ) class ArticleSitemap ( Sitemap ): priority = 0.5 changefreq = 'weekly' def items ( self ): return Article . objects . filter ( is_public = True ) . all () . order_by ( '-id' ) def location ( self , item ): return reverse_lazy ( 'article_detail' , kwargs = { 'pk' : item . id }) sitemaps = { 'static' : StaticViewSitemap , 'article' : ArticleSitemap , ... }","title":"\u5b9e\u73b0"},{"location":"python/django/sitemap-rss-robots/#rss","text":"","title":"RSS\u8ba2\u9605"},{"location":"python/django/sitemap-rss-robots/#_3","text":"\u8ba9\u8ba2\u9605\u4f60\u7ad9\u70b9\u7684\u7528\u6237\u80fd\u7b2c\u4e00\u65f6\u95f4\u6536\u5230\u7ad9\u70b9\u4fe1\u606f\u66f4\u65b0\u63d0\u9192\uff0c\u76f8\u5f53\u4e8e\u7ad9\u70b9\u76ee\u5f55\u7684\u529f\u80fd\u3002","title":"\u7528\u9014"},{"location":"python/django/sitemap-rss-robots/#_4","text":"from common.feeds import BlogFeed urlpatterns = [ path ( '' , IndexView . as_view (), name = 'index' ), path ( 'admin/' , admin . site . urls ), ... path ( 'rss/' , BlogFeed (), name = 'rss' ), ] common/feeds.py : from django.conf import settings from django.urls import reverse_lazy from django.utils.feedgenerator import Rss201rev2Feed from django.contrib.syndication.views import Feed from article.models import Article class BlogFeed ( Feed ): feed_type = Rss201rev2Feed link = reverse_lazy ( 'index' ) feed_url = reverse_lazy ( 'rss' ) def title ( self ): return get_value ( settings . WEBSITE_TITLE ) def description ( self ): return get_value ( settings . WEBSITE_SEO_DESCRIPTION ) def items ( self ): return Article . objects . order_by ( '-pk' )[: 10 ] def item_title ( self , item ): return item . title def item_description ( self , item ): return item . summary def item_link ( self , item ): return reverse_lazy ( 'article_detail' , kwargs = { 'pk' : item . id }) def feed_copyright ( self ): return \"Copyright &copy; 2015-2018 yinkh\"","title":"\u5b9e\u73b0"},{"location":"python/django/sitemap-rss-robots/#robotstxt","text":"","title":"robots.txt"},{"location":"python/django/sitemap-rss-robots/#_5","text":"robots.txt \u914d\u5408\u7ad9\u70b9\u5730\u56fe sitemaps.xml \u4f7f\u7528\uff0c\u7528\u4e8e\u544a\u8bc9\u641c\u7d22\u5f15\u64ce\uff0c\u54ea\u4e9b\u8def\u5f84\u4e0b\u7684\u8d44\u6e90\u53ef\u4ee5\u6293\u53d6\uff0c\u54ea\u4e9b\u8def\u5f84\u4e0b\u7684\u8d44\u6e90\u4e0d\u53ef\u4ee5\u6293\u53d6\u3002","title":"\u7528\u9014"},{"location":"python/django/sitemap-rss-robots/#_6","text":"\u65b9\u6cd51 \u7531 Django \u63d0\u4f9b robots.txt \u6587\u4ef6(\u4e0d\u63a8\u8350)\uff1a urls.py : from django.views.generic import TemplateView path ( 'robots.txt' , TemplateView . as_view ( template_name = \"robots.txt\" , content_type = \"text/plain\" ), name = \"robots\" ), \u65b9\u6cd52 robots.txt \u6587\u4ef6\u662f\u9759\u6001\u6587\u4ef6\uff0c\u76f4\u63a5\u7531web\u670d\u52a1\u5668\u5206\u53d1\u4f1a\u66f4\u6709\u6548(\u63a8\u8350)\u3002 Nginx : location /robots.txt { alias /path/to/static/robots.txt ; } Apache2 : Alias /robots.txt /django/Blog/static/robots.txt","title":"\u5b9e\u73b0\u65b9\u6cd5"},{"location":"python/django/sitemap-rss-robots/#robotstxt_1","text":"robots.txt \uff1a User-agent: * Disallow: \u7528\u6cd5\u7b80\u4ecb\uff1a User-agent \u662f\u7528\u6765\u5339\u914d\u722c\u866b\u7684\uff0c\u6bcf\u4e2a\u722c\u866b\u90fd\u4f1a\u6709\u4e00\u4e2a\u540d\u5b57\uff0c\u5982\u679c\u4f60\u6709\u5b89\u88c5awstats\u7edf\u8ba1\u5de5\u5177\uff0c\u4f60\u5c31\u80fd\u67e5\u770b\u5230\u722c\u866b\u7684\u540d\u5b57\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u722c\u866b\u53ebBaiDuSpider\uff0cGoogle\u7684\u722c\u866b\u53ebGooglebot\uff0c*\u8868\u793a\u6240\u6709\u722c\u866b\u3002 Disallow \u8868\u793a\u7981\u6b62\u722c\u866b\u8bbf\u95ee\u7684\u76ee\u5f55\u3002 Disallow: / \u8868\u793a\u62e6\u622a\u6574\u7ad9\u3002 Allow \u8868\u793a\u5141\u8bb8\u722c\u866b\u8bbf\u95ee\u7684\u76ee\u5f55\u3002 Allow: / \u8868\u793a\u5141\u8bb8\u6574\u7ad9\u3002 Sitemap \u7528\u6765\u6307\u5b9a sitemap \u7684\u4f4d\u7f6e\u3002 Crawl-delay \u7528\u6765\u544a\u8bc9\u722c\u866b\u4e24\u6b21\u8bbf\u95ee\u7684\u95f4\u9694\uff0c\u5355\u4f4d\u662f\u79d2\u3002\u722c\u866b\u5982\u679c\u722c\u5f97\u5f88\u52e4\uff0c\u5bf9\u52a8\u6001\u7f51\u7ad9\u6765\u8bf4\uff0c\u538b\u529b\u6709\u70b9\u5927\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u670d\u52a1\u5668\u8d1f\u8f7d\u589e\u9ad8\uff0c\u7528\u6237\u8bbf\u95ee\u53d8\u6162\u3002 django serving robots.txt efficiently robots.txt\u7528\u6cd5","title":"robots.txt\u6587\u672c\u5185\u5bb9"},{"location":"python/drf/drf-note/","text":"\u8bf4\u660e\uff1a\u5728\u7b14\u8bb0\u4e2d\uff0cDjangoRestFramework\u5c06\u88ab\u7b80\u5199\u4e3aDRF,ForeignKey\u7b80\u5199\u4e3aFk,ManyToManyField\u7b80\u5199\u4e3aM2M\u3002 Serializer\u76f8\u5173 serializer\u4e2d\u5c06\u56fe\u7247\u3001\u6587\u4ef6\u7b49\u5bf9\u8c61\u7684\u76f8\u5bf9\u8def\u5f84url\u53d8\u6210\u7edd\u5bf9\u8def\u5f84url \u5728Serializer\u521d\u59cb\u5316\u65f6\u5411\u5176\u4f20\u9012content\u53c2\u6570\u4e2d\u9700\u8981\u5305\u542brequest\u5bf9\u8c61\u5373\u53ef\uff0c\u65e2: serializer = AccountSerializer(queryset, context={'request': request}) \u3002 \u53ef\u4ee5\u7b80\u5355\u7684\u5199\u6210 serializer = AccountSerializer(queryset, context=self.get_serializer_context()) \uff0c\u4ee5\u4e0b\u662fget_serializer_context\u51fd\u6570\u7684\u6e90\u7801\uff1a def get_serializer_context ( self ): \"\"\" Extra context provided to the serializer class. \"\"\" return { 'request' : self . request , 'format' : self . format_kwarg , 'view' : self } \u6dfb\u52a0ForeignKey\u3001ManytoMany\u65f6\u6ce8\u610f\u4e8b\u9879 \u524d\u7aef\u5728\u6dfb\u52a0ForeignKey\u65f6\uff0c\u76f4\u63a5\u4e3arequsetBody\u6dfb\u52a0ID\u5373\u53ef\uff1b \u6dfb\u52a0ManytoMany\u65f6\uff0c\u4e0d\u662f\u5728requsetBody\u4e2d\u4e3a\u53c2\u6570m2m_name\u6dfb\u52a0[1,2,3],\u800c\u662f\u4f9d\u6b21\u5411m2m_name\u4e2d\u6dfb\u52a01\u30012\u30013\uff0c\u65e2\u8fde\u7eed\u6dfb\u52a0\u4e09\u6b21\u3002 ajax\u4f20\u9012\u6570\u7ec4 \u4f7f\u7528ajax\u4ece\u524d\u7aef\u50cf\u540e\u7aef\u4f20\u9012\u6570\u7ec4\u662f\u6bd4\u8f83\u5e38\u89c4\u7684\u9700\u6c42\uff0c\u5728\u524d\u7aefajax\u9700\u8981\u8bbe\u7f6etraditional: true\u53c2\u6570\u3002DRF\u540e\u7aef\u4f7f\u7528 request.data.getlist('key') \u65b9\u6cd5\u83b7\u53d6\u8be5\u6570\u7ec4\u3002 \u6709\u65f6\u5019DRF\u5bf9\u5e94\u4f7f\u7528\u4e0d\u540c\u7684\u524d\u7aef\uff0c\u5982android\u4e2d\u7684okhttp\u6216\u8005vue\u4e2d\u7684&http\u6216\u8005python\u4e2d\u7684requests\u6a21\u5757\uff0c\u4f1a\u51fa\u73b0request.data\u662fDict\u800c\u4e0d\u662fQueryDict\u7684\u65f6\u5019\uff0c\u9700\u8981\u4f7f\u7528\u65b9\u6cd5\u517c\u5bb9\uff1a def get_list ( _dict , key ): \"\"\" usage: get_list(request.data, 'key') :param _dict: QueryDict or dict :param key: list \u952e\u540d :return: _dict\u4e2dkey\u5bf9\u5e94\u7684list \"\"\" if isinstance ( _dict , QueryDict ): return _dict . getlist ( key ) else : return _dict . get ( key , []) \u7528\u6cd5\u4e3aget_list ( request . data , 'key' ) \u3002 jQuery ajax\u7684traditional\u53c2\u6570\u7684\u4f5c\u7528 Serializers\u5d4c\u5957\u65b0\u589eFK\u6216\u8005M2M RDF2.0\u4ee5\u524d\u6709\u6b64\u529f\u80fd\uff0c3.0\u58f0\u660e\u4e2d\u653e\u5f03\u6b64\u529f\u80fd\uff0c\u5e94\u4e3a\u6b64\u529f\u80fd\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u903b\u8f91\u5904\u7406\u533a\u522b\u5927\uff0c\u8981\u652f\u6301\u5d4c\u5957\u521b\u5efa\u3001\u66f4\u65b0\u9700\u8981\u5f3a\u5236\u91cd\u5199create\u3001update\u65b9\u6cd5\u3002 \u65b9\u6cd5\u4e00 \uff1a \u7528 ast.literal_eval() \u5c06str\u89e3\u6790\u79f0\u4e3adict\u518d\u5bf9\u5916\u952e\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5c06\u5e8f\u5217\u5316\u5f97\u5230\u7684ID\u8d4b\u7ed9\u5916\u952e\u3002\u7565\u7e41\u7410\uff0c\u8d4b\u503c\u65f6\u8981\u8bbe\u7f6erequest.data._mutable=True\u6765\u4fdd\u8bc1request.data\u53ef\u88ab\u4fee\u6539\uff0c\u9700\u8981\u6709\u4e8b\u52a1\u903b\u8f91\uff0c\u5f53\u88ab\u5d4c\u5957\u7684serializer\u6570\u636e\u4e0d\u5408\u6cd5\u65f6\uff0c\u9700\u8981\u5220\u9664\u5148\u524d\u521b\u5efa\u7684\u5f85\u5d4c\u5957\u5bf9\u8c61\uff0c\u6d6a\u8d39\u6570\u636e\u5e93\u5f00\u9500\u3002 \u65b9\u6cd5\u4e8c \uff1a \u4f7f\u7528user.name\u4f5c\u4e3a\u53c2\u6570\u540d\u76f4\u63a5\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u7f3a\u70b9\u662f\u66f4\u65b0\u65f6\u9700\u8981\u4e00\u4e2afield\u4e00\u4e2afield\u7684\u53bb\u5199,\u6bd4\u8f83\u9ebb\u70e6(\u4e5f\u53ef\u7528for\u5faa\u73af\u914d\u5408setattr\u65b9\u6cd5\u4f7f\u7528)\u3002 \u65b9\u6cd5\u4e09 \uff1a \u624b\u5199\u5177\u4f53\u7684create\\update\u65b9\u6cd5\uff0c\u793a\u4f8b\uff1a class EscapeRecipeModifySerializer ( WritableNestedModelSerializer ): crafts = EscapeRecipeCraftModifySerializer ( many = True , required = False , label = '\u7279\u6b8a\u5de5\u827a' ) def create ( self , validated_data ): crafts_data = validated_data . pop ( 'crafts' ) escape_recipe = EscapeRecipe . objects . create ( ** validated_data ) # \u4fdd\u5b58\u539f\u59cb\u914d\u65b9 crafts = [] for craft_data in crafts_data : craft = OriginalRecipe ( ** craft_data ) craft . save () crafts . append ( craft ) escape_recipe . original_recipes . add ( * crafts ) return escape_recipe class Meta : model = EscapeRecipe fields = ( 'original_recipe' , 'medicine' , 'dosage' , 'crafts' ) \u65b9\u6cd5\u56db \uff1a\u4f7f\u7528drf-writable-nested\u5e93\uff0c\u9700\u6ce8\u610f\u5ba2\u6237\u7aef\u548c\u5355\u5143\u6d4b\u8bd5\u65f6\u6570\u636e\u683c\u5f0f\u5fc5\u987b\u4e3aapplication/json\u3002\u7528requests\u5e93\u8bf7\u6c42\u65f6\uff0c\u7528requests.post(url=xxx,json={},headers={}),\u662fjson={}\u800c\u4e0d\u662fdata={}\uff0c\u53ef\u53c2\u8003drf-writable-nested\u5d4c\u5957\u65b0\u589e\u66f4\u65b0\u3002 \u521b\u5efa\u3001\u66f4\u65b0\u65f6\u4f7f\u7528\u7684Serializer\u4e2dFK\\O2O\\M2M\u4e0d\u53ef\u5c55\u5f00 \u521b\u5efa\u4f7f\u7528\u7684serializer\u548c\u66f4\u65b0\u4f7f\u7528\u7684serializer\uff0c\u5982\u679c\u5305\u542b\u5916\u952e\u3001O2O\u3001M2M\u7684\u8bdd\uff0c\u4e0d\u53ef\u5c06\u5916\u952e\u3001O2O\u3001M2M\u5c55\u5f00\u6210\u8be6\u60c5\uff0c\u4e0d\u7136\u65e0\u6cd5\u8fdb\u884c\u521b\u5efa\u6216\u8005\u66f4\u65b0\u3002 Serializer \u4e00\u6b21\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61 VS \u591a\u6b21\u5e8f\u5217\u4e00\u4e2a\u5bf9\u8c61 Serializer\u901a\u8fc7data = Serializer(queryset, many=True).data\u6781\u7aef\u8017\u8d39\u65f6\u95f4\uff0c\u80fd\u4e00\u6b21\u83b7\u53d6\u7684data\u4e0d\u8981\u901a\u8fc7\u591a\u6b21\u83b7\u53d6\u3002\u5b81\u613f\u83b7\u53d6\u5230data\u7684list,\u518d\u53bb\u4ea4\u53c9\u5bf9\u6bd4list\u91cc\u9762\u7684\u6570\u636e\u4e5f\u4e0d\u8981\u4e3a\u4e86\u4f7f\u7528orm\u65b9\u4fbf\uff0c\u5728\u7b5b\u9009\u51fa\u5bf9\u5e94\u7684queryset\u540e\u518d\u591a\u6b21\u53bb\u505aqueryset\u7684\u5e8f\u5217\u5316\uff0c\u8fd9\u6837\u8017\u8d39\u7684\u65f6\u95f4\u5c06\u6210\u500d\u589e\u52a0\uff0c1\u6b21\u5e8f\u5217\u53161\u4e2a\u5bf9\u8c61\u7684\u65f6\u95f4\u548c\u5e8f\u5217\u53161000\u4e2a\u5bf9\u8c61\u7684\u65f6\u95f4\u5dee\u8ddd\u5e76\u4e0d\u5927\uff0c\u800c\u5e8f\u5217\u53161\u6b21\u548c\u5e8f\u5217\u53161000\u6b21\u7684\u65f6\u95f4\u5dee\u8ddd\u5de8\u5927,\u4e00\u6b21\u5e8f\u5217\u53161000\u4e2a\u8017\u65f6\u662f\u5e8f\u5217\u53161000\u6b21\uff08\u6bcf\u6b21\u4e00\u4e2a\uff09\u8017\u65f6\u7684\u4e94\u5206\u4e4b\u4e00\u3002 import django.apps from school.serializers import PermissionSerializer permission_list = [] permissions = request . user . user_permissions for model in django . apps . apps . get_models (): content_type = ContentType . objects . get_for_model ( model ) model_permissions = permissions . filter ( content_type = content_type ) serializer = PermissionSerializer ( model_permissions , many = True ) permission_list . append ({ 'name' : model . _meta . verbose_name , 'content_type' : content_type . id , 'model' : content_type . model , 'permissions' : serializer . data }) # permission_list = sorted(permission_list, key=lambda x: int(x['content_type'])) data = { 'id' : user . id , 'token' : token . access_token , 'name' : user . get_full_name (), 'permission_list' : permission_list } return success_response ( data ) \u4f7f\u7528orm\u7b5b\u9009\u540e\u591a\u6b21\u5bf9queryset\u5e8f\u5217\u5316 \u8017\u65f6\uff1a 0.20399999618530273 # \u83b7\u53d6\u6839\u636e\u6a21\u578b\u5f97\u5230\u7684\u6743\u9650\u5217\u8868 permission_list = [] perm_data = PermissionSerializer ( request . user . user_permissions , many = True ) . data for model in django . apps . apps . get_models (): content_type = ContentType . objects . get_for_model ( model ) model_permissions = [ data for data in perm_data if data [ 'content_type' ] == content_type . id ] permission_list . append ({ 'name' : model . _meta . verbose_name , 'content_type' : content_type . id , 'model' : content_type . model , 'permissions' : model_permissions }) data = { 'id' : user . id , 'token' : token . access_token , 'name' : user . get_full_name (), 'permission_list' : sorted ( permission_list , key = lambda x : x [ 'content_type' ])} return success_response ( data ) \u4e00\u6b21\u5e8f\u5217\u5316\u5f97\u5230list\u518d\u5bf9\u6bd4 \u8017\u65f6:0.04799985885620117 \u6027\u80fd\u5bf9\u6bd4\uff1a @list_route ( methods = [ 'GET' ]) def test ( self , request ): users = request . user lists = [] for x in range ( 0 , 1000 ): lists . append ( users ) start_time = time . time () data1 = UserListSerializer ( lists , many = True , context = self . get_serializer_context ()) . data end_time = time . time () print ( end_time - start_time ) start_time = time . time () for user in lists : data = UserListSerializer ( user , context = self . get_serializer_context ()) . data end_time = time . time () print ( end_time - start_time ) return success_response ( '' ) \u5e73\u5747\u8017\u65f6\u4e3a\uff1a0.1s 0.5s \u8bbe\u7f6e\u5b57\u6bb5\u9009\u586b\u3001\u5fc5\u586b extra_kwargs = { 'pre_student' : { 'required' : True }} extra_kwargs = { 'username' : { 'required' : False }} \u5c06\u5e8f\u5217\u5316\u9519\u8bef\u8f6c\u6362\u6210\u53ef\u8bfb\u8bed\u8a00 # \u5c06serializer\u4e2d\u7684\u9519\u8bef\u89e3\u6790\u4e3a\u4ea4\u4e92\u66f4\u53cb\u597d\u7684\u5f62\u5f0f class HumanizationSerializerErrorsMixin(object): # humanization_serializer_errors def humanize_errors(self, serializer=None, errors=None): \"\"\" \u5c06serializer\u4e2d\u7684\u9519\u8bef\u89e3\u6790\u4e3a\u4ea4\u4e92\u66f4\u53cb\u597d\u7684\u5f62\u5f0f :param serializer: \u5e8f\u5217\u5316\u7c7b :param errors: \u5bf9\u5e94\u9519\u8bef :return: \u4ea4\u4e92\u53cb\u597d\u7684\u9519\u8bef\u63d0\u793a \"\"\" humanization_errors = [] if serializer is None: serializer = self if errors is None: errors = serializer.errors if isinstance(errors, list): for error in errors: humanization_errors.append(str(error)) elif isinstance(errors, ErrorDetail): humanization_errors.append(str(errors)) else: fields = serializer.get_fields() for key, values in errors.items(): try: field = fields[key] # field\u4e2d\u6709model\u5219\u4f7f\u7528model verbose_name = field.label if field.label else key # \u89e3\u6790\u5b50\u9519\u8bef-\u9012\u5f52 if isinstance(field, serializers.Serializer): values = self.humanize_errors(field, errors=values) elif isinstance(field, serializers.ListSerializer): values = [self.humanize_errors(field.child, errors=x) for x in values] except KeyError: if isinstance(serializer, ModelSerializer): model = serializer.Meta.model verbose_name = model._meta.verbose_name else: verbose_name = key errors_text = values if isinstance(values, str) else ' '.join([str(x) for x in values]) humanization_errors.append('{}:{}'.format(str(verbose_name), errors_text)) return '; '.join(humanization_errors) \u67e5\u770bDRF\u81ea\u52a8\u751f\u6210\u7684Serializer\u5185\u5bb9 python from user.serializers import UserSerializer serializer = UserSerializer() print(repr(serializer)) BaseSerializer\u5982\u4f55\u5224\u65adsave\u65b9\u6cd5\u5f53\u524d\u662f\u65b0\u589e\u8fd8\u662f\u66f4\u65b0 \u6709\u6210\u5458\u53d8\u91cfinstance,\u6ca1\u6709\u6539instance\u65f6save\u65b9\u6cd5\u8c03\u7528create\u65b9\u6cd5,\u6709\u8be5instance\u65f6\u8c03\u7528update\u65b9\u6cd5 if self . instance is not None : self . instance = self . update ( self . instance , validated_data ) assert self . instance is not None , ( '`update()` did not return an object instance.' ) else : self . instance = self . create ( validated_data ) assert self . instance is not None , ( '`create()` did not return an object instance.' ) vaildate\u6307\u5b9a\u9519\u8bef\u5bf9\u5e94\u7684\u5b57\u6bb5\u65b9\u6cd5 raise serializers.ValidationError({'discountcouponrecord': ['\u4ec5\u53ef\u4f7f\u7528\u8be5\u5b66\u5458\u9886\u53d6\u7684\u4f18\u60e0\u5238']}) vaildate\u8c03\u7528model\u4e2dclean\u65b9\u6cd5 DRF3.0\u540e\uff0cModelSerializer\u7684validate\u9ed8\u8ba4\u4e0d\u4f1a\u518d\u8c03\u7528model\u7684clean\u65b9\u6cd5\uff0c\u58f0\u660e\u89c1\u6b64\u3002\u9700\u8981\u624b\u52a8\u8c03\u7528model\u7684clean\u65b9\u6cd5\uff1a def validate ( self , data ): instance = self . Meta . model ( ** data ) instance . clean () return data \u91cd\u5199ModelSerializer \u5c06None\u5e8f\u5217\u5316\u4e3a '' \u800c\u4e0d\u662f 'null' class ModelSerializer ( serializers . ModelSerializer ): def to_representation ( self , instance ): \"\"\" Object instance -> Dict of primitive data types. \"\"\" ret = OrderedDict () fields = [ field for field in self . fields . values () if not field . write_only ] for field in fields : try : key = field . get_attribute ( instance ) except SkipField : continue if key is not None : value = field . to_representation ( key ) # \u5b50\u5bf9\u8c61\u4e2d\u6709\u5bf9\u8c61\u4e3a\u7a7a \u4f9d\u65e7\u5e8f\u5217\u5316 # if value is None: # # Do not serialize empty objects # print('empty objects') # continue # \u5b50\u5bf9\u8c61\u4e2d\u6709\u5217\u8868\u4e3a\u7a7a \u4f9d\u65e7\u5e8f\u5217\u5316 eg:Moment->photos\u4e3a\u7a7a\u4f9d\u65e7\u8981\u5e8f\u5217\u5316 # if isinstance(value, list) and not value: # # Do not serialize empty lists # print('empty lists') # continue ret [ field . field_name ] = value # print(field.field_name, value) else : # value None to '' rather tan 'null' # print(field.field_name, field.to_representation(key), '\u6709\u7a7a\u503c') ret [ field . field_name ] = '' # \u4e3aserializers\u4e2d\u52a8\u6001\u6dfb\u52a0\u7684context\u8d4b\u503c\u8f93\u51fa for field in self . context : # context defaults to including 'request', 'view' and 'format' keys. if field not in [ 'request' , 'view' , 'format' ]: ret [ field ] = self . context [ field ] return ret 2. \u65b0\u589e\u65f6model\u8bbe\u7f6e\u4e86null=True\u7684\u5b57\u6bb5\u4e5f\u8981\u6c42\u5fc5\u586b\uff08\u548cform\u4e00\u81f4\uff09 class ModelSerializer ( serializers . ModelSerializer ): def build_field ( self , field_name , info , model_class , nested_depth ): \"\"\" Return a two tuple of (cls, kwargs) to build a serializer field with. \u91cd\u65b0\u8be5\u65b9\u6cd5\u4ee5\u4fdd\u8bc1model\u4e2dField\u5728null=True\u7684\u60c5\u51b5\u4e0b\u4f9d\u65e7\u662f\u5fc5\u586b\u9879 field_kwargs\u4e2drequired\u53c2\u6570\u539f\u59cb\u5224\u65ad\u4f9d\u636e (build_field->build_standard_field \\ build_relational_field->get_field_kwargs\\get_relation_kwargs): if model_field.has_default() or model_field.blank or model_field.null: kwargs['required'] = False \u66f4\u65b0\u540e\u4f9d\u636e: if model_field.has_default() or model_field.blank: field_kwargs['required'] = False else: field_kwargs['required'] = True \"\"\" if field_name in info . fields_and_pk : # \u666e\u901afield \u90e8\u5206 model_field = info . fields_and_pk [ field_name ] field_class , field_kwargs = self . build_standard_field ( field_name , model_field ) field_kwargs [ 'required' ] = False if ( model_field . has_default () or model_field . blank ) else True return field_class , field_kwargs elif field_name in info . relations : # FK\\M2M \u90e8\u5206 relation_info = info . relations [ field_name ] if not nested_depth : field_class , field_kwargs = self . build_relational_field ( field_name , relation_info ) model_field , related_model , to_many , to_field , has_through_model , reverse = relation_info field_kwargs [ 'required' ] = False if ( model_field . has_default () or model_field . blank ) else True return field_class , field_kwargs else : return self . build_nested_field ( field_name , relation_info , nested_depth ) elif hasattr ( model_class , field_name ): return self . build_property_field ( field_name , model_class ) elif field_name == self . url_field_name : return self . build_url_field ( field_name , model_class ) return self . build_unknown_field ( field_name , model_class ) DynamicFieldsModelSerializer # \u52a8\u6001\u83b7\u53d6Fields class DynamicFieldsModelSerializer ( ModelSerializer ): \"\"\" A ModelSerializer that takes an additional `fields` argument that controls which fields should be displayed. \"\"\" def __init__ ( self , * args , ** kwargs ): # Don't pass the 'fields' arg up to the superclass fields = kwargs . pop ( 'fields' , None ) exclude = kwargs . pop ( 'exclude' , None ) # Instantiate the superclass normally super ( DynamicFieldsModelSerializer , self ) . __init__ ( * args , ** kwargs ) if fields is not None : # Drop any fields that are not specified in the `fields` argument. allowed = set ( fields ) existing = set ( self . fields . keys ()) for field_name in existing - allowed : self . fields . pop ( field_name ) if exclude is not None : not_allowed = set ( exclude ) for exclude_name in not_allowed : self . fields . pop ( exclude_name ) \u7528\u6cd5\uff1a DynamicFieldsModelSerializer ( data = data , fields = ( 'name' )) DynamicFieldsModelSerializer ( data = data , exclude = ( 'name' )) DictField\u4f7f\u7528 from rest_framework.serializers import DictField from django.utils import six class MyDictField ( DictField ): def to_internal_value ( self , data ): \"\"\" Dicts of native values <- Dicts of primitive datatypes. \"\"\" # if html.is_html_input(data): # data = html.parse_html_dict(data) if not isinstance ( data , dict ): self . fail ( 'not_a_dict' , input_type = type ( data ) . __name__ ) return { six . text_type ( key ): self . child . run_validation ( value ) for key , value in data . items () } class FavoritesModifySerializer ( ModelSerializer ): data_params = MyDictField ( child = serializers . CharField ()) ... def create ( self , validated_data ): print ( validated_data ) data_dic = validated_data . pop ( \"data_params\" ) print ( data_dic ) return super ( FavoritesModifySerializer , self ) . create ( validated_data ) PostMan\u4e2d\u53d1\u9001key:data_params.data value:\u5475\u5475\uff0c\u63a7\u5236\u53f0\u8f93\u51fa\uff1a {'user': , 'cover': , 'name': '1', 'posts': [], 'data_params': {'data': '\u5475\u5475'}, 'categor y': 1} {'data': '\u5475\u5475'} \u91cd\u5199to_representation\u65b9\u6cd5 def to_representation ( self , instance ): serialized_data = super ( SerializerClass , self ) . to_representation ( instance ) serialized_data [ 'override_field' ] = 'some data' return serialized_data source name = serializers . CharField ( source = 'user.full_name' ) \u81ea\u5b9a\u4e49unique_together\u63d0\u793a\u4fe1\u606f \u65b9\u6cd5\u4e00\uff1a class MedicineEscapeModifySerializer ( ModelSerializer ): class Meta : model = MedicineEscape fields = ( 'hospital' , 'medicine' , 'medicine_form' , 'hospital_medicine_name' , 'hospital_medicine_no' , 'remarks' ) validators = [ serializers . UniqueTogetherValidator ( queryset = model . objects . all (), fields = ( 'hospital' , 'hospital_medicine_name' ), message = '\u533b\u9662\u4e0d\u53ef\u91cd\u590d\u5173\u8054\u540c\u4e00\u533b\u9662\u836f\u54c1\u540d\u79f0;' ), serializers . UniqueTogetherValidator ( queryset = model . objects . all (), fields = ( 'hospital' , 'hospital_medicine_no' ), message = '\u533b\u9662\u4e0d\u53ef\u91cd\u590d\u5173\u8054\u540c\u4e00\u533b\u9662\u836f\u54c1\u7f16\u7801;' ) ] \u65b9\u6cd5\u4e8c\uff1a class MedicineEscapeModifySerializer ( ModelSerializer ): class Meta : model = MedicineEscape fields = ( 'hospital' , 'medicine' , 'medicine_form' , 'hospital_medicine_name' , 'hospital_medicine_no' , 'remarks' ) def get_unique_together_validators ( self ): validators = super ( MedicineEscapeModifySerializer , self ) . get_unique_together_validators () print ( self . initial_data ) for validator in validators : if validator . fields == ( 'hospital' , 'hospital_medicine_name' ): validator . message = '\u533b\u9662\u4e0d\u53ef\u91cd\u590d\u5173\u8054\u540c\u4e00\u533b\u9662\u836f\u54c1\u540d\u79f0;' if validator . fields == ( 'hospital' , 'hospital_medicine_no' ): validator . message = '\u533b\u9662\u4e0d\u53ef\u91cd\u590d\u5173\u8054\u540c\u4e00\u533b\u9662\u836f\u54c1\u7f16\u7801;' return validators \u53ea\u5bf9admin\u3001form\u6709\u6548, \u5bf9serializer\u65e0\u6548\u7684\u65b9\u6cd5\uff1a class MedicineEscape ( models . Model ): .... def unique_error_message ( self , model_class , unique_check ): \"\"\"\u53ea\u5bf9admin\u3001form\u6709\u6548 \u5bf9serializer\u65e0\u6548\"\"\" if model_class == type ( self ) and unique_check == ( 'hospital' , 'hospital_medicine_name' ): return ' {} \u4e0d\u53ef\u91cd\u590d\u5173\u8054 {} ' . format ( self . hospital . name , self . hospital_medicine_name ) else : return super ( MedicineEscape , self ) . unique_error_message ( model_class , unique_check ) View\u76f8\u5173 \u83b7\u53d6url\u53c2\u6570 \u8bf7\u6c42url\u4e3ahttp://192.168.1.108/discount_coupon/?name=xxx \u65b9\u6cd5\u4e00\uff1a name = self.request.query_params.get('name') \u65b9\u6cd5\u4e8c\uff1a name = self.request.GET.get('name') str\u8f6cdict\u65b9\u6cd5 import ast def literal_eval ( data ): \"\"\" :param data: str\u6216\u8005dict :return: dict or None \"\"\" if isinstance ( data , dict ): return data else : try : return ast . literal_eval ( data ) except ( SyntaxError , ValueError ): return None get_list\u9002\u914d from django.http import QueryDict def get_list ( _dict , key ): \"\"\" :param _dict: QueryDict or dict :param key: list \u952e\u540d :return: _dict\u4e2dkey\u5bf9\u5e94\u7684list \"\"\" if isinstance ( _dict , QueryDict ): return _dict . getlist ( key ) else : return _dict [ key ] \u7528\u6cd5\uff1aget_list(request.data, 'ids') \u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u63a5\u6536\u5230\u7684request.data\u53ef\u80fd\u662fdict\u4e5f\u53ef\u80fd\u662fQueryDict\uff0c\u4e0d\u540c\u7c7b\u578b\u65f6\u53d6list\u65f6\u65b9\u6cd5\u4e0d\u540c\u3002\u524d\u7aef\u4f7f\u7528Ajax\u65f6\u9700\u8981\u8bbe\u7f6etraditional: true\uff0ctraditional\u4e3afalse\uff0c\u5373jquery\u4f1a\u6df1\u5ea6\u5e8f\u5217\u5316\u53c2\u6570\u5bf9\u8c61\uff0c\u4ee5\u9002\u5e94\u5982PHP\u548cRuby on Rails\u6846\u67b6\uff0c\u4f46DRF\u65e0\u6cd5\u5904\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6etraditional\u4e3atrue\u963b\u6b62\u6df1\u5ea6\u5e8f\u5217\u5316\u3002 \u5411request.data\u4e2d\u6dfb\u52a0\u6570\u636e data = request.data.copy() \u5f00\u9500\u5927\uff0c\u4e0d\u53cb\u597d request.data._mutable = True \u63a8\u8350\u4f7f\u7528\uff0c\u8bbe\u7f6e\u53ef\u4fee\u6539\u6807\u5fd7\u4f4dTrue queryset\u61d2\u52a0\u8f7d class UserList ( ModelViewSet ): queryset = User . objects . all () queryset\u5bf9\u8c61\u53ea\u4f1a\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u65f6\u5019\u53bb\u6570\u636e\u5e93\u53d6\u4e00\u6b21\u503c\uff0c\u4e4b\u540e\u4f7f\u7528\u7684\u7ed3\u679c\u5747\u4e3a\u7f13\u5b58\u503c\uff0c\u5982\u7a0b\u5e8f\u542f\u52a8\u65f6queryset\u5185\u6709\u3010\u7528\u62371\u3011\uff0c\u540e\u9762\u65b0\u589e\u4e86\u3010\u7528\u62372\u3011\uff0c\u518d\u6b21\u53bb\u53d6\u8be5queryset\u5bf9\u8c61\u4f9d\u65e7\u53ea\u6709\u3010\u7528\u62371\u3011\u3002 \u60f3\u8981\u83b7\u53d6\u5230\u5b9e\u65f6\u7684\u6570\u636e\u5e93queryset,\u9700\u8981\u8c03\u7528queryset.all()\u65b9\u6cd5\u6765\u91cd\u65b0\u81f3\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e\u3002ModelViewSet\u7684\u9ed8\u8ba4get_queryset\u65b9\u6cd5\u5982\u4e0b\uff1a def get_queryset ( self ): \"\"\" Get the list of items for this view. This must be an iterable, and may be a queryset. Defaults to using `self.queryset`. This method should always be used rather than accessing `self.queryset` directly, as `self.queryset` gets evaluated only once, and those results are cached for all subsequent requests. You may want to override this if you need to provide different querysets depending on the incoming request. (Eg. return a list of items that is specific to the user) \"\"\" assert self . queryset is not None , ( \"' %s ' should either include a `queryset` attribute, \" \"or override the `get_queryset()` method.\" % self . __class__ . __name__ ) queryset = self . queryset if isinstance ( queryset , QuerySet ): # Ensure queryset is re-evaluated on each request. queryset = queryset . all () return queryset \u53ef\u89c1\uff1a queryset = queryset.all() # Ensure queryset is re-evaluated on each request . DRF view doc Auth\u76f8\u5173 \u5f00\u542fSessionAuthentication\u65f6403 DRF\u5728\u5f00\u542fSessionAuthentication\u65f6\u4f1a\u5bfc\u81f4\u6743\u9650\u8bbe\u7f6e\u6210AllowAny\u65f6\u4f9d\u65e7\u4f1a\u51fa\u73b0403\u8fd4\u56de\uff0c\u8be6\u60c5\u4e3aCSRF Failed: CSRF token missing or incorrent\u3002 \u5220\u9664SessionAuthentication\u53ea\u4f7f\u7528TokenAuthentication\u5373\u53ef\uff0c\u4f46\u662fDjango\u9ed8\u8ba4\u4f7f\u7528session\u8fdb\u884c\u8ba4\u8bc1\uff0c\u8fd9\u5c06\u5bfc\u81f4\u767b\u9646\u540e\u53f0\u6210\u529f\u540e\u65e0\u6cd5\u6d4f\u89c8DRF\u7684\u53ef\u89c6\u5316API\uff08browsable api\uff09\uff0c \u4f7f\u7528chrome\u63d2\u4ef6 ModHeader \u5373\u53ef\u5c06\u6d4f\u89c8\u5668\u8bf7\u6c42\u52a0\u5165token\u5934\u90e8\u6d4f\u89c8\u53ef\u89c6\u5316API\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002 \u5217\u8868\u76f8\u5173 \u591a\u91cd\u6761\u4ef6\u8fc7\u6ee4\u3001\u6392\u5e8f\u3001\u641c\u7d22 settings.py REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS' : ( # \u591a\u91cd\u6761\u4ef6\u8fc7\u6ee4 'django_filters.rest_framework.DjangoFilterBackend' , # \u6392\u5e8f 'rest_framework.filters.OrderingFilter' , # \u641c\u7d22 'rest_framework.filters.SearchFilter' ), 'ORDERING_PARAM' : 'ordering' , 'SEARCH_PARAM' : 'search' , } filters.py from django_filters.rest_framework import FilterSet class UserFilter ( FilterSet ): class Meta : model = User fields = { 'username' : [ 'exact' , 'icontains' ], 'tel' : [ 'exact' , 'icontains' , 'isnull' ] } views.py class EmailViewSet ( viewsets . ModelViewSet ): queryset = Email . objects . all () serializer_class = EmailCreateSerializer permission_classes = ( IsAuthenticated ,) filter_class = UserFilter ordering_fields = '__all__' search_fields = ( 'name' , ) \u7528\u6cd5\uff1a \u8fc7\u6ee4\uff1ahttp://192.168.1.108/email/?name=GG&id=2 \u6392\u5e8f\uff1ahttp://192.168.1.108/email/?ordering=-name,id \u641c\u7d22\uff1ahttp://192.168.1.108/email/?search=GG \ufefforder_by\u51fd\u6570\u4f1a\u6309\u7167\u4f20\u9012\u4f20\u8f93\u7684\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u4f20\u9012(name, id)\uff0c\u610f\u601d\u4e3a\u5728name\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u6309\u7167id\u81ea\u589e\u7684\u987a\u5e8f\u8fdb\u884c\u6392\u5217\uff0c\u540e\u9762\u7684\u6761\u4ef6\u53ea\u6709\u5728\u524d\u9762\u7684\u6761\u4ef6\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u751f\u6548\u3002 \u5206\u9875\u76f8\u5173 \u52a8\u6001\u8bbe\u7f6e\u5206\u9875\u4e2d\u6bcf\u9875\u4e2a\u6570 \u52a8\u6001\u5f00\u5173\u5206\u9875 # \u5206\u9875 class Pagination ( PageNumberPagination ): # django_paginator_class = DjangoPaginator page_number = 1 page_size_query_param = 'page_size' max_page_size = 100 def paginate_queryset ( self , queryset , request , view = None ): \"\"\" \u4f7f\u7528page_size\u53c2\u6570\u9650\u5236\u6bcf\u9875\u6761\u6570 \u8d85\u51fa\u9875\u7801\u8303\u56f4\u8fd4\u56de\u7b2c\u4e00\u9875 \u6700\u540e\u4e00\u9875\u9875\u7801\u7528last\u8868\u793a \"\"\" page_size = self . get_page_size ( request ) if not page_size : return None paginator = self . django_paginator_class ( queryset , page_size ) self . page_number = request . query_params . get ( self . page_query_param , 1 ) if self . page_number in self . last_page_strings : self . page_number = paginator . num_pages try : self . page = paginator . page ( self . page_number ) except InvalidPage : # \u975e\u6cd5\u9875\u7801\u8fd4\u56de\u7b2c\u4e00\u9875 self . page_number = '1' self . page = paginator . page ( self . page_number ) if paginator . num_pages > 1 and self . template is not None : # The browsable API should display pagination controls. self . display_page_controls = True self . request = request return list ( self . page ) def get_page_size ( self , request ): \"\"\" page_size > 0 \u4f7f\u7528\u65b0page_size page_size = 0 \u65f6\u4e0d\u5206\u9875 page_size < 0 \u65f6\u4f7f\u7528\u9ed8\u8ba4page_size \"\"\" if self . page_size_query_param : page_size = min ( int ( request . query_params . get ( self . page_size_query_param , self . page_size )), self . max_page_size ) if page_size > 0 : return page_size elif page_size == 0 : return None else : pass return self . page_size \u7528\u6cd5\uff1a \u6bcf\u98755\u6761\uff1aget https://www.example.com/post/?page_size=5 \u4e0d\u5f00\u542f\u5206\u9875\uff1aget https://www.example.com/post/?page_size=0 \u91cd\u5199\u5206\u9875\u8fd4\u56de\u7ed3\u679c class Pagination ( PageNumberPagination ): # django_paginator_class = DjangoPaginator def get_paginated_response ( self , data ): return Response ( OrderedDict ([ ( 'count' , self . page . paginator . count ), ( 'num_pages' , self . page . paginator . num_pages ), ( 'next' , self . get_next_link ()), ( 'previous' , self . get_previous_link ()), ( 'results' , data ) ])) Django1.11.1 Paginator\u65b0\u589eUnorderedObjectListWarning\u68c0\u6d4b Q:Django1.11.1 Paginator\u65b0\u589eUnorderedObjectListWarning\u68c0\u6d4b,\u8981\u6c42DRF\u7684queryset\u6216\u8005get_queryset\u4e4b\u540e\u8fdb\u884c\u6392\u5e8f \u4ee5\u9632\u6b62\u591a\u6b21\u5206\u9875\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c A\uff1a \u65b9\u6cd5\u4e00: from django.core.paginator import Paginator # \u5c4f\u853dUnorderedObjectListWarning class DjangoPaginator ( Paginator ): def _check_object_list_is_ordered ( self ): \"\"\" Warn if self.object_list is unordered (typically a QuerySet). Pagination may yield inconsistent results with an unordered \"\"\" pass # \u5206\u9875 class Pagination ( PageNumberPagination ): # django_paginator_class = DjangoPaginator \u65b9\u6cd5\u4e8c\uff1a \u6ca1\u6709\u91cd\u5199get_queryset\u65b9\u6cd5\u7684ModelViewSet(\u6dfb\u52a0\u4e86order_by): queryset = MessageTemplate.objects.all().order_by('id') \u91cd\u5199\u4e86get_queryset\u65b9\u6cd5\u7684ModelViewSet(\u6dfb\u52a0\u4e86order_by): def get_queryset ( self ): queryset = MessageTemplate . objects . filter ( Q ( publisher = self . request . user , is_private = True ) | Q ( is_private = False )) . order_by ( 'id' ) \u200b return queryset \u6743\u9650\u76f8\u5173 ViewSet model\u6743\u9650 class DRFModelPermissions ( permissions . DjangoModelPermissions ): \"\"\" Similar to `DjangoModelPermissions`, but adding 'view' permissions. \"\"\" perms_map = { 'GET' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'OPTIONS' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'HEAD' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'POST' : [ ' %(app_label)s .add_ %(model_name)s ' ], 'PUT' : [ ' %(app_label)s .change_ %(model_name)s ' ], 'PATCH' : [ ' %(app_label)s .change_ %(model_name)s ' ], 'DELETE' : [ ' %(app_label)s .delete_ %(model_name)s ' ], } \u4f7f\u7528list_router\u548cdetail_router\u65f6\uff0c\u4f1a\u6839\u636e\u8bbf\u95ee\u7684\u65b9\u6cd5\u7c7b\u578b\u8981\u6c42\u5bf9\u5e94\u7684\u6743\u9650\u3002 ViewSet model\u6743\u9650 \u6307\u5b9amodel class DRFCertainModelPermissions ( DRFModelPermissions ): \"\"\" Certain model with permission_model in ViewSet for DRFModelPermissions \"\"\" def get_model ( self , view ): if not hasattr ( view , 'permission_model' ): raise ImproperlyConfigured ( 'permission_model must be override in ViewSet which used ' 'DRFCertainModelPermissions.' ) return getattr ( view , 'permission_model' ) def has_permission ( self , request , view ): # Workaround to ensure DjangoModelPermissions are not applied # to the root view when using DefaultRouter. if getattr ( view , '_ignore_model_permissions' , False ): return True if not request . user or ( not request . user . is_authenticated and self . authenticated_users_only ): return False perms = self . get_required_permissions ( request . method , self . get_model ( view )) return request . user . has_perms ( perms ) \u7528\u6cd5\uff1a class LabelPrinterViewSet ( ModelViewSet ): queryset = LabelPrinter . objects . all () permission_classes = ( DRFCertainModelPermissions ,) permission_model = Label \u5219\u53ef\u4ee5\u8ba9LabelPrinterViewSet\u7684CRUD\u5bf9\u5e94\u4f7f\u7528Label\u7684CRUD\u6743\u9650\u3002 ViewSet model\u6743\u9650 \u5047\u5220\u9664 \u5047\u5220\u9664\u65f6\uff0c\u5220\u9664\u5b9e\u9645\u4e0a\u4e3a\u4f5c\u5e9f\uff0c\u8c03\u6574\u5220\u9664\u9700\u8981\u7684\u6743\u9650\u4e3a\u4fee\u6539\u6743\u9650\u5373\u53ef\u3002 class DRFModelDeleteAsChangePermissions ( permissions . DjangoModelPermissions ): \"\"\" Similar to `DjangoModelPermissions`, but adding 'view' permissions. Delete action use same permissions as PUT/PATCH action. \"\"\" perms_map = { 'GET' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'OPTIONS' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'HEAD' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'POST' : [ ' %(app_label)s .add_ %(model_name)s ' ], 'PUT' : [ ' %(app_label)s .change_ %(model_name)s ' ], 'PATCH' : [ ' %(app_label)s .change_ %(model_name)s ' ], 'DELETE' : [ ' %(app_label)s .change_ %(model_name)s ' ], } ViewSet\u4e2dpermission_classes\u68c0\u67e5\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u8fdb\u884c\uff0c\u9700\u8981\u5c06\u524d\u63d0\u6743\u9650\u7c7b\u653e\u5728\u6700\u524d\u9762\u3002 permission_classes = ( DRFModelPermissions , IsAuthenticated ,) permission_classes = ( IsAuthenticated , DRFModelPermissions , ) \u524d\u4e00\u79cd\u60c5\u51b5\u4f1a\u5bfc\u81f4\u672a\u767b\u9646\u7684\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u5230\u6240\u6709\u63a5\u53e3\uff0c\u540e\u4e00\u79cd\u60c5\u51b5\u624d\u80fd\u591f\u771f\u6b63\u9650\u5236\u7528\u6237\u5fc5\u987b\u767b\u9646\u5e76\u4e14\u5177\u6709\u6a21\u578b\u6743\u9650\u3002\u56e0\u4e3aIsAuthenticated\u8981\u6c42\u7528\u6237\u767b\u9646\uff0cDRFModelPermissions\u5224\u65ad\u767b\u9646\u7528\u6237\u662f\u5426\u6709\u5bf9\u5e94\u7684\u6a21\u578b\u6743\u9650\uff0c\u5176\u524d\u7f6e\u6761\u4ef6\u4e3a\u8981\u6c42\u7528\u6237\u4e3a\u767b\u9646\u7528\u6237\u3002 \u52a8\u6001\u6743\u9650\u68c0\u67e5 \u65b9\u6cd51\uff08\u81ea\u5df1\u5199\u7684 \u4e0d\u63a8\u8350 \u4f1a\u5bfc\u81f4\u6240\u6709\u63a5\u53e3\u8c03\u7528\u524d\u591a\u4e00\u6b21\u4e0d\u5fc5\u8981\u7684\u6743\u9650\u5bf9\u8c61\u662f\u7c7b\u8fd8\u662f\u5b9e\u4f8b\u7684\u5224\u65ad\uff09\uff1a class ModelViewSet : ... def get_permissions ( self ): \"\"\" Instantiates and returns the list of permissions that this view requires. \u517c\u5bb9\u5b9e\u4f8b\u6216\u7c7b \"\"\" permissions = [] for permission in self . permission_classes : if isinstance ( permission , type ): # \u7c7b permissions . append ( permission ()) else : # \u5b9e\u4f8b permissions . append ( permission ) return permissions permissions.py: class DynamicPermsClass ( permissions . BasePermission ): \"\"\" \u52a8\u6001\u6743\u9650\u68c0\u67e5 \u9700\u8981\u8c03\u6574ModelViewSet\u4e2dget_permissions\u65b9\u6cd5\u517c\u5bb9 usage: DynamicPermsClass(['app_label.action_model', ]) \"\"\" permissions = [] def __init__ ( self , * args , ** kwargs ): self . permissions = args [ 0 ] if len ( args ) > 0 else [] super ( DynamicPermsClass , self ) . __init__ () def has_permission ( self , request , view ): print ( 'has_permission' , self . permissions ) if request . user and request . user . is_authenticated and request . user . has_perms ( self . permissions ): return True else : return False views.py: @action ( methods = [ 'GET' ], detail = False , serializer_class = None , permission_classes = [ DynamicPermsClass ([ 'demo.view_demo' ]), ]) def demo ( self , request , * args , ** kwargs ): \u65b9\u6cd52\uff08\u7531django-rest-framework-rules\u6539\u9020\u800c\u6765\uff09\uff1a mixins.py: class PermissionRequiredMixin ( object ): \"\"\" \u6e90\u4e8edjango-rest-framework-rules \u7528\u4e8e\u81ea\u5b9a\u4e49\u7684action\u65b9\u6cd5 usage: @action(methods=['GET'], detail=False, permission_required='prescription.view_patient') or @action(methods=['GET'], detail=False, permission_required=['prescription.view_patient', 'prescription.view_doctor']) \"\"\" permission_required = None def get_permission_required ( self ): if self . permission_required is None : # This prevents a misconfiguration of the view into which the mixin # is mixed. If the mixin is used, at least one permission should be # required. raise ImproperlyConfigured ( ' {0} is missing the permission_required attribute. Define ' ' {0} .permission_required, or override ' ' {0} .get_permission_required().' . format ( self . __class__ . __name__ ) ) if isinstance ( self . permission_required , str ): perms = ( self . permission_required ,) else : perms = self . permission_required return perms def check_permissions ( self , request ): if request . user . has_perms ( self . get_permission_required ()): return super ( PermissionRequiredMixin , self ) . check_permissions ( request ) else : self . permission_denied ( request , message = '\u60a8\u6ca1\u6709\u6267\u884c\u8be5\u64cd\u4f5c\u7684\u6743\u9650' ) decorators.py: def permission_required ( permissions ): \"\"\" \u6e90\u81ea\u6e90\u4e8edjango-rest-framework-rules \u7528\u4e8ecreate\u3001update\u3001destroy \u7b49\u5185\u7f6e\u65b9\u6cd5 usage: @permission_required('demo.add_demo') def create(self, request, *args, **kwargs) \"\"\" def decorator ( view ): def wrapped_view ( self , request , * args , ** kwargs ): if isinstance ( permissions , str ): perms = ( permissions ,) else : perms = permissions if not request . user . has_perms ( perms ): # raises a permission denied exception causing a 403 response self . permission_denied ( request , message = '\u60a8\u6ca1\u6709\u6267\u884c\u8be5\u64cd\u4f5c\u7684\u6743\u9650(\u7279\u6b8a\u6743\u9650\u68c0\u67e5\u672a\u901a\u8fc7)' ) return view ( self , request , * args , ** kwargs ) return wrapped_view return decorator \u6587\u6863\u751f\u6210 \u5b89\u88c5 \u9700\u8981\u5b89\u88c5coreapi\u5e93\u7528\u4e8e\u6587\u6863\u751f\u6210\u3002\u6ce8\u91ca\u8bed\u6cd5\u4f7f\u7528markdown\u8bed\u6cd5,\u9700\u8981\u5b89\u88c5markdown\u5e93\u3002 from rest_framework.documentation import include_docs_urls urlpatterns = [ ... url ( r '^docs/' , include_docs_urls ( title = 'My API title' )) ] \u6ce8\u91ca\u65b9\u6cd5 class UserViewSet ( viewsets . ModelViewSet ): \"\"\" retrieve: Return the given user. list: Return a list of all the existing users. create: Create a new user instance. \"\"\" @list_route ( methods = [ 'POST' ], permission_classes = [ AllowAny ], serializer_class = None ) def refresh_token ( self , request ): \"\"\" \u5237\u65b0\u4ee4\u724c \u3010\u63a5\u6536\u3011token: \u4ee4\u724c \u3010\u8fd4\u56de\u3011200 \u65b0\u4ee4\u724c 400-1 \u6570\u636e\u683c\u5f0f\u9519\u8bef 400-2 \u4ee4\u724c\u9519\u8bef \"\"\" \u4e2a\u6027\u5316 \u8868\u683c\u63cf\u8ff0\u6539\u4e3aserializer\u4e2dfield\u7684label,\u5e76\u52a0\u5165\u7c7b\u578b\uff0c\u4e3aChoiceField\u65f6\u5217\u51fa\u9009\u9879\u5185\u5bb9\uff1a \u4fee\u6539rest_framework/schema/inspectors.py\u4e2d\u7684field_to_schema\u65b9\u6cd5\uff1a description = '\u3010 {} \u3011 {} ' . format ( field . __class__ . __name__ , force_text ( field . label ) if field . label else '' ) # ChoiceField \u5217\u51fa\u9009\u9879\u5185\u5bb9 if isinstance ( field , ChoiceField ): description += ' \u3010\u9009\u9879\u3011' for key , value in field . choices . items (): description += ' {} - {} ' . format ( key , value ) \u5de6\u4fa7\u5bfc\u822a\u4fee\u6539\u4e3a\u4e2d\u6587 \u4fee\u6539 rest_framework/schema/generators.py SchemaGenerator\u7c7b\u4e2d\u7684get_keys\u65b9\u6cd5\uff1a # \u4fee\u6539user->\u7528\u6237 named_path_components = [ component for component in subpath . strip ( '/' ) . split ( '/' ) if '{' not in component ] named_path_components [ 0 ] = view . queryset . model . _meta . verbose_name . title () \u52a0\u5165\u81ea\u5b9a\u4e49\u65b9\u6cd5\u652f\u6301 \u4fee\u6539 rest_framework/schema/generators.py\u4e2d\u7684is_custom_action\u65b9\u6cd5\u4e3a\uff1a def is_custom_action ( action ): return action not in { 'retrieve' , 'list' , 'create' , 'update' , 'partial_update' , 'destroy' , 'bulk_update' , 'bulk_destroy' } \u6700\u7ec8\u751f\u6210\u6587\u6863\u6548\u679c\uff1a Documenting your API \u5176\u4ed6 \u533a\u5206\u8def\u5f84\u7c7b\u578b \u4ee5/\u5f00\u5934\u7684\u8def\u5f84\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u5426\u5219\u4f1a\u9ed8\u8ba4\u53d6\u76f8\u5bf9\u8def\u5f84\u3002 Router\u9ed8\u8ba4base_name \u4ee5viewset\u4e2d\u7684queryset\u53c2\u6570\u4f5c\u4e3a\u9ed8\u8ba4base_name\uff1b","title":"DjangoRestFramework\u7b14\u8bb0"},{"location":"python/drf/drf-note/#serializer","text":"","title":"Serializer\u76f8\u5173"},{"location":"python/drf/drf-note/#serializerurlurl","text":"\u5728Serializer\u521d\u59cb\u5316\u65f6\u5411\u5176\u4f20\u9012content\u53c2\u6570\u4e2d\u9700\u8981\u5305\u542brequest\u5bf9\u8c61\u5373\u53ef\uff0c\u65e2: serializer = AccountSerializer(queryset, context={'request': request}) \u3002 \u53ef\u4ee5\u7b80\u5355\u7684\u5199\u6210 serializer = AccountSerializer(queryset, context=self.get_serializer_context()) \uff0c\u4ee5\u4e0b\u662fget_serializer_context\u51fd\u6570\u7684\u6e90\u7801\uff1a def get_serializer_context ( self ): \"\"\" Extra context provided to the serializer class. \"\"\" return { 'request' : self . request , 'format' : self . format_kwarg , 'view' : self }","title":"serializer\u4e2d\u5c06\u56fe\u7247\u3001\u6587\u4ef6\u7b49\u5bf9\u8c61\u7684\u76f8\u5bf9\u8def\u5f84url\u53d8\u6210\u7edd\u5bf9\u8def\u5f84url"},{"location":"python/drf/drf-note/#foreignkeymanytomany","text":"\u524d\u7aef\u5728\u6dfb\u52a0ForeignKey\u65f6\uff0c\u76f4\u63a5\u4e3arequsetBody\u6dfb\u52a0ID\u5373\u53ef\uff1b \u6dfb\u52a0ManytoMany\u65f6\uff0c\u4e0d\u662f\u5728requsetBody\u4e2d\u4e3a\u53c2\u6570m2m_name\u6dfb\u52a0[1,2,3],\u800c\u662f\u4f9d\u6b21\u5411m2m_name\u4e2d\u6dfb\u52a01\u30012\u30013\uff0c\u65e2\u8fde\u7eed\u6dfb\u52a0\u4e09\u6b21\u3002","title":"\u6dfb\u52a0ForeignKey\u3001ManytoMany\u65f6\u6ce8\u610f\u4e8b\u9879"},{"location":"python/drf/drf-note/#ajax","text":"\u4f7f\u7528ajax\u4ece\u524d\u7aef\u50cf\u540e\u7aef\u4f20\u9012\u6570\u7ec4\u662f\u6bd4\u8f83\u5e38\u89c4\u7684\u9700\u6c42\uff0c\u5728\u524d\u7aefajax\u9700\u8981\u8bbe\u7f6etraditional: true\u53c2\u6570\u3002DRF\u540e\u7aef\u4f7f\u7528 request.data.getlist('key') \u65b9\u6cd5\u83b7\u53d6\u8be5\u6570\u7ec4\u3002 \u6709\u65f6\u5019DRF\u5bf9\u5e94\u4f7f\u7528\u4e0d\u540c\u7684\u524d\u7aef\uff0c\u5982android\u4e2d\u7684okhttp\u6216\u8005vue\u4e2d\u7684&http\u6216\u8005python\u4e2d\u7684requests\u6a21\u5757\uff0c\u4f1a\u51fa\u73b0request.data\u662fDict\u800c\u4e0d\u662fQueryDict\u7684\u65f6\u5019\uff0c\u9700\u8981\u4f7f\u7528\u65b9\u6cd5\u517c\u5bb9\uff1a def get_list ( _dict , key ): \"\"\" usage: get_list(request.data, 'key') :param _dict: QueryDict or dict :param key: list \u952e\u540d :return: _dict\u4e2dkey\u5bf9\u5e94\u7684list \"\"\" if isinstance ( _dict , QueryDict ): return _dict . getlist ( key ) else : return _dict . get ( key , []) \u7528\u6cd5\u4e3aget_list ( request . data , 'key' ) \u3002 jQuery ajax\u7684traditional\u53c2\u6570\u7684\u4f5c\u7528","title":"ajax\u4f20\u9012\u6570\u7ec4"},{"location":"python/drf/drf-note/#serializersfkm2m","text":"RDF2.0\u4ee5\u524d\u6709\u6b64\u529f\u80fd\uff0c3.0\u58f0\u660e\u4e2d\u653e\u5f03\u6b64\u529f\u80fd\uff0c\u5e94\u4e3a\u6b64\u529f\u80fd\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u903b\u8f91\u5904\u7406\u533a\u522b\u5927\uff0c\u8981\u652f\u6301\u5d4c\u5957\u521b\u5efa\u3001\u66f4\u65b0\u9700\u8981\u5f3a\u5236\u91cd\u5199create\u3001update\u65b9\u6cd5\u3002 \u65b9\u6cd5\u4e00 \uff1a \u7528 ast.literal_eval() \u5c06str\u89e3\u6790\u79f0\u4e3adict\u518d\u5bf9\u5916\u952e\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5c06\u5e8f\u5217\u5316\u5f97\u5230\u7684ID\u8d4b\u7ed9\u5916\u952e\u3002\u7565\u7e41\u7410\uff0c\u8d4b\u503c\u65f6\u8981\u8bbe\u7f6erequest.data._mutable=True\u6765\u4fdd\u8bc1request.data\u53ef\u88ab\u4fee\u6539\uff0c\u9700\u8981\u6709\u4e8b\u52a1\u903b\u8f91\uff0c\u5f53\u88ab\u5d4c\u5957\u7684serializer\u6570\u636e\u4e0d\u5408\u6cd5\u65f6\uff0c\u9700\u8981\u5220\u9664\u5148\u524d\u521b\u5efa\u7684\u5f85\u5d4c\u5957\u5bf9\u8c61\uff0c\u6d6a\u8d39\u6570\u636e\u5e93\u5f00\u9500\u3002 \u65b9\u6cd5\u4e8c \uff1a \u4f7f\u7528user.name\u4f5c\u4e3a\u53c2\u6570\u540d\u76f4\u63a5\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u7f3a\u70b9\u662f\u66f4\u65b0\u65f6\u9700\u8981\u4e00\u4e2afield\u4e00\u4e2afield\u7684\u53bb\u5199,\u6bd4\u8f83\u9ebb\u70e6(\u4e5f\u53ef\u7528for\u5faa\u73af\u914d\u5408setattr\u65b9\u6cd5\u4f7f\u7528)\u3002 \u65b9\u6cd5\u4e09 \uff1a \u624b\u5199\u5177\u4f53\u7684create\\update\u65b9\u6cd5\uff0c\u793a\u4f8b\uff1a class EscapeRecipeModifySerializer ( WritableNestedModelSerializer ): crafts = EscapeRecipeCraftModifySerializer ( many = True , required = False , label = '\u7279\u6b8a\u5de5\u827a' ) def create ( self , validated_data ): crafts_data = validated_data . pop ( 'crafts' ) escape_recipe = EscapeRecipe . objects . create ( ** validated_data ) # \u4fdd\u5b58\u539f\u59cb\u914d\u65b9 crafts = [] for craft_data in crafts_data : craft = OriginalRecipe ( ** craft_data ) craft . save () crafts . append ( craft ) escape_recipe . original_recipes . add ( * crafts ) return escape_recipe class Meta : model = EscapeRecipe fields = ( 'original_recipe' , 'medicine' , 'dosage' , 'crafts' ) \u65b9\u6cd5\u56db \uff1a\u4f7f\u7528drf-writable-nested\u5e93\uff0c\u9700\u6ce8\u610f\u5ba2\u6237\u7aef\u548c\u5355\u5143\u6d4b\u8bd5\u65f6\u6570\u636e\u683c\u5f0f\u5fc5\u987b\u4e3aapplication/json\u3002\u7528requests\u5e93\u8bf7\u6c42\u65f6\uff0c\u7528requests.post(url=xxx,json={},headers={}),\u662fjson={}\u800c\u4e0d\u662fdata={}\uff0c\u53ef\u53c2\u8003drf-writable-nested\u5d4c\u5957\u65b0\u589e\u66f4\u65b0\u3002","title":"Serializers\u5d4c\u5957\u65b0\u589eFK\u6216\u8005M2M"},{"location":"python/drf/drf-note/#serializerfko2om2m","text":"\u521b\u5efa\u4f7f\u7528\u7684serializer\u548c\u66f4\u65b0\u4f7f\u7528\u7684serializer\uff0c\u5982\u679c\u5305\u542b\u5916\u952e\u3001O2O\u3001M2M\u7684\u8bdd\uff0c\u4e0d\u53ef\u5c06\u5916\u952e\u3001O2O\u3001M2M\u5c55\u5f00\u6210\u8be6\u60c5\uff0c\u4e0d\u7136\u65e0\u6cd5\u8fdb\u884c\u521b\u5efa\u6216\u8005\u66f4\u65b0\u3002","title":"\u521b\u5efa\u3001\u66f4\u65b0\u65f6\u4f7f\u7528\u7684Serializer\u4e2dFK\\O2O\\M2M\u4e0d\u53ef\u5c55\u5f00"},{"location":"python/drf/drf-note/#serializer-vs","text":"Serializer\u901a\u8fc7data = Serializer(queryset, many=True).data\u6781\u7aef\u8017\u8d39\u65f6\u95f4\uff0c\u80fd\u4e00\u6b21\u83b7\u53d6\u7684data\u4e0d\u8981\u901a\u8fc7\u591a\u6b21\u83b7\u53d6\u3002\u5b81\u613f\u83b7\u53d6\u5230data\u7684list,\u518d\u53bb\u4ea4\u53c9\u5bf9\u6bd4list\u91cc\u9762\u7684\u6570\u636e\u4e5f\u4e0d\u8981\u4e3a\u4e86\u4f7f\u7528orm\u65b9\u4fbf\uff0c\u5728\u7b5b\u9009\u51fa\u5bf9\u5e94\u7684queryset\u540e\u518d\u591a\u6b21\u53bb\u505aqueryset\u7684\u5e8f\u5217\u5316\uff0c\u8fd9\u6837\u8017\u8d39\u7684\u65f6\u95f4\u5c06\u6210\u500d\u589e\u52a0\uff0c1\u6b21\u5e8f\u5217\u53161\u4e2a\u5bf9\u8c61\u7684\u65f6\u95f4\u548c\u5e8f\u5217\u53161000\u4e2a\u5bf9\u8c61\u7684\u65f6\u95f4\u5dee\u8ddd\u5e76\u4e0d\u5927\uff0c\u800c\u5e8f\u5217\u53161\u6b21\u548c\u5e8f\u5217\u53161000\u6b21\u7684\u65f6\u95f4\u5dee\u8ddd\u5de8\u5927,\u4e00\u6b21\u5e8f\u5217\u53161000\u4e2a\u8017\u65f6\u662f\u5e8f\u5217\u53161000\u6b21\uff08\u6bcf\u6b21\u4e00\u4e2a\uff09\u8017\u65f6\u7684\u4e94\u5206\u4e4b\u4e00\u3002 import django.apps from school.serializers import PermissionSerializer permission_list = [] permissions = request . user . user_permissions for model in django . apps . apps . get_models (): content_type = ContentType . objects . get_for_model ( model ) model_permissions = permissions . filter ( content_type = content_type ) serializer = PermissionSerializer ( model_permissions , many = True ) permission_list . append ({ 'name' : model . _meta . verbose_name , 'content_type' : content_type . id , 'model' : content_type . model , 'permissions' : serializer . data }) # permission_list = sorted(permission_list, key=lambda x: int(x['content_type'])) data = { 'id' : user . id , 'token' : token . access_token , 'name' : user . get_full_name (), 'permission_list' : permission_list } return success_response ( data ) \u4f7f\u7528orm\u7b5b\u9009\u540e\u591a\u6b21\u5bf9queryset\u5e8f\u5217\u5316 \u8017\u65f6\uff1a 0.20399999618530273 # \u83b7\u53d6\u6839\u636e\u6a21\u578b\u5f97\u5230\u7684\u6743\u9650\u5217\u8868 permission_list = [] perm_data = PermissionSerializer ( request . user . user_permissions , many = True ) . data for model in django . apps . apps . get_models (): content_type = ContentType . objects . get_for_model ( model ) model_permissions = [ data for data in perm_data if data [ 'content_type' ] == content_type . id ] permission_list . append ({ 'name' : model . _meta . verbose_name , 'content_type' : content_type . id , 'model' : content_type . model , 'permissions' : model_permissions }) data = { 'id' : user . id , 'token' : token . access_token , 'name' : user . get_full_name (), 'permission_list' : sorted ( permission_list , key = lambda x : x [ 'content_type' ])} return success_response ( data ) \u4e00\u6b21\u5e8f\u5217\u5316\u5f97\u5230list\u518d\u5bf9\u6bd4 \u8017\u65f6:0.04799985885620117 \u6027\u80fd\u5bf9\u6bd4\uff1a @list_route ( methods = [ 'GET' ]) def test ( self , request ): users = request . user lists = [] for x in range ( 0 , 1000 ): lists . append ( users ) start_time = time . time () data1 = UserListSerializer ( lists , many = True , context = self . get_serializer_context ()) . data end_time = time . time () print ( end_time - start_time ) start_time = time . time () for user in lists : data = UserListSerializer ( user , context = self . get_serializer_context ()) . data end_time = time . time () print ( end_time - start_time ) return success_response ( '' ) \u5e73\u5747\u8017\u65f6\u4e3a\uff1a0.1s 0.5s","title":"Serializer \u4e00\u6b21\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61 VS \u591a\u6b21\u5e8f\u5217\u4e00\u4e2a\u5bf9\u8c61"},{"location":"python/drf/drf-note/#_1","text":"extra_kwargs = { 'pre_student' : { 'required' : True }} extra_kwargs = { 'username' : { 'required' : False }}","title":"\u8bbe\u7f6e\u5b57\u6bb5\u9009\u586b\u3001\u5fc5\u586b"},{"location":"python/drf/drf-note/#_2","text":"# \u5c06serializer\u4e2d\u7684\u9519\u8bef\u89e3\u6790\u4e3a\u4ea4\u4e92\u66f4\u53cb\u597d\u7684\u5f62\u5f0f class HumanizationSerializerErrorsMixin(object): # humanization_serializer_errors def humanize_errors(self, serializer=None, errors=None): \"\"\" \u5c06serializer\u4e2d\u7684\u9519\u8bef\u89e3\u6790\u4e3a\u4ea4\u4e92\u66f4\u53cb\u597d\u7684\u5f62\u5f0f :param serializer: \u5e8f\u5217\u5316\u7c7b :param errors: \u5bf9\u5e94\u9519\u8bef :return: \u4ea4\u4e92\u53cb\u597d\u7684\u9519\u8bef\u63d0\u793a \"\"\" humanization_errors = [] if serializer is None: serializer = self if errors is None: errors = serializer.errors if isinstance(errors, list): for error in errors: humanization_errors.append(str(error)) elif isinstance(errors, ErrorDetail): humanization_errors.append(str(errors)) else: fields = serializer.get_fields() for key, values in errors.items(): try: field = fields[key] # field\u4e2d\u6709model\u5219\u4f7f\u7528model verbose_name = field.label if field.label else key # \u89e3\u6790\u5b50\u9519\u8bef-\u9012\u5f52 if isinstance(field, serializers.Serializer): values = self.humanize_errors(field, errors=values) elif isinstance(field, serializers.ListSerializer): values = [self.humanize_errors(field.child, errors=x) for x in values] except KeyError: if isinstance(serializer, ModelSerializer): model = serializer.Meta.model verbose_name = model._meta.verbose_name else: verbose_name = key errors_text = values if isinstance(values, str) else ' '.join([str(x) for x in values]) humanization_errors.append('{}:{}'.format(str(verbose_name), errors_text)) return '; '.join(humanization_errors)","title":"\u5c06\u5e8f\u5217\u5316\u9519\u8bef\u8f6c\u6362\u6210\u53ef\u8bfb\u8bed\u8a00"},{"location":"python/drf/drf-note/#drfserializer","text":"python from user.serializers import UserSerializer serializer = UserSerializer() print(repr(serializer))","title":"\u67e5\u770bDRF\u81ea\u52a8\u751f\u6210\u7684Serializer\u5185\u5bb9"},{"location":"python/drf/drf-note/#baseserializersave","text":"\u6709\u6210\u5458\u53d8\u91cfinstance,\u6ca1\u6709\u6539instance\u65f6save\u65b9\u6cd5\u8c03\u7528create\u65b9\u6cd5,\u6709\u8be5instance\u65f6\u8c03\u7528update\u65b9\u6cd5 if self . instance is not None : self . instance = self . update ( self . instance , validated_data ) assert self . instance is not None , ( '`update()` did not return an object instance.' ) else : self . instance = self . create ( validated_data ) assert self . instance is not None , ( '`create()` did not return an object instance.' )","title":"BaseSerializer\u5982\u4f55\u5224\u65adsave\u65b9\u6cd5\u5f53\u524d\u662f\u65b0\u589e\u8fd8\u662f\u66f4\u65b0"},{"location":"python/drf/drf-note/#vaildate","text":"raise serializers.ValidationError({'discountcouponrecord': ['\u4ec5\u53ef\u4f7f\u7528\u8be5\u5b66\u5458\u9886\u53d6\u7684\u4f18\u60e0\u5238']})","title":"vaildate\u6307\u5b9a\u9519\u8bef\u5bf9\u5e94\u7684\u5b57\u6bb5\u65b9\u6cd5"},{"location":"python/drf/drf-note/#vaildatemodelclean","text":"DRF3.0\u540e\uff0cModelSerializer\u7684validate\u9ed8\u8ba4\u4e0d\u4f1a\u518d\u8c03\u7528model\u7684clean\u65b9\u6cd5\uff0c\u58f0\u660e\u89c1\u6b64\u3002\u9700\u8981\u624b\u52a8\u8c03\u7528model\u7684clean\u65b9\u6cd5\uff1a def validate ( self , data ): instance = self . Meta . model ( ** data ) instance . clean () return data","title":"vaildate\u8c03\u7528model\u4e2dclean\u65b9\u6cd5"},{"location":"python/drf/drf-note/#modelserializer","text":"\u5c06None\u5e8f\u5217\u5316\u4e3a '' \u800c\u4e0d\u662f 'null' class ModelSerializer ( serializers . ModelSerializer ): def to_representation ( self , instance ): \"\"\" Object instance -> Dict of primitive data types. \"\"\" ret = OrderedDict () fields = [ field for field in self . fields . values () if not field . write_only ] for field in fields : try : key = field . get_attribute ( instance ) except SkipField : continue if key is not None : value = field . to_representation ( key ) # \u5b50\u5bf9\u8c61\u4e2d\u6709\u5bf9\u8c61\u4e3a\u7a7a \u4f9d\u65e7\u5e8f\u5217\u5316 # if value is None: # # Do not serialize empty objects # print('empty objects') # continue # \u5b50\u5bf9\u8c61\u4e2d\u6709\u5217\u8868\u4e3a\u7a7a \u4f9d\u65e7\u5e8f\u5217\u5316 eg:Moment->photos\u4e3a\u7a7a\u4f9d\u65e7\u8981\u5e8f\u5217\u5316 # if isinstance(value, list) and not value: # # Do not serialize empty lists # print('empty lists') # continue ret [ field . field_name ] = value # print(field.field_name, value) else : # value None to '' rather tan 'null' # print(field.field_name, field.to_representation(key), '\u6709\u7a7a\u503c') ret [ field . field_name ] = '' # \u4e3aserializers\u4e2d\u52a8\u6001\u6dfb\u52a0\u7684context\u8d4b\u503c\u8f93\u51fa for field in self . context : # context defaults to including 'request', 'view' and 'format' keys. if field not in [ 'request' , 'view' , 'format' ]: ret [ field ] = self . context [ field ] return ret 2. \u65b0\u589e\u65f6model\u8bbe\u7f6e\u4e86null=True\u7684\u5b57\u6bb5\u4e5f\u8981\u6c42\u5fc5\u586b\uff08\u548cform\u4e00\u81f4\uff09 class ModelSerializer ( serializers . ModelSerializer ): def build_field ( self , field_name , info , model_class , nested_depth ): \"\"\" Return a two tuple of (cls, kwargs) to build a serializer field with. \u91cd\u65b0\u8be5\u65b9\u6cd5\u4ee5\u4fdd\u8bc1model\u4e2dField\u5728null=True\u7684\u60c5\u51b5\u4e0b\u4f9d\u65e7\u662f\u5fc5\u586b\u9879 field_kwargs\u4e2drequired\u53c2\u6570\u539f\u59cb\u5224\u65ad\u4f9d\u636e (build_field->build_standard_field \\ build_relational_field->get_field_kwargs\\get_relation_kwargs): if model_field.has_default() or model_field.blank or model_field.null: kwargs['required'] = False \u66f4\u65b0\u540e\u4f9d\u636e: if model_field.has_default() or model_field.blank: field_kwargs['required'] = False else: field_kwargs['required'] = True \"\"\" if field_name in info . fields_and_pk : # \u666e\u901afield \u90e8\u5206 model_field = info . fields_and_pk [ field_name ] field_class , field_kwargs = self . build_standard_field ( field_name , model_field ) field_kwargs [ 'required' ] = False if ( model_field . has_default () or model_field . blank ) else True return field_class , field_kwargs elif field_name in info . relations : # FK\\M2M \u90e8\u5206 relation_info = info . relations [ field_name ] if not nested_depth : field_class , field_kwargs = self . build_relational_field ( field_name , relation_info ) model_field , related_model , to_many , to_field , has_through_model , reverse = relation_info field_kwargs [ 'required' ] = False if ( model_field . has_default () or model_field . blank ) else True return field_class , field_kwargs else : return self . build_nested_field ( field_name , relation_info , nested_depth ) elif hasattr ( model_class , field_name ): return self . build_property_field ( field_name , model_class ) elif field_name == self . url_field_name : return self . build_url_field ( field_name , model_class ) return self . build_unknown_field ( field_name , model_class )","title":"\u91cd\u5199ModelSerializer"},{"location":"python/drf/drf-note/#dynamicfieldsmodelserializer","text":"# \u52a8\u6001\u83b7\u53d6Fields class DynamicFieldsModelSerializer ( ModelSerializer ): \"\"\" A ModelSerializer that takes an additional `fields` argument that controls which fields should be displayed. \"\"\" def __init__ ( self , * args , ** kwargs ): # Don't pass the 'fields' arg up to the superclass fields = kwargs . pop ( 'fields' , None ) exclude = kwargs . pop ( 'exclude' , None ) # Instantiate the superclass normally super ( DynamicFieldsModelSerializer , self ) . __init__ ( * args , ** kwargs ) if fields is not None : # Drop any fields that are not specified in the `fields` argument. allowed = set ( fields ) existing = set ( self . fields . keys ()) for field_name in existing - allowed : self . fields . pop ( field_name ) if exclude is not None : not_allowed = set ( exclude ) for exclude_name in not_allowed : self . fields . pop ( exclude_name ) \u7528\u6cd5\uff1a DynamicFieldsModelSerializer ( data = data , fields = ( 'name' )) DynamicFieldsModelSerializer ( data = data , exclude = ( 'name' ))","title":"DynamicFieldsModelSerializer"},{"location":"python/drf/drf-note/#dictfield","text":"from rest_framework.serializers import DictField from django.utils import six class MyDictField ( DictField ): def to_internal_value ( self , data ): \"\"\" Dicts of native values <- Dicts of primitive datatypes. \"\"\" # if html.is_html_input(data): # data = html.parse_html_dict(data) if not isinstance ( data , dict ): self . fail ( 'not_a_dict' , input_type = type ( data ) . __name__ ) return { six . text_type ( key ): self . child . run_validation ( value ) for key , value in data . items () } class FavoritesModifySerializer ( ModelSerializer ): data_params = MyDictField ( child = serializers . CharField ()) ... def create ( self , validated_data ): print ( validated_data ) data_dic = validated_data . pop ( \"data_params\" ) print ( data_dic ) return super ( FavoritesModifySerializer , self ) . create ( validated_data ) PostMan\u4e2d\u53d1\u9001key:data_params.data value:\u5475\u5475\uff0c\u63a7\u5236\u53f0\u8f93\u51fa\uff1a {'user': , 'cover': , 'name': '1', 'posts': [], 'data_params': {'data': '\u5475\u5475'}, 'categor y': 1} {'data': '\u5475\u5475'}","title":"DictField\u4f7f\u7528"},{"location":"python/drf/drf-note/#to_representation","text":"def to_representation ( self , instance ): serialized_data = super ( SerializerClass , self ) . to_representation ( instance ) serialized_data [ 'override_field' ] = 'some data' return serialized_data","title":"\u91cd\u5199to_representation\u65b9\u6cd5"},{"location":"python/drf/drf-note/#source","text":"name = serializers . CharField ( source = 'user.full_name' )","title":"source"},{"location":"python/drf/drf-note/#unique_together","text":"\u65b9\u6cd5\u4e00\uff1a class MedicineEscapeModifySerializer ( ModelSerializer ): class Meta : model = MedicineEscape fields = ( 'hospital' , 'medicine' , 'medicine_form' , 'hospital_medicine_name' , 'hospital_medicine_no' , 'remarks' ) validators = [ serializers . UniqueTogetherValidator ( queryset = model . objects . all (), fields = ( 'hospital' , 'hospital_medicine_name' ), message = '\u533b\u9662\u4e0d\u53ef\u91cd\u590d\u5173\u8054\u540c\u4e00\u533b\u9662\u836f\u54c1\u540d\u79f0;' ), serializers . UniqueTogetherValidator ( queryset = model . objects . all (), fields = ( 'hospital' , 'hospital_medicine_no' ), message = '\u533b\u9662\u4e0d\u53ef\u91cd\u590d\u5173\u8054\u540c\u4e00\u533b\u9662\u836f\u54c1\u7f16\u7801;' ) ] \u65b9\u6cd5\u4e8c\uff1a class MedicineEscapeModifySerializer ( ModelSerializer ): class Meta : model = MedicineEscape fields = ( 'hospital' , 'medicine' , 'medicine_form' , 'hospital_medicine_name' , 'hospital_medicine_no' , 'remarks' ) def get_unique_together_validators ( self ): validators = super ( MedicineEscapeModifySerializer , self ) . get_unique_together_validators () print ( self . initial_data ) for validator in validators : if validator . fields == ( 'hospital' , 'hospital_medicine_name' ): validator . message = '\u533b\u9662\u4e0d\u53ef\u91cd\u590d\u5173\u8054\u540c\u4e00\u533b\u9662\u836f\u54c1\u540d\u79f0;' if validator . fields == ( 'hospital' , 'hospital_medicine_no' ): validator . message = '\u533b\u9662\u4e0d\u53ef\u91cd\u590d\u5173\u8054\u540c\u4e00\u533b\u9662\u836f\u54c1\u7f16\u7801;' return validators \u53ea\u5bf9admin\u3001form\u6709\u6548, \u5bf9serializer\u65e0\u6548\u7684\u65b9\u6cd5\uff1a class MedicineEscape ( models . Model ): .... def unique_error_message ( self , model_class , unique_check ): \"\"\"\u53ea\u5bf9admin\u3001form\u6709\u6548 \u5bf9serializer\u65e0\u6548\"\"\" if model_class == type ( self ) and unique_check == ( 'hospital' , 'hospital_medicine_name' ): return ' {} \u4e0d\u53ef\u91cd\u590d\u5173\u8054 {} ' . format ( self . hospital . name , self . hospital_medicine_name ) else : return super ( MedicineEscape , self ) . unique_error_message ( model_class , unique_check )","title":"\u81ea\u5b9a\u4e49unique_together\u63d0\u793a\u4fe1\u606f"},{"location":"python/drf/drf-note/#view","text":"","title":"View\u76f8\u5173"},{"location":"python/drf/drf-note/#url","text":"\u8bf7\u6c42url\u4e3ahttp://192.168.1.108/discount_coupon/?name=xxx \u65b9\u6cd5\u4e00\uff1a name = self.request.query_params.get('name') \u65b9\u6cd5\u4e8c\uff1a name = self.request.GET.get('name')","title":"\u83b7\u53d6url\u53c2\u6570"},{"location":"python/drf/drf-note/#strdict","text":"import ast def literal_eval ( data ): \"\"\" :param data: str\u6216\u8005dict :return: dict or None \"\"\" if isinstance ( data , dict ): return data else : try : return ast . literal_eval ( data ) except ( SyntaxError , ValueError ): return None","title":"str\u8f6cdict\u65b9\u6cd5"},{"location":"python/drf/drf-note/#get_list","text":"from django.http import QueryDict def get_list ( _dict , key ): \"\"\" :param _dict: QueryDict or dict :param key: list \u952e\u540d :return: _dict\u4e2dkey\u5bf9\u5e94\u7684list \"\"\" if isinstance ( _dict , QueryDict ): return _dict . getlist ( key ) else : return _dict [ key ] \u7528\u6cd5\uff1aget_list(request.data, 'ids') \u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u63a5\u6536\u5230\u7684request.data\u53ef\u80fd\u662fdict\u4e5f\u53ef\u80fd\u662fQueryDict\uff0c\u4e0d\u540c\u7c7b\u578b\u65f6\u53d6list\u65f6\u65b9\u6cd5\u4e0d\u540c\u3002\u524d\u7aef\u4f7f\u7528Ajax\u65f6\u9700\u8981\u8bbe\u7f6etraditional: true\uff0ctraditional\u4e3afalse\uff0c\u5373jquery\u4f1a\u6df1\u5ea6\u5e8f\u5217\u5316\u53c2\u6570\u5bf9\u8c61\uff0c\u4ee5\u9002\u5e94\u5982PHP\u548cRuby on Rails\u6846\u67b6\uff0c\u4f46DRF\u65e0\u6cd5\u5904\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6etraditional\u4e3atrue\u963b\u6b62\u6df1\u5ea6\u5e8f\u5217\u5316\u3002","title":"get_list\u9002\u914d"},{"location":"python/drf/drf-note/#requestdata","text":"data = request.data.copy() \u5f00\u9500\u5927\uff0c\u4e0d\u53cb\u597d request.data._mutable = True \u63a8\u8350\u4f7f\u7528\uff0c\u8bbe\u7f6e\u53ef\u4fee\u6539\u6807\u5fd7\u4f4dTrue","title":"\u5411request.data\u4e2d\u6dfb\u52a0\u6570\u636e"},{"location":"python/drf/drf-note/#queryset","text":"class UserList ( ModelViewSet ): queryset = User . objects . all () queryset\u5bf9\u8c61\u53ea\u4f1a\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u65f6\u5019\u53bb\u6570\u636e\u5e93\u53d6\u4e00\u6b21\u503c\uff0c\u4e4b\u540e\u4f7f\u7528\u7684\u7ed3\u679c\u5747\u4e3a\u7f13\u5b58\u503c\uff0c\u5982\u7a0b\u5e8f\u542f\u52a8\u65f6queryset\u5185\u6709\u3010\u7528\u62371\u3011\uff0c\u540e\u9762\u65b0\u589e\u4e86\u3010\u7528\u62372\u3011\uff0c\u518d\u6b21\u53bb\u53d6\u8be5queryset\u5bf9\u8c61\u4f9d\u65e7\u53ea\u6709\u3010\u7528\u62371\u3011\u3002 \u60f3\u8981\u83b7\u53d6\u5230\u5b9e\u65f6\u7684\u6570\u636e\u5e93queryset,\u9700\u8981\u8c03\u7528queryset.all()\u65b9\u6cd5\u6765\u91cd\u65b0\u81f3\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e\u3002ModelViewSet\u7684\u9ed8\u8ba4get_queryset\u65b9\u6cd5\u5982\u4e0b\uff1a def get_queryset ( self ): \"\"\" Get the list of items for this view. This must be an iterable, and may be a queryset. Defaults to using `self.queryset`. This method should always be used rather than accessing `self.queryset` directly, as `self.queryset` gets evaluated only once, and those results are cached for all subsequent requests. You may want to override this if you need to provide different querysets depending on the incoming request. (Eg. return a list of items that is specific to the user) \"\"\" assert self . queryset is not None , ( \"' %s ' should either include a `queryset` attribute, \" \"or override the `get_queryset()` method.\" % self . __class__ . __name__ ) queryset = self . queryset if isinstance ( queryset , QuerySet ): # Ensure queryset is re-evaluated on each request. queryset = queryset . all () return queryset \u53ef\u89c1\uff1a queryset = queryset.all() # Ensure queryset is re-evaluated on each request . DRF view doc","title":"queryset\u61d2\u52a0\u8f7d"},{"location":"python/drf/drf-note/#auth","text":"","title":"Auth\u76f8\u5173"},{"location":"python/drf/drf-note/#sessionauthentication403","text":"DRF\u5728\u5f00\u542fSessionAuthentication\u65f6\u4f1a\u5bfc\u81f4\u6743\u9650\u8bbe\u7f6e\u6210AllowAny\u65f6\u4f9d\u65e7\u4f1a\u51fa\u73b0403\u8fd4\u56de\uff0c\u8be6\u60c5\u4e3aCSRF Failed: CSRF token missing or incorrent\u3002 \u5220\u9664SessionAuthentication\u53ea\u4f7f\u7528TokenAuthentication\u5373\u53ef\uff0c\u4f46\u662fDjango\u9ed8\u8ba4\u4f7f\u7528session\u8fdb\u884c\u8ba4\u8bc1\uff0c\u8fd9\u5c06\u5bfc\u81f4\u767b\u9646\u540e\u53f0\u6210\u529f\u540e\u65e0\u6cd5\u6d4f\u89c8DRF\u7684\u53ef\u89c6\u5316API\uff08browsable api\uff09\uff0c \u4f7f\u7528chrome\u63d2\u4ef6 ModHeader \u5373\u53ef\u5c06\u6d4f\u89c8\u5668\u8bf7\u6c42\u52a0\u5165token\u5934\u90e8\u6d4f\u89c8\u53ef\u89c6\u5316API\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002","title":"\u5f00\u542fSessionAuthentication\u65f6403"},{"location":"python/drf/drf-note/#_3","text":"","title":"\u5217\u8868\u76f8\u5173"},{"location":"python/drf/drf-note/#_4","text":"settings.py REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS' : ( # \u591a\u91cd\u6761\u4ef6\u8fc7\u6ee4 'django_filters.rest_framework.DjangoFilterBackend' , # \u6392\u5e8f 'rest_framework.filters.OrderingFilter' , # \u641c\u7d22 'rest_framework.filters.SearchFilter' ), 'ORDERING_PARAM' : 'ordering' , 'SEARCH_PARAM' : 'search' , } filters.py from django_filters.rest_framework import FilterSet class UserFilter ( FilterSet ): class Meta : model = User fields = { 'username' : [ 'exact' , 'icontains' ], 'tel' : [ 'exact' , 'icontains' , 'isnull' ] } views.py class EmailViewSet ( viewsets . ModelViewSet ): queryset = Email . objects . all () serializer_class = EmailCreateSerializer permission_classes = ( IsAuthenticated ,) filter_class = UserFilter ordering_fields = '__all__' search_fields = ( 'name' , ) \u7528\u6cd5\uff1a \u8fc7\u6ee4\uff1ahttp://192.168.1.108/email/?name=GG&id=2 \u6392\u5e8f\uff1ahttp://192.168.1.108/email/?ordering=-name,id \u641c\u7d22\uff1ahttp://192.168.1.108/email/?search=GG \ufefforder_by\u51fd\u6570\u4f1a\u6309\u7167\u4f20\u9012\u4f20\u8f93\u7684\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u4f20\u9012(name, id)\uff0c\u610f\u601d\u4e3a\u5728name\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u6309\u7167id\u81ea\u589e\u7684\u987a\u5e8f\u8fdb\u884c\u6392\u5217\uff0c\u540e\u9762\u7684\u6761\u4ef6\u53ea\u6709\u5728\u524d\u9762\u7684\u6761\u4ef6\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u751f\u6548\u3002","title":"\u591a\u91cd\u6761\u4ef6\u8fc7\u6ee4\u3001\u6392\u5e8f\u3001\u641c\u7d22"},{"location":"python/drf/drf-note/#_5","text":"","title":"\u5206\u9875\u76f8\u5173"},{"location":"python/drf/drf-note/#_6","text":"# \u5206\u9875 class Pagination ( PageNumberPagination ): # django_paginator_class = DjangoPaginator page_number = 1 page_size_query_param = 'page_size' max_page_size = 100 def paginate_queryset ( self , queryset , request , view = None ): \"\"\" \u4f7f\u7528page_size\u53c2\u6570\u9650\u5236\u6bcf\u9875\u6761\u6570 \u8d85\u51fa\u9875\u7801\u8303\u56f4\u8fd4\u56de\u7b2c\u4e00\u9875 \u6700\u540e\u4e00\u9875\u9875\u7801\u7528last\u8868\u793a \"\"\" page_size = self . get_page_size ( request ) if not page_size : return None paginator = self . django_paginator_class ( queryset , page_size ) self . page_number = request . query_params . get ( self . page_query_param , 1 ) if self . page_number in self . last_page_strings : self . page_number = paginator . num_pages try : self . page = paginator . page ( self . page_number ) except InvalidPage : # \u975e\u6cd5\u9875\u7801\u8fd4\u56de\u7b2c\u4e00\u9875 self . page_number = '1' self . page = paginator . page ( self . page_number ) if paginator . num_pages > 1 and self . template is not None : # The browsable API should display pagination controls. self . display_page_controls = True self . request = request return list ( self . page ) def get_page_size ( self , request ): \"\"\" page_size > 0 \u4f7f\u7528\u65b0page_size page_size = 0 \u65f6\u4e0d\u5206\u9875 page_size < 0 \u65f6\u4f7f\u7528\u9ed8\u8ba4page_size \"\"\" if self . page_size_query_param : page_size = min ( int ( request . query_params . get ( self . page_size_query_param , self . page_size )), self . max_page_size ) if page_size > 0 : return page_size elif page_size == 0 : return None else : pass return self . page_size \u7528\u6cd5\uff1a \u6bcf\u98755\u6761\uff1aget https://www.example.com/post/?page_size=5 \u4e0d\u5f00\u542f\u5206\u9875\uff1aget https://www.example.com/post/?page_size=0","title":"\u52a8\u6001\u8bbe\u7f6e\u5206\u9875\u4e2d\u6bcf\u9875\u4e2a\u6570 \u52a8\u6001\u5f00\u5173\u5206\u9875"},{"location":"python/drf/drf-note/#_7","text":"class Pagination ( PageNumberPagination ): # django_paginator_class = DjangoPaginator def get_paginated_response ( self , data ): return Response ( OrderedDict ([ ( 'count' , self . page . paginator . count ), ( 'num_pages' , self . page . paginator . num_pages ), ( 'next' , self . get_next_link ()), ( 'previous' , self . get_previous_link ()), ( 'results' , data ) ]))","title":"\u91cd\u5199\u5206\u9875\u8fd4\u56de\u7ed3\u679c"},{"location":"python/drf/drf-note/#django1111-paginatorunorderedobjectlistwarning","text":"Q:Django1.11.1 Paginator\u65b0\u589eUnorderedObjectListWarning\u68c0\u6d4b,\u8981\u6c42DRF\u7684queryset\u6216\u8005get_queryset\u4e4b\u540e\u8fdb\u884c\u6392\u5e8f \u4ee5\u9632\u6b62\u591a\u6b21\u5206\u9875\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c A\uff1a \u65b9\u6cd5\u4e00: from django.core.paginator import Paginator # \u5c4f\u853dUnorderedObjectListWarning class DjangoPaginator ( Paginator ): def _check_object_list_is_ordered ( self ): \"\"\" Warn if self.object_list is unordered (typically a QuerySet). Pagination may yield inconsistent results with an unordered \"\"\" pass # \u5206\u9875 class Pagination ( PageNumberPagination ): # django_paginator_class = DjangoPaginator \u65b9\u6cd5\u4e8c\uff1a \u6ca1\u6709\u91cd\u5199get_queryset\u65b9\u6cd5\u7684ModelViewSet(\u6dfb\u52a0\u4e86order_by): queryset = MessageTemplate.objects.all().order_by('id') \u91cd\u5199\u4e86get_queryset\u65b9\u6cd5\u7684ModelViewSet(\u6dfb\u52a0\u4e86order_by): def get_queryset ( self ): queryset = MessageTemplate . objects . filter ( Q ( publisher = self . request . user , is_private = True ) | Q ( is_private = False )) . order_by ( 'id' ) \u200b return queryset","title":"Django1.11.1 Paginator\u65b0\u589eUnorderedObjectListWarning\u68c0\u6d4b"},{"location":"python/drf/drf-note/#_8","text":"","title":"\u6743\u9650\u76f8\u5173"},{"location":"python/drf/drf-note/#viewset-model","text":"class DRFModelPermissions ( permissions . DjangoModelPermissions ): \"\"\" Similar to `DjangoModelPermissions`, but adding 'view' permissions. \"\"\" perms_map = { 'GET' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'OPTIONS' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'HEAD' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'POST' : [ ' %(app_label)s .add_ %(model_name)s ' ], 'PUT' : [ ' %(app_label)s .change_ %(model_name)s ' ], 'PATCH' : [ ' %(app_label)s .change_ %(model_name)s ' ], 'DELETE' : [ ' %(app_label)s .delete_ %(model_name)s ' ], } \u4f7f\u7528list_router\u548cdetail_router\u65f6\uff0c\u4f1a\u6839\u636e\u8bbf\u95ee\u7684\u65b9\u6cd5\u7c7b\u578b\u8981\u6c42\u5bf9\u5e94\u7684\u6743\u9650\u3002","title":"ViewSet model\u6743\u9650"},{"location":"python/drf/drf-note/#viewset-model-model","text":"class DRFCertainModelPermissions ( DRFModelPermissions ): \"\"\" Certain model with permission_model in ViewSet for DRFModelPermissions \"\"\" def get_model ( self , view ): if not hasattr ( view , 'permission_model' ): raise ImproperlyConfigured ( 'permission_model must be override in ViewSet which used ' 'DRFCertainModelPermissions.' ) return getattr ( view , 'permission_model' ) def has_permission ( self , request , view ): # Workaround to ensure DjangoModelPermissions are not applied # to the root view when using DefaultRouter. if getattr ( view , '_ignore_model_permissions' , False ): return True if not request . user or ( not request . user . is_authenticated and self . authenticated_users_only ): return False perms = self . get_required_permissions ( request . method , self . get_model ( view )) return request . user . has_perms ( perms ) \u7528\u6cd5\uff1a class LabelPrinterViewSet ( ModelViewSet ): queryset = LabelPrinter . objects . all () permission_classes = ( DRFCertainModelPermissions ,) permission_model = Label \u5219\u53ef\u4ee5\u8ba9LabelPrinterViewSet\u7684CRUD\u5bf9\u5e94\u4f7f\u7528Label\u7684CRUD\u6743\u9650\u3002","title":"ViewSet model\u6743\u9650 \u6307\u5b9amodel"},{"location":"python/drf/drf-note/#viewset-model_1","text":"\u5047\u5220\u9664\u65f6\uff0c\u5220\u9664\u5b9e\u9645\u4e0a\u4e3a\u4f5c\u5e9f\uff0c\u8c03\u6574\u5220\u9664\u9700\u8981\u7684\u6743\u9650\u4e3a\u4fee\u6539\u6743\u9650\u5373\u53ef\u3002 class DRFModelDeleteAsChangePermissions ( permissions . DjangoModelPermissions ): \"\"\" Similar to `DjangoModelPermissions`, but adding 'view' permissions. Delete action use same permissions as PUT/PATCH action. \"\"\" perms_map = { 'GET' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'OPTIONS' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'HEAD' : [ ' %(app_label)s .view_ %(model_name)s ' ], 'POST' : [ ' %(app_label)s .add_ %(model_name)s ' ], 'PUT' : [ ' %(app_label)s .change_ %(model_name)s ' ], 'PATCH' : [ ' %(app_label)s .change_ %(model_name)s ' ], 'DELETE' : [ ' %(app_label)s .change_ %(model_name)s ' ], }","title":"ViewSet model\u6743\u9650 \u5047\u5220\u9664"},{"location":"python/drf/drf-note/#viewsetpermission_classes","text":"permission_classes = ( DRFModelPermissions , IsAuthenticated ,) permission_classes = ( IsAuthenticated , DRFModelPermissions , ) \u524d\u4e00\u79cd\u60c5\u51b5\u4f1a\u5bfc\u81f4\u672a\u767b\u9646\u7684\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u5230\u6240\u6709\u63a5\u53e3\uff0c\u540e\u4e00\u79cd\u60c5\u51b5\u624d\u80fd\u591f\u771f\u6b63\u9650\u5236\u7528\u6237\u5fc5\u987b\u767b\u9646\u5e76\u4e14\u5177\u6709\u6a21\u578b\u6743\u9650\u3002\u56e0\u4e3aIsAuthenticated\u8981\u6c42\u7528\u6237\u767b\u9646\uff0cDRFModelPermissions\u5224\u65ad\u767b\u9646\u7528\u6237\u662f\u5426\u6709\u5bf9\u5e94\u7684\u6a21\u578b\u6743\u9650\uff0c\u5176\u524d\u7f6e\u6761\u4ef6\u4e3a\u8981\u6c42\u7528\u6237\u4e3a\u767b\u9646\u7528\u6237\u3002","title":"ViewSet\u4e2dpermission_classes\u68c0\u67e5\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u8fdb\u884c\uff0c\u9700\u8981\u5c06\u524d\u63d0\u6743\u9650\u7c7b\u653e\u5728\u6700\u524d\u9762\u3002"},{"location":"python/drf/drf-note/#_9","text":"\u65b9\u6cd51\uff08\u81ea\u5df1\u5199\u7684 \u4e0d\u63a8\u8350 \u4f1a\u5bfc\u81f4\u6240\u6709\u63a5\u53e3\u8c03\u7528\u524d\u591a\u4e00\u6b21\u4e0d\u5fc5\u8981\u7684\u6743\u9650\u5bf9\u8c61\u662f\u7c7b\u8fd8\u662f\u5b9e\u4f8b\u7684\u5224\u65ad\uff09\uff1a class ModelViewSet : ... def get_permissions ( self ): \"\"\" Instantiates and returns the list of permissions that this view requires. \u517c\u5bb9\u5b9e\u4f8b\u6216\u7c7b \"\"\" permissions = [] for permission in self . permission_classes : if isinstance ( permission , type ): # \u7c7b permissions . append ( permission ()) else : # \u5b9e\u4f8b permissions . append ( permission ) return permissions permissions.py: class DynamicPermsClass ( permissions . BasePermission ): \"\"\" \u52a8\u6001\u6743\u9650\u68c0\u67e5 \u9700\u8981\u8c03\u6574ModelViewSet\u4e2dget_permissions\u65b9\u6cd5\u517c\u5bb9 usage: DynamicPermsClass(['app_label.action_model', ]) \"\"\" permissions = [] def __init__ ( self , * args , ** kwargs ): self . permissions = args [ 0 ] if len ( args ) > 0 else [] super ( DynamicPermsClass , self ) . __init__ () def has_permission ( self , request , view ): print ( 'has_permission' , self . permissions ) if request . user and request . user . is_authenticated and request . user . has_perms ( self . permissions ): return True else : return False views.py: @action ( methods = [ 'GET' ], detail = False , serializer_class = None , permission_classes = [ DynamicPermsClass ([ 'demo.view_demo' ]), ]) def demo ( self , request , * args , ** kwargs ): \u65b9\u6cd52\uff08\u7531django-rest-framework-rules\u6539\u9020\u800c\u6765\uff09\uff1a mixins.py: class PermissionRequiredMixin ( object ): \"\"\" \u6e90\u4e8edjango-rest-framework-rules \u7528\u4e8e\u81ea\u5b9a\u4e49\u7684action\u65b9\u6cd5 usage: @action(methods=['GET'], detail=False, permission_required='prescription.view_patient') or @action(methods=['GET'], detail=False, permission_required=['prescription.view_patient', 'prescription.view_doctor']) \"\"\" permission_required = None def get_permission_required ( self ): if self . permission_required is None : # This prevents a misconfiguration of the view into which the mixin # is mixed. If the mixin is used, at least one permission should be # required. raise ImproperlyConfigured ( ' {0} is missing the permission_required attribute. Define ' ' {0} .permission_required, or override ' ' {0} .get_permission_required().' . format ( self . __class__ . __name__ ) ) if isinstance ( self . permission_required , str ): perms = ( self . permission_required ,) else : perms = self . permission_required return perms def check_permissions ( self , request ): if request . user . has_perms ( self . get_permission_required ()): return super ( PermissionRequiredMixin , self ) . check_permissions ( request ) else : self . permission_denied ( request , message = '\u60a8\u6ca1\u6709\u6267\u884c\u8be5\u64cd\u4f5c\u7684\u6743\u9650' ) decorators.py: def permission_required ( permissions ): \"\"\" \u6e90\u81ea\u6e90\u4e8edjango-rest-framework-rules \u7528\u4e8ecreate\u3001update\u3001destroy \u7b49\u5185\u7f6e\u65b9\u6cd5 usage: @permission_required('demo.add_demo') def create(self, request, *args, **kwargs) \"\"\" def decorator ( view ): def wrapped_view ( self , request , * args , ** kwargs ): if isinstance ( permissions , str ): perms = ( permissions ,) else : perms = permissions if not request . user . has_perms ( perms ): # raises a permission denied exception causing a 403 response self . permission_denied ( request , message = '\u60a8\u6ca1\u6709\u6267\u884c\u8be5\u64cd\u4f5c\u7684\u6743\u9650(\u7279\u6b8a\u6743\u9650\u68c0\u67e5\u672a\u901a\u8fc7)' ) return view ( self , request , * args , ** kwargs ) return wrapped_view return decorator","title":"\u52a8\u6001\u6743\u9650\u68c0\u67e5"},{"location":"python/drf/drf-note/#_10","text":"","title":"\u6587\u6863\u751f\u6210"},{"location":"python/drf/drf-note/#_11","text":"\u9700\u8981\u5b89\u88c5coreapi\u5e93\u7528\u4e8e\u6587\u6863\u751f\u6210\u3002\u6ce8\u91ca\u8bed\u6cd5\u4f7f\u7528markdown\u8bed\u6cd5,\u9700\u8981\u5b89\u88c5markdown\u5e93\u3002 from rest_framework.documentation import include_docs_urls urlpatterns = [ ... url ( r '^docs/' , include_docs_urls ( title = 'My API title' )) ]","title":"\u5b89\u88c5"},{"location":"python/drf/drf-note/#_12","text":"class UserViewSet ( viewsets . ModelViewSet ): \"\"\" retrieve: Return the given user. list: Return a list of all the existing users. create: Create a new user instance. \"\"\" @list_route ( methods = [ 'POST' ], permission_classes = [ AllowAny ], serializer_class = None ) def refresh_token ( self , request ): \"\"\" \u5237\u65b0\u4ee4\u724c \u3010\u63a5\u6536\u3011token: \u4ee4\u724c \u3010\u8fd4\u56de\u3011200 \u65b0\u4ee4\u724c 400-1 \u6570\u636e\u683c\u5f0f\u9519\u8bef 400-2 \u4ee4\u724c\u9519\u8bef \"\"\"","title":"\u6ce8\u91ca\u65b9\u6cd5"},{"location":"python/drf/drf-note/#_13","text":"\u8868\u683c\u63cf\u8ff0\u6539\u4e3aserializer\u4e2dfield\u7684label,\u5e76\u52a0\u5165\u7c7b\u578b\uff0c\u4e3aChoiceField\u65f6\u5217\u51fa\u9009\u9879\u5185\u5bb9\uff1a \u4fee\u6539rest_framework/schema/inspectors.py\u4e2d\u7684field_to_schema\u65b9\u6cd5\uff1a description = '\u3010 {} \u3011 {} ' . format ( field . __class__ . __name__ , force_text ( field . label ) if field . label else '' ) # ChoiceField \u5217\u51fa\u9009\u9879\u5185\u5bb9 if isinstance ( field , ChoiceField ): description += ' \u3010\u9009\u9879\u3011' for key , value in field . choices . items (): description += ' {} - {} ' . format ( key , value ) \u5de6\u4fa7\u5bfc\u822a\u4fee\u6539\u4e3a\u4e2d\u6587 \u4fee\u6539 rest_framework/schema/generators.py SchemaGenerator\u7c7b\u4e2d\u7684get_keys\u65b9\u6cd5\uff1a # \u4fee\u6539user->\u7528\u6237 named_path_components = [ component for component in subpath . strip ( '/' ) . split ( '/' ) if '{' not in component ] named_path_components [ 0 ] = view . queryset . model . _meta . verbose_name . title () \u52a0\u5165\u81ea\u5b9a\u4e49\u65b9\u6cd5\u652f\u6301 \u4fee\u6539 rest_framework/schema/generators.py\u4e2d\u7684is_custom_action\u65b9\u6cd5\u4e3a\uff1a def is_custom_action ( action ): return action not in { 'retrieve' , 'list' , 'create' , 'update' , 'partial_update' , 'destroy' , 'bulk_update' , 'bulk_destroy' } \u6700\u7ec8\u751f\u6210\u6587\u6863\u6548\u679c\uff1a Documenting your API","title":"\u4e2a\u6027\u5316"},{"location":"python/drf/drf-note/#_14","text":"","title":"\u5176\u4ed6"},{"location":"python/drf/drf-note/#_15","text":"\u4ee5/\u5f00\u5934\u7684\u8def\u5f84\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u5426\u5219\u4f1a\u9ed8\u8ba4\u53d6\u76f8\u5bf9\u8def\u5f84\u3002","title":"\u533a\u5206\u8def\u5f84\u7c7b\u578b"},{"location":"python/drf/drf-note/#routerbase_name","text":"\u4ee5viewset\u4e2d\u7684queryset\u53c2\u6570\u4f5c\u4e3a\u9ed8\u8ba4base_name\uff1b","title":"Router\u9ed8\u8ba4base_name"},{"location":"python/drf/drf-writable-nested/","text":"\u5b89\u88c5 \u672c\u6587 requirement \u73af\u5883\u5982\u4e0b\uff1a Django == 2.0.4 djangorestframework == 3.8.2 drf - writable - nested == 0.4.2 \u5916\u952e\u6216O2O\u76f4\u63a5\u5d4c\u5957\u65b0\u589e \u6a21\u578b # \u7528\u6237 class User ( AbstractBaseUser , PermissionsMixin ): # \u624b\u673a\u53f7\u7801 tel = CharNullField ( max_length = 20 , unique = True , null = True , error_messages = { 'unique' : \"\u5177\u6709\u8be5\u624b\u673a\u53f7\u7801\u7684\u7528\u6237\u5df2\u5b58\u5728\" , }, verbose_name = '\u624b\u673a\u53f7\u7801' ) # \u59d3\u540d name = models . CharField ( max_length = 30 , blank = True , verbose_name = '\u59d3\u540d' ) # \u5458\u5de5 class Staff ( models . Model ): # \u7528\u6237 \u7ea7\u8054\u5220\u9664 user = models . OneToOneField ( 'user.User' , null = True , on_delete = models . CASCADE , verbose_name = '\u5bf9\u5e94\u7528\u6237' ) # \u5de5\u53f7 no = models . CharField ( max_length = 255 , unique = True , verbose_name = '\u5de5\u53f7' ) \u89c6\u56fe views.py # \u5458\u5de5 class StaffViewSet ( ModelViewSet ): \"\"\" create: \u65b0\u589e\u6570\u636e\u683c\u5f0f\uff1a <p><code>{ 'user': {'name': 'YKH', 'tel': '17749503263', 'email': 'ykh@dreamgo.tech', 'password': 'YKH123456', 'is_active': True, 'is_staff': True, 'groups': [self.group.id]}, 'job_state': 1, 'bank_no': '614457662', 'social_security_no': '\u6682\u65e0', 'on_job': True }</code> partial_update: \u66f4\u65b0\u6570\u636e\u683c\u5f0f\uff1a <p><code>{ 'user': {'id': user.id, 'name': 'YKH', 'tel': '17749503263', 'email': 'ykh@dreamgo.tech', 'password': 'YKH123456', 'is_active': True, 'is_staff': True, 'groups': [self.group.id]}, 'job_state': 1, 'bank_no': '614457662', 'social_security_no': '\u6682\u65e0', 'on_job': True }</code> \"\"\" queryset = Staff . objects . all () serializer_class = StaffCreateSerializer serializers.py # \u521b\u5efa\u7528\u6237 class StaffUserCreateSerializer ( ModelSerializer ): def to_internal_value ( self , data ): if 'id' in data and 'id' in self . fields : try : obj_id = self . fields [ 'id' ] . to_internal_value ( data [ 'id' ]) except serializers . ValidationError as exc : raise serializers . ValidationError ({ 'id' : exc . detail }) for field in self . fields . values (): for validator in field . validators : from rest_framework.validators import UniqueValidator if type ( validator ) == UniqueValidator : # Exclude id from queryset for checking uniqueness validator . queryset = validator . queryset . exclude ( id = obj_id ) return super ( StaffUserCreateSerializer , self ) . to_internal_value ( data ) def create ( self , validated_data ): # print('StaffUserCreateSerializer->create') groups = validated_data . pop ( 'groups' , None ) # \u4f7f\u7528create_user\u4e0d\u662fcreate instance = User . objects . create_user ( ** validated_data ) if groups is not None : instance . groups . add ( * groups ) return instance def update ( self , instance , validated_data ): # print('StaffUserCreateSerializer->update') password = validated_data . pop ( 'password' , None ) super ( StaffUserCreateSerializer , self ) . update ( instance , validated_data ) if password is not None : instance . set_password ( password ) instance . save () return instance def validate_password ( self , value ): # \u9a8c\u8bc1\u5bc6\u7801\u683c\u5f0f password_validation . validate_password ( value ) return value class Meta : model = User fields = ( 'id' , 'name' , 'tel' , 'email' , 'password' , 'is_active' , 'is_staff' , 'groups' ) class StaffCreateSerializer ( WritableNestedModelSerializer ): user = StaffUserCreateSerializer ( label = '\u7528\u6237' ) class Meta : model = Staff fields = ( 'user' , 'no' , 'job_state' , 'bank_no' , 'social_security_no' , 'on_job' ) tests.py: class StaffTests ( APITestCase ): def setUp ( self ): self . user = User . objects . create_user ( tel = '18094213193' , password = '123456' ) self . user . user_permissions . add ( * get_model_permission ( Staff )) token , _ = Token . objects . get_or_create ( user = self . user ) self . access_token = token . access_token # \u6570\u636e self . group = Group . objects . create ( name = '\u6d4b\u8bd5' ) self . data = { 'user' : { 'name' : 'YKH' , 'tel' : '17749503263' , 'email' : 'ykh@dreamgo.tech' , 'password' : 'YKH123456' , 'is_active' : True , 'is_staff' : True , 'groups' : [ self . group . id ]}, 'job_state' : 1 , 'bank_no' : '614457662' , 'social_security_no' : '\u6682\u65e0' , 'on_job' : True } self . data1 = { 'user' : { 'name' : 'YKH1' , 'tel' : '177495023263' , 'email' : 'y2kh@dreamgo.tech' , 'password' : 'YKH123456' , 'is_active' : True , 'is_staff' : True , 'groups' : [ self . group . id ]}, 'job_state' : 1 , 'bank_no' : '614457662' , 'social_security_no' : '\u6682\u65e0' , 'on_job' : True } def test_staff_create ( self ): \"\"\"\u521b\u5efa\"\"\" url = reverse ( 'staff-list' ) self . client . credentials ( HTTP_AUTHORIZATION = 'Token ' + self . access_token ) response = self . client . post ( url , self . data , format = 'json' ) print ( '\u521b\u5efa' , json . dumps ( response . data , ensure_ascii = False , indent = 2 )) self . assertEqual ( response . status_code , status . HTTP_200_OK ) Staff . objects . all () . update ( no = 'Staff002' ) response = self . client . post ( url , self . data1 , format = 'json' ) print ( '\u521b\u5efa' , json . dumps ( response . data , ensure_ascii = False , indent = 2 )) self . assertEqual ( response . status_code , status . HTTP_200_OK ) def test_staff_update ( self ): \"\"\"\u66f4\u65b0\"\"\" user = User . objects . create_user ( tel = '17749503263' , password = 'YKH123456' ) instance = Staff . objects . create ( user = user , no = '17749503263' ) print ( '\u539f\u59cb\uff1a' , instance . user . id ) print ( '\u65e7\u5bc6\u7801\u767b\u9646\u7ed3\u679c:' , authenticate ( tel = '17749503263' , password = 'YKH123456' )) url = reverse ( 'staff-detail' , kwargs = { 'pk' : instance . id }) self . client . credentials ( HTTP_AUTHORIZATION = 'Token ' + self . access_token ) data = { 'user' : { 'id' : 2 , 'name' : 'YKH1' , 'tel' : '17749503263' , 'password' : 'YKH654321' }, 'job_state' : 0 , 'bank_no' : '614457662' } response = self . client . patch ( url , data , format = 'json' ) print ( '\u66f4\u65b0' , json . dumps ( response . data , ensure_ascii = False , indent = 2 )) print ( '\u65b0\u5bc6\u7801\u767b\u9646\u7ed3\u679c:' , authenticate ( tel = '17749503263' , password = 'YKH654321' )) self . assertEqual ( response . status_code , status . HTTP_200_OK ) \u6d4b\u8bd5\u8f93\u51fa\uff1a \u521b\u5efa { \"id\" : 1 , \"user\" : { \"id\" : 2 , \"tel\" : \"17749503263\" , \"portrait\" : \"http://testserver/media/default/user/default.png\" , \"groups\" : [ { \"id\" : 1 , \"name\" : \"\u53ea\u8bfb\" }, { \"id\" : 2 , \"name\" : \"\u6d4b\u8bd5\" } ], \"last_login\" : \"\" , \"gender\" : 2 , \"name\" : \"YKH\" , \"birth_day\" : \"\" , \"email\" : \"ykh@dreamgo.tech\" , \"fixed_tel\" : \"\" , \"id_no\" : \"\" , \"qq\" : \"\" , \"contact_address\" : \"\" , \"brief_code\" : \"\" , \"get_gender_display\" : \"\u4fdd\u5bc6\" , \"get_full_name\" : \"YKH\" , \"is_staff\" : true , \"is_superuser\" : false , \"is_active\" : true }, \"no\" : \"staff001\" , \"job_state\" : 1 , \"bank_no\" : \"614457662\" , \"social_security_no\" : \"\u6682\u65e0\" , \"on_job\" : true , \"create_time\" : \"2018-05-08 16:20:14\" , \"update_time\" : \"2018-05-08 16:20:14\" } ---------------------------------------------------- \u539f\u59cb\uff1a 2 \u65e7\u5bc6\u7801\u767b\u9646\u7ed3\u679c : 2 17749503263 \u66f4\u65b0 { \"user\" : { \"id\" : 2 , \"name\" : \"YKH1\" , \"tel\" : \"17749503263\" , \"email\" : \"\" , \"password\" : \"pbkdf2_sha256$100000$OCufCY1edUNM$nxQpQCU77q+HXh6ADuiWqcV9azR1uLThDsuO+ZuWEOQ=\" , \"is_active\" : true , \"is_staff\" : false , \"groups\" : [ 1 ] }, \"no\" : \"17749503263\" , \"job_state\" : 0 , \"bank_no\" : \"614457662\" , \"social_security_no\" : \"\" , \"on_job\" : true } \u65b0\u5bc6\u7801\u767b\u9646\u7ed3\u679c : 2 YKH 1 M2M\u76f4\u63a5\u5d4c\u5957\u65b0\u589e \u6a21\u578b # \u51fa\u5e93 class StorageOut ( models . Model ): # \u4e1a\u52a1\u5355\u53f7 no = models . CharField ( max_length = 255 , unique = True , verbose_name = '\u4e1a\u52a1\u5355\u53f7' ) # \u51fa\u5e93\u5b50\u8bb0\u5f55 items = models . ManyToManyField ( 'storage.StorageOutItem' , verbose_name = '\u51fa\u5e93\u5b50\u8bb0\u5f55' ) # \u51fa\u5e93\u5b50\u8bb0\u5f55 class StorageOutItem ( models . Model ): # \u5e93\u5b58 stock = models . ForeignKey ( 'storage.Stock' , related_name = 'storage_out_item_stock' , null = True , on_delete = models . SET_NULL , blank = True , verbose_name = '\u5e93\u5b58' ) # \u51fa\u5e93\u6570\u91cf out_num = models . PositiveIntegerField ( default = 0 , verbose_name = '\u51fa\u5e93\u6570\u91cf' ) \u89c6\u56fe views.py # \u51fa\u5e93 class StorageOutViewSet ( ModelViewSet , BulkUpdateModelMixin ): \"\"\" create:<code>{'storage': \u4ed3\u5e93ID, 'category': 0, 'remarks': '\u51fa\u5165\u5907\u6ce8', 'items': [{'stock': \u5e93\u5b58ID, 'out_num': 2}]}</code> \"\"\" queryset = StorageOut . objects . all () serializer_class = StorageOutCreateSerializer serializers.py # \u521b\u5efa\u51fa\u5e93\u5b50\u8bb0\u5f55 class StorageOutItemModifySerializer ( ModelSerializer ): class Meta : model = StorageOutItem fields = ( 'stock' , 'out_num' ) extra_kwargs = { 'stock' : { 'required' : True }} # \u521b\u5efa\u51fa\u5e93 class StorageOutCreateSerializer ( WritableNestedModelSerializer ): items = StorageOutItemModifySerializer ( required = True , many = True , label = '\u51fa\u5e93\u5b50\u8bb0\u5f55' ) class Meta : model = StorageOut fields = ( 'no' , 'items' ) tests.py class StorageOutTests ( APITestCase ): def setUp ( self ): ... def test_out ( self ): \"\"\"\u51fa\u5e93\"\"\" response_out = self . client . post ( url_out , { 'no' : 'no001, ' items ': [{' stock ': 1, ' out_num ': 2}]},format=' json ') print ( '\u51fa\u5e93\u65b0\u589e' , json . dumps ( response_out . data , ensure_ascii = False , indent = 2 )) \u6d4b\u8bd5\u8f93\u51fa\uff1a \u51fa\u5e93\u65b0\u589e { \"id\" : 1 , \"no\" : \"NO001\" , \"items\" : [ { \"stock\" : 1 , \"medicine_batch\" : { \"id\" : 1 , \"medicine\" : { \"id\" : 1 , \"name\" : \"999\u611f\u5192\u7075\" , \"no\" : \"NO999\" }, \"stock_num\" : 3 , \"out_num\" : 2 , \"unit_price\" : \"4.0000\" , \"total_price\" : \"8.0000\" , \"create_time\" : \"2018-05-08 16:36:58\" , \"update_time\" : \"2018-05-08 16:36:58\" } ], \"create_time\" : \"2018-05-08 16:36:58\" , \"update_time\" : \"2018-05-08 16:36:58\" } Note:\u5728\u66f4\u65b0M2M\u5b57\u6bb5\u65f6\uff0c\u6709\u4e00\u90e8\u5206\u4e0d\u60f3\u4fee\u6539\u4e5f\u4e0d\u60f3\u4e0a\u4f20\u5bf9\u5e94id\u7684\u8bb0\u5f55\uff0c\u5219\u9700\u8981\u91cd\u5199serializer\u91cc\u7684update\u65b9\u6cd5\u4e3a\uff1a def update ( self , instance , validated_data ): relations , reverse_relations = self . _extract_relations ( validated_data ) # Create or update direct relations (foreign key, one-to-one) self . update_or_create_direct_relations ( validated_data , relations , ) # Update instance instance = super ( PrescriptionCheckEscapeSerializer , self ) . update ( instance , validated_data ) self . update_or_create_reverse_relations ( instance , reverse_relations ) # \u4e0d\u5220\u9664\u65e7\u7684M2M\u6570\u636e # self.delete_reverse_relations_if_need(instance, reverse_relations) return instance \u5916\u952e\u53cd\u5411\u7ea7\u8054\u65b0\u589e \u6a21\u578b # \u8ba1\u91cf\u6807\u51c6 class UnitGroup ( models . Model ): # \u540d\u79f0 name = models . CharField ( max_length = 255 , verbose_name = '\u540d\u79f0' ) # \u8ba1\u91cf\u5355\u4f4d class Unit ( models . Model ): # \u8ba1\u91cf\u6807\u51c6 unit_group = models . ForeignKey ( 'medicine.UnitGroup' , related_name = 'unit_unit_group' , null = True , on_delete = models . SET_NULL , verbose_name = '\u8ba1\u91cf\u6807\u51c6' ) # \u540d\u79f0 name = models . CharField ( max_length = 255 , verbose_name = '\u540d\u79f0' ) # \u663e\u793a\u540d\u79f0 display_name = models . CharField ( max_length = 255 , verbose_name = '\u663e\u793a\u540d\u79f0' ) \u89c6\u56fe views.py \u540c\u4e0a serializers.py: # \u521b\u5efa\u8ba1\u91cf\u5355\u4f4d class UnitCreateSerializer ( ModelSerializer ): class Meta : model = Unit fields = ( 'name' , 'display_name' , 'ratio' , 'is_active' ) # \u521b\u5efa\u8ba1\u91cf\u6807\u51c6 class UnitGroupCreateSerializer ( WritableNestedModelSerializer ): unit_unit_group = UnitCreateSerializer ( many = True ) class Meta : model = UnitGroup fields = ( 'unit_unit_group' , 'name' ) tests.py: class UnitGroupTests ( APITestCase ): def setUp ( self ): try : self . user = User . objects . get ( tel = '18094213198' ) except User . DoesNotExist : self . user = User . objects . create_user ( tel = '18094213198' , password = '123456' ) self . user . user_permissions . add ( * get_model_permission ( UnitGroup )) token , _ = Token . objects . get_or_create ( user = self . user ) self . access_token = token . access_token def test_create ( self ): \"\"\"\u521b\u5efa\"\"\" url = reverse ( 'unitgroup-list' ) self . client . credentials ( HTTP_AUTHORIZATION = 'Token ' + self . access_token ) data = { 'name' : '\u91cd\u91cf' , 'unit_unit_group' : [{ 'name' : '1' , 'display_name' : 'yi' }]} response = self . client . post ( url , data , format = 'json' ) print ([( x , x . unit_group ) for x in Unit . objects . all ()]) print ( '\u521b\u5efa' , json . dumps ( response . data , ensure_ascii = False , indent = 2 )) self . assertEqual ( response . status_code , status . HTTP_200_OK ) \u6d4b\u8bd5\u8f93\u51fa\uff1a [ (<U n i t : 1 > , <U n i t Group : \u91cd\u91cf>) ] \u521b\u5efa { \"id\" : 1 , \"name\" : \"\u91cd\u91cf\" , \"create_time\" : \"2018-05-08 16:59:51\" , \"update_time\" : \"2018-05-08 16:59:51\" } unique=True \u5f53\u6a21\u578b\u4e2d\u6709unique=True\u7684\u5b57\u6bb5\u65f6\uff0c\u5728\u5d4c\u5957\u66f4\u65b0\u65f6\u4f20\u9012\u4e86\u548c\u66f4\u65b0\u524d\u76f8\u540c\u7684\u8be5\u5b57\u6bb5\uff0c\u4f9d\u65e7\u63d0\u793a\u8be5\u5b57\u6bb5\u5df2\u5b58\u5728\u7684\u95ee\u9898\u3002 \u6211\u4eec\u4ee5 \u5916\u952e\u6216O2O\u76f4\u63a5\u5d4c\u5957\u65b0\u589e \u4e2d\u7684\u6a21\u578b\u6765\u8bb2\u89e3\uff0c\u5176\u66f4\u65b0\u65f6\u4f7f\u7528\u7684serializer\u4e3a\uff1a # \u66f4\u65b0\u5458\u5de5 class StaffUpdateSerializer ( WritableNestedModelSerializer ): user = StaffUserCreateSerializer ( label = '\u7528\u6237' , partial = True ) class Meta : model = Staff fields = ( 'user' , 'no' , 'job_state' , 'bank_no' , 'social_security_no' , 'on_job' ) \u5728python shell\u8f93\u5165\uff1a from user.models import User , Staff staff = Staff . objects . first () from user.serializers import StaffUpdateSerializer serializer = StaffUpdateSerializer ( staff , partial = True ) print ( repr ( serializer )) \u5f97\u5230 \uff1a StaffUpdateSerializer ( < Staff : s > , partial = True ): user = StaffUserCreateSerializer ( label = '\u7528\u6237' , partial = True ): id = IntegerField ( label = 'ID' , read_only = True , required = False ) name = CharField ( allow_blank = True , label = '\u59d3\u540d' , max_length = 30 , required = False ) tel = CharField ( allow_null = True , label = '\u624b\u673a\u53f7\u7801' , max_length = 20 , required = True , validators = [ < UniqueValidator ( queryset = User . objects . all ()) > ]) email = CharField ( allow_blank = True , allow_null = True , label = '\u7535\u5b50\u90ae\u4ef6' , max_length = 255 , required = False , validators = [ < UniqueValidator ( queryset = User . objects . all ()) > ]) password = CharField ( label = '\u5bc6\u7801' , max_length = 128 , required = True ) is_active = BooleanField ( label = '\u6709\u6548' , required = False ) is_staff = BooleanField ( label = '\u804c\u5458\u72b6\u6001' , required = False ) groups = PrimaryKeyRelatedField ( help_text = '\u8be5\u7528\u6237\u5f52\u5c5e\u7684\u7ec4\u3002\u4e00\u4e2a\u7528\u6237\u5c06\u5f97\u5230\u5176\u5f52\u5c5e\u7684\u7ec4\u7684\u6240\u6709\u6743\u9650\u3002' , label = '\u7ec4' , many = True , queryset = Group . objects . all (), required = False ) no = CharField ( label = '\u5de5\u53f7' , max_length = 255 , required = True , validators = [ < UniqueValidator ( queryset = Staff . objects . all ()) > ]) job_state = ChoiceField ( choices = dict_items ([( 0 , '\u5168\u804c' ), ( 1 , '\u517c\u804c' )]), label = '\u5165\u804c\u7c7b\u578b' , required = False , validators = [ < django . core . validators . MinValueValidator object > , < django . core . validators . MaxValueValidator object > ]) bank_no = CharField ( allow_blank = True , label = '\u94f6\u884c\u5361\u53f7\u7801' , max_length = 30 , required = False ) social_security_no = CharField ( allow_blank = True , label = '\u793e\u4fdd\u53f7' , max_length = 30 , required = False ) on_job = BooleanField ( label = '\u662f\u5426\u5728\u804c' , required = False ) \u53ef\u4ee5\u770b\u5230 StaffUserCreateSerializer \u4e2d\u6ca1\u6709 instance \u5bf9\u8c61\uff0c\u6240\u4ee5 tel \u5b57\u6bb5\u7684 UniqueValidator \u8303\u56f4\u4e3a queryset=User.objects.all() \u3002\u7531\u6b64\u53ef\u89c1\u5bfc\u81f4\u4e0a\u8ff0\u95ee\u9898\u7684\u4e3b\u8981\u539f\u56e0\u662f serializer \u5728\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u628a staff \u5bf9\u5e94\u7684 user \u4f5c\u4e3a instance \u4f20\u9012\u7ed9 StaffUserCreateSerializer \u3002 \u4e0b\u9762\u7ed9\u51fa\u4e24\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\uff1a \u65b9\u6cd51\uff1a\u5728 rest_framework/validators.py/BaseUniqueForValidator \u4e2d\u6709\u5982\u4e0b\u65b9\u6cd5\uff0c\u5f53 serializer \u6709 instance \u65f6\uff0c\u552f\u4e00\u9a8c\u8bc1\u7684\u8303\u56f4\u4f1a\u6392\u9664\u5f53\u524d instance ,\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u90e8\u5206\u66f4\u65b0 instance \u65f6\u4e0a\u4f20 instance \u539f\u5148\u7684\u552f\u4e00\u503c\u4e0d\u4f1a\u62a5\u9519\u7684\u539f\u56e0\u3002 def exclude_current_instance ( self , attrs , queryset ): \"\"\" If an instance is being updated, then do not include that instance itself as a uniqueness conflict. \"\"\" if self . instance is not None : return queryset . exclude ( pk = self . instance . pk ) return queryset \u57fa\u4e8e\u4e0a\u9762\u7684\u601d\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a UniqueValidator \u91cd\u65b0\u7b5b\u9009\u8303\u56f4\uff1a class UserSerializer ( ModelSerializer ): # Reverse OneToOne relation profile = ProfileSerializer ( required = False , allow_null = True ) def to_internal_value ( self , data ): if 'pk' in data and 'pk' in self . fields : print ( data ) try : obj_id = self . fields [ 'pk' ] . to_internal_value ( data [ 'pk' ]) except serializers . ValidationError as exc : raise serializers . ValidationError ({ 'pk' : exc . detail }) for field in self . fields . values (): for validator in field . validators : from rest_framework.validators import UniqueValidator if type ( validator ) == UniqueValidator : # Exclude id from queryset for checking uniqueness validator . queryset = validator . queryset . exclude ( id = obj_id ) return super ( UserSerializer , self ) . to_internal_value ( data ) \u65b9\u6cd52\uff1a\u5c06\u5bf9\u5e94\u7684 id/pk \u8f6c\u5316\u4e3a instance : class StaffUserCreateSerializer ( ModelSerializer ): def to_internal_value ( self , data ): if 'pk' in data and 'pk' in self . fields : print ( data ) try : obj_id = self . fields [ 'pk' ] . to_internal_value ( data [ 'pk' ]) except serializers . ValidationError as exc : raise serializers . ValidationError ({ 'pk' : exc . detail }) self . instance = self . Meta . model . objects . get ( id = obj_id ) return super ( StaffUserCreateSerializer , self ) . to_internal_value ( data ) class Meta : model = User fields = ( 'pk' , 'name' , 'tel' ,) class StaffModifySerializer ( WritableNestedModelSerializer ): user = StaffUserCreateSerializer ( label = 'User' , partial = True ) class Meta : model = Staff fields = ( 'user' , 'job_state' , 'bank_no' , 'social_security_no' , 'on_job' ) \u76f8\u5173Issue: DRF issue2403 DRF issue 2996 drf-writable-nested issue 34","title":"drf-writable-nested\u5d4c\u5957\u65b0\u589e\u66f4\u65b0"},{"location":"python/drf/drf-writable-nested/#_1","text":"\u672c\u6587 requirement \u73af\u5883\u5982\u4e0b\uff1a Django == 2.0.4 djangorestframework == 3.8.2 drf - writable - nested == 0.4.2","title":"\u5b89\u88c5"},{"location":"python/drf/drf-writable-nested/#o2o","text":"","title":"\u5916\u952e\u6216O2O\u76f4\u63a5\u5d4c\u5957\u65b0\u589e"},{"location":"python/drf/drf-writable-nested/#_2","text":"# \u7528\u6237 class User ( AbstractBaseUser , PermissionsMixin ): # \u624b\u673a\u53f7\u7801 tel = CharNullField ( max_length = 20 , unique = True , null = True , error_messages = { 'unique' : \"\u5177\u6709\u8be5\u624b\u673a\u53f7\u7801\u7684\u7528\u6237\u5df2\u5b58\u5728\" , }, verbose_name = '\u624b\u673a\u53f7\u7801' ) # \u59d3\u540d name = models . CharField ( max_length = 30 , blank = True , verbose_name = '\u59d3\u540d' ) # \u5458\u5de5 class Staff ( models . Model ): # \u7528\u6237 \u7ea7\u8054\u5220\u9664 user = models . OneToOneField ( 'user.User' , null = True , on_delete = models . CASCADE , verbose_name = '\u5bf9\u5e94\u7528\u6237' ) # \u5de5\u53f7 no = models . CharField ( max_length = 255 , unique = True , verbose_name = '\u5de5\u53f7' )","title":"\u6a21\u578b"},{"location":"python/drf/drf-writable-nested/#_3","text":"views.py # \u5458\u5de5 class StaffViewSet ( ModelViewSet ): \"\"\" create: \u65b0\u589e\u6570\u636e\u683c\u5f0f\uff1a <p><code>{ 'user': {'name': 'YKH', 'tel': '17749503263', 'email': 'ykh@dreamgo.tech', 'password': 'YKH123456', 'is_active': True, 'is_staff': True, 'groups': [self.group.id]}, 'job_state': 1, 'bank_no': '614457662', 'social_security_no': '\u6682\u65e0', 'on_job': True }</code> partial_update: \u66f4\u65b0\u6570\u636e\u683c\u5f0f\uff1a <p><code>{ 'user': {'id': user.id, 'name': 'YKH', 'tel': '17749503263', 'email': 'ykh@dreamgo.tech', 'password': 'YKH123456', 'is_active': True, 'is_staff': True, 'groups': [self.group.id]}, 'job_state': 1, 'bank_no': '614457662', 'social_security_no': '\u6682\u65e0', 'on_job': True }</code> \"\"\" queryset = Staff . objects . all () serializer_class = StaffCreateSerializer serializers.py # \u521b\u5efa\u7528\u6237 class StaffUserCreateSerializer ( ModelSerializer ): def to_internal_value ( self , data ): if 'id' in data and 'id' in self . fields : try : obj_id = self . fields [ 'id' ] . to_internal_value ( data [ 'id' ]) except serializers . ValidationError as exc : raise serializers . ValidationError ({ 'id' : exc . detail }) for field in self . fields . values (): for validator in field . validators : from rest_framework.validators import UniqueValidator if type ( validator ) == UniqueValidator : # Exclude id from queryset for checking uniqueness validator . queryset = validator . queryset . exclude ( id = obj_id ) return super ( StaffUserCreateSerializer , self ) . to_internal_value ( data ) def create ( self , validated_data ): # print('StaffUserCreateSerializer->create') groups = validated_data . pop ( 'groups' , None ) # \u4f7f\u7528create_user\u4e0d\u662fcreate instance = User . objects . create_user ( ** validated_data ) if groups is not None : instance . groups . add ( * groups ) return instance def update ( self , instance , validated_data ): # print('StaffUserCreateSerializer->update') password = validated_data . pop ( 'password' , None ) super ( StaffUserCreateSerializer , self ) . update ( instance , validated_data ) if password is not None : instance . set_password ( password ) instance . save () return instance def validate_password ( self , value ): # \u9a8c\u8bc1\u5bc6\u7801\u683c\u5f0f password_validation . validate_password ( value ) return value class Meta : model = User fields = ( 'id' , 'name' , 'tel' , 'email' , 'password' , 'is_active' , 'is_staff' , 'groups' ) class StaffCreateSerializer ( WritableNestedModelSerializer ): user = StaffUserCreateSerializer ( label = '\u7528\u6237' ) class Meta : model = Staff fields = ( 'user' , 'no' , 'job_state' , 'bank_no' , 'social_security_no' , 'on_job' ) tests.py: class StaffTests ( APITestCase ): def setUp ( self ): self . user = User . objects . create_user ( tel = '18094213193' , password = '123456' ) self . user . user_permissions . add ( * get_model_permission ( Staff )) token , _ = Token . objects . get_or_create ( user = self . user ) self . access_token = token . access_token # \u6570\u636e self . group = Group . objects . create ( name = '\u6d4b\u8bd5' ) self . data = { 'user' : { 'name' : 'YKH' , 'tel' : '17749503263' , 'email' : 'ykh@dreamgo.tech' , 'password' : 'YKH123456' , 'is_active' : True , 'is_staff' : True , 'groups' : [ self . group . id ]}, 'job_state' : 1 , 'bank_no' : '614457662' , 'social_security_no' : '\u6682\u65e0' , 'on_job' : True } self . data1 = { 'user' : { 'name' : 'YKH1' , 'tel' : '177495023263' , 'email' : 'y2kh@dreamgo.tech' , 'password' : 'YKH123456' , 'is_active' : True , 'is_staff' : True , 'groups' : [ self . group . id ]}, 'job_state' : 1 , 'bank_no' : '614457662' , 'social_security_no' : '\u6682\u65e0' , 'on_job' : True } def test_staff_create ( self ): \"\"\"\u521b\u5efa\"\"\" url = reverse ( 'staff-list' ) self . client . credentials ( HTTP_AUTHORIZATION = 'Token ' + self . access_token ) response = self . client . post ( url , self . data , format = 'json' ) print ( '\u521b\u5efa' , json . dumps ( response . data , ensure_ascii = False , indent = 2 )) self . assertEqual ( response . status_code , status . HTTP_200_OK ) Staff . objects . all () . update ( no = 'Staff002' ) response = self . client . post ( url , self . data1 , format = 'json' ) print ( '\u521b\u5efa' , json . dumps ( response . data , ensure_ascii = False , indent = 2 )) self . assertEqual ( response . status_code , status . HTTP_200_OK ) def test_staff_update ( self ): \"\"\"\u66f4\u65b0\"\"\" user = User . objects . create_user ( tel = '17749503263' , password = 'YKH123456' ) instance = Staff . objects . create ( user = user , no = '17749503263' ) print ( '\u539f\u59cb\uff1a' , instance . user . id ) print ( '\u65e7\u5bc6\u7801\u767b\u9646\u7ed3\u679c:' , authenticate ( tel = '17749503263' , password = 'YKH123456' )) url = reverse ( 'staff-detail' , kwargs = { 'pk' : instance . id }) self . client . credentials ( HTTP_AUTHORIZATION = 'Token ' + self . access_token ) data = { 'user' : { 'id' : 2 , 'name' : 'YKH1' , 'tel' : '17749503263' , 'password' : 'YKH654321' }, 'job_state' : 0 , 'bank_no' : '614457662' } response = self . client . patch ( url , data , format = 'json' ) print ( '\u66f4\u65b0' , json . dumps ( response . data , ensure_ascii = False , indent = 2 )) print ( '\u65b0\u5bc6\u7801\u767b\u9646\u7ed3\u679c:' , authenticate ( tel = '17749503263' , password = 'YKH654321' )) self . assertEqual ( response . status_code , status . HTTP_200_OK ) \u6d4b\u8bd5\u8f93\u51fa\uff1a \u521b\u5efa { \"id\" : 1 , \"user\" : { \"id\" : 2 , \"tel\" : \"17749503263\" , \"portrait\" : \"http://testserver/media/default/user/default.png\" , \"groups\" : [ { \"id\" : 1 , \"name\" : \"\u53ea\u8bfb\" }, { \"id\" : 2 , \"name\" : \"\u6d4b\u8bd5\" } ], \"last_login\" : \"\" , \"gender\" : 2 , \"name\" : \"YKH\" , \"birth_day\" : \"\" , \"email\" : \"ykh@dreamgo.tech\" , \"fixed_tel\" : \"\" , \"id_no\" : \"\" , \"qq\" : \"\" , \"contact_address\" : \"\" , \"brief_code\" : \"\" , \"get_gender_display\" : \"\u4fdd\u5bc6\" , \"get_full_name\" : \"YKH\" , \"is_staff\" : true , \"is_superuser\" : false , \"is_active\" : true }, \"no\" : \"staff001\" , \"job_state\" : 1 , \"bank_no\" : \"614457662\" , \"social_security_no\" : \"\u6682\u65e0\" , \"on_job\" : true , \"create_time\" : \"2018-05-08 16:20:14\" , \"update_time\" : \"2018-05-08 16:20:14\" } ---------------------------------------------------- \u539f\u59cb\uff1a 2 \u65e7\u5bc6\u7801\u767b\u9646\u7ed3\u679c : 2 17749503263 \u66f4\u65b0 { \"user\" : { \"id\" : 2 , \"name\" : \"YKH1\" , \"tel\" : \"17749503263\" , \"email\" : \"\" , \"password\" : \"pbkdf2_sha256$100000$OCufCY1edUNM$nxQpQCU77q+HXh6ADuiWqcV9azR1uLThDsuO+ZuWEOQ=\" , \"is_active\" : true , \"is_staff\" : false , \"groups\" : [ 1 ] }, \"no\" : \"17749503263\" , \"job_state\" : 0 , \"bank_no\" : \"614457662\" , \"social_security_no\" : \"\" , \"on_job\" : true } \u65b0\u5bc6\u7801\u767b\u9646\u7ed3\u679c : 2 YKH 1","title":"\u89c6\u56fe"},{"location":"python/drf/drf-writable-nested/#m2m","text":"","title":"M2M\u76f4\u63a5\u5d4c\u5957\u65b0\u589e"},{"location":"python/drf/drf-writable-nested/#_4","text":"# \u51fa\u5e93 class StorageOut ( models . Model ): # \u4e1a\u52a1\u5355\u53f7 no = models . CharField ( max_length = 255 , unique = True , verbose_name = '\u4e1a\u52a1\u5355\u53f7' ) # \u51fa\u5e93\u5b50\u8bb0\u5f55 items = models . ManyToManyField ( 'storage.StorageOutItem' , verbose_name = '\u51fa\u5e93\u5b50\u8bb0\u5f55' ) # \u51fa\u5e93\u5b50\u8bb0\u5f55 class StorageOutItem ( models . Model ): # \u5e93\u5b58 stock = models . ForeignKey ( 'storage.Stock' , related_name = 'storage_out_item_stock' , null = True , on_delete = models . SET_NULL , blank = True , verbose_name = '\u5e93\u5b58' ) # \u51fa\u5e93\u6570\u91cf out_num = models . PositiveIntegerField ( default = 0 , verbose_name = '\u51fa\u5e93\u6570\u91cf' )","title":"\u6a21\u578b"},{"location":"python/drf/drf-writable-nested/#_5","text":"views.py # \u51fa\u5e93 class StorageOutViewSet ( ModelViewSet , BulkUpdateModelMixin ): \"\"\" create:<code>{'storage': \u4ed3\u5e93ID, 'category': 0, 'remarks': '\u51fa\u5165\u5907\u6ce8', 'items': [{'stock': \u5e93\u5b58ID, 'out_num': 2}]}</code> \"\"\" queryset = StorageOut . objects . all () serializer_class = StorageOutCreateSerializer serializers.py # \u521b\u5efa\u51fa\u5e93\u5b50\u8bb0\u5f55 class StorageOutItemModifySerializer ( ModelSerializer ): class Meta : model = StorageOutItem fields = ( 'stock' , 'out_num' ) extra_kwargs = { 'stock' : { 'required' : True }} # \u521b\u5efa\u51fa\u5e93 class StorageOutCreateSerializer ( WritableNestedModelSerializer ): items = StorageOutItemModifySerializer ( required = True , many = True , label = '\u51fa\u5e93\u5b50\u8bb0\u5f55' ) class Meta : model = StorageOut fields = ( 'no' , 'items' ) tests.py class StorageOutTests ( APITestCase ): def setUp ( self ): ... def test_out ( self ): \"\"\"\u51fa\u5e93\"\"\" response_out = self . client . post ( url_out , { 'no' : 'no001, ' items ': [{' stock ': 1, ' out_num ': 2}]},format=' json ') print ( '\u51fa\u5e93\u65b0\u589e' , json . dumps ( response_out . data , ensure_ascii = False , indent = 2 )) \u6d4b\u8bd5\u8f93\u51fa\uff1a \u51fa\u5e93\u65b0\u589e { \"id\" : 1 , \"no\" : \"NO001\" , \"items\" : [ { \"stock\" : 1 , \"medicine_batch\" : { \"id\" : 1 , \"medicine\" : { \"id\" : 1 , \"name\" : \"999\u611f\u5192\u7075\" , \"no\" : \"NO999\" }, \"stock_num\" : 3 , \"out_num\" : 2 , \"unit_price\" : \"4.0000\" , \"total_price\" : \"8.0000\" , \"create_time\" : \"2018-05-08 16:36:58\" , \"update_time\" : \"2018-05-08 16:36:58\" } ], \"create_time\" : \"2018-05-08 16:36:58\" , \"update_time\" : \"2018-05-08 16:36:58\" } Note:\u5728\u66f4\u65b0M2M\u5b57\u6bb5\u65f6\uff0c\u6709\u4e00\u90e8\u5206\u4e0d\u60f3\u4fee\u6539\u4e5f\u4e0d\u60f3\u4e0a\u4f20\u5bf9\u5e94id\u7684\u8bb0\u5f55\uff0c\u5219\u9700\u8981\u91cd\u5199serializer\u91cc\u7684update\u65b9\u6cd5\u4e3a\uff1a def update ( self , instance , validated_data ): relations , reverse_relations = self . _extract_relations ( validated_data ) # Create or update direct relations (foreign key, one-to-one) self . update_or_create_direct_relations ( validated_data , relations , ) # Update instance instance = super ( PrescriptionCheckEscapeSerializer , self ) . update ( instance , validated_data ) self . update_or_create_reverse_relations ( instance , reverse_relations ) # \u4e0d\u5220\u9664\u65e7\u7684M2M\u6570\u636e # self.delete_reverse_relations_if_need(instance, reverse_relations) return instance","title":"\u89c6\u56fe"},{"location":"python/drf/drf-writable-nested/#_6","text":"","title":"\u5916\u952e\u53cd\u5411\u7ea7\u8054\u65b0\u589e"},{"location":"python/drf/drf-writable-nested/#_7","text":"# \u8ba1\u91cf\u6807\u51c6 class UnitGroup ( models . Model ): # \u540d\u79f0 name = models . CharField ( max_length = 255 , verbose_name = '\u540d\u79f0' ) # \u8ba1\u91cf\u5355\u4f4d class Unit ( models . Model ): # \u8ba1\u91cf\u6807\u51c6 unit_group = models . ForeignKey ( 'medicine.UnitGroup' , related_name = 'unit_unit_group' , null = True , on_delete = models . SET_NULL , verbose_name = '\u8ba1\u91cf\u6807\u51c6' ) # \u540d\u79f0 name = models . CharField ( max_length = 255 , verbose_name = '\u540d\u79f0' ) # \u663e\u793a\u540d\u79f0 display_name = models . CharField ( max_length = 255 , verbose_name = '\u663e\u793a\u540d\u79f0' )","title":"\u6a21\u578b"},{"location":"python/drf/drf-writable-nested/#_8","text":"views.py \u540c\u4e0a serializers.py: # \u521b\u5efa\u8ba1\u91cf\u5355\u4f4d class UnitCreateSerializer ( ModelSerializer ): class Meta : model = Unit fields = ( 'name' , 'display_name' , 'ratio' , 'is_active' ) # \u521b\u5efa\u8ba1\u91cf\u6807\u51c6 class UnitGroupCreateSerializer ( WritableNestedModelSerializer ): unit_unit_group = UnitCreateSerializer ( many = True ) class Meta : model = UnitGroup fields = ( 'unit_unit_group' , 'name' ) tests.py: class UnitGroupTests ( APITestCase ): def setUp ( self ): try : self . user = User . objects . get ( tel = '18094213198' ) except User . DoesNotExist : self . user = User . objects . create_user ( tel = '18094213198' , password = '123456' ) self . user . user_permissions . add ( * get_model_permission ( UnitGroup )) token , _ = Token . objects . get_or_create ( user = self . user ) self . access_token = token . access_token def test_create ( self ): \"\"\"\u521b\u5efa\"\"\" url = reverse ( 'unitgroup-list' ) self . client . credentials ( HTTP_AUTHORIZATION = 'Token ' + self . access_token ) data = { 'name' : '\u91cd\u91cf' , 'unit_unit_group' : [{ 'name' : '1' , 'display_name' : 'yi' }]} response = self . client . post ( url , data , format = 'json' ) print ([( x , x . unit_group ) for x in Unit . objects . all ()]) print ( '\u521b\u5efa' , json . dumps ( response . data , ensure_ascii = False , indent = 2 )) self . assertEqual ( response . status_code , status . HTTP_200_OK ) \u6d4b\u8bd5\u8f93\u51fa\uff1a [ (<U n i t : 1 > , <U n i t Group : \u91cd\u91cf>) ] \u521b\u5efa { \"id\" : 1 , \"name\" : \"\u91cd\u91cf\" , \"create_time\" : \"2018-05-08 16:59:51\" , \"update_time\" : \"2018-05-08 16:59:51\" }","title":"\u89c6\u56fe"},{"location":"python/drf/drf-writable-nested/#uniquetrue","text":"\u5f53\u6a21\u578b\u4e2d\u6709unique=True\u7684\u5b57\u6bb5\u65f6\uff0c\u5728\u5d4c\u5957\u66f4\u65b0\u65f6\u4f20\u9012\u4e86\u548c\u66f4\u65b0\u524d\u76f8\u540c\u7684\u8be5\u5b57\u6bb5\uff0c\u4f9d\u65e7\u63d0\u793a\u8be5\u5b57\u6bb5\u5df2\u5b58\u5728\u7684\u95ee\u9898\u3002 \u6211\u4eec\u4ee5 \u5916\u952e\u6216O2O\u76f4\u63a5\u5d4c\u5957\u65b0\u589e \u4e2d\u7684\u6a21\u578b\u6765\u8bb2\u89e3\uff0c\u5176\u66f4\u65b0\u65f6\u4f7f\u7528\u7684serializer\u4e3a\uff1a # \u66f4\u65b0\u5458\u5de5 class StaffUpdateSerializer ( WritableNestedModelSerializer ): user = StaffUserCreateSerializer ( label = '\u7528\u6237' , partial = True ) class Meta : model = Staff fields = ( 'user' , 'no' , 'job_state' , 'bank_no' , 'social_security_no' , 'on_job' ) \u5728python shell\u8f93\u5165\uff1a from user.models import User , Staff staff = Staff . objects . first () from user.serializers import StaffUpdateSerializer serializer = StaffUpdateSerializer ( staff , partial = True ) print ( repr ( serializer )) \u5f97\u5230 \uff1a StaffUpdateSerializer ( < Staff : s > , partial = True ): user = StaffUserCreateSerializer ( label = '\u7528\u6237' , partial = True ): id = IntegerField ( label = 'ID' , read_only = True , required = False ) name = CharField ( allow_blank = True , label = '\u59d3\u540d' , max_length = 30 , required = False ) tel = CharField ( allow_null = True , label = '\u624b\u673a\u53f7\u7801' , max_length = 20 , required = True , validators = [ < UniqueValidator ( queryset = User . objects . all ()) > ]) email = CharField ( allow_blank = True , allow_null = True , label = '\u7535\u5b50\u90ae\u4ef6' , max_length = 255 , required = False , validators = [ < UniqueValidator ( queryset = User . objects . all ()) > ]) password = CharField ( label = '\u5bc6\u7801' , max_length = 128 , required = True ) is_active = BooleanField ( label = '\u6709\u6548' , required = False ) is_staff = BooleanField ( label = '\u804c\u5458\u72b6\u6001' , required = False ) groups = PrimaryKeyRelatedField ( help_text = '\u8be5\u7528\u6237\u5f52\u5c5e\u7684\u7ec4\u3002\u4e00\u4e2a\u7528\u6237\u5c06\u5f97\u5230\u5176\u5f52\u5c5e\u7684\u7ec4\u7684\u6240\u6709\u6743\u9650\u3002' , label = '\u7ec4' , many = True , queryset = Group . objects . all (), required = False ) no = CharField ( label = '\u5de5\u53f7' , max_length = 255 , required = True , validators = [ < UniqueValidator ( queryset = Staff . objects . all ()) > ]) job_state = ChoiceField ( choices = dict_items ([( 0 , '\u5168\u804c' ), ( 1 , '\u517c\u804c' )]), label = '\u5165\u804c\u7c7b\u578b' , required = False , validators = [ < django . core . validators . MinValueValidator object > , < django . core . validators . MaxValueValidator object > ]) bank_no = CharField ( allow_blank = True , label = '\u94f6\u884c\u5361\u53f7\u7801' , max_length = 30 , required = False ) social_security_no = CharField ( allow_blank = True , label = '\u793e\u4fdd\u53f7' , max_length = 30 , required = False ) on_job = BooleanField ( label = '\u662f\u5426\u5728\u804c' , required = False ) \u53ef\u4ee5\u770b\u5230 StaffUserCreateSerializer \u4e2d\u6ca1\u6709 instance \u5bf9\u8c61\uff0c\u6240\u4ee5 tel \u5b57\u6bb5\u7684 UniqueValidator \u8303\u56f4\u4e3a queryset=User.objects.all() \u3002\u7531\u6b64\u53ef\u89c1\u5bfc\u81f4\u4e0a\u8ff0\u95ee\u9898\u7684\u4e3b\u8981\u539f\u56e0\u662f serializer \u5728\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u628a staff \u5bf9\u5e94\u7684 user \u4f5c\u4e3a instance \u4f20\u9012\u7ed9 StaffUserCreateSerializer \u3002 \u4e0b\u9762\u7ed9\u51fa\u4e24\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\uff1a \u65b9\u6cd51\uff1a\u5728 rest_framework/validators.py/BaseUniqueForValidator \u4e2d\u6709\u5982\u4e0b\u65b9\u6cd5\uff0c\u5f53 serializer \u6709 instance \u65f6\uff0c\u552f\u4e00\u9a8c\u8bc1\u7684\u8303\u56f4\u4f1a\u6392\u9664\u5f53\u524d instance ,\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u90e8\u5206\u66f4\u65b0 instance \u65f6\u4e0a\u4f20 instance \u539f\u5148\u7684\u552f\u4e00\u503c\u4e0d\u4f1a\u62a5\u9519\u7684\u539f\u56e0\u3002 def exclude_current_instance ( self , attrs , queryset ): \"\"\" If an instance is being updated, then do not include that instance itself as a uniqueness conflict. \"\"\" if self . instance is not None : return queryset . exclude ( pk = self . instance . pk ) return queryset \u57fa\u4e8e\u4e0a\u9762\u7684\u601d\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a UniqueValidator \u91cd\u65b0\u7b5b\u9009\u8303\u56f4\uff1a class UserSerializer ( ModelSerializer ): # Reverse OneToOne relation profile = ProfileSerializer ( required = False , allow_null = True ) def to_internal_value ( self , data ): if 'pk' in data and 'pk' in self . fields : print ( data ) try : obj_id = self . fields [ 'pk' ] . to_internal_value ( data [ 'pk' ]) except serializers . ValidationError as exc : raise serializers . ValidationError ({ 'pk' : exc . detail }) for field in self . fields . values (): for validator in field . validators : from rest_framework.validators import UniqueValidator if type ( validator ) == UniqueValidator : # Exclude id from queryset for checking uniqueness validator . queryset = validator . queryset . exclude ( id = obj_id ) return super ( UserSerializer , self ) . to_internal_value ( data ) \u65b9\u6cd52\uff1a\u5c06\u5bf9\u5e94\u7684 id/pk \u8f6c\u5316\u4e3a instance : class StaffUserCreateSerializer ( ModelSerializer ): def to_internal_value ( self , data ): if 'pk' in data and 'pk' in self . fields : print ( data ) try : obj_id = self . fields [ 'pk' ] . to_internal_value ( data [ 'pk' ]) except serializers . ValidationError as exc : raise serializers . ValidationError ({ 'pk' : exc . detail }) self . instance = self . Meta . model . objects . get ( id = obj_id ) return super ( StaffUserCreateSerializer , self ) . to_internal_value ( data ) class Meta : model = User fields = ( 'pk' , 'name' , 'tel' ,) class StaffModifySerializer ( WritableNestedModelSerializer ): user = StaffUserCreateSerializer ( label = 'User' , partial = True ) class Meta : model = Staff fields = ( 'user' , 'job_state' , 'bank_no' , 'social_security_no' , 'on_job' ) \u76f8\u5173Issue: DRF issue2403 DRF issue 2996 drf-writable-nested issue 34","title":"unique=True"},{"location":"python/drf/rest_framework_cache/","text":"\u573a\u666f \u5728DRF\u4e2d\uff0c\u6709\u4e00\u4e9b\u9ad8\u9891\u7684\u5217\u8868\u63a5\u53e3(\u5982\u4f9b\u524d\u7aef\u641c\u7d22\u4e0b\u62c9\u9009\u62e9\u7684\u6570\u636e\u6e90\u63a5\u53e3)\uff0c\u4f7f\u7528\u7f13\u5b58\u53ef\u4ee5\u5927\u5e45\u5ea6\u7684\u63d0\u9ad8\u63a5\u53e3\u7684\u54cd\u5e94\u901f\u5ea6\u3002 \u9879\u76ee\u4ecb\u7ecd django-rest-framework-cache \u662f\u4e00\u4e2a\u5d4c\u5165 Serializer \u5c42\u53bb\u7f13\u5b58\u6570\u636e\u7684\u5de5\u5177\uff0c\u901a\u8fc7\u91cd\u5199 Serializer \u7684 to_representation \u65b9\u6cd5\u6765\u5b9e\u73b0\u7f13\u5b58\u3002\u82e5\u4f60\u91cd\u5199\u4e86 ModelSerializer \u7684 to_representation \u65b9\u6cd5\u3002 Github\u4ed3\u5e93\u5730\u5740 \u5b89\u88c5 pip install rest - framework - cache settings.py: INSTALLED_APPS = ( ... 'rest_framework_cache' , ) urls.py: from rest_framework_cache.registry import cache_registry cache_registry . autodiscover () \u914d\u7f6e \u7f13\u5b58\u6e90 CACHES = { 'default' : { 'BACKEND' : 'django.core.cache.backends.memcached.MemcachedCache' , 'LOCATION' : '127.0.0.1:11211' , }, 'rest_backend' : { 'BACKEND' : 'django.core.cache.backends.locmem.LocMemCache' , 'LOCATION' : 'unique-snowflake' , } } REST_FRAMEWORK_CACHE = { 'DEFAULT_CACHE_BACKEND' : 'rest_backend' , } \u5168\u5c40\u8d85\u65f6\u65f6\u957f REST_FRAMEWORK_CACHE = { 'DEFAULT_CACHE_TIMEOUT' : 86400 , # Default is 1 day } \u7528\u6cd5 from rest_framework import serializers # You must import the CachedSerializerMixin and cache_registry from rest_framework_cache.serializers import CachedSerializerMixin from rest_framework_cache.registry import cache_registry from .models import Comment class CommentSerializer ( serializers . ModelSerializer , CachedSerializerMixin ): class Meta : model = Comment cache_registry . register ( CommentSerializer ) \u6ce8\u610f\u4e8b\u9879\uff1a django-rest-framework-cache \u901a\u8fc7\u91cd\u5199 Serializer \u7684 to_representation \u65b9\u6cd5\u6765\u5b9e\u73b0\u7f13\u5b58\u3002\u82e5\u4f60\u91cd\u5199\u4e86 ModelSerializer \u7684 to_representation \u65b9\u6cd5,\u56e0\u4e3aPython3\u7684MRO\u7b97\u6cd5\u7684\u539f\u56e0\uff0c Serializer \u4f7f\u7528\u65f6\u5e94\u5148\u7ee7\u627f CachedSerializerMixin : class CommentSerializer(CachedSerializerMixin, CustomModelSerializer): \u5b9e\u6d4b\u6548\u679c \u6570\u636e\u5217\u8868\u8fd4\u56de\u7684\u6570\u636e\u5171\u6709310\u6761\u7c7b\u4f3c\u4e0b\u5217\u7684\u6570\u636e\uff1a { \"id\" : 310 , \"name\" : \"\u8292\u679c\" , \"no\" : \"600006\" , \"unit_group\" : { \"id\" : 1 , \"name\" : \"\u91cd\u91cf\" , \"minimum_unit\" : { \"id\" : 4 , \"name\" : \"g\" , \"display_name\" : \"\u514b\" } } } \u5728CPU: i7-7700 3.6G \u5185\u5b58\uff1a 16GB \u7cfb\u7edf: Win764 \u4f4d\uff0c\u4f7f\u7528 requests \u5de5\u5177\u8bbf\u95ee100\u6b21\u7684\u5e73\u5747\u7528\u65f6\u5982\u4e0b\uff1a \u4f7f\u7528 Cached \u524d\uff1a0.459s \u4f7f\u7528 LocMemCache \u540e\uff1a0.197s \u4f7f\u7528 MemcachedCache \u540e\uff1a0.0538s \u5728CPU: G4400 0.8G \u5185\u5b58\uff1a 8GB \u7cfb\u7edf: Ubuntu14.04 \u4f4d\uff0c\u4f7f\u7528 requests \u5de5\u5177\u8bbf\u95ee100\u6b21\u7684\u5e73\u5747\u7528\u65f6\u5982\u4e0b\uff1a \u4f7f\u7528 Cached \u524d\uff1a0.639s \u4f7f\u7528 LocMemCache \u540e\uff1a0.319s \u4f7f\u7528 MemcachedCache \u540e\uff1a0.0817s django-rest-framework-cache \u4f7f\u7528 LocMemCache \u4f18\u5316\u540e\u53ef\u4ee5\u7f29\u77ed\u7528\u65f6\u81f3\u539f\u5148\u7684 1/2 \uff0c\u4f7f\u7528 MemcachedCache \u4f18\u5316\u540e\u53ef\u4ee5\u7f29\u77ed\u7528\u65f6\u81f3\u539f\u5148\u7684 1/8 \u3002 Issue:\u5d4c\u5957\u7684FK\u6570\u636e\u6216\u8005M2M\u6570\u636e\u4fee\u6539\u540e\u4e0d\u751f\u6548\u95ee\u9898\uff08Updated in 2018/08/02\uff09 \u7ecf\u8fc7\u4e00\u4e2a\u591a\u6708\u7684\u4f7f\u7528\uff0c\u53d1\u73b0\u6b64\u63d2\u4ef6\u6709\u4e00\u4e2a\u4e0d\u5b8c\u7f8e\u7684\u5730\u65b9\u3002\u4ee5\u4e0a\u8ff0\u7684\u8bc4\u8bba\u6a21\u578b Comment \u4e3a\u4f8b\uff0c\u5047\u8bbe\u8bc4\u8bba\u6709\u4e00\u4e2a\u5916\u952e\u53eb\u6240\u5c5e\u4eba owner ,\u5728\u5217\u8868\u8bc4\u8bba\u7684\u65f6\u5019,\u4f7f\u7528\u7684 Serializer \u5982\u4e0b\uff1a class CommentSerializer ( serializers . ModelSerializer , CachedSerializerMixin ): owner = UserSerializer ( read_only = True ) class Meta : model = Comment \u5f53\u8bc4\u8bba\u5217\u8868\u7684\u6570\u636e\u88ab\u7f13\u5b58\u4e0b\u6765\u4ee5\u540e\uff0c\u518d\u53bb\u4fee\u6539\u8bc4\u8bba\u4e2d\u5bf9\u5e94 owner \u7684\u4fe1\u606f\uff0c\u518d\u6b21\u8bbf\u95ee\u8be5\u8bc4\u8bba\u5217\u8868\u53d6\u5230\u7684\u4f9d\u65e7\u662f\u672a\u4fee\u6539\u524d\u7684\u7528\u6237\u4fe1\u606f\u3002\u8fd9\u662f\u56e0\u4e3a\u7f13\u5b58\u7684 serializer \u4fe1\u606f\uff0c\u53ea\u6709\u5728\u8be5 serializer \u5bf9\u5e94\u7684 Model \u5b9e\u4f8b\u88ab\u4fee\u6539\u540e\u624d\u4f1a\u5237\u65b0\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u6709\u5728 Comment \u5b9e\u4f8b\u88ab\u4fee\u6539\u65f6\u7f13\u5b58\u624d\u4f1a\u88ab\u5237\u65b0\uff0c\u4fee\u6539 Comment \u5bf9\u5e94\u7684\u5916\u952e User \u5b9e\u4f8b\u5e76\u4e0d\u4f1a\u53bb\u5237\u65b0\u7f13\u5b58\u3002 \u5bf9\u6b64\u63d2\u4ef6\u505a\u5982\u4e0b\u6539\u8fdb\uff0c\u91cd\u5199 CachedSerializerMixin \uff0c\u4f7f\u5176\u53ef\u4ee5\u9009\u62e9\u67d0\u4e00\u4e9b\u5b57\u6bb5\u4e0d\u8fdb\u884c\u7f13\u5b58\uff1a from collections import OrderedDict from django.utils.functional import cached_property from rest_framework import serializers from rest_framework.fields import SkipField from rest_framework.relations import PKOnlyObject from rest_framework_cache.cache import cache from rest_framework_cache.settings import api_settings from rest_framework_cache.utils import get_cache_key class CachedSerializerMixin ( serializers . ModelSerializer ): def _get_cache_key ( self , instance ): request = self . context . get ( 'request' ) protocol = request . scheme if request else 'http' return get_cache_key ( instance , self . __class__ , protocol ) @cached_property def _not_cache_fields ( self ): not_cache_fields = getattr ( self . Meta , 'not_cache_fields' , []) return [ field for field in self . fields . values () if field . field_name in not_cache_fields ] @cached_property def _cacheable_fields ( self ): not_cache_fields = getattr ( self . Meta , 'not_cache_fields' , []) return [ field for field in self . fields . values () if not field . write_only and field . field_name not in not_cache_fields ] def fields_to_representation ( self , instance , fields , ret ): for field in fields : try : attribute = field . get_attribute ( instance ) except SkipField : continue check_for_none = attribute . pk if isinstance ( attribute , PKOnlyObject ) else attribute if check_for_none is None : ret [ field . field_name ] = None else : ret [ field . field_name ] = field . to_representation ( attribute ) return ret def to_representation ( self , instance ): \"\"\" Checks if the representation of instance is cached and adds to cache if is not. \"\"\" key = self . _get_cache_key ( instance ) cached = cache . get ( key ) if cached : ret = cached else : ret = OrderedDict () ret = self . fields_to_representation ( instance , self . _cacheable_fields , ret ) cache . set ( key , ret , api_settings . DEFAULT_CACHE_TIMEOUT ) ret = self . fields_to_representation ( instance , self . _not_cache_fields , ret ) return ret \u7528\u6cd5\uff1a class UserSerializer ( serializers . ModelSerializer , CachedSerializerMixin ): class Meta : model = User cache_registry . register ( UserSerializer ) class CommentSerializer ( serializers . ModelSerializer , CachedSerializerMixin ): owner = UserSerializer ( read_only = True ) class Meta : model = Comment not_cache_fields = ( 'owner' ,) cache_registry . register ( CommentSerializer ) \u4f7f\u7528 not_cache_fields \u9009\u9879\u6307\u5b9a CommentSerializer \u4e0d\u7f13\u5b58 owner \u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u7531 UserSerializer \u7684\u7f13\u5b58\u8bfb\u53d6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u4e86\u3002 \u5df2\u63d0\u4ea4 PR ,\u4e0d\u8fc7\u6309\u4f5c\u8005\u7684\u60c5\u51b5\u6765\u770b\u53ef\u80fd\u4e0d\u4f1a\u5408\u5e76\u4e86\u3002\u6211Fork\u51fa\u6765\u4fee\u6539\u597d\u7684\u5e93\u89c1 \u6b64\u5904 \uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u56e0\u4e3a\u7cbe\u529b\u6709\u9650\u7684\u539f\u56e0\u8be5\u6539\u8fdb\u4ec5\u5728 djangorestframework==3.8.2 \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002","title":"rest_framework_cache\u4f18\u5316\u63a5\u53e3\u8bbf\u95ee\u901f\u5ea6"},{"location":"python/drf/rest_framework_cache/#_1","text":"\u5728DRF\u4e2d\uff0c\u6709\u4e00\u4e9b\u9ad8\u9891\u7684\u5217\u8868\u63a5\u53e3(\u5982\u4f9b\u524d\u7aef\u641c\u7d22\u4e0b\u62c9\u9009\u62e9\u7684\u6570\u636e\u6e90\u63a5\u53e3)\uff0c\u4f7f\u7528\u7f13\u5b58\u53ef\u4ee5\u5927\u5e45\u5ea6\u7684\u63d0\u9ad8\u63a5\u53e3\u7684\u54cd\u5e94\u901f\u5ea6\u3002","title":"\u573a\u666f"},{"location":"python/drf/rest_framework_cache/#_2","text":"django-rest-framework-cache \u662f\u4e00\u4e2a\u5d4c\u5165 Serializer \u5c42\u53bb\u7f13\u5b58\u6570\u636e\u7684\u5de5\u5177\uff0c\u901a\u8fc7\u91cd\u5199 Serializer \u7684 to_representation \u65b9\u6cd5\u6765\u5b9e\u73b0\u7f13\u5b58\u3002\u82e5\u4f60\u91cd\u5199\u4e86 ModelSerializer \u7684 to_representation \u65b9\u6cd5\u3002 Github\u4ed3\u5e93\u5730\u5740","title":"\u9879\u76ee\u4ecb\u7ecd"},{"location":"python/drf/rest_framework_cache/#_3","text":"pip install rest - framework - cache settings.py: INSTALLED_APPS = ( ... 'rest_framework_cache' , ) urls.py: from rest_framework_cache.registry import cache_registry cache_registry . autodiscover ()","title":"\u5b89\u88c5"},{"location":"python/drf/rest_framework_cache/#_4","text":"","title":"\u914d\u7f6e"},{"location":"python/drf/rest_framework_cache/#_5","text":"CACHES = { 'default' : { 'BACKEND' : 'django.core.cache.backends.memcached.MemcachedCache' , 'LOCATION' : '127.0.0.1:11211' , }, 'rest_backend' : { 'BACKEND' : 'django.core.cache.backends.locmem.LocMemCache' , 'LOCATION' : 'unique-snowflake' , } } REST_FRAMEWORK_CACHE = { 'DEFAULT_CACHE_BACKEND' : 'rest_backend' , }","title":"\u7f13\u5b58\u6e90"},{"location":"python/drf/rest_framework_cache/#_6","text":"REST_FRAMEWORK_CACHE = { 'DEFAULT_CACHE_TIMEOUT' : 86400 , # Default is 1 day }","title":"\u5168\u5c40\u8d85\u65f6\u65f6\u957f"},{"location":"python/drf/rest_framework_cache/#_7","text":"from rest_framework import serializers # You must import the CachedSerializerMixin and cache_registry from rest_framework_cache.serializers import CachedSerializerMixin from rest_framework_cache.registry import cache_registry from .models import Comment class CommentSerializer ( serializers . ModelSerializer , CachedSerializerMixin ): class Meta : model = Comment cache_registry . register ( CommentSerializer ) \u6ce8\u610f\u4e8b\u9879\uff1a django-rest-framework-cache \u901a\u8fc7\u91cd\u5199 Serializer \u7684 to_representation \u65b9\u6cd5\u6765\u5b9e\u73b0\u7f13\u5b58\u3002\u82e5\u4f60\u91cd\u5199\u4e86 ModelSerializer \u7684 to_representation \u65b9\u6cd5,\u56e0\u4e3aPython3\u7684MRO\u7b97\u6cd5\u7684\u539f\u56e0\uff0c Serializer \u4f7f\u7528\u65f6\u5e94\u5148\u7ee7\u627f CachedSerializerMixin : class CommentSerializer(CachedSerializerMixin, CustomModelSerializer):","title":"\u7528\u6cd5"},{"location":"python/drf/rest_framework_cache/#_8","text":"\u6570\u636e\u5217\u8868\u8fd4\u56de\u7684\u6570\u636e\u5171\u6709310\u6761\u7c7b\u4f3c\u4e0b\u5217\u7684\u6570\u636e\uff1a { \"id\" : 310 , \"name\" : \"\u8292\u679c\" , \"no\" : \"600006\" , \"unit_group\" : { \"id\" : 1 , \"name\" : \"\u91cd\u91cf\" , \"minimum_unit\" : { \"id\" : 4 , \"name\" : \"g\" , \"display_name\" : \"\u514b\" } } } \u5728CPU: i7-7700 3.6G \u5185\u5b58\uff1a 16GB \u7cfb\u7edf: Win764 \u4f4d\uff0c\u4f7f\u7528 requests \u5de5\u5177\u8bbf\u95ee100\u6b21\u7684\u5e73\u5747\u7528\u65f6\u5982\u4e0b\uff1a \u4f7f\u7528 Cached \u524d\uff1a0.459s \u4f7f\u7528 LocMemCache \u540e\uff1a0.197s \u4f7f\u7528 MemcachedCache \u540e\uff1a0.0538s \u5728CPU: G4400 0.8G \u5185\u5b58\uff1a 8GB \u7cfb\u7edf: Ubuntu14.04 \u4f4d\uff0c\u4f7f\u7528 requests \u5de5\u5177\u8bbf\u95ee100\u6b21\u7684\u5e73\u5747\u7528\u65f6\u5982\u4e0b\uff1a \u4f7f\u7528 Cached \u524d\uff1a0.639s \u4f7f\u7528 LocMemCache \u540e\uff1a0.319s \u4f7f\u7528 MemcachedCache \u540e\uff1a0.0817s django-rest-framework-cache \u4f7f\u7528 LocMemCache \u4f18\u5316\u540e\u53ef\u4ee5\u7f29\u77ed\u7528\u65f6\u81f3\u539f\u5148\u7684 1/2 \uff0c\u4f7f\u7528 MemcachedCache \u4f18\u5316\u540e\u53ef\u4ee5\u7f29\u77ed\u7528\u65f6\u81f3\u539f\u5148\u7684 1/8 \u3002","title":"\u5b9e\u6d4b\u6548\u679c"},{"location":"python/drf/rest_framework_cache/#issuefkm2mupdated-in-20180802","text":"\u7ecf\u8fc7\u4e00\u4e2a\u591a\u6708\u7684\u4f7f\u7528\uff0c\u53d1\u73b0\u6b64\u63d2\u4ef6\u6709\u4e00\u4e2a\u4e0d\u5b8c\u7f8e\u7684\u5730\u65b9\u3002\u4ee5\u4e0a\u8ff0\u7684\u8bc4\u8bba\u6a21\u578b Comment \u4e3a\u4f8b\uff0c\u5047\u8bbe\u8bc4\u8bba\u6709\u4e00\u4e2a\u5916\u952e\u53eb\u6240\u5c5e\u4eba owner ,\u5728\u5217\u8868\u8bc4\u8bba\u7684\u65f6\u5019,\u4f7f\u7528\u7684 Serializer \u5982\u4e0b\uff1a class CommentSerializer ( serializers . ModelSerializer , CachedSerializerMixin ): owner = UserSerializer ( read_only = True ) class Meta : model = Comment \u5f53\u8bc4\u8bba\u5217\u8868\u7684\u6570\u636e\u88ab\u7f13\u5b58\u4e0b\u6765\u4ee5\u540e\uff0c\u518d\u53bb\u4fee\u6539\u8bc4\u8bba\u4e2d\u5bf9\u5e94 owner \u7684\u4fe1\u606f\uff0c\u518d\u6b21\u8bbf\u95ee\u8be5\u8bc4\u8bba\u5217\u8868\u53d6\u5230\u7684\u4f9d\u65e7\u662f\u672a\u4fee\u6539\u524d\u7684\u7528\u6237\u4fe1\u606f\u3002\u8fd9\u662f\u56e0\u4e3a\u7f13\u5b58\u7684 serializer \u4fe1\u606f\uff0c\u53ea\u6709\u5728\u8be5 serializer \u5bf9\u5e94\u7684 Model \u5b9e\u4f8b\u88ab\u4fee\u6539\u540e\u624d\u4f1a\u5237\u65b0\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u6709\u5728 Comment \u5b9e\u4f8b\u88ab\u4fee\u6539\u65f6\u7f13\u5b58\u624d\u4f1a\u88ab\u5237\u65b0\uff0c\u4fee\u6539 Comment \u5bf9\u5e94\u7684\u5916\u952e User \u5b9e\u4f8b\u5e76\u4e0d\u4f1a\u53bb\u5237\u65b0\u7f13\u5b58\u3002 \u5bf9\u6b64\u63d2\u4ef6\u505a\u5982\u4e0b\u6539\u8fdb\uff0c\u91cd\u5199 CachedSerializerMixin \uff0c\u4f7f\u5176\u53ef\u4ee5\u9009\u62e9\u67d0\u4e00\u4e9b\u5b57\u6bb5\u4e0d\u8fdb\u884c\u7f13\u5b58\uff1a from collections import OrderedDict from django.utils.functional import cached_property from rest_framework import serializers from rest_framework.fields import SkipField from rest_framework.relations import PKOnlyObject from rest_framework_cache.cache import cache from rest_framework_cache.settings import api_settings from rest_framework_cache.utils import get_cache_key class CachedSerializerMixin ( serializers . ModelSerializer ): def _get_cache_key ( self , instance ): request = self . context . get ( 'request' ) protocol = request . scheme if request else 'http' return get_cache_key ( instance , self . __class__ , protocol ) @cached_property def _not_cache_fields ( self ): not_cache_fields = getattr ( self . Meta , 'not_cache_fields' , []) return [ field for field in self . fields . values () if field . field_name in not_cache_fields ] @cached_property def _cacheable_fields ( self ): not_cache_fields = getattr ( self . Meta , 'not_cache_fields' , []) return [ field for field in self . fields . values () if not field . write_only and field . field_name not in not_cache_fields ] def fields_to_representation ( self , instance , fields , ret ): for field in fields : try : attribute = field . get_attribute ( instance ) except SkipField : continue check_for_none = attribute . pk if isinstance ( attribute , PKOnlyObject ) else attribute if check_for_none is None : ret [ field . field_name ] = None else : ret [ field . field_name ] = field . to_representation ( attribute ) return ret def to_representation ( self , instance ): \"\"\" Checks if the representation of instance is cached and adds to cache if is not. \"\"\" key = self . _get_cache_key ( instance ) cached = cache . get ( key ) if cached : ret = cached else : ret = OrderedDict () ret = self . fields_to_representation ( instance , self . _cacheable_fields , ret ) cache . set ( key , ret , api_settings . DEFAULT_CACHE_TIMEOUT ) ret = self . fields_to_representation ( instance , self . _not_cache_fields , ret ) return ret \u7528\u6cd5\uff1a class UserSerializer ( serializers . ModelSerializer , CachedSerializerMixin ): class Meta : model = User cache_registry . register ( UserSerializer ) class CommentSerializer ( serializers . ModelSerializer , CachedSerializerMixin ): owner = UserSerializer ( read_only = True ) class Meta : model = Comment not_cache_fields = ( 'owner' ,) cache_registry . register ( CommentSerializer ) \u4f7f\u7528 not_cache_fields \u9009\u9879\u6307\u5b9a CommentSerializer \u4e0d\u7f13\u5b58 owner \u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u7531 UserSerializer \u7684\u7f13\u5b58\u8bfb\u53d6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u4e86\u3002 \u5df2\u63d0\u4ea4 PR ,\u4e0d\u8fc7\u6309\u4f5c\u8005\u7684\u60c5\u51b5\u6765\u770b\u53ef\u80fd\u4e0d\u4f1a\u5408\u5e76\u4e86\u3002\u6211Fork\u51fa\u6765\u4fee\u6539\u597d\u7684\u5e93\u89c1 \u6b64\u5904 \uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u56e0\u4e3a\u7cbe\u529b\u6709\u9650\u7684\u539f\u56e0\u8be5\u6539\u8fdb\u4ec5\u5728 djangorestframework==3.8.2 \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002","title":"Issue:\u5d4c\u5957\u7684FK\u6570\u636e\u6216\u8005M2M\u6570\u636e\u4fee\u6539\u540e\u4e0d\u751f\u6548\u95ee\u9898\uff08Updated in 2018/08/02\uff09"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/","text":"Flask\u3001Django\u3001FastApi\u3001SpringBoot\u3001Go\u6027\u80fd\u6bd4\u8f83 \u8bf4\u660e \u6d4b\u8bd5\u73af\u5883\u4e3a\u4e24\u53f01\u68382G\u7684centos7\u865a\u62df\u673a\uff0c\u4e00\u53f0\u4f7f\u7528wrk\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4e00\u53f0\u90e8\u7f72\u4e1a\u52a1\uff0c\u6570\u636e\u5e93\u4e3a\u90e8\u7f72\u4e8e\u4e1a\u52a1\u673a\u5668\u7684Mysql5.7\uff0c\u6700\u5927\u8fde\u63a5\u6570\u4e3a2000\u3002 \u6d4b\u8bd5\u4ee3\u7801\u5747\u4e0d\u76f8\u540c(\u6ca1\u65f6\u95f4\u5199\u592a\u591aDemo\uff0c\u5747\u627e\u4e00\u4e9b\u529f\u80fd\u76f8\u4f3c\u7684\u63a5\u53e3\u8fdb\u884c\u6d4b\u8bd5)\uff0c\u4e3b\u8981\u903b\u8f91\u662f\u7531\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u5355\u6761\u6570\u636e\u540e\u5e8f\u5217\u5316\u901a\u8fc7api\u8fd4\u56de\u3002 \u5927\u81f4\u6d4b\u8bd5\u7ed3\u679c\u4e3a\uff0c\u7ecf\u4f9b\u53c2\u8003\uff1a \u6846\u67b6 \u90e8\u7f72\u65b9\u5f0f \u6bcf\u79d2\u5904\u7406\u8bf7\u6c42\u6570 Django2.0+DRF gunicorn+gevent 75 Django3.1+DRF gunicorn+gevent wsgi 95 Django3.1+DRF uvicorn asgi 181 Flask+SQLAlchemy gunicorn+gevent 210 SpringBoot java -jar 343 FastApi+Tortoise ORM uvicorn asgi 568 Go(Gin\u6846\u67b6) ./bubble conf/config.ini 3984.92 \u6d4b\u8bd5\u6570\u636e Django2.0+DRF Django+DjangoRestFramework\u6838\u5fc3\u4ee3\u7801; def retrieve(self, request, *args, **kwargs): instance = self.get_object() serializer = TodoSerializer(instance, context=self.get_serializer_context()) return success_response(serializer.data) Django+gunicorn+gevent \u8d44\u6e90\u8be6\u60c5\u63a5\u53e3 [root@localhost opt]# wrk -t 8 -c 100 -d 120 --latency http://192.168.11.5:6000/api/todo/f83e3a9c-2650-4beb-b1f1-a2a93cd13175/ Running 2m test @ http://192.168.11.5:6000/api/todo/f83e3a9c-2650-4beb-b1f1-a2a93cd13175/ 8 threads and 100 connections Thread Stats Avg Stdev Max +/- Stdev Latency 25.28ms 120.30ms 1.95s 98.89% Req/Sec 64.00 24.27 90.00 79.69% Latency Distribution 50% 12.36ms 75% 13.36ms 90% 23.06ms 99% 258.84ms 8977 requests in 2.00m, 5.85MB read Socket errors: connect 0, read 492, write 0, timeout 718 Requests/sec: 74.78 Transfer/sec: 49.88KB Top\u6570\u636e PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 4619 mysql 20 0 1189752 295300 8732 S 34.9 15.9 0:08.83 mysqld 4966 root 20 0 384904 66672 6732 R 32.2 3.6 0:08.28 gunicorn 4967 root 20 0 385156 66908 6724 R 32.2 3.6 0:08.60 gunicorn Flask Flask\u6838\u5fc3\u4ee3\u7801 def retrieve(): log.info(f'\u8c03\u7528/retrieve\u63a5\u53e3') _id = request.args.get('id') serializer = CookieSerializer(cookie) return return_template(code=1, msg='success', result=serializer.data)) Flask+gunicorn+gevent \u8d44\u6e90\u8be6\u60c5\u63a5\u53e3 [root@localhost opt]# wrk -t 8 -c 100 -d 120 --latency \"http://192.168.11.5:6000/cookies/retrieve?cookie_id=2c1ec53e-b4d2-4601-9298-7e608c8eb5d7&platform=0\" Running 2m test @ http://192.168.11.5:6000/cookies/retrieve?cookie_id=2c1ec53e-b4d2-4601-9298-7e608c8eb5d7&platform=0 8 threads and 100 connections Thread Stats Avg Stdev Max +/- Stdev Latency 454.27ms 70.46ms 763.42ms 69.37% Req/Sec 26.99 13.76 110.00 69.20% Latency Distribution 50% 445.85ms 75% 493.55ms 90% 547.84ms 99% 661.73ms 25309 requests in 2.00m, 18.60MB read Requests/sec: 210.81 Transfer/sec: 158.67KB Top PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 5290 root 20 0 949312 82068 3896 R 47.4 4.4 0:37.43 gunicorn 5289 root 20 0 944252 75156 3876 R 46.7 4.0 0:36.86 gunicorn 4619 mysql 20 0 1211500 303244 8948 S 4.3 16.3 0:44.21 mysqld SpringBoot wrk\u6d4b\u8bd5\u7ed3\u679c\uff1a [root@localhost opt]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8809/api/registerCenter/page Running 30s test @ http://192.168.11.5:8809/api/registerCenter/page 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 1.25s 287.88ms 2.00s 80.07% Req/Sec 51.77 40.90 386.00 73.08% Latency Distribution 50% 1.27s 75% 1.39s 90% 1.55s 99% 1.95s 10334 requests in 30.06s, 5.11MB read Socket errors: connect 0, read 0, write 0, timeout 857 Requests/sec: 343.77 Transfer/sec: 174.24KB TOP\u6570\u636e PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 6161 root 20 0 3133868 521532 14068 S 90.2 28.0 2:08.70 java 4619 mysql 20 0 1191436 302916 9100 S 8.2 16.3 1:01.23 mysqld Django3.1 django3.1+gunicorn wsgi [root@localhost ~]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8000/api/command/1/ Running 30s test @ http://192.168.11.5:8000/api/command/1/ 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 24.08ms 66.73ms 1.94s 99.56% Req/Sec 48.30 9.63 108.00 87.76% Latency Distribution 50% 20.11ms 75% 20.95ms 90% 23.99ms 99% 35.17ms 2877 requests in 30.07s, 1.59MB read Socket errors: connect 0, read 408, write 0, timeout 142 Requests/sec: 95.67 Transfer/sec: 54.00KB django3.1+uvicorn asgi [root@localhost ~]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8000/api/command/1/ Running 30s test @ http://192.168.11.5:8000/api/command/1/ 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 1.80s 12.53ms 1.82s 95.62% Req/Sec 159.07 231.52 610.00 75.42% Latency Distribution 50% 1.81s 75% 1.81s 90% 1.81s 99% 1.81s 5456 requests in 30.04s, 2.84MB read Socket errors: connect 0, read 0, write 0, timeout 5205 Requests/sec: 181.63 Transfer/sec: 96.85KB FastAPI Fastapi+uvicorn+Tortoise ORM [root@localhost ~]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8000/client/1 Running 30s test @ http://192.168.11.5:8000/client/1 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 751.06ms 526.96ms 1.95s 59.53% Req/Sec 112.46 107.55 650.00 78.82% Latency Distribution 50% 848.00ms 75% 934.46ms 90% 1.65s 99% 1.82s 17120 requests in 30.09s, 8.72MB read Socket errors: connect 0, read 0, write 0, timeout 860 Requests/sec: 568.93 Transfer/sec: 296.69KB TOP\u6570\u636e PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 28082 root 20 0 380140 56708 8628 R 87.3 3.0 1:52.78 uvicorn 1132 mysql 20 0 1159764 254644 9260 S 11.0 13.7 1:14.19 mysqld Go(Gin\u6846\u67b6) Wrk\u6d4b\u8bd5\u7ed3\u679c [root@localhost wrk]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:9000/v1/todo Running 30s test @ http://192.168.11.5:9000/v1/todo 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 201.99ms 281.57ms 1.65s 85.82% Req/Sec 501.23 97.01 0.88k 69.65% Latency Distribution 50% 89.46ms 75% 172.46ms 90% 698.35ms 99% 1.13s 119909 requests in 30.09s, 84.16MB read Socket errors: connect 0, read 0, write 0, timeout 516 Requests/sec: 3984.92 Transfer/sec: 2.80MB TOP\u6570\u636e PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 78086 root 20 0 935180 38164 5044 R 106.0 1.0 0:07.72 bubble 2109 mysql 20 0 1690548 347604 5948 R 84.7 9.0 0:59.65 mysqld","title":"Flask\u3001Django\u3001FastApi\u3001SpringBoot\u3001Go\u6027\u80fd\u6bd4\u8f83"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#flaskdjangofastapispringbootgo","text":"","title":"Flask\u3001Django\u3001FastApi\u3001SpringBoot\u3001Go\u6027\u80fd\u6bd4\u8f83"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#_1","text":"\u6d4b\u8bd5\u73af\u5883\u4e3a\u4e24\u53f01\u68382G\u7684centos7\u865a\u62df\u673a\uff0c\u4e00\u53f0\u4f7f\u7528wrk\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4e00\u53f0\u90e8\u7f72\u4e1a\u52a1\uff0c\u6570\u636e\u5e93\u4e3a\u90e8\u7f72\u4e8e\u4e1a\u52a1\u673a\u5668\u7684Mysql5.7\uff0c\u6700\u5927\u8fde\u63a5\u6570\u4e3a2000\u3002 \u6d4b\u8bd5\u4ee3\u7801\u5747\u4e0d\u76f8\u540c(\u6ca1\u65f6\u95f4\u5199\u592a\u591aDemo\uff0c\u5747\u627e\u4e00\u4e9b\u529f\u80fd\u76f8\u4f3c\u7684\u63a5\u53e3\u8fdb\u884c\u6d4b\u8bd5)\uff0c\u4e3b\u8981\u903b\u8f91\u662f\u7531\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u5355\u6761\u6570\u636e\u540e\u5e8f\u5217\u5316\u901a\u8fc7api\u8fd4\u56de\u3002 \u5927\u81f4\u6d4b\u8bd5\u7ed3\u679c\u4e3a\uff0c\u7ecf\u4f9b\u53c2\u8003\uff1a \u6846\u67b6 \u90e8\u7f72\u65b9\u5f0f \u6bcf\u79d2\u5904\u7406\u8bf7\u6c42\u6570 Django2.0+DRF gunicorn+gevent 75 Django3.1+DRF gunicorn+gevent wsgi 95 Django3.1+DRF uvicorn asgi 181 Flask+SQLAlchemy gunicorn+gevent 210 SpringBoot java -jar 343 FastApi+Tortoise ORM uvicorn asgi 568 Go(Gin\u6846\u67b6) ./bubble conf/config.ini 3984.92","title":"\u8bf4\u660e"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#_2","text":"","title":"\u6d4b\u8bd5\u6570\u636e"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#django20drf","text":"Django+DjangoRestFramework\u6838\u5fc3\u4ee3\u7801; def retrieve(self, request, *args, **kwargs): instance = self.get_object() serializer = TodoSerializer(instance, context=self.get_serializer_context()) return success_response(serializer.data) Django+gunicorn+gevent \u8d44\u6e90\u8be6\u60c5\u63a5\u53e3 [root@localhost opt]# wrk -t 8 -c 100 -d 120 --latency http://192.168.11.5:6000/api/todo/f83e3a9c-2650-4beb-b1f1-a2a93cd13175/ Running 2m test @ http://192.168.11.5:6000/api/todo/f83e3a9c-2650-4beb-b1f1-a2a93cd13175/ 8 threads and 100 connections Thread Stats Avg Stdev Max +/- Stdev Latency 25.28ms 120.30ms 1.95s 98.89% Req/Sec 64.00 24.27 90.00 79.69% Latency Distribution 50% 12.36ms 75% 13.36ms 90% 23.06ms 99% 258.84ms 8977 requests in 2.00m, 5.85MB read Socket errors: connect 0, read 492, write 0, timeout 718 Requests/sec: 74.78 Transfer/sec: 49.88KB Top\u6570\u636e PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 4619 mysql 20 0 1189752 295300 8732 S 34.9 15.9 0:08.83 mysqld 4966 root 20 0 384904 66672 6732 R 32.2 3.6 0:08.28 gunicorn 4967 root 20 0 385156 66908 6724 R 32.2 3.6 0:08.60 gunicorn","title":"Django2.0+DRF"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#flask","text":"Flask\u6838\u5fc3\u4ee3\u7801 def retrieve(): log.info(f'\u8c03\u7528/retrieve\u63a5\u53e3') _id = request.args.get('id') serializer = CookieSerializer(cookie) return return_template(code=1, msg='success', result=serializer.data)) Flask+gunicorn+gevent \u8d44\u6e90\u8be6\u60c5\u63a5\u53e3 [root@localhost opt]# wrk -t 8 -c 100 -d 120 --latency \"http://192.168.11.5:6000/cookies/retrieve?cookie_id=2c1ec53e-b4d2-4601-9298-7e608c8eb5d7&platform=0\" Running 2m test @ http://192.168.11.5:6000/cookies/retrieve?cookie_id=2c1ec53e-b4d2-4601-9298-7e608c8eb5d7&platform=0 8 threads and 100 connections Thread Stats Avg Stdev Max +/- Stdev Latency 454.27ms 70.46ms 763.42ms 69.37% Req/Sec 26.99 13.76 110.00 69.20% Latency Distribution 50% 445.85ms 75% 493.55ms 90% 547.84ms 99% 661.73ms 25309 requests in 2.00m, 18.60MB read Requests/sec: 210.81 Transfer/sec: 158.67KB Top PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 5290 root 20 0 949312 82068 3896 R 47.4 4.4 0:37.43 gunicorn 5289 root 20 0 944252 75156 3876 R 46.7 4.0 0:36.86 gunicorn 4619 mysql 20 0 1211500 303244 8948 S 4.3 16.3 0:44.21 mysqld","title":"Flask"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#springboot","text":"wrk\u6d4b\u8bd5\u7ed3\u679c\uff1a [root@localhost opt]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8809/api/registerCenter/page Running 30s test @ http://192.168.11.5:8809/api/registerCenter/page 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 1.25s 287.88ms 2.00s 80.07% Req/Sec 51.77 40.90 386.00 73.08% Latency Distribution 50% 1.27s 75% 1.39s 90% 1.55s 99% 1.95s 10334 requests in 30.06s, 5.11MB read Socket errors: connect 0, read 0, write 0, timeout 857 Requests/sec: 343.77 Transfer/sec: 174.24KB TOP\u6570\u636e PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 6161 root 20 0 3133868 521532 14068 S 90.2 28.0 2:08.70 java 4619 mysql 20 0 1191436 302916 9100 S 8.2 16.3 1:01.23 mysqld","title":"SpringBoot"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#django31","text":"","title":"Django3.1"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#django31gunicorn-wsgi","text":"[root@localhost ~]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8000/api/command/1/ Running 30s test @ http://192.168.11.5:8000/api/command/1/ 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 24.08ms 66.73ms 1.94s 99.56% Req/Sec 48.30 9.63 108.00 87.76% Latency Distribution 50% 20.11ms 75% 20.95ms 90% 23.99ms 99% 35.17ms 2877 requests in 30.07s, 1.59MB read Socket errors: connect 0, read 408, write 0, timeout 142 Requests/sec: 95.67 Transfer/sec: 54.00KB","title":"django3.1+gunicorn wsgi"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#django31uvicorn-asgi","text":"[root@localhost ~]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8000/api/command/1/ Running 30s test @ http://192.168.11.5:8000/api/command/1/ 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 1.80s 12.53ms 1.82s 95.62% Req/Sec 159.07 231.52 610.00 75.42% Latency Distribution 50% 1.81s 75% 1.81s 90% 1.81s 99% 1.81s 5456 requests in 30.04s, 2.84MB read Socket errors: connect 0, read 0, write 0, timeout 5205 Requests/sec: 181.63 Transfer/sec: 96.85KB","title":"django3.1+uvicorn asgi"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#fastapi","text":"Fastapi+uvicorn+Tortoise ORM [root@localhost ~]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:8000/client/1 Running 30s test @ http://192.168.11.5:8000/client/1 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 751.06ms 526.96ms 1.95s 59.53% Req/Sec 112.46 107.55 650.00 78.82% Latency Distribution 50% 848.00ms 75% 934.46ms 90% 1.65s 99% 1.82s 17120 requests in 30.09s, 8.72MB read Socket errors: connect 0, read 0, write 0, timeout 860 Requests/sec: 568.93 Transfer/sec: 296.69KB TOP\u6570\u636e PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 28082 root 20 0 380140 56708 8628 R 87.3 3.0 1:52.78 uvicorn 1132 mysql 20 0 1159764 254644 9260 S 11.0 13.7 1:14.19 mysqld","title":"FastAPI"},{"location":"python/fastapi/Flask-Django-FastApi-SpringBoot-Go-performance/#gogin","text":"Wrk\u6d4b\u8bd5\u7ed3\u679c [root@localhost wrk]# wrk -t 8 -c 500 -d 30 --latency http://192.168.11.5:9000/v1/todo Running 30s test @ http://192.168.11.5:9000/v1/todo 8 threads and 500 connections Thread Stats Avg Stdev Max +/- Stdev Latency 201.99ms 281.57ms 1.65s 85.82% Req/Sec 501.23 97.01 0.88k 69.65% Latency Distribution 50% 89.46ms 75% 172.46ms 90% 698.35ms 99% 1.13s 119909 requests in 30.09s, 84.16MB read Socket errors: connect 0, read 0, write 0, timeout 516 Requests/sec: 3984.92 Transfer/sec: 2.80MB TOP\u6570\u636e PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 78086 root 20 0 935180 38164 5044 R 106.0 1.0 0:07.72 bubble 2109 mysql 20 0 1690548 347604 5948 R 84.7 9.0 0:59.65 mysqld","title":"Go(Gin\u6846\u67b6)"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/","text":"\u95ee\u9898\u73b0\u8c61 Fastapi\u4f7f\u7528Gunicorn+Uvicorn\u90e8\u7f72\u751f\u4ea7\u73af\u5883\uff0c\u4f7f\u7528Logrotate\u538b\u7f29access\u65e5\u5fd7\u540e\uff0c\u65b0\u7684Access\u65e5\u5fd7\u65e0\u6cd5\u6b63\u5e38\u8f93\u51fa\u3002 Uvicorn issue 1 \u542f\u52a8gunicorn+uvicorn ( venv ) [ root@localhost task_registry_center ] # gunicorn -w 2 -b 0.0.0.0:8000 -k uvicorn.workers.UvicornWorker --access-logfile log/access.log main:app [ 2020 -12-16 17 :09:41 +0800 ] [ 3330 ] [ INFO ] Starting gunicorn 20 .0.4 [ 2020 -12-16 17 :09:41 +0800 ] [ 3330 ] [ INFO ] Listening at: http://0.0.0.0:8000 ( 3330 ) [ 2020 -12-16 17 :09:41 +0800 ] [ 3330 ] [ INFO ] Using worker: uvicorn.workers.UvicornWorker [ 2020 -12-16 17 :09:41 +0800 ] [ 3332 ] [ INFO ] Booting worker with pid: 3332 [ 2020 -12-16 17 :09:41 +0800 ] [ 3333 ] [ INFO ] Booting worker with pid: 3333 2 \u6e05\u7a7aaccess.log\u6587\u4ef6 now access log file is empty [ root@localhost log ] # pwd /data/task_registry_center/log [ root@localhost log ] # ll total 20 -rw-r--r--. 1 root root 0 Dec 16 16 :56 access.log -rw-r--r--. 1 root root 0 Dec 16 16 :41 client.log -rw-r--r--. 1 root root 0 Dec 16 16 :56 debug.log -rw-r--r--. 1 root root 0 Dec 16 16 :41 elk_client.log -rw-r--r--. 1 root root 5402 Dec 16 17 :08 error.log -rw-r--r--. 1 root root 0 Dec 16 16 :41 id_server.log -rw-r--r--. 1 root root 4029 Dec 16 17 :09 main.log -rw-r--r--. 1 root root 4480 Dec 16 17 :10 tasks.log 3 \u8c03\u752810\u6b21Api\uff0c\u6b64\u65f6access.log\u5185\u5bb9\u5982\u4e0b\uff1a 192 .168.11.1:60477 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60478 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60479 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60480 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60481 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60482 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60483 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60484 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60485 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60486 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 4 logrotate \u914d\u7f6e\u5982\u4e0b\uff1a [ root@localhost ~ ] # cat /etc/logrotate.d/task_registry_center /data/task_registry_center/log/*.log { size 1M rotate 20 compress nodelaycompress dateformat -%Y-%m-%d-%s dateext missingok notifempty postrotate killall -s USR1 gunicorn 13 ,9 All endscript } 5 \u624b\u52a8\u8c03\u7528logrotate\u547d\u4ee4\u8fdb\u884c\u65e5\u5fd7\u538b\u7f29\u6216\u8005\u76f4\u63a5\u50cfgunicorn\u53d1\u9001USR1\u4fe1\u53f7: \u624b\u52a8\u8c03\u7528logrotate\u547d\u4ee4\uff1a `[root@localhost ~]# /usr/sbin/logrotate -f /etc/logrotate.d/task_registry_center` \u53d1\u9001USR1\u4fe1\u53f7\uff1a `killall -s USR1 gunicorn` 6 Gunicorn\u65e5\u5fd7\u63d0\u793a\u5df2\u7ecf\u6b63\u5e38\u5904\u7406\u4e86USR1\u4fe1\u53f7\uff08\u5728gunicorn\u4e2d\uff0cUSR1\u4fe1\u53f7\u8868\u793a\u65e5\u5fd7\u6587\u4ef6\u53d1\u751f\u53d8\u66f4\uff0c\u9700\u8981\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\uff09\uff1a [ 2020 -12-16 17 :12:16 +0800 ] [ 3330 ] [ INFO ] Handling signal: usr1 [ 2020 -12-16 17 :12:16 +0800 ] [ 3330 ] [ INFO ] Handling signal: usr1 [ 2020 -12-16 17 :12:16 +0800 ] [ 3330 ] [ INFO ] Handling signal: usr1 [ 2020 -12-16 17 :12:16 +0800 ] [ 3330 ] [ INFO ] Handling signal: usr1 7 \u518d\u6b21\u8c03\u752810\u6b21Api\uff0caccess.log\u5e76\u672a\u8bb0\u5f55\u5230\u6700\u65b0\u7684\u8c03\u7528\u8bb0\u5f55\u3002 \u65e5\u5fd7\u76ee\u5f55\uff0c\u53ef\u89c1\u65b0\u7684access.log\u65e5\u5fd7\u4e3a\u7a7a\uff1a [ root@localhost log ] # ll total 20 -rw-r--r--. 1 root root 0 Dec 16 17 :12 access.log -rw-r--r--. 1 root root 125 Dec 16 17 :11 access.log-2020-12-16-1608109936.gz - access.log-2020-12-16-1608109936.gz \u6587\u4ef6\u5185\u5bb9\u4f9d\u65e7\u4e3a\u524d10\u6b21\u7684API\u8c03\u7528\u8bb0\u5f55: 192 .168.11.1:60477 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60478 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60479 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60480 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60481 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60482 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60483 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60484 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60485 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60486 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 \u73af\u5883\u4fe1\u606f \u7cfb\u7edf Centos7 Python 3.8.3 gunicorn 20.0.4 uvicorn 0.13.1 fastapi 0.62.0 logrotate logrotate\u6709\u4e24\u4e2a\u5de5\u4f5c\u6a21\u5f0f\uff0c\u5206\u522b\u4e3a copytruncate \u548c create \uff0c\u7b80\u5355\u8bf4\u4e0b\u4e24\u79cd\u6a21\u5f0f\u7684\u533a\u522b\u3002 \u5728\u4ecb\u7ecdcreate\u6a21\u5f0f\u4e4b\u524d\uff0c\u9700\u8981\u5148\u4ecb\u7ecd\u4e0blinux\u7cfb\u7edf\u4e2d\u6587\u4ef6\u662f\u901a\u8fc7inode\u7f16\u53f7\u6765\u5b9a\u4f4d\u7684\uff0c\u548c\u6587\u4ef6\u540d\u79f0\u6ca1\u6709\u5173\u7cfb\u3002 create \u5c06\u5f53\u524d\u7a0b\u5e8f\u8f93\u51fa\u7684\u65e5\u5fd7\u6587\u4ef6\u91cd\u547d\u540d\u4e3a\u538b\u7f29\u6587\u4ef6\uff0c\u4f46\u662finode\u7f16\u53f7\u4e0d\u53d8\u3002\u7a0b\u5e8f\u4ec5\u901a\u8fc7inode\u7f16\u53f7\u5b9a\u4f4d\u65e5\u5fd7\u6587\u4ef6\uff0c\u6240\u4ee5\u6b64\u65f6\u5230\u7a0b\u5e8f\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\uff0c\u6240\u6709\u751f\u6210\u7684\u65e5\u5fd7\u90fd\u8f93\u51fa\u5230\u4e86\u91cd\u547d\u540d\u540e\u7684\u6587\u4ef6\u4e2d\u3002 \u521b\u5efa\u65b0\u7684\u540c\u540d\u65e5\u5fd7\u6587\u4ef6\uff0c\u867d\u7136\u65b0\u7684\u65e5\u5fd7\u6587\u4ef6\u548c\u539f\u6765\u65e5\u5fd7\u6587\u4ef6\u7684\u540d\u5b57\u4e00\u6837\uff0c\u4f46\u662finode\u7f16\u53f7\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u7a0b\u5e8f\u8f93\u51fa\u7684\u65e5\u5fd7\u8fd8\u662f\u5f80\u539f\u65e5\u5fd7\u6587\u4ef6\u8f93\u51fa\u3002 \u901a\u8fc7\u67d0\u4e9b\u65b9\u5f0f\u901a\u77e5\u7a0b\u5e8f\uff0c\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\u3002\u7a0b\u5e8f\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\uff0c\u9760\u7684\u662f\u6587\u4ef6\u8def\u5f84\u800c\u4e0d\u662finode\u7f16\u53f7\uff0c\u6240\u4ee5\u6253\u5f00\u7684\u662f\u65b0\u7684\u65e5\u5fd7\u6587\u4ef6\u3002 copytruncate \u62f7\u8d1d\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u5230\u538b\u7f29\u6587\u4ef6\uff0c\u8fd9\u671f\u95f4\u7a0b\u5e8f\u7167\u5e38\u8f93\u51fa\u65e5\u5fd7\u5230\u539f\u6765\u7684\u6587\u4ef6\u4e2d\uff0c\u539f\u6765\u7684\u6587\u4ef6\u540d\u4e5f\u6ca1\u6709\u53d8\u3002 \u6e05\u7a7a\u7a0b\u5e8f\u6b63\u5728\u8f93\u51fa\u7684\u65e5\u5fd7\u6587\u4ef6\u3002\u6e05\u7a7a\u540e\u7a0b\u5e8f\u8f93\u51fa\u7684\u65e5\u5fd7\u8fd8\u662f\u8f93\u51fa\u5230\u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3a\u6e05\u7a7a\u6587\u4ef6\u53ea\u662f\u628a\u6587\u4ef6\u7684\u5185\u5bb9\u5220\u9664\u4e86\uff0c\u6587\u4ef6\u7684inode\u7f16\u53f7\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u53d8\u5316\u7684\u662f\u5143\u4fe1\u606f\u4e2d\u6587\u4ef6\u5185\u5bb9\u7684\u4fe1\u606f\u3002 \u6b64\u65b9\u6848\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5728\u65e5\u5fd7\u62f7\u8d1d\u5f00\u59cb\uff0c\u5230\u6e05\u7a7a\u65e5\u5fd7\u6587\u4ef6\u7684\u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u7a0b\u5e8f\u8f93\u51fa\u7684\u65e5\u5fd7\u6ca1\u6709\u5b58\u50a8\uff0c\u5b58\u5728\u65e5\u5fd7\u4e22\u5931\u7684\u98ce\u9669\u3002 logrotate\u673a\u5236\u548c\u539f\u7406 \u95ee\u9898\u4fee\u590d Gunicorn\u6e90\u7801\u5206\u6790 \u5728gunicorn(\u7248\u672c20.0.4)\u4e2d\u53ef\u4ee5\u67e5\u627e\u5230\u548cUSR1\u4fe1\u53f7\u5904\u7406\u7684\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a venv/Lib/site-packages/gunicorn/arbiter.py 196\u884c\uff1a def run ( self ): \"Main master loop.\" self . start () util . _setproctitle ( \"master [ %s ]\" % self . proc_name ) try : self . manage_workers () while True : self . maybe_promote_master () sig = self . SIG_QUEUE . pop ( 0 ) if self . SIG_QUEUE else None if sig is None : self . sleep () self . murder_workers () self . manage_workers () continue if sig not in self . SIG_NAMES : self . log . info ( \"Ignoring unknown signal: %s \" , sig ) continue signame = self . SIG_NAMES . get ( sig ) handler = getattr ( self , \"handle_ %s \" % signame , None ) if not handler : self . log . error ( \"Unhandled signal: %s \" , signame ) continue self . log . info ( \"Handling signal: %s \" , signame ) handler () self . wakeup () def handle_usr1 ( self ): \"\"\" SIGUSR1 handling. Kill all workers by sending them a SIGUSR1 \"\"\" self . log . reopen_files () self . kill_workers ( signal . SIGUSR1 ) Uvicorn\u6e90\u7801\u5206\u6790 Uvicorn\u53ea\u5904\u7406\u4e86\u7a0b\u5e8f\u7ec8\u6b62\u76f8\u5173\u7684\u4fe1\u53f7\uff1a HANDLED_SIGNALS = ( signal . SIGINT , # Unix signal 2. Sent by Ctrl+C. signal . SIGTERM , # Unix signal 15. Sent by `kill <pid>`. ) venv/Lib/site-packages/uvicorn/workers.py 64\u884c\uff1a def init_process ( self ): self . config . setup_event_loop () super ( UvicornWorker , self ) . init_process () def init_signals ( self ): pass def run ( self ): self . config . app = self . wsgi server = Server ( config = self . config ) loop = asyncio . get_event_loop () loop . run_until_complete ( server . serve ( sockets = self . sockets )) \u53ef\u4ee5\u770b\u5230UvicornWorker\u7684init_signals\u51fd\u6570\u88ab\u91cd\u5199\u4e3a\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u4e86\uff0c\u5176\u7236\u7c7bgunicorn.workers.base.Worker\u7684init_signals\u65b9\u6cd5\u4e3a\uff1a def init_signals ( self ): # reset signaling for s in self . SIGNALS : signal . signal ( s , signal . SIG_DFL ) # init new signaling signal . signal ( signal . SIGQUIT , self . handle_quit ) signal . signal ( signal . SIGTERM , self . handle_exit ) signal . signal ( signal . SIGINT , self . handle_quit ) signal . signal ( signal . SIGWINCH , self . handle_winch ) signal . signal ( signal . SIGUSR1 , self . handle_usr1 ) signal . signal ( signal . SIGABRT , self . handle_abort ) # Don't let SIGTERM and SIGUSR1 disturb active requests # by interrupting system calls signal . siginterrupt ( signal . SIGTERM , False ) signal . siginterrupt ( signal . SIGUSR1 , False ) if hasattr ( signal , 'set_wakeup_fd' ): signal . set_wakeup_fd ( self . PIPE [ 1 ]) \u89e3\u51b3\u65b9\u6848 \u8ba9UvicornWorker\u6b63\u5e38\u5904\u7406USR1\u4fe1\u53f7\u5373\u53ef\uff0c\u5c06 venv/Lib/site-packages/uvicorn/workers.py 63\u884c\u7531\uff1a def init_signals ( self ): pass \u4fee\u6539\u4e3a import signal def init_signals ( self ): signal . signal ( signal . SIGUSR1 , self . handle_usr1 ) \u5373\u53ef\u3002","title":"FastApi+Uvicorn\u4f7f\u7528logrotate\u538b\u7f29access\u65e5\u5fd7\u540e\u65b0\u65e5\u5fd7\u65e0\u6cd5\u6b63\u5e38\u8f93\u51fa"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#_1","text":"Fastapi\u4f7f\u7528Gunicorn+Uvicorn\u90e8\u7f72\u751f\u4ea7\u73af\u5883\uff0c\u4f7f\u7528Logrotate\u538b\u7f29access\u65e5\u5fd7\u540e\uff0c\u65b0\u7684Access\u65e5\u5fd7\u65e0\u6cd5\u6b63\u5e38\u8f93\u51fa\u3002 Uvicorn issue","title":"\u95ee\u9898\u73b0\u8c61"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#1-gunicornuvicorn","text":"( venv ) [ root@localhost task_registry_center ] # gunicorn -w 2 -b 0.0.0.0:8000 -k uvicorn.workers.UvicornWorker --access-logfile log/access.log main:app [ 2020 -12-16 17 :09:41 +0800 ] [ 3330 ] [ INFO ] Starting gunicorn 20 .0.4 [ 2020 -12-16 17 :09:41 +0800 ] [ 3330 ] [ INFO ] Listening at: http://0.0.0.0:8000 ( 3330 ) [ 2020 -12-16 17 :09:41 +0800 ] [ 3330 ] [ INFO ] Using worker: uvicorn.workers.UvicornWorker [ 2020 -12-16 17 :09:41 +0800 ] [ 3332 ] [ INFO ] Booting worker with pid: 3332 [ 2020 -12-16 17 :09:41 +0800 ] [ 3333 ] [ INFO ] Booting worker with pid: 3333","title":"1 \u542f\u52a8gunicorn+uvicorn"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#2-accesslog","text":"now access log file is empty [ root@localhost log ] # pwd /data/task_registry_center/log [ root@localhost log ] # ll total 20 -rw-r--r--. 1 root root 0 Dec 16 16 :56 access.log -rw-r--r--. 1 root root 0 Dec 16 16 :41 client.log -rw-r--r--. 1 root root 0 Dec 16 16 :56 debug.log -rw-r--r--. 1 root root 0 Dec 16 16 :41 elk_client.log -rw-r--r--. 1 root root 5402 Dec 16 17 :08 error.log -rw-r--r--. 1 root root 0 Dec 16 16 :41 id_server.log -rw-r--r--. 1 root root 4029 Dec 16 17 :09 main.log -rw-r--r--. 1 root root 4480 Dec 16 17 :10 tasks.log","title":"2 \u6e05\u7a7aaccess.log\u6587\u4ef6"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#3-10apiaccesslog","text":"192 .168.11.1:60477 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60478 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60479 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60480 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60481 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60482 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60483 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60484 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60485 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60486 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200","title":"3 \u8c03\u752810\u6b21Api\uff0c\u6b64\u65f6access.log\u5185\u5bb9\u5982\u4e0b\uff1a"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#4-logrotate","text":"[ root@localhost ~ ] # cat /etc/logrotate.d/task_registry_center /data/task_registry_center/log/*.log { size 1M rotate 20 compress nodelaycompress dateformat -%Y-%m-%d-%s dateext missingok notifempty postrotate killall -s USR1 gunicorn 13 ,9 All endscript }","title":"4 logrotate \u914d\u7f6e\u5982\u4e0b\uff1a"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#5-logrotategunicornusr1","text":"\u624b\u52a8\u8c03\u7528logrotate\u547d\u4ee4\uff1a `[root@localhost ~]# /usr/sbin/logrotate -f /etc/logrotate.d/task_registry_center` \u53d1\u9001USR1\u4fe1\u53f7\uff1a `killall -s USR1 gunicorn`","title":"5 \u624b\u52a8\u8c03\u7528logrotate\u547d\u4ee4\u8fdb\u884c\u65e5\u5fd7\u538b\u7f29\u6216\u8005\u76f4\u63a5\u50cfgunicorn\u53d1\u9001USR1\u4fe1\u53f7:"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#6-gunicornusr1gunicornusr1","text":"[ 2020 -12-16 17 :12:16 +0800 ] [ 3330 ] [ INFO ] Handling signal: usr1 [ 2020 -12-16 17 :12:16 +0800 ] [ 3330 ] [ INFO ] Handling signal: usr1 [ 2020 -12-16 17 :12:16 +0800 ] [ 3330 ] [ INFO ] Handling signal: usr1 [ 2020 -12-16 17 :12:16 +0800 ] [ 3330 ] [ INFO ] Handling signal: usr1","title":"6 Gunicorn\u65e5\u5fd7\u63d0\u793a\u5df2\u7ecf\u6b63\u5e38\u5904\u7406\u4e86USR1\u4fe1\u53f7\uff08\u5728gunicorn\u4e2d\uff0cUSR1\u4fe1\u53f7\u8868\u793a\u65e5\u5fd7\u6587\u4ef6\u53d1\u751f\u53d8\u66f4\uff0c\u9700\u8981\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\uff09\uff1a"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#7-10apiaccesslog","text":"\u65e5\u5fd7\u76ee\u5f55\uff0c\u53ef\u89c1\u65b0\u7684access.log\u65e5\u5fd7\u4e3a\u7a7a\uff1a [ root@localhost log ] # ll total 20 -rw-r--r--. 1 root root 0 Dec 16 17 :12 access.log -rw-r--r--. 1 root root 125 Dec 16 17 :11 access.log-2020-12-16-1608109936.gz - access.log-2020-12-16-1608109936.gz \u6587\u4ef6\u5185\u5bb9\u4f9d\u65e7\u4e3a\u524d10\u6b21\u7684API\u8c03\u7528\u8bb0\u5f55: 192 .168.11.1:60477 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60478 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60479 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60480 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60481 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60482 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60483 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60484 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60485 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200 192 .168.11.1:60486 - \"GET /api/client?page_size=10&page=1 HTTP/1.1\" 200","title":"7 \u518d\u6b21\u8c03\u752810\u6b21Api\uff0caccess.log\u5e76\u672a\u8bb0\u5f55\u5230\u6700\u65b0\u7684\u8c03\u7528\u8bb0\u5f55\u3002"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#_2","text":"\u7cfb\u7edf Centos7 Python 3.8.3 gunicorn 20.0.4 uvicorn 0.13.1 fastapi 0.62.0","title":"\u73af\u5883\u4fe1\u606f"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#logrotate","text":"logrotate\u6709\u4e24\u4e2a\u5de5\u4f5c\u6a21\u5f0f\uff0c\u5206\u522b\u4e3a copytruncate \u548c create \uff0c\u7b80\u5355\u8bf4\u4e0b\u4e24\u79cd\u6a21\u5f0f\u7684\u533a\u522b\u3002 \u5728\u4ecb\u7ecdcreate\u6a21\u5f0f\u4e4b\u524d\uff0c\u9700\u8981\u5148\u4ecb\u7ecd\u4e0blinux\u7cfb\u7edf\u4e2d\u6587\u4ef6\u662f\u901a\u8fc7inode\u7f16\u53f7\u6765\u5b9a\u4f4d\u7684\uff0c\u548c\u6587\u4ef6\u540d\u79f0\u6ca1\u6709\u5173\u7cfb\u3002","title":"logrotate"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#create","text":"\u5c06\u5f53\u524d\u7a0b\u5e8f\u8f93\u51fa\u7684\u65e5\u5fd7\u6587\u4ef6\u91cd\u547d\u540d\u4e3a\u538b\u7f29\u6587\u4ef6\uff0c\u4f46\u662finode\u7f16\u53f7\u4e0d\u53d8\u3002\u7a0b\u5e8f\u4ec5\u901a\u8fc7inode\u7f16\u53f7\u5b9a\u4f4d\u65e5\u5fd7\u6587\u4ef6\uff0c\u6240\u4ee5\u6b64\u65f6\u5230\u7a0b\u5e8f\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\uff0c\u6240\u6709\u751f\u6210\u7684\u65e5\u5fd7\u90fd\u8f93\u51fa\u5230\u4e86\u91cd\u547d\u540d\u540e\u7684\u6587\u4ef6\u4e2d\u3002 \u521b\u5efa\u65b0\u7684\u540c\u540d\u65e5\u5fd7\u6587\u4ef6\uff0c\u867d\u7136\u65b0\u7684\u65e5\u5fd7\u6587\u4ef6\u548c\u539f\u6765\u65e5\u5fd7\u6587\u4ef6\u7684\u540d\u5b57\u4e00\u6837\uff0c\u4f46\u662finode\u7f16\u53f7\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u7a0b\u5e8f\u8f93\u51fa\u7684\u65e5\u5fd7\u8fd8\u662f\u5f80\u539f\u65e5\u5fd7\u6587\u4ef6\u8f93\u51fa\u3002 \u901a\u8fc7\u67d0\u4e9b\u65b9\u5f0f\u901a\u77e5\u7a0b\u5e8f\uff0c\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\u3002\u7a0b\u5e8f\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\uff0c\u9760\u7684\u662f\u6587\u4ef6\u8def\u5f84\u800c\u4e0d\u662finode\u7f16\u53f7\uff0c\u6240\u4ee5\u6253\u5f00\u7684\u662f\u65b0\u7684\u65e5\u5fd7\u6587\u4ef6\u3002","title":"create"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#copytruncate","text":"\u62f7\u8d1d\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u5230\u538b\u7f29\u6587\u4ef6\uff0c\u8fd9\u671f\u95f4\u7a0b\u5e8f\u7167\u5e38\u8f93\u51fa\u65e5\u5fd7\u5230\u539f\u6765\u7684\u6587\u4ef6\u4e2d\uff0c\u539f\u6765\u7684\u6587\u4ef6\u540d\u4e5f\u6ca1\u6709\u53d8\u3002 \u6e05\u7a7a\u7a0b\u5e8f\u6b63\u5728\u8f93\u51fa\u7684\u65e5\u5fd7\u6587\u4ef6\u3002\u6e05\u7a7a\u540e\u7a0b\u5e8f\u8f93\u51fa\u7684\u65e5\u5fd7\u8fd8\u662f\u8f93\u51fa\u5230\u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3a\u6e05\u7a7a\u6587\u4ef6\u53ea\u662f\u628a\u6587\u4ef6\u7684\u5185\u5bb9\u5220\u9664\u4e86\uff0c\u6587\u4ef6\u7684inode\u7f16\u53f7\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u53d8\u5316\u7684\u662f\u5143\u4fe1\u606f\u4e2d\u6587\u4ef6\u5185\u5bb9\u7684\u4fe1\u606f\u3002 \u6b64\u65b9\u6848\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5728\u65e5\u5fd7\u62f7\u8d1d\u5f00\u59cb\uff0c\u5230\u6e05\u7a7a\u65e5\u5fd7\u6587\u4ef6\u7684\u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u7a0b\u5e8f\u8f93\u51fa\u7684\u65e5\u5fd7\u6ca1\u6709\u5b58\u50a8\uff0c\u5b58\u5728\u65e5\u5fd7\u4e22\u5931\u7684\u98ce\u9669\u3002 logrotate\u673a\u5236\u548c\u539f\u7406","title":"copytruncate"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#_3","text":"","title":"\u95ee\u9898\u4fee\u590d"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#gunicorn","text":"\u5728gunicorn(\u7248\u672c20.0.4)\u4e2d\u53ef\u4ee5\u67e5\u627e\u5230\u548cUSR1\u4fe1\u53f7\u5904\u7406\u7684\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a venv/Lib/site-packages/gunicorn/arbiter.py 196\u884c\uff1a def run ( self ): \"Main master loop.\" self . start () util . _setproctitle ( \"master [ %s ]\" % self . proc_name ) try : self . manage_workers () while True : self . maybe_promote_master () sig = self . SIG_QUEUE . pop ( 0 ) if self . SIG_QUEUE else None if sig is None : self . sleep () self . murder_workers () self . manage_workers () continue if sig not in self . SIG_NAMES : self . log . info ( \"Ignoring unknown signal: %s \" , sig ) continue signame = self . SIG_NAMES . get ( sig ) handler = getattr ( self , \"handle_ %s \" % signame , None ) if not handler : self . log . error ( \"Unhandled signal: %s \" , signame ) continue self . log . info ( \"Handling signal: %s \" , signame ) handler () self . wakeup () def handle_usr1 ( self ): \"\"\" SIGUSR1 handling. Kill all workers by sending them a SIGUSR1 \"\"\" self . log . reopen_files () self . kill_workers ( signal . SIGUSR1 )","title":"Gunicorn\u6e90\u7801\u5206\u6790"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#uvicorn","text":"Uvicorn\u53ea\u5904\u7406\u4e86\u7a0b\u5e8f\u7ec8\u6b62\u76f8\u5173\u7684\u4fe1\u53f7\uff1a HANDLED_SIGNALS = ( signal . SIGINT , # Unix signal 2. Sent by Ctrl+C. signal . SIGTERM , # Unix signal 15. Sent by `kill <pid>`. ) venv/Lib/site-packages/uvicorn/workers.py 64\u884c\uff1a def init_process ( self ): self . config . setup_event_loop () super ( UvicornWorker , self ) . init_process () def init_signals ( self ): pass def run ( self ): self . config . app = self . wsgi server = Server ( config = self . config ) loop = asyncio . get_event_loop () loop . run_until_complete ( server . serve ( sockets = self . sockets )) \u53ef\u4ee5\u770b\u5230UvicornWorker\u7684init_signals\u51fd\u6570\u88ab\u91cd\u5199\u4e3a\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u4e86\uff0c\u5176\u7236\u7c7bgunicorn.workers.base.Worker\u7684init_signals\u65b9\u6cd5\u4e3a\uff1a def init_signals ( self ): # reset signaling for s in self . SIGNALS : signal . signal ( s , signal . SIG_DFL ) # init new signaling signal . signal ( signal . SIGQUIT , self . handle_quit ) signal . signal ( signal . SIGTERM , self . handle_exit ) signal . signal ( signal . SIGINT , self . handle_quit ) signal . signal ( signal . SIGWINCH , self . handle_winch ) signal . signal ( signal . SIGUSR1 , self . handle_usr1 ) signal . signal ( signal . SIGABRT , self . handle_abort ) # Don't let SIGTERM and SIGUSR1 disturb active requests # by interrupting system calls signal . siginterrupt ( signal . SIGTERM , False ) signal . siginterrupt ( signal . SIGUSR1 , False ) if hasattr ( signal , 'set_wakeup_fd' ): signal . set_wakeup_fd ( self . PIPE [ 1 ])","title":"Uvicorn\u6e90\u7801\u5206\u6790"},{"location":"python/fastapi/fastapi-uvicorn-logrotate/#_4","text":"\u8ba9UvicornWorker\u6b63\u5e38\u5904\u7406USR1\u4fe1\u53f7\u5373\u53ef\uff0c\u5c06 venv/Lib/site-packages/uvicorn/workers.py 63\u884c\u7531\uff1a def init_signals ( self ): pass \u4fee\u6539\u4e3a import signal def init_signals ( self ): signal . signal ( signal . SIGUSR1 , self . handle_usr1 ) \u5373\u53ef\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"python/fastapi/request-id/","text":"RequestID\u5b9e\u73b0 \u4e3a\u5355\u6b21\u8bf7\u6c42\u8d4b\u4e88\u4e00\u4e2a\u552f\u4e00\u7684RequestID\u53ef\u4ee5\u65b9\u4fbf\u5b9a\u4f4d\u95ee\u9898\uff0c\u83b7\u53d6\u8c03\u7528\u6808\u548c\u65e5\u5fd7\u3002\u6bd4\u8f83\u5e38\u89c1\u7684\u573a\u666f\u4e3a\uff0c\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u4e3a\u8bf7\u6c42\u5206\u914dRequestID\uff0c\u672c\u6b21\u8bf7\u6c42\u4ea7\u751f\u7684\u6240\u6709\u65e5\u5fd7\u3001\u7b2c\u4e09\u65b9\u8c03\u7528\u7b49\u5747\u5173\u8054\u6b64RequestID\uff0c\u8be5RequestID\u5728\u63a5\u53e3\u7684\u8fd4\u56de\u4f53\u6216\u8005\u8fd4\u56de\u5934\u4e2d\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002 \u5b9e\u73b0\u601d\u8def\uff0c\u5e38\u89c1\u7684RequestID\u4e00\u822c\u662f\u5728\u8bf7\u6c42\u8fdb\u5165\u65f6\u5206\u914d\u5e76\u5b58\u5165\u4e0a\u4e0b\u6587\uff08context\uff09\u53d8\u91cf\u4e2d\u3002\u7b2c\u4e00\u6b21\u5b9e\u73b0\u7684\u65f6\u5019\u662f\u5c06RequestID\u8bb0\u5f55\u5728\u4e86request.scope\u5bf9\u8c61\u91cc\uff0c\u6bcf\u6b21\u83b7\u53d6RequestID\u65f6\u5747\u9700\u8981\u83b7\u53d6request\u5bf9\u8c61\uff0c\u5341\u5206\u7684\u4e0d\u65b9\u4fbf\u3002\u76f4\u63a5\u4ecb\u7ecd\u5f53\u524d\u4f7f\u7528\u7684\u65b9\u6848\uff0c\u501f\u52a9 starlette-context \u5de5\u5177\u5e93\uff0c\u6b64\u5e93\u5df2\u7ecf\u5b9e\u73b0\u4e86RequestID\u7684\u751f\u6210\u548c\u5173\u8054\u4e86\uff0c\u5728\u8fd9\u91cc\u63a5\u7eed\u4ecb\u7ecdRequestID\u5728\u8bf7\u6c42\u4f53\u7684\u81ea\u52a8\u8fd4\u56de\u548c\u65e5\u5fd7\u5173\u8054(\u53ef\u5173\u8054\u81f3gunicorn\u7684AccesssLog)\u3002 requirements.txt starlette-context==0.2.3 common/request_id.py import logging from starlette_context import context from starlette_context.plugins.plugin_uuid import PluginUUIDBase REQUEST_ID_CTX_KEY = 'X-Request-ID' class RequestIdPlugin ( PluginUUIDBase ): key = REQUEST_ID_CTX_KEY def get_new_uuid ( self ) -> str : func = self . uuid_functions_mapper [ self . version ] return str ( func ()) def current_request_id (): \"\"\"get current request_id inside context var\"\"\" return context . data [ REQUEST_ID_CTX_KEY ] class RequestIDLogFilter ( logging . Filter ): \"\"\" Log filter to inject the current request id of the request under `log_record.request_id` \"\"\" def filter ( self , log_record ): log_record . request_id = current_request_id () return log_record \u4e3b\u8981\u4fee\u6539\u70b9\uff1a RequestIdPlugin \u91cd\u5199\u4e86 get_new_uuid \u51fd\u6570\uff0c\u8c03\u6574\u4e86\u4e0b\u751f\u6210\u7684uuid\u683c\u5f0f\u3002 current_request_id\u4f1a\u81ea\u52a8\u8fd4\u56de\u672c\u6b21\u8bf7\u6c42\u5bf9\u5e94\u7684request_id RequestIDLogFilter \u7528\u4e8e\u4e3a\u65e5\u5fd7\u5bf9\u8c61\u6dfb\u52a0request_id\u503c \u4e3aApp\u65b0\u589e\u4e2d\u95f4\u4ef6 main.py from starlette_context.middleware import ContextMiddleware from common.request_id import RequestIdPlugin def get_application() -> FastAPI: application = FastAPI(title=\"Demo\", debug=config.DEBUG, version='1.0') # \u4e2d\u95f4\u4ef6 application.add_middleware(ContextMiddleware, plugins=(RequestIdPlugin(),)) ... application.include_router(api_router, prefix='/api') return application \u63a5\u53e3\u81ea\u52a8\u8fd4\u56deRequestID common/response.py from typing import Any , List from pydantic import BaseModel , Field from common.request_id import current_request_id class Response ( BaseModel ): \"\"\"\u63a5\u53e3\u8fd4\u56de\u683c\u5f0f\"\"\" code : int = Field ( ... , example = 0 , description = '\u54cd\u5e94\u7801' ) message : str = Field ( ... , example = \"success\" , description = '\u54cd\u5e94\u7801\u89e3\u91ca\uff0csuccess\u6216\u8005failed\u3002' ) cause : Any = Field ( '' , example = \"\u8d44\u6e90\u672a\u627e\u5230\" , description = '\u5f02\u5e38\u89e3\u91ca\u3002' ) request_id : str = Field ( default_factory = current_request_id , example = \"04950cb5-6b24-426b-a5ce-db6344982597\" , description = 'RequestId\uff0c\u7528\u4e8e\u5b9a\u4f4d\u5355\u6b21\u8bf7\u6c42\u3002' ) result : Any = Field ( ... , example = \"\" , description = '\u54cd\u5e94\u6570\u636e\uff0c\u6570\u636e\u683c\u5f0f\u6839\u636eAPI\u53d8\u5316\u3002' ) views.py @router . get ( \"/demo\" , response_model = Response ) async def demo (): return Response ( message = 'success' , code = 0 , result = 'demo\u3002' ) \u5355\u6b21\u8bf7\u6c42\u7684\u8fd4\u56de\u5982\u4e0b\uff1a { 'cause' : '' , 'code' : 0 , 'message' : 'success' , 'request_id' : '99cf0bf2-42a0-4ed4-a396-da611a370d06' , 'result' : 'demo' } \u65e5\u5fd7\u5173\u8054 common/constances.py LOG_FORMAT = ' %(asctime)s [pid: %(process)d ] %(filename)s (line: %(lineno)d ) %(levelname)s %(message)s ' REQUEST_ID_LOG_FORMAT = ' %(asctime)s [pid: %(process)d ] %(filename)s (line: %(lineno)d ) %(levelname)s [ %(request_id)s ] %(message)s ' common/log_handler.py import json import logging import os from copy import copy from logging.handlers import WatchedFileHandler from uvicorn.logging import AccessFormatter import config from common.constants import LOG_FORMAT , REQUEST_ID_LOG_FORMAT from common.request_id import RequestIDLogFilter , current_request_id from common.request_time import current_request_time class LogHandler ( logging . Logger ): \"\"\" LogHandler \"\"\" log_format = LOG_FORMAT def __init__ ( self , name , level = None , stream = True , file = True ): self . name = name if level : self . level = level else : self . level = config . LOG_LEVEL logging . Logger . __init__ ( self , self . name , level = self . level ) if stream : self . __setStreamHandler__ () if file : self . __setFileHandler__ () def __setFileHandler__ ( self , level = None ): \"\"\" set file handler :param level: :return: \"\"\" file_name = os . path . join ( LOG_PATH , f ' { self . name } .log' ) file_handler = WatchedFileHandler ( filename = file_name ) if not level : file_handler . setLevel ( self . level ) else : file_handler . setLevel ( level ) formatter = logging . Formatter ( self . log_format ) file_handler . setFormatter ( formatter ) self . file_handler = file_handler self . addHandler ( file_handler ) def __setStreamHandler__ ( self , level = None ): \"\"\" set stream handler :param level: :return: \"\"\" stream_handler = logging . StreamHandler () formatter = logging . Formatter ( self . log_format ) stream_handler . setFormatter ( formatter ) if not level : stream_handler . setLevel ( self . level ) else : stream_handler . setLevel ( level ) self . addHandler ( stream_handler ) def resetName ( self , name ): \"\"\" reset name :param name: :return: \"\"\" self . name = name self . removeHandler ( self . file_handler ) self . __setFileHandler__ () class RequestLogHandler ( LogHandler ): log_format = REQUEST_ID_LOG_FORMAT def __setFileHandler__ ( self , level = None ): super ( RequestLogHandler , self ) . __setFileHandler__ ( level = level ) self . addFilter ( RequestIDLogFilter ()) def __setStreamHandler__ ( self , level = None ): super ( RequestLogHandler , self ) . __setStreamHandler__ ( level = level ) self . addFilter ( RequestIDLogFilter ()) views.py: log = RequestLogHandler ( 'demo' ) @router . get ( \"/demo\" , response_model = Response ) async def demo (): log . info ( 'demo' ) return Response ( message = 'success' , code = 0 , result = 'demo' ) \u8f93\u51fa\u65e5\u5fd7\uff1a 2020-10-01 16:27:53,065 [pid:19120] views.py(line:26) INFO [d42f6cfb-2a0f-4673-a3c9-d8c00d2e58b4] demo \u5173\u8054AccessLog FastAPI\u5f53\u524d\u4f7f\u7528\u7684\u90e8\u7f72\u65b9\u6848\u662f nginx->gunicorn->uvicorn->fastapi\uff0cnginx\u505a\u8d1f\u8f7d\u5747\u8861\uff0cgunicorn\u8d1f\u8d23\u7ba1\u7406\u8c03\u5ea6uvicorn\uff0cuvicorn\u518d\u5c06\u5177\u4f53\u8bf7\u6c42\u4f20\u9012\u7ed9fastapi\u3002gunicorn\u90e8\u7f72\u7684\u65f6\u5019\u4e00\u822c\u6307\u5b9aworker type\u4e3a uvicorn.workers.UvicornWorker \uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 uvicorn-deployment \u3002\u4e3a\u4e86\u8ba9Access\u65e5\u5fd7\u80fd\u591f\u663e\u793aRequestID\uff0c\u9700\u8981\u7684\u9ed8\u8ba4\u7684Worker\u8fdb\u884c\u91cd\u5199\u3002 common/workers.py import logging from uvicorn.workers import UvicornWorker from common import constants from common.log_handler import RequestAccessFormatter class RequestUvicornWorker ( UvicornWorker ): \"\"\"\u81ea\u5b9a\u4e49worker \u751f\u6210\u6307\u5b9a\u683c\u5f0f\u7684access\u65e5\u5fd7\"\"\" def __init__ ( self , * args , ** kwargs ): super ( RequestUvicornWorker , self ) . __init__ ( * args , ** kwargs ) logger = logging . getLogger ( \"uvicorn.access\" ) for handler in self . log . access_log . handlers : handler . setFormatter ( RequestAccessFormatter ( constants . ACCESS_LOG_FORMAT )) logger . handlers = self . log . access_log . handlers logger . setLevel ( self . log . access_log . level ) common/log_handler.py from common.request_time import current_request_time from uvicorn.logging import AccessFormatter class RequestAccessFormatter ( AccessFormatter ): def __init__ ( self , fmt = None , datefmt = None , style = \"%\" , use_colors = None ): super () . __init__ ( fmt = fmt , datefmt = datefmt , style = style ) self . use_colors = False def get_status_code ( self , record ): status_code = record . __dict__ [ \"status_code\" ] return status_code def formatMessage ( self , record ): record_copy = copy ( record ) record_copy . __dict__ [ 'request_id' ] = current_request_id () return super () . formatMessage ( record_copy ) common/comstants.py ACCESS_LOG_FORMAT = '[ %(asctime)s ] %(request_id)s %(status_code)s %(client_addr)s ' \\ '- \" %(request_line)s \"' gunicorn\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6 gun.py import multiprocessing import config as local_config bind = f ' { local_config . HOST } : { local_config . PORT } ' workers = multiprocessing . cpu_count () * 2 backlog = 2048 worker_class = 'common.workers.RequestUvicornWorker' proc_name = 'gunicorn.proc' pidfile = 'log/gunicorn.pid' errorlog = 'log/error.log' accesslog = 'log/access.log' loglevel = 'info' daemon = True timeout = 10 limit_request_line = 0 \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1\u540e\uff0caccess.log\u5c55\u793a\u7684\u65e5\u5fd7\u683c\u5f0f\u5c06\u5982\u4e0b\uff1a [2020-09-30 15:28:54,793] ff1216ac-f46e-4997-901b-c749c306e744 200 192.168.11.1:53607 - \"GET /redoc HTTP/1.1\" ff1216ac-f46e-4997-901b-c749c306e744 \u5c31\u662f\u672c\u6b21\u8bf7\u6c42\u5bf9\u5e94\u7684RequestID\u3002 RequestTime\u5b9e\u73b0 Gunicorn\u90e8\u7f72Flask\u7684\u65f6\u5019\uff0c\u662f\u53ef\u4ee5\u81ea\u52a8\u8ba1\u7b97\u8bf7\u6c42\u8017\u65f6\u7684\u3002\u4f46\u662f\u4f7f\u7528Gunicorn+uvicorn\u4e4b\u540e\uff0cAccess\u65e5\u5fd7\u662f\u7531uvicorn\u8d1f\u8d23\u6253\u5370\u7684\uff0cuvicorn\uff08uvicorn==0.11.8\uff09\u5f53\u524d\u597d\u50cf\u8fd8\u662f\u4e0d\u652f\u6301\u8bf7\u6c42\u8017\u65f6\u8ba1\u7b97\u3002\u67e5\u770b\u5355\u6b21\u8bf7\u6c42\u7684\u8017\u65f6\u662f\u4e2a\u521a\u9700\uff0c\u548cRequestID\u7684\u5b9e\u73b0\u65b9\u5f0f\u7c7b\u578b\uff0c\u4f9d\u65e7\u501f\u52a9 starlette-context \u5b9e\u73b0\uff0c\u6539\u9020\u5982\u4e0b\uff1a common/middlewares.py from contextvars import Token from starlette.middleware.base import RequestResponseEndpoint from starlette.requests import Request from starlette.responses import Response from starlette_context import _request_scope_context_storage from starlette_context.middleware import ContextMiddleware as BaseContextMiddleware class ContextMiddleware ( BaseContextMiddleware ): async def dispatch ( self , request : Request , call_next : RequestResponseEndpoint ) -> Response : _starlette_context_token : Token = _request_scope_context_storage . set ( await self . set_context ( request ) ) try : response = await call_next ( request ) for plugin in self . plugins : await plugin . enrich_response ( response ) finally : pass return response \u4e3b\u8981\u7684\u4fee\u6539\u70b9\u662f\u4e4b\u524d\u8bf7\u6c42\u5b8c\u6210\u540e\uff0c\u4f1a\u91cd\u7f6e\u5168\u5c40\u4e0a\u4e0b\u6587\u53d8\u91cf\uff0c\u5220\u9664\u4e86\u8fd9\u4e2a\u91cd\u7f6e\u52a8\u4f5c\u3002 common/request_time.py import time from typing import Union from starlette.requests import Request from starlette.responses import Response from starlette_context import _request_scope_context_storage from starlette_context import context from starlette_context.plugins.plugin import Plugin REQUEST_START_TIME_CTX_KEY = 'X-Request-Start-Time' REQUEST_TIME_CTX_KEY = 'X-Request-Time' class RequestTimePlugin ( Plugin ): key = REQUEST_START_TIME_CTX_KEY async def process_request ( self , request : Request ) -> Union [ str , int , dict , float ]: \"\"\" Runs always on request. Extracts value from header by default. \"\"\" assert isinstance ( self . key , str ) return time . time () async def enrich_response ( self , response : Response ) -> None : context : dict = _request_scope_context_storage . get () start_time = context . pop ( self . key ) context [ REQUEST_TIME_CTX_KEY ] = time . time () - start_time _request_scope_context_storage . set ( context ) def current_request_time ( precision = 3 ): \"\"\"get current request_time inside context var\"\"\" context_data = context . data if REQUEST_TIME_CTX_KEY in context_data : request_time = round ( context . data [ REQUEST_TIME_CTX_KEY ], precision ) else : request_time = round ( time . time () - context . data [ REQUEST_START_TIME_CTX_KEY ], precision ) return request_time common/log_handler.py class RequestAccessFormatter ( AccessFormatter ): def __init__ ( self , fmt = None , datefmt = None , style = \"%\" , use_colors = None ): super () . __init__ ( fmt = fmt , datefmt = datefmt , style = style ) self . use_colors = False def get_status_code ( self , record ): status_code = record . __dict__ [ \"status_code\" ] return status_code def formatMessage ( self , record ): record_copy = copy ( record ) record_copy . __dict__ [ 'request_time' ] = current_request_time () record_copy . __dict__ [ 'request_id' ] = current_request_id () return super () . formatMessage ( record_copy ) common/constants.py ACCESS_LOG_FORMAT = '[ %(asctime)s ] %(request_id)s %(status_code)s %(request_time)s s %(client_addr)s - \" %(request_line)s \"' main.py: # \u4e2d\u95f4\u4ef6 application . add_middleware ( ContextMiddleware , plugins = ( RequestIdPlugin (), RequestTimePlugin ())) worker\u7684\u4fee\u6539\u53c2\u8003RequestID\u90e8\u5206\u7684\u4ecb\u7ecd\u3002 \u6700\u7ec8\u7684AccessLog\u683c\u5f0f\u5927\u81f4\u4e3a\uff1a [2020-10-01 16:58:27,183] 079fa7bd-e737-40c5-9edf-6aac536595ad 200 0.01s 172.16.120.13:52621 - \"PUT /demo HTTP/1.1\"","title":"request-id\u5b9e\u73b0"},{"location":"python/fastapi/request-id/#requestid","text":"\u4e3a\u5355\u6b21\u8bf7\u6c42\u8d4b\u4e88\u4e00\u4e2a\u552f\u4e00\u7684RequestID\u53ef\u4ee5\u65b9\u4fbf\u5b9a\u4f4d\u95ee\u9898\uff0c\u83b7\u53d6\u8c03\u7528\u6808\u548c\u65e5\u5fd7\u3002\u6bd4\u8f83\u5e38\u89c1\u7684\u573a\u666f\u4e3a\uff0c\u63a5\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u4e3a\u8bf7\u6c42\u5206\u914dRequestID\uff0c\u672c\u6b21\u8bf7\u6c42\u4ea7\u751f\u7684\u6240\u6709\u65e5\u5fd7\u3001\u7b2c\u4e09\u65b9\u8c03\u7528\u7b49\u5747\u5173\u8054\u6b64RequestID\uff0c\u8be5RequestID\u5728\u63a5\u53e3\u7684\u8fd4\u56de\u4f53\u6216\u8005\u8fd4\u56de\u5934\u4e2d\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002 \u5b9e\u73b0\u601d\u8def\uff0c\u5e38\u89c1\u7684RequestID\u4e00\u822c\u662f\u5728\u8bf7\u6c42\u8fdb\u5165\u65f6\u5206\u914d\u5e76\u5b58\u5165\u4e0a\u4e0b\u6587\uff08context\uff09\u53d8\u91cf\u4e2d\u3002\u7b2c\u4e00\u6b21\u5b9e\u73b0\u7684\u65f6\u5019\u662f\u5c06RequestID\u8bb0\u5f55\u5728\u4e86request.scope\u5bf9\u8c61\u91cc\uff0c\u6bcf\u6b21\u83b7\u53d6RequestID\u65f6\u5747\u9700\u8981\u83b7\u53d6request\u5bf9\u8c61\uff0c\u5341\u5206\u7684\u4e0d\u65b9\u4fbf\u3002\u76f4\u63a5\u4ecb\u7ecd\u5f53\u524d\u4f7f\u7528\u7684\u65b9\u6848\uff0c\u501f\u52a9 starlette-context \u5de5\u5177\u5e93\uff0c\u6b64\u5e93\u5df2\u7ecf\u5b9e\u73b0\u4e86RequestID\u7684\u751f\u6210\u548c\u5173\u8054\u4e86\uff0c\u5728\u8fd9\u91cc\u63a5\u7eed\u4ecb\u7ecdRequestID\u5728\u8bf7\u6c42\u4f53\u7684\u81ea\u52a8\u8fd4\u56de\u548c\u65e5\u5fd7\u5173\u8054(\u53ef\u5173\u8054\u81f3gunicorn\u7684AccesssLog)\u3002 requirements.txt starlette-context==0.2.3 common/request_id.py import logging from starlette_context import context from starlette_context.plugins.plugin_uuid import PluginUUIDBase REQUEST_ID_CTX_KEY = 'X-Request-ID' class RequestIdPlugin ( PluginUUIDBase ): key = REQUEST_ID_CTX_KEY def get_new_uuid ( self ) -> str : func = self . uuid_functions_mapper [ self . version ] return str ( func ()) def current_request_id (): \"\"\"get current request_id inside context var\"\"\" return context . data [ REQUEST_ID_CTX_KEY ] class RequestIDLogFilter ( logging . Filter ): \"\"\" Log filter to inject the current request id of the request under `log_record.request_id` \"\"\" def filter ( self , log_record ): log_record . request_id = current_request_id () return log_record \u4e3b\u8981\u4fee\u6539\u70b9\uff1a RequestIdPlugin \u91cd\u5199\u4e86 get_new_uuid \u51fd\u6570\uff0c\u8c03\u6574\u4e86\u4e0b\u751f\u6210\u7684uuid\u683c\u5f0f\u3002 current_request_id\u4f1a\u81ea\u52a8\u8fd4\u56de\u672c\u6b21\u8bf7\u6c42\u5bf9\u5e94\u7684request_id RequestIDLogFilter \u7528\u4e8e\u4e3a\u65e5\u5fd7\u5bf9\u8c61\u6dfb\u52a0request_id\u503c \u4e3aApp\u65b0\u589e\u4e2d\u95f4\u4ef6 main.py from starlette_context.middleware import ContextMiddleware from common.request_id import RequestIdPlugin def get_application() -> FastAPI: application = FastAPI(title=\"Demo\", debug=config.DEBUG, version='1.0') # \u4e2d\u95f4\u4ef6 application.add_middleware(ContextMiddleware, plugins=(RequestIdPlugin(),)) ... application.include_router(api_router, prefix='/api') return application","title":"RequestID\u5b9e\u73b0"},{"location":"python/fastapi/request-id/#requestid_1","text":"common/response.py from typing import Any , List from pydantic import BaseModel , Field from common.request_id import current_request_id class Response ( BaseModel ): \"\"\"\u63a5\u53e3\u8fd4\u56de\u683c\u5f0f\"\"\" code : int = Field ( ... , example = 0 , description = '\u54cd\u5e94\u7801' ) message : str = Field ( ... , example = \"success\" , description = '\u54cd\u5e94\u7801\u89e3\u91ca\uff0csuccess\u6216\u8005failed\u3002' ) cause : Any = Field ( '' , example = \"\u8d44\u6e90\u672a\u627e\u5230\" , description = '\u5f02\u5e38\u89e3\u91ca\u3002' ) request_id : str = Field ( default_factory = current_request_id , example = \"04950cb5-6b24-426b-a5ce-db6344982597\" , description = 'RequestId\uff0c\u7528\u4e8e\u5b9a\u4f4d\u5355\u6b21\u8bf7\u6c42\u3002' ) result : Any = Field ( ... , example = \"\" , description = '\u54cd\u5e94\u6570\u636e\uff0c\u6570\u636e\u683c\u5f0f\u6839\u636eAPI\u53d8\u5316\u3002' ) views.py @router . get ( \"/demo\" , response_model = Response ) async def demo (): return Response ( message = 'success' , code = 0 , result = 'demo\u3002' ) \u5355\u6b21\u8bf7\u6c42\u7684\u8fd4\u56de\u5982\u4e0b\uff1a { 'cause' : '' , 'code' : 0 , 'message' : 'success' , 'request_id' : '99cf0bf2-42a0-4ed4-a396-da611a370d06' , 'result' : 'demo' }","title":"\u63a5\u53e3\u81ea\u52a8\u8fd4\u56deRequestID"},{"location":"python/fastapi/request-id/#_1","text":"common/constances.py LOG_FORMAT = ' %(asctime)s [pid: %(process)d ] %(filename)s (line: %(lineno)d ) %(levelname)s %(message)s ' REQUEST_ID_LOG_FORMAT = ' %(asctime)s [pid: %(process)d ] %(filename)s (line: %(lineno)d ) %(levelname)s [ %(request_id)s ] %(message)s ' common/log_handler.py import json import logging import os from copy import copy from logging.handlers import WatchedFileHandler from uvicorn.logging import AccessFormatter import config from common.constants import LOG_FORMAT , REQUEST_ID_LOG_FORMAT from common.request_id import RequestIDLogFilter , current_request_id from common.request_time import current_request_time class LogHandler ( logging . Logger ): \"\"\" LogHandler \"\"\" log_format = LOG_FORMAT def __init__ ( self , name , level = None , stream = True , file = True ): self . name = name if level : self . level = level else : self . level = config . LOG_LEVEL logging . Logger . __init__ ( self , self . name , level = self . level ) if stream : self . __setStreamHandler__ () if file : self . __setFileHandler__ () def __setFileHandler__ ( self , level = None ): \"\"\" set file handler :param level: :return: \"\"\" file_name = os . path . join ( LOG_PATH , f ' { self . name } .log' ) file_handler = WatchedFileHandler ( filename = file_name ) if not level : file_handler . setLevel ( self . level ) else : file_handler . setLevel ( level ) formatter = logging . Formatter ( self . log_format ) file_handler . setFormatter ( formatter ) self . file_handler = file_handler self . addHandler ( file_handler ) def __setStreamHandler__ ( self , level = None ): \"\"\" set stream handler :param level: :return: \"\"\" stream_handler = logging . StreamHandler () formatter = logging . Formatter ( self . log_format ) stream_handler . setFormatter ( formatter ) if not level : stream_handler . setLevel ( self . level ) else : stream_handler . setLevel ( level ) self . addHandler ( stream_handler ) def resetName ( self , name ): \"\"\" reset name :param name: :return: \"\"\" self . name = name self . removeHandler ( self . file_handler ) self . __setFileHandler__ () class RequestLogHandler ( LogHandler ): log_format = REQUEST_ID_LOG_FORMAT def __setFileHandler__ ( self , level = None ): super ( RequestLogHandler , self ) . __setFileHandler__ ( level = level ) self . addFilter ( RequestIDLogFilter ()) def __setStreamHandler__ ( self , level = None ): super ( RequestLogHandler , self ) . __setStreamHandler__ ( level = level ) self . addFilter ( RequestIDLogFilter ()) views.py: log = RequestLogHandler ( 'demo' ) @router . get ( \"/demo\" , response_model = Response ) async def demo (): log . info ( 'demo' ) return Response ( message = 'success' , code = 0 , result = 'demo' ) \u8f93\u51fa\u65e5\u5fd7\uff1a 2020-10-01 16:27:53,065 [pid:19120] views.py(line:26) INFO [d42f6cfb-2a0f-4673-a3c9-d8c00d2e58b4] demo","title":"\u65e5\u5fd7\u5173\u8054"},{"location":"python/fastapi/request-id/#accesslog","text":"FastAPI\u5f53\u524d\u4f7f\u7528\u7684\u90e8\u7f72\u65b9\u6848\u662f nginx->gunicorn->uvicorn->fastapi\uff0cnginx\u505a\u8d1f\u8f7d\u5747\u8861\uff0cgunicorn\u8d1f\u8d23\u7ba1\u7406\u8c03\u5ea6uvicorn\uff0cuvicorn\u518d\u5c06\u5177\u4f53\u8bf7\u6c42\u4f20\u9012\u7ed9fastapi\u3002gunicorn\u90e8\u7f72\u7684\u65f6\u5019\u4e00\u822c\u6307\u5b9aworker type\u4e3a uvicorn.workers.UvicornWorker \uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 uvicorn-deployment \u3002\u4e3a\u4e86\u8ba9Access\u65e5\u5fd7\u80fd\u591f\u663e\u793aRequestID\uff0c\u9700\u8981\u7684\u9ed8\u8ba4\u7684Worker\u8fdb\u884c\u91cd\u5199\u3002 common/workers.py import logging from uvicorn.workers import UvicornWorker from common import constants from common.log_handler import RequestAccessFormatter class RequestUvicornWorker ( UvicornWorker ): \"\"\"\u81ea\u5b9a\u4e49worker \u751f\u6210\u6307\u5b9a\u683c\u5f0f\u7684access\u65e5\u5fd7\"\"\" def __init__ ( self , * args , ** kwargs ): super ( RequestUvicornWorker , self ) . __init__ ( * args , ** kwargs ) logger = logging . getLogger ( \"uvicorn.access\" ) for handler in self . log . access_log . handlers : handler . setFormatter ( RequestAccessFormatter ( constants . ACCESS_LOG_FORMAT )) logger . handlers = self . log . access_log . handlers logger . setLevel ( self . log . access_log . level ) common/log_handler.py from common.request_time import current_request_time from uvicorn.logging import AccessFormatter class RequestAccessFormatter ( AccessFormatter ): def __init__ ( self , fmt = None , datefmt = None , style = \"%\" , use_colors = None ): super () . __init__ ( fmt = fmt , datefmt = datefmt , style = style ) self . use_colors = False def get_status_code ( self , record ): status_code = record . __dict__ [ \"status_code\" ] return status_code def formatMessage ( self , record ): record_copy = copy ( record ) record_copy . __dict__ [ 'request_id' ] = current_request_id () return super () . formatMessage ( record_copy ) common/comstants.py ACCESS_LOG_FORMAT = '[ %(asctime)s ] %(request_id)s %(status_code)s %(client_addr)s ' \\ '- \" %(request_line)s \"' gunicorn\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6 gun.py import multiprocessing import config as local_config bind = f ' { local_config . HOST } : { local_config . PORT } ' workers = multiprocessing . cpu_count () * 2 backlog = 2048 worker_class = 'common.workers.RequestUvicornWorker' proc_name = 'gunicorn.proc' pidfile = 'log/gunicorn.pid' errorlog = 'log/error.log' accesslog = 'log/access.log' loglevel = 'info' daemon = True timeout = 10 limit_request_line = 0 \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1\u540e\uff0caccess.log\u5c55\u793a\u7684\u65e5\u5fd7\u683c\u5f0f\u5c06\u5982\u4e0b\uff1a [2020-09-30 15:28:54,793] ff1216ac-f46e-4997-901b-c749c306e744 200 192.168.11.1:53607 - \"GET /redoc HTTP/1.1\" ff1216ac-f46e-4997-901b-c749c306e744 \u5c31\u662f\u672c\u6b21\u8bf7\u6c42\u5bf9\u5e94\u7684RequestID\u3002","title":"\u5173\u8054AccessLog"},{"location":"python/fastapi/request-id/#requesttime","text":"Gunicorn\u90e8\u7f72Flask\u7684\u65f6\u5019\uff0c\u662f\u53ef\u4ee5\u81ea\u52a8\u8ba1\u7b97\u8bf7\u6c42\u8017\u65f6\u7684\u3002\u4f46\u662f\u4f7f\u7528Gunicorn+uvicorn\u4e4b\u540e\uff0cAccess\u65e5\u5fd7\u662f\u7531uvicorn\u8d1f\u8d23\u6253\u5370\u7684\uff0cuvicorn\uff08uvicorn==0.11.8\uff09\u5f53\u524d\u597d\u50cf\u8fd8\u662f\u4e0d\u652f\u6301\u8bf7\u6c42\u8017\u65f6\u8ba1\u7b97\u3002\u67e5\u770b\u5355\u6b21\u8bf7\u6c42\u7684\u8017\u65f6\u662f\u4e2a\u521a\u9700\uff0c\u548cRequestID\u7684\u5b9e\u73b0\u65b9\u5f0f\u7c7b\u578b\uff0c\u4f9d\u65e7\u501f\u52a9 starlette-context \u5b9e\u73b0\uff0c\u6539\u9020\u5982\u4e0b\uff1a common/middlewares.py from contextvars import Token from starlette.middleware.base import RequestResponseEndpoint from starlette.requests import Request from starlette.responses import Response from starlette_context import _request_scope_context_storage from starlette_context.middleware import ContextMiddleware as BaseContextMiddleware class ContextMiddleware ( BaseContextMiddleware ): async def dispatch ( self , request : Request , call_next : RequestResponseEndpoint ) -> Response : _starlette_context_token : Token = _request_scope_context_storage . set ( await self . set_context ( request ) ) try : response = await call_next ( request ) for plugin in self . plugins : await plugin . enrich_response ( response ) finally : pass return response \u4e3b\u8981\u7684\u4fee\u6539\u70b9\u662f\u4e4b\u524d\u8bf7\u6c42\u5b8c\u6210\u540e\uff0c\u4f1a\u91cd\u7f6e\u5168\u5c40\u4e0a\u4e0b\u6587\u53d8\u91cf\uff0c\u5220\u9664\u4e86\u8fd9\u4e2a\u91cd\u7f6e\u52a8\u4f5c\u3002 common/request_time.py import time from typing import Union from starlette.requests import Request from starlette.responses import Response from starlette_context import _request_scope_context_storage from starlette_context import context from starlette_context.plugins.plugin import Plugin REQUEST_START_TIME_CTX_KEY = 'X-Request-Start-Time' REQUEST_TIME_CTX_KEY = 'X-Request-Time' class RequestTimePlugin ( Plugin ): key = REQUEST_START_TIME_CTX_KEY async def process_request ( self , request : Request ) -> Union [ str , int , dict , float ]: \"\"\" Runs always on request. Extracts value from header by default. \"\"\" assert isinstance ( self . key , str ) return time . time () async def enrich_response ( self , response : Response ) -> None : context : dict = _request_scope_context_storage . get () start_time = context . pop ( self . key ) context [ REQUEST_TIME_CTX_KEY ] = time . time () - start_time _request_scope_context_storage . set ( context ) def current_request_time ( precision = 3 ): \"\"\"get current request_time inside context var\"\"\" context_data = context . data if REQUEST_TIME_CTX_KEY in context_data : request_time = round ( context . data [ REQUEST_TIME_CTX_KEY ], precision ) else : request_time = round ( time . time () - context . data [ REQUEST_START_TIME_CTX_KEY ], precision ) return request_time common/log_handler.py class RequestAccessFormatter ( AccessFormatter ): def __init__ ( self , fmt = None , datefmt = None , style = \"%\" , use_colors = None ): super () . __init__ ( fmt = fmt , datefmt = datefmt , style = style ) self . use_colors = False def get_status_code ( self , record ): status_code = record . __dict__ [ \"status_code\" ] return status_code def formatMessage ( self , record ): record_copy = copy ( record ) record_copy . __dict__ [ 'request_time' ] = current_request_time () record_copy . __dict__ [ 'request_id' ] = current_request_id () return super () . formatMessage ( record_copy ) common/constants.py ACCESS_LOG_FORMAT = '[ %(asctime)s ] %(request_id)s %(status_code)s %(request_time)s s %(client_addr)s - \" %(request_line)s \"' main.py: # \u4e2d\u95f4\u4ef6 application . add_middleware ( ContextMiddleware , plugins = ( RequestIdPlugin (), RequestTimePlugin ())) worker\u7684\u4fee\u6539\u53c2\u8003RequestID\u90e8\u5206\u7684\u4ecb\u7ecd\u3002 \u6700\u7ec8\u7684AccessLog\u683c\u5f0f\u5927\u81f4\u4e3a\uff1a [2020-10-01 16:58:27,183] 079fa7bd-e737-40c5-9edf-6aac536595ad 200 0.01s 172.16.120.13:52621 - \"PUT /demo HTTP/1.1\"","title":"RequestTime\u5b9e\u73b0"},{"location":"python/fastapi/tortoise-orm/","text":"\u7b80\u4ecb FastApi\u57fa\u4e8eStarlette\u6846\u67b6\u4e8c\u6b21\u5f00\u53d1\uff0c\u4f7f\u7528pydantic\u505a\u63a5\u53e3\u5165\u53c2\u6821\u9a8c\uff0c\u53ef\u81ea\u52a8\u751f\u6210openapi\u5f62\u5f0f\u7684\u63a5\u53e3\u6587\u6863\u3002 \u4ecePython3.6\u5f00\u59cb\u652f\u6301 asyncio \u4e4b\u540e\uff0c\u8bb8\u591a\u652f\u6301\u6b64\u7279\u6027\u7684python web\u6846\u67b6\u5f00\u59cb\u9646\u7eed\u51fa\u73b0\uff0c\u5982sanic\u3001fastapi\uff0c\u5229\u7528\u5f02\u6b65\u7279\u6027+\u5f02\u6b65ORM\uff0c\u53ef\u4ee5\u63d0\u9ad8web\u670d\u52a1\u7684\u5e76\u53d1\u548c\u541e\u5410\u91cf\u3002 Django3.0\u4e4b\u540e\u624d\u5f00\u59cb\u652f\u6301Asgi\u534f\u8bae\uff0c\u81f3\u5f53\u524d\u6700\u65b0\u7248\u672c3.0.7\u4f9d\u65e7\u672a\u652f\u6301\u5f02\u6b65ORM\u3002 \u4e0d\u4e25\u8c28\u7684\u573a\u666f\u4e0b\u6027\u80fd\u6d4b\u8bd5\u7ed3\u679c\u662f FastAPI>Flask>Django3\u3002 tortoise-orm tortoise-orm\u5b98\u7f51 tortoise-orm\u662f\u4e00\u4e2a\u7c7bDjango\u7684\u5f02\u6b65\u652f\u6301\u7684ORM\uff0c\u5982\u679c\u4e4b\u524d\u4f7f\u7528\u8fc7Django\u7684\u8bdd\uff0c\u8bed\u6cd5\u57fa\u672c\u4e00\u81f4\uff0c\u65e0\u9700\u7279\u6b8a\u5b66\u4e60\u3002 \u6700\u5927\u7684\u533a\u522b\u5c31\u662f\u6240\u6709\u7684ORM\u8bed\u53e5\u6267\u884c\u524d\u90fd\u9700\u8981\u52a0\u5165 await \u5173\u952e\u5b57\uff0c\u4ee5\u6b64\u652f\u6301\u5f02\u6b65ORM\u8bfb\u53d6\u64cd\u4f5c\u3002\u4e0b\u9762\u53ea\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e9b\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u96be\u70b9\u95ee\u9898\u3002 \u6570\u636e\u5e93\u8fde\u63a5 FastAPI\u7684app\u4e3b\u6587\u4ef6\u5185\uff0c main.py: from tortoise.contrib.fastapi import register_tortoise register_tortoise ( app , db_url = config . DATABASE_URI , modules = { \"models\" : [ \"client.models\" ]}, generate_schemas = False , add_exception_handlers = False , ) \u5176\u4e2dapp\u4e3aFastAPI\u7684app\u5bf9\u8c61\u3002 modules\u4e3a\u4f60models\u6587\u4ef6\u5b9a\u4e49\u7684\u8def\u5f84\u3002 generate_schemas\u4e3aTrue\u7684\u8bdd\u4f1a\u81ea\u52a8\u68c0\u6d4b\u76f8\u5173\u7684\u8868\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u7684\u8bdd\u4f1a\u81ea\u52a8\u5c1d\u8bd5\u521b\u5efa\uff0c\u8868\u4e2d\u7684\u5b57\u6bb5\u53d8\u5316\u7684\u8bdd\uff0c\u4e0d\u4f1a\u81ea\u52a8\u66f4\u65b0\u7684\u3002 add_exception_handlers\u4e3aTrue\u7684\u8bdd\u4f1a\u81ea\u52a8\u4e3a\u4f60\u5904\u7406ORM\u7684DoesNotExist\u5f02\u5e38\u3002 \u65f6\u533a\u95ee\u9898 create_time = fields.DatetimeField(auto_now_add=True, description='\u521b\u5efa\u65f6\u95f4') update_time = fields.DatetimeField(auto_now=True, description='\u66f4\u65b0\u65f6\u95f4') models\u5728\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u7ecf\u5e38\u4f1a\u5b9a\u4e49\u521b\u5efa\u65f6\u95f4\u548c\u66f4\u65b0\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u5728\u4e0d\u663e\u5f0f\u6307\u5b9a\u65f6\uff0c\u4f1a\u7531ORM\u81ea\u52a8\u8865\u5168\uff0c\u5f53\u524dtortoise-orm(\u7248\u672ctortoise-orm==0.16.16)\u597d\u50cf\u4e0d\u652f\u6301\u6307\u5b9a\u65f6\u533a\uff0c\u5165\u5e93\u4f7f\u7528\u7684\u65f6\u95f4\u4e3aUTC\u65f6\u95f4\uff0c\u6e90\u7801\u4e3a\uff1a \\tortoise\\fields\\data.py Line 304: def to_db_value ( self , value : Optional [ datetime . datetime ], instance : \"Union[Type[Model], Model]\" ) -> Optional [ datetime . datetime ]: # Only do this if it is a Model instance, not class. Test for guaranteed instance var if hasattr ( instance , \"_saved_in_db\" ) and ( self . auto_now or ( self . auto_now_add and getattr ( instance , self . model_field_name ) is None ) ): value = datetime . datetime . utcnow () setattr ( instance , self . model_field_name , value ) return value return value value\u5f3a\u5236\u6307\u5b9a\u4e3a datetime.datetime.utcnow() \uff0c\u5f53\u524d\u76f4\u63a5\u91cd\u5199\u81ea\u5b9a\u4e49\u7684\u5b57\u6bb5\u89e3\u51b3\uff0c\u5c06 datetime.datetime.utcnow() \u4fee\u6539\u4e3a datetime.datetime.now() \u5373\u53ef\u3002 \u65e5\u5fd7\u95ee\u9898 tortoise-orm\u6240\u6709\u7684\u64cd\u4f5c\u65e5\u5fd7\u90fd\u4f1alog\u5728\u4e00\u4e2a\u540d\u4e3adb_client\u7684log\u5bf9\u8c61\u4e0b\uff0c\u8be5log\u9ed8\u8ba4\u4e0d\u4f1a\u8f93\u51fa\u81f3\u63a7\u5236\u53f0\uff0c\u82e5\u60f3\u67e5\u770b\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5e94\u7684SQL\u8bed\u53e5\uff0c\u53ef\u4ee5\u4e3a\u8be5log\u5bf9\u8c61\u6dfb\u52a0handler\u5373\u53ef\u3002 # \u6570\u636e\u5e93\u65e5\u5fd7 db_log = logging . getLogger ( \"db_client\" ) db_log . setLevel ( 10 ) handler = WatchedFileHandler ( filename = 'log/db_client.log' ) formatter = logging . Formatter ( ' %(asctime)s %(filename)s [line: %(lineno)d ] %(levelname)s %(message)s ' ) handler . setFormatter ( formatter ) db_log . addHandler ( handler ) \u60f3\u8981\u67e5\u770b\u5355\u6b21ORM\u6267\u884c\u65f6\u5bf9\u5e94\u7684sql\u8bed\u53e5\uff0c\u76f4\u63a5\u5728ORM\u8bed\u53e5\u540e\u8c03\u7528\u4e0b .sql() \u65b9\u6cd5\u5373\u53ef\u3002","title":"tortoise-orm\u6559\u7a0b"},{"location":"python/fastapi/tortoise-orm/#_1","text":"FastApi\u57fa\u4e8eStarlette\u6846\u67b6\u4e8c\u6b21\u5f00\u53d1\uff0c\u4f7f\u7528pydantic\u505a\u63a5\u53e3\u5165\u53c2\u6821\u9a8c\uff0c\u53ef\u81ea\u52a8\u751f\u6210openapi\u5f62\u5f0f\u7684\u63a5\u53e3\u6587\u6863\u3002 \u4ecePython3.6\u5f00\u59cb\u652f\u6301 asyncio \u4e4b\u540e\uff0c\u8bb8\u591a\u652f\u6301\u6b64\u7279\u6027\u7684python web\u6846\u67b6\u5f00\u59cb\u9646\u7eed\u51fa\u73b0\uff0c\u5982sanic\u3001fastapi\uff0c\u5229\u7528\u5f02\u6b65\u7279\u6027+\u5f02\u6b65ORM\uff0c\u53ef\u4ee5\u63d0\u9ad8web\u670d\u52a1\u7684\u5e76\u53d1\u548c\u541e\u5410\u91cf\u3002 Django3.0\u4e4b\u540e\u624d\u5f00\u59cb\u652f\u6301Asgi\u534f\u8bae\uff0c\u81f3\u5f53\u524d\u6700\u65b0\u7248\u672c3.0.7\u4f9d\u65e7\u672a\u652f\u6301\u5f02\u6b65ORM\u3002 \u4e0d\u4e25\u8c28\u7684\u573a\u666f\u4e0b\u6027\u80fd\u6d4b\u8bd5\u7ed3\u679c\u662f FastAPI>Flask>Django3\u3002","title":"\u7b80\u4ecb"},{"location":"python/fastapi/tortoise-orm/#tortoise-orm","text":"tortoise-orm\u5b98\u7f51 tortoise-orm\u662f\u4e00\u4e2a\u7c7bDjango\u7684\u5f02\u6b65\u652f\u6301\u7684ORM\uff0c\u5982\u679c\u4e4b\u524d\u4f7f\u7528\u8fc7Django\u7684\u8bdd\uff0c\u8bed\u6cd5\u57fa\u672c\u4e00\u81f4\uff0c\u65e0\u9700\u7279\u6b8a\u5b66\u4e60\u3002 \u6700\u5927\u7684\u533a\u522b\u5c31\u662f\u6240\u6709\u7684ORM\u8bed\u53e5\u6267\u884c\u524d\u90fd\u9700\u8981\u52a0\u5165 await \u5173\u952e\u5b57\uff0c\u4ee5\u6b64\u652f\u6301\u5f02\u6b65ORM\u8bfb\u53d6\u64cd\u4f5c\u3002\u4e0b\u9762\u53ea\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e9b\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u96be\u70b9\u95ee\u9898\u3002","title":"tortoise-orm"},{"location":"python/fastapi/tortoise-orm/#_2","text":"FastAPI\u7684app\u4e3b\u6587\u4ef6\u5185\uff0c main.py: from tortoise.contrib.fastapi import register_tortoise register_tortoise ( app , db_url = config . DATABASE_URI , modules = { \"models\" : [ \"client.models\" ]}, generate_schemas = False , add_exception_handlers = False , ) \u5176\u4e2dapp\u4e3aFastAPI\u7684app\u5bf9\u8c61\u3002 modules\u4e3a\u4f60models\u6587\u4ef6\u5b9a\u4e49\u7684\u8def\u5f84\u3002 generate_schemas\u4e3aTrue\u7684\u8bdd\u4f1a\u81ea\u52a8\u68c0\u6d4b\u76f8\u5173\u7684\u8868\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u7684\u8bdd\u4f1a\u81ea\u52a8\u5c1d\u8bd5\u521b\u5efa\uff0c\u8868\u4e2d\u7684\u5b57\u6bb5\u53d8\u5316\u7684\u8bdd\uff0c\u4e0d\u4f1a\u81ea\u52a8\u66f4\u65b0\u7684\u3002 add_exception_handlers\u4e3aTrue\u7684\u8bdd\u4f1a\u81ea\u52a8\u4e3a\u4f60\u5904\u7406ORM\u7684DoesNotExist\u5f02\u5e38\u3002","title":"\u6570\u636e\u5e93\u8fde\u63a5"},{"location":"python/fastapi/tortoise-orm/#_3","text":"create_time = fields.DatetimeField(auto_now_add=True, description='\u521b\u5efa\u65f6\u95f4') update_time = fields.DatetimeField(auto_now=True, description='\u66f4\u65b0\u65f6\u95f4') models\u5728\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u7ecf\u5e38\u4f1a\u5b9a\u4e49\u521b\u5efa\u65f6\u95f4\u548c\u66f4\u65b0\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u5728\u4e0d\u663e\u5f0f\u6307\u5b9a\u65f6\uff0c\u4f1a\u7531ORM\u81ea\u52a8\u8865\u5168\uff0c\u5f53\u524dtortoise-orm(\u7248\u672ctortoise-orm==0.16.16)\u597d\u50cf\u4e0d\u652f\u6301\u6307\u5b9a\u65f6\u533a\uff0c\u5165\u5e93\u4f7f\u7528\u7684\u65f6\u95f4\u4e3aUTC\u65f6\u95f4\uff0c\u6e90\u7801\u4e3a\uff1a \\tortoise\\fields\\data.py Line 304: def to_db_value ( self , value : Optional [ datetime . datetime ], instance : \"Union[Type[Model], Model]\" ) -> Optional [ datetime . datetime ]: # Only do this if it is a Model instance, not class. Test for guaranteed instance var if hasattr ( instance , \"_saved_in_db\" ) and ( self . auto_now or ( self . auto_now_add and getattr ( instance , self . model_field_name ) is None ) ): value = datetime . datetime . utcnow () setattr ( instance , self . model_field_name , value ) return value return value value\u5f3a\u5236\u6307\u5b9a\u4e3a datetime.datetime.utcnow() \uff0c\u5f53\u524d\u76f4\u63a5\u91cd\u5199\u81ea\u5b9a\u4e49\u7684\u5b57\u6bb5\u89e3\u51b3\uff0c\u5c06 datetime.datetime.utcnow() \u4fee\u6539\u4e3a datetime.datetime.now() \u5373\u53ef\u3002","title":"\u65f6\u533a\u95ee\u9898"},{"location":"python/fastapi/tortoise-orm/#_4","text":"tortoise-orm\u6240\u6709\u7684\u64cd\u4f5c\u65e5\u5fd7\u90fd\u4f1alog\u5728\u4e00\u4e2a\u540d\u4e3adb_client\u7684log\u5bf9\u8c61\u4e0b\uff0c\u8be5log\u9ed8\u8ba4\u4e0d\u4f1a\u8f93\u51fa\u81f3\u63a7\u5236\u53f0\uff0c\u82e5\u60f3\u67e5\u770b\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5e94\u7684SQL\u8bed\u53e5\uff0c\u53ef\u4ee5\u4e3a\u8be5log\u5bf9\u8c61\u6dfb\u52a0handler\u5373\u53ef\u3002 # \u6570\u636e\u5e93\u65e5\u5fd7 db_log = logging . getLogger ( \"db_client\" ) db_log . setLevel ( 10 ) handler = WatchedFileHandler ( filename = 'log/db_client.log' ) formatter = logging . Formatter ( ' %(asctime)s %(filename)s [line: %(lineno)d ] %(levelname)s %(message)s ' ) handler . setFormatter ( formatter ) db_log . addHandler ( handler ) \u60f3\u8981\u67e5\u770b\u5355\u6b21ORM\u6267\u884c\u65f6\u5bf9\u5e94\u7684sql\u8bed\u53e5\uff0c\u76f4\u63a5\u5728ORM\u8bed\u53e5\u540e\u8c03\u7528\u4e0b .sql() \u65b9\u6cd5\u5373\u53ef\u3002","title":"\u65e5\u5fd7\u95ee\u9898"},{"location":"python/python/pinyin/","text":"\u5bf9\u6bd4 pinyin \u4e0d\u652f\u6301\u591a\u97f3\u5b57 pypinyin \u6839\u636e\u8bcd\u7ec4\u667a\u80fd\u5339\u914d\u6700\u6b63\u786e\u7684\u62fc\u97f3\u3002 \u652f\u6301\u591a\u97f3\u5b57\u3002 \u7b80\u5355\u7684\u7e41\u4f53\u652f\u6301\u3002 \u652f\u6301\u591a\u79cd\u4e0d\u540c\u62fc\u97f3\u98ce\u683c\u3002 xpinyin \u4e0d\u652f\u6301\u591a\u97f3\u5b57 ChineseTone \u652f\u6301\u591a\u97f3\u5b57 \u5224\u65ad\u662f\u5426\u4e3a\u591a\u97f3\u5b57 \u83b7\u53d6\u62fc\u97f3\u7684\u58f0\u6bcd\u90e8\u5206 \u83b7\u53d6\u67d0\u6c49\u5b57\u7684\u6240\u6709\u62fc\u97f3 \u5b9e\u73b0 ChineseTone\u5728python3\u65f6\u6253\u5f00\u6587\u4ef6\u9700\u8981\u52a0\u5165encoding='utf-8 str = '\u91cd\u5e86' import pinyin print ( pinyin . get ( str , format = \"strip\" , delimiter = \" \" )) from pypinyin import pinyin import pypinyin print ( pinyin ( str , style = pypinyin . NORMAL , heteronym = True )) from ChineseTone import * print ( PinyinHelper . convertToPinyinFromSentence ( str , pinyinFormat = PinyinFormat . WITHOUT_TONE )) \u91cd\u5e86\uff1a zhong qing [['chong'], ['qing']] ['chong', 'qing'] \u4e86\u89e3\u4e86\uff1a le jie le [['le', 'liao'], ['jie', 'xie'], ['le', 'liao']] ['liao', 'jie', 'le'] \u5927\u592b\uff1a da fu [['da'], ['fu']] ['da', 'fu'] pypinyin\u548cChineseTone\u529f\u80fd\u76f8\u8fd1\uff0c\u6682\u7528pypinyin\uff0c\u591a\u6b21\u5bf9\u6bd4\u591a\u97f3\u5b57pypinyin\u66f4\u4e3a\u51c6\u786e\uff0c\u4f46\u90fd\u4f1a\u51fa\u9519\u3002 \u7b80\u7801\u751f\u6210\u57fa\u7840\u4ee3\u7801\uff1a import itertools import pypinyin from pypinyin import pinyin name = '\u91cd\u5927\u6bb7\u4e5001' simple_code_list = pinyin ( name , style = pypinyin . FIRST_LETTER , heteronym = True , errors = 'default' ) for i in range ( 0 , len ( simple_code_list ) - 1 ): c = list ( itertools . product ( simple_code_list [ i ], simple_code_list [ i + 1 ])) d = [] for j in c : d . append ( '' . join ( j )) simple_code_list [ i + 1 ] = d print ( simple_code_list [ i + 1 ], len ( simple_code_list [ i + 1 ])) \u8f93\u51fa\u7ed3\u679c\uff1a ['zd', 'zt', 'cd', 'ct', 'td', 'tt'] 6 zd,zt,cd,ct,td,tt ['zdy', 'zty', 'cdy', 'cty', 'tdy', 'tty'] 6 zdy,zty,cdy,cty,tdy,tty ['zdyl', 'zdyy', 'ztyl', 'ztyy', 'cdyl', 'cdyy', 'ctyl', 'ctyy', 'tdyl', 'tdyy', 'ttyl', 'ttyy'] 12 zdyl,zdyy,ztyl,ztyy,cdyl,cdyy,ctyl,ctyy,tdyl,tdyy,ttyl,ttyy ['zdyl01', 'zdyy01', 'ztyl01', 'ztyy01', 'cdyl01', 'cdyy01', 'ctyl01', 'ctyy01', 'tdyl01', 'tdyy01', 'ttyl01', 'ttyy01'] 12 \u4f7f\u7528join \u51fd\u6570\u6765\u62fc\u63a5\u5b57\u7b26\u4e32: print ( ',' . join ( simple_code_list [ i + 1 ])) \u8f93\u51fa\u7ed3\u679c\uff1azdyl01,zdyy01,ztyl01,ztyy01,cdyl01,cdyy01,ctyl01,ctyy01,tdyl01,tdyy01,ttyl01,ttyy01 print ( '_' . join ( simple_code_list [ i + 1 ])) \u8f93\u51fa\u7ed3\u679c\uff1azdyl01_zdyy01_ztyl01_ztyy01_cdyl01_cdyy01_ctyl01_ctyy01_tdyl01_tdyy01_ttyl01_ttyy01 print ( ' ' . join ( simple_code_list [ i + 1 ])) \u8f93\u51fa\u7ed3\u679c\uff1azdyl01 zdyy01 ztyl01 ztyy01 cdyl01 cdyy01 ctyl01 ctyy01 tdyl01 tdyy01 ttyl01 ttyy01 \u4f7f\u7528split\u51fd\u6570\u6765\u62c6\u5206\u5b57\u7b26\u4e32: c = ',' . join ( simple_code_list [ i + 1 ]) print ( c . split ( ',' ), type ( c . split ( ',' ))) \u8f93\u51fa\u7ed3\u679c\uff1a['zdyl01', 'zdyy01', 'ztyl01', 'ztyy01', 'cdyl01', 'cdyy01', 'ctyl01', 'ctyy01', 'tdyl01', 'tdyy01', 'ttyl01', 'ttyy01'] c = ' ' . join ( simple_code_list [ i + 1 ]) print ( c . split ( ' ' ), type ( c . split ( ',' ))) \u8f93\u51fa\u7ed3\u679c\uff1a['zdyl01', 'zdyy01', 'ztyl01', 'ztyy01', 'cdyl01', 'cdyy01', 'ctyl01', 'ctyy01', 'tdyl01', 'tdyy01', 'ttyl01', 'ttyy01'] \u6574\u7406\u5b8c\u6210\u7684\u51fd\u6570: import itertools import pypinyin from pypinyin import pinyin # \u7531\u6c49\u5b57\u83b7\u53d6\u62fc\u97f3\u7b80\u7801\u5b57\u7b26\u4e32 # Receive ---------------------------------- # name: \u6c49\u5b57\u540d\u79f0 # Return ----------------------------------- # \u7b80\u7801\u5b57\u7b26\u4e32 \u4ee5 , \u9694\u5f00 def brief_code ( name = '' ): # \u53ea\u83b7\u53d6\u9996\u5b57\u6bcd\u62fc\u97f3 \u5141\u8bb8\u591a\u97f3\u5b57 \u975e\u6c49\u5b57\u90e8\u5206\u4fdd\u7559\u539f\u59cb\u5b57\u7b26 brief_codes = pinyin ( name , style = pypinyin . FIRST_LETTER , heteronym = True , errors = 'default' ) for i in range ( 0 , len ( brief_codes ) - 1 ): c = list ( itertools . product ( brief_codes [ i ], brief_codes [ i + 1 ])) d = [] for j in c : d . append ( '' . join ( j )) brief_codes [ i + 1 ] = d if i == len ( brief_codes ) - 2 : return ',' . join ( brief_codes [ i + 1 ]) return '' print ( brief_code ( '\u91cd\u5927\u6bb7\u4e5001' )) \u8f93\u51fa\u7ed3\u679c\uff1azdyl01,zdyy01,ztyl01,ztyy01,cdyl01,cdyy01,ctyl01,ctyy01,tdyl01,tdyy01,ttyl01,ttyy01 https://www.biaodianfu.com/python-hanzi-to-pinyin.html","title":"\u6c49\u5b57\u8f6c\u62fc\u97f3\uff08\u7b80\u7801\u751f\u6210\uff09"},{"location":"python/python/pinyin/#_1","text":"","title":"\u5bf9\u6bd4"},{"location":"python/python/pinyin/#pinyin","text":"\u4e0d\u652f\u6301\u591a\u97f3\u5b57","title":"pinyin"},{"location":"python/python/pinyin/#pypinyin","text":"\u6839\u636e\u8bcd\u7ec4\u667a\u80fd\u5339\u914d\u6700\u6b63\u786e\u7684\u62fc\u97f3\u3002 \u652f\u6301\u591a\u97f3\u5b57\u3002 \u7b80\u5355\u7684\u7e41\u4f53\u652f\u6301\u3002 \u652f\u6301\u591a\u79cd\u4e0d\u540c\u62fc\u97f3\u98ce\u683c\u3002","title":"pypinyin"},{"location":"python/python/pinyin/#xpinyin","text":"\u4e0d\u652f\u6301\u591a\u97f3\u5b57","title":"xpinyin"},{"location":"python/python/pinyin/#chinesetone","text":"\u652f\u6301\u591a\u97f3\u5b57 \u5224\u65ad\u662f\u5426\u4e3a\u591a\u97f3\u5b57 \u83b7\u53d6\u62fc\u97f3\u7684\u58f0\u6bcd\u90e8\u5206 \u83b7\u53d6\u67d0\u6c49\u5b57\u7684\u6240\u6709\u62fc\u97f3","title":"ChineseTone"},{"location":"python/python/pinyin/#_2","text":"ChineseTone\u5728python3\u65f6\u6253\u5f00\u6587\u4ef6\u9700\u8981\u52a0\u5165encoding='utf-8 str = '\u91cd\u5e86' import pinyin print ( pinyin . get ( str , format = \"strip\" , delimiter = \" \" )) from pypinyin import pinyin import pypinyin print ( pinyin ( str , style = pypinyin . NORMAL , heteronym = True )) from ChineseTone import * print ( PinyinHelper . convertToPinyinFromSentence ( str , pinyinFormat = PinyinFormat . WITHOUT_TONE )) \u91cd\u5e86\uff1a zhong qing [['chong'], ['qing']] ['chong', 'qing'] \u4e86\u89e3\u4e86\uff1a le jie le [['le', 'liao'], ['jie', 'xie'], ['le', 'liao']] ['liao', 'jie', 'le'] \u5927\u592b\uff1a da fu [['da'], ['fu']] ['da', 'fu'] pypinyin\u548cChineseTone\u529f\u80fd\u76f8\u8fd1\uff0c\u6682\u7528pypinyin\uff0c\u591a\u6b21\u5bf9\u6bd4\u591a\u97f3\u5b57pypinyin\u66f4\u4e3a\u51c6\u786e\uff0c\u4f46\u90fd\u4f1a\u51fa\u9519\u3002 \u7b80\u7801\u751f\u6210\u57fa\u7840\u4ee3\u7801\uff1a import itertools import pypinyin from pypinyin import pinyin name = '\u91cd\u5927\u6bb7\u4e5001' simple_code_list = pinyin ( name , style = pypinyin . FIRST_LETTER , heteronym = True , errors = 'default' ) for i in range ( 0 , len ( simple_code_list ) - 1 ): c = list ( itertools . product ( simple_code_list [ i ], simple_code_list [ i + 1 ])) d = [] for j in c : d . append ( '' . join ( j )) simple_code_list [ i + 1 ] = d print ( simple_code_list [ i + 1 ], len ( simple_code_list [ i + 1 ])) \u8f93\u51fa\u7ed3\u679c\uff1a ['zd', 'zt', 'cd', 'ct', 'td', 'tt'] 6 zd,zt,cd,ct,td,tt ['zdy', 'zty', 'cdy', 'cty', 'tdy', 'tty'] 6 zdy,zty,cdy,cty,tdy,tty ['zdyl', 'zdyy', 'ztyl', 'ztyy', 'cdyl', 'cdyy', 'ctyl', 'ctyy', 'tdyl', 'tdyy', 'ttyl', 'ttyy'] 12 zdyl,zdyy,ztyl,ztyy,cdyl,cdyy,ctyl,ctyy,tdyl,tdyy,ttyl,ttyy ['zdyl01', 'zdyy01', 'ztyl01', 'ztyy01', 'cdyl01', 'cdyy01', 'ctyl01', 'ctyy01', 'tdyl01', 'tdyy01', 'ttyl01', 'ttyy01'] 12 \u4f7f\u7528join \u51fd\u6570\u6765\u62fc\u63a5\u5b57\u7b26\u4e32: print ( ',' . join ( simple_code_list [ i + 1 ])) \u8f93\u51fa\u7ed3\u679c\uff1azdyl01,zdyy01,ztyl01,ztyy01,cdyl01,cdyy01,ctyl01,ctyy01,tdyl01,tdyy01,ttyl01,ttyy01 print ( '_' . join ( simple_code_list [ i + 1 ])) \u8f93\u51fa\u7ed3\u679c\uff1azdyl01_zdyy01_ztyl01_ztyy01_cdyl01_cdyy01_ctyl01_ctyy01_tdyl01_tdyy01_ttyl01_ttyy01 print ( ' ' . join ( simple_code_list [ i + 1 ])) \u8f93\u51fa\u7ed3\u679c\uff1azdyl01 zdyy01 ztyl01 ztyy01 cdyl01 cdyy01 ctyl01 ctyy01 tdyl01 tdyy01 ttyl01 ttyy01 \u4f7f\u7528split\u51fd\u6570\u6765\u62c6\u5206\u5b57\u7b26\u4e32: c = ',' . join ( simple_code_list [ i + 1 ]) print ( c . split ( ',' ), type ( c . split ( ',' ))) \u8f93\u51fa\u7ed3\u679c\uff1a['zdyl01', 'zdyy01', 'ztyl01', 'ztyy01', 'cdyl01', 'cdyy01', 'ctyl01', 'ctyy01', 'tdyl01', 'tdyy01', 'ttyl01', 'ttyy01'] c = ' ' . join ( simple_code_list [ i + 1 ]) print ( c . split ( ' ' ), type ( c . split ( ',' ))) \u8f93\u51fa\u7ed3\u679c\uff1a['zdyl01', 'zdyy01', 'ztyl01', 'ztyy01', 'cdyl01', 'cdyy01', 'ctyl01', 'ctyy01', 'tdyl01', 'tdyy01', 'ttyl01', 'ttyy01'] \u6574\u7406\u5b8c\u6210\u7684\u51fd\u6570: import itertools import pypinyin from pypinyin import pinyin # \u7531\u6c49\u5b57\u83b7\u53d6\u62fc\u97f3\u7b80\u7801\u5b57\u7b26\u4e32 # Receive ---------------------------------- # name: \u6c49\u5b57\u540d\u79f0 # Return ----------------------------------- # \u7b80\u7801\u5b57\u7b26\u4e32 \u4ee5 , \u9694\u5f00 def brief_code ( name = '' ): # \u53ea\u83b7\u53d6\u9996\u5b57\u6bcd\u62fc\u97f3 \u5141\u8bb8\u591a\u97f3\u5b57 \u975e\u6c49\u5b57\u90e8\u5206\u4fdd\u7559\u539f\u59cb\u5b57\u7b26 brief_codes = pinyin ( name , style = pypinyin . FIRST_LETTER , heteronym = True , errors = 'default' ) for i in range ( 0 , len ( brief_codes ) - 1 ): c = list ( itertools . product ( brief_codes [ i ], brief_codes [ i + 1 ])) d = [] for j in c : d . append ( '' . join ( j )) brief_codes [ i + 1 ] = d if i == len ( brief_codes ) - 2 : return ',' . join ( brief_codes [ i + 1 ]) return '' print ( brief_code ( '\u91cd\u5927\u6bb7\u4e5001' )) \u8f93\u51fa\u7ed3\u679c\uff1azdyl01,zdyy01,ztyl01,ztyy01,cdyl01,cdyy01,ctyl01,ctyy01,tdyl01,tdyy01,ttyl01,ttyy01 https://www.biaodianfu.com/python-hanzi-to-pinyin.html","title":"\u5b9e\u73b0"},{"location":"python/python/pip-publish/","text":"\u6ce8\u518c \u524d\u5f80 https://pypi.org/ \u6ce8\u518c\u8d26\u53f7\u3002 setup\u6a21\u677f \u8be5\u6587\u4ef6\u7528\u4e8e\u5bf9\u5e93\u8fdb\u884c\u8bf4\u660e\u3001\u8bbe\u7f6e import os from setuptools import find_packages , setup import popup_field version = popup_field . __version__ with open ( os . path . join ( os . path . dirname ( __file__ ), 'README.md' )) as readme : README = readme . read () with open ( os . path . join ( os . path . dirname ( __file__ ), 'HISTORY.md' )) as history : HISTORY = history . read () # allow setup.py to be run from any path os . chdir ( os . path . normpath ( os . path . join ( os . path . abspath ( __file__ ), os . pardir ))) setup ( name = 'django-popup-field' , version = version , description = 'A popup field for django which can create \\\\ update \\\\ delete ForeignKey and ManyToManyField instance by popup windows.' , long_description = README + ' \\n\\n ' + HISTORY , license = 'BSD 3-Clause License' , packages = [ 'popup_field' ], include_package_data = True , install_requires = [ ], url = 'https://github.com/yinkh/django-popup-field.git' , author = 'Yin KangHong' , author_email = '614457662@qq.com' , keywords = 'django-popup-field' , classifiers = [ 'Development Status :: 3 - Alpha' , 'Intended Audience :: Developers' , 'License :: OSI Approved :: MIT License' , 'Operating System :: OS Independent' , 'Programming Language :: Python :: 3' , 'Topic :: Software Development :: Libraries' , 'Environment :: Web Environment' , 'Framework :: Django' , ], ) LICENSE\u6a21\u677f \u8be5\u6587\u4ef6\u7528\u4e8e\u58f0\u660e\u6388\u6743 BSD 3-Clause License Copyright (c) 2018 Yin KangHong(\u6bb7\u5eb7\u7ea2) All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. MANIFEST.in\u6a21\u677f \u8be5\u6587\u4ef6\u7528\u4e8e\u6307\u5b9a\u4f1a\u6253\u5305\u6db5\u76d6\u7684\u6587\u4ef6 include LICENSE include README.md include HISTORY.md recursive-include popup_field * global-exclude *.pyc \u7f16\u8bd1 tar.gz python setup.py sdist build wheel pip install wheel python setup.py bdist_wheel --universal \u4e0a\u4f20 sudo pip install twine twine upload dist/* Demo Site \u4f7f\u7528 Django \u5b9e\u73b0\u4e00\u4e2a\u6d4b\u8bd5\u7ad9\u70b9\u65f6\uff0c\u9700\u8981\u5728 settings \u91cc\u58f0\u660e\uff1a PACKAGE_DIR = os . path . dirname ( BASE_DIR ) if PACKAGE_DIR not in sys . path : sys . path . insert ( 0 , PACKAGE_DIR ) \u4ee5\u4fdd\u8bc1\u8be5\u5e93\u80fd\u5728 INSTALLED_APPS \u4e2d\u88ab\u6b63\u786e\u5f15\u7528\u3002","title":"PyPi\u53d1\u5e03"},{"location":"python/python/pip-publish/#_1","text":"\u524d\u5f80 https://pypi.org/ \u6ce8\u518c\u8d26\u53f7\u3002","title":"\u6ce8\u518c"},{"location":"python/python/pip-publish/#setup","text":"\u8be5\u6587\u4ef6\u7528\u4e8e\u5bf9\u5e93\u8fdb\u884c\u8bf4\u660e\u3001\u8bbe\u7f6e import os from setuptools import find_packages , setup import popup_field version = popup_field . __version__ with open ( os . path . join ( os . path . dirname ( __file__ ), 'README.md' )) as readme : README = readme . read () with open ( os . path . join ( os . path . dirname ( __file__ ), 'HISTORY.md' )) as history : HISTORY = history . read () # allow setup.py to be run from any path os . chdir ( os . path . normpath ( os . path . join ( os . path . abspath ( __file__ ), os . pardir ))) setup ( name = 'django-popup-field' , version = version , description = 'A popup field for django which can create \\\\ update \\\\ delete ForeignKey and ManyToManyField instance by popup windows.' , long_description = README + ' \\n\\n ' + HISTORY , license = 'BSD 3-Clause License' , packages = [ 'popup_field' ], include_package_data = True , install_requires = [ ], url = 'https://github.com/yinkh/django-popup-field.git' , author = 'Yin KangHong' , author_email = '614457662@qq.com' , keywords = 'django-popup-field' , classifiers = [ 'Development Status :: 3 - Alpha' , 'Intended Audience :: Developers' , 'License :: OSI Approved :: MIT License' , 'Operating System :: OS Independent' , 'Programming Language :: Python :: 3' , 'Topic :: Software Development :: Libraries' , 'Environment :: Web Environment' , 'Framework :: Django' , ], )","title":"setup\u6a21\u677f"},{"location":"python/python/pip-publish/#license","text":"\u8be5\u6587\u4ef6\u7528\u4e8e\u58f0\u660e\u6388\u6743 BSD 3-Clause License Copyright (c) 2018 Yin KangHong(\u6bb7\u5eb7\u7ea2) All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE\u6a21\u677f"},{"location":"python/python/pip-publish/#manifestin","text":"\u8be5\u6587\u4ef6\u7528\u4e8e\u6307\u5b9a\u4f1a\u6253\u5305\u6db5\u76d6\u7684\u6587\u4ef6 include LICENSE include README.md include HISTORY.md recursive-include popup_field * global-exclude *.pyc","title":"MANIFEST.in\u6a21\u677f"},{"location":"python/python/pip-publish/#_2","text":"tar.gz python setup.py sdist build wheel pip install wheel python setup.py bdist_wheel --universal","title":"\u7f16\u8bd1"},{"location":"python/python/pip-publish/#_3","text":"sudo pip install twine twine upload dist/*","title":"\u4e0a\u4f20"},{"location":"python/python/pip-publish/#demo-site","text":"\u4f7f\u7528 Django \u5b9e\u73b0\u4e00\u4e2a\u6d4b\u8bd5\u7ad9\u70b9\u65f6\uff0c\u9700\u8981\u5728 settings \u91cc\u58f0\u660e\uff1a PACKAGE_DIR = os . path . dirname ( BASE_DIR ) if PACKAGE_DIR not in sys . path : sys . path . insert ( 0 , PACKAGE_DIR ) \u4ee5\u4fdd\u8bc1\u8be5\u5e93\u80fd\u5728 INSTALLED_APPS \u4e2d\u88ab\u6b63\u786e\u5f15\u7528\u3002","title":"Demo Site"},{"location":"python/python/pycharm-ssh/","text":"1 \u914d\u7f6ePycharm \u6253\u5f00 Tools -> Deployment -> Configuration \u70b9\u51fb\u6dfb\u52a0\u6309\u94ae\uff0c\u6dfb\u52a0\u914d\u7f6e\u3002 Name \u8f93\u5165\u5bf9\u5e94\u670d\u52a1\u5668\u7684\u522b\u540d Connection \u8fde\u63a5\u9009\u9879\u5361\u914d\u7f6e ![img](https://www.yinkh.top/media/summer_note/20170831-095805-447.png) \u9009\u4e2d Visible only for this project \uff0c\u53ca\u4ec5\u5728\u6b64\u9879\u76ee\u4e2d\u53ef\u89c1\u6b64\u914d\u7f6e(\u8fdc\u7a0b\u670d\u52a1\u5668)\u3002 Type \u8fde\u63a5\u7c7b\u578b\u9009\u62e9SFTP SFTP host \u4e3a\u4f60\u670d\u52a1\u5668\u7684IP\u5730\u5740 PORT \u4e3a ssh \u7aef\u53e3\uff0c\u9ed8\u8ba4\u4e3a22\uff0c\u82e5\u670d\u52a1\u5668 ssh \u7aef\u53e3\u5df2\u4fee\u6539\uff0c\u8bf7\u76f8\u5e94\u4fee\u6539\u6b64\u53c2\u6570\u3002 Root path \u4e3a\u670d\u52a1\u5668\u6839\u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a/\u3002 User name \u4e3a\u670d\u52a1\u5668\u7ba1\u7406\u5458\u8d26\u53f7 Auth type \u4e3a\u670d\u52a1\u5668\u9a8c\u8bc1\u7c7b\u578b\uff0c\u652f\u6301ras\u5bc6\u94a5\u548c\u5bc6\u7801\u3002\u672c\u6587\u4e3a\u8fde\u63a5\u5c40\u57df\u7f51\u6d4b\u8bd5\u670d\u52a1\u5668\uff0c\u4f7f\u7528\u5bc6\u7801\u8fde\u63a5\uff0c\u82e5\u8fde\u63a5\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u63a8\u8350\u4f7f\u7528ras\u5bc6\u94a5\u8fdb\u884c\u9a8c\u8bc1\u4ee5\u4fdd\u8bc1\u5b89\u5168\u3002 Password \u4e3a\u670d\u52a1\u5668\u7ba1\u7406\u5458\u5bc6\u7801 Web server root URL \u4e3a\u8fdc\u7a0b\u670d\u52a1\u5668\u8fde\u63a5url Mappings \u6587\u4ef6\u8def\u5f84\u6620\u5c04\u9009\u9879\u5361\u914d\u7f6e ![img](https://www.yinkh.top/media/summer_note/20170831-095828-518.png) Local path \u4e3a\u672c\u5730\u9879\u76ee\u7684\u9879\u76ee\u4f4d\u7f6e Deployment path on server \u4e3a\u8fdc\u7a0b\u670d\u52a1\u5668\u5bf9\u5e94\u7684\u9879\u76ee\u4f4d\u7f6e Excluded Paths \u5ffd\u7565\u7684\u540c\u6b65\u8def\u5f84\u8bbe\u7f6e ![img](https://www.yinkh.top/media/summer_note/20170901-143107-019.png) Add local path \u6dfb\u52a0\u672c\u5730\u4e0a\u4f20\u65f6\u5ffd\u7565\u7684\u6587\u4ef6\u5939 Add deployment path \u4e0b\u8f7d\u8fdc\u7a0b\u670d\u52a1\u5668\u6587\u4ef6\u5939\u65f6\u5ffd\u7565\u7684\u6587\u4ef6\u5939 2 \u4f7f\u7528\u7b14\u8bb0 \u5b8c\u6210\u914d\u7f6e1\u6b65\u9aa43\u540e,\u9009\u4e2d\u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5939\u6216\u8005\u6587\u4ef6,\u518d\u6b21\u6253\u5f00Tools -> Deployment \u5373\u53ef\u770b\u5230upload to server_xxx,\u70b9\u51fb\u5373\u53ef\u540c\u6b65\u5bf9\u5e94\u670d\u52a1\u5668\u4e0a\u6620\u5c04\u76ee\u5f55\u4ee3\u7801\u3002 \u70b9\u51fb Tools -> Deployment -> Automatic Upload \u5373\u53ef\u81ea\u52a8\u5c06\u672c\u5730\u4fee\u6539\u7684\u4ee3\u7801\u540c\u6b65\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668 \u70b9\u51fb Tools -> Deployment -> Browse Remote Host \u5373\u53ef\u6253\u5f00\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u76ee\u5f55\u6811\uff0c\u9009\u62e9\u6587\u4ef6\u5373\u53ef\u5728\u672c\u5730IDE\u4e2d\u5bf9\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u4fee\u6539\u5b8c\u6210\u540ePycharm\u4f1a\u51fa\u73b0\u63d0\u793a\u7a97\u63d0\u793a\u6587\u4ef6\u88ab\u4fee\u6539\u662f\u5426\u4e0a\u4f20\uff0c\u70b9\u51fb\u4e0a\u4f20\u5373\u53ef\u4fee\u6539\u8fdc\u7a0b\u670d\u52a1\u5668\u4e2d\u4ee3\u7801\u3002 \u4e0a\u4f20\u4ee3\u7801\u65f6\u8bf7\u65b0 clone \u4e00\u4e2a\u7eaf\u51c0\u7684\u9879\u76ee,\u4e0d\u8981\u628a virtualenv\u3001migrations\u3001media \u7b49\u672c\u5730\u6d4b\u8bd5\u7684\u65e0\u7528\u6587\u4ef6\u4e0a\u4f20\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u7279\u522b\u662f migrations \u6587\u4ef6\uff0c\u4e00\u65e6\u4e0a\u4f20\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668\u5c06\u5bfc\u81f4\u8fdc\u7a0b\u670d\u52a1\u5668\u6570\u636e\u5e93\u811a\u672c node \u4e2d\u65ad\u800c\u65e0\u6cd5\u7ee7\u7eed\u8fc1\u79fb\u6570\u636e\u5e93\u3002 \u6bcf\u6b21 upload \u7684\u6587\u4ef6\u4e3a IDE \u5f53\u524d\u9009\u4e2d\u7684\u6587\u4ef6 \u5fc5\u987b\u6709\u9009\u4e2d\u7684\u6587\u4ef6\u6216\u8005\u6587\u4ef6\u5939,\u70b9\u51fb Tools -> Deployment \u624d\u53ef\u770b\u5230 upload to server_xxx \u9009\u9879\u4eae\u8d77,\u5426\u5219\u4e0d\u4f1a\u4eae\u8d77\uff01 3 \u5728 Terminal \u4e2d ssh \u76f4\u8fde\u670d\u52a1\u5668 \u4e3b\u83dc\u5355 Tools->Start SSH Session ,\u9009\u62e9\u9700\u8981ssh\u8fde\u63a5\u7684\u670d\u52a1\u5668\uff0c\u5373\u53ef\u5b9e\u73b0\u4e0e PuTTY \u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u65b9\u4fbf\u5feb\u6377\u3002 \u9ebb\u74dc\u7f16\u7a0b \u817e\u8baf\u89c6\u9891 \u77e5\u4e4e\u95ee\u9898","title":"Pycharm\u4e2d\u5229\u7528ssh\u8fdc\u7a0b\u90e8\u7f72"},{"location":"python/python/pycharm-ssh/#1-pycharm","text":"\u6253\u5f00 Tools -> Deployment -> Configuration \u70b9\u51fb\u6dfb\u52a0\u6309\u94ae\uff0c\u6dfb\u52a0\u914d\u7f6e\u3002 Name \u8f93\u5165\u5bf9\u5e94\u670d\u52a1\u5668\u7684\u522b\u540d Connection \u8fde\u63a5\u9009\u9879\u5361\u914d\u7f6e ![img](https://www.yinkh.top/media/summer_note/20170831-095805-447.png) \u9009\u4e2d Visible only for this project \uff0c\u53ca\u4ec5\u5728\u6b64\u9879\u76ee\u4e2d\u53ef\u89c1\u6b64\u914d\u7f6e(\u8fdc\u7a0b\u670d\u52a1\u5668)\u3002 Type \u8fde\u63a5\u7c7b\u578b\u9009\u62e9SFTP SFTP host \u4e3a\u4f60\u670d\u52a1\u5668\u7684IP\u5730\u5740 PORT \u4e3a ssh \u7aef\u53e3\uff0c\u9ed8\u8ba4\u4e3a22\uff0c\u82e5\u670d\u52a1\u5668 ssh \u7aef\u53e3\u5df2\u4fee\u6539\uff0c\u8bf7\u76f8\u5e94\u4fee\u6539\u6b64\u53c2\u6570\u3002 Root path \u4e3a\u670d\u52a1\u5668\u6839\u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a/\u3002 User name \u4e3a\u670d\u52a1\u5668\u7ba1\u7406\u5458\u8d26\u53f7 Auth type \u4e3a\u670d\u52a1\u5668\u9a8c\u8bc1\u7c7b\u578b\uff0c\u652f\u6301ras\u5bc6\u94a5\u548c\u5bc6\u7801\u3002\u672c\u6587\u4e3a\u8fde\u63a5\u5c40\u57df\u7f51\u6d4b\u8bd5\u670d\u52a1\u5668\uff0c\u4f7f\u7528\u5bc6\u7801\u8fde\u63a5\uff0c\u82e5\u8fde\u63a5\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u63a8\u8350\u4f7f\u7528ras\u5bc6\u94a5\u8fdb\u884c\u9a8c\u8bc1\u4ee5\u4fdd\u8bc1\u5b89\u5168\u3002 Password \u4e3a\u670d\u52a1\u5668\u7ba1\u7406\u5458\u5bc6\u7801 Web server root URL \u4e3a\u8fdc\u7a0b\u670d\u52a1\u5668\u8fde\u63a5url Mappings \u6587\u4ef6\u8def\u5f84\u6620\u5c04\u9009\u9879\u5361\u914d\u7f6e ![img](https://www.yinkh.top/media/summer_note/20170831-095828-518.png) Local path \u4e3a\u672c\u5730\u9879\u76ee\u7684\u9879\u76ee\u4f4d\u7f6e Deployment path on server \u4e3a\u8fdc\u7a0b\u670d\u52a1\u5668\u5bf9\u5e94\u7684\u9879\u76ee\u4f4d\u7f6e Excluded Paths \u5ffd\u7565\u7684\u540c\u6b65\u8def\u5f84\u8bbe\u7f6e ![img](https://www.yinkh.top/media/summer_note/20170901-143107-019.png) Add local path \u6dfb\u52a0\u672c\u5730\u4e0a\u4f20\u65f6\u5ffd\u7565\u7684\u6587\u4ef6\u5939 Add deployment path \u4e0b\u8f7d\u8fdc\u7a0b\u670d\u52a1\u5668\u6587\u4ef6\u5939\u65f6\u5ffd\u7565\u7684\u6587\u4ef6\u5939","title":"1 \u914d\u7f6ePycharm"},{"location":"python/python/pycharm-ssh/#2","text":"\u5b8c\u6210\u914d\u7f6e1\u6b65\u9aa43\u540e,\u9009\u4e2d\u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5939\u6216\u8005\u6587\u4ef6,\u518d\u6b21\u6253\u5f00Tools -> Deployment \u5373\u53ef\u770b\u5230upload to server_xxx,\u70b9\u51fb\u5373\u53ef\u540c\u6b65\u5bf9\u5e94\u670d\u52a1\u5668\u4e0a\u6620\u5c04\u76ee\u5f55\u4ee3\u7801\u3002 \u70b9\u51fb Tools -> Deployment -> Automatic Upload \u5373\u53ef\u81ea\u52a8\u5c06\u672c\u5730\u4fee\u6539\u7684\u4ee3\u7801\u540c\u6b65\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668 \u70b9\u51fb Tools -> Deployment -> Browse Remote Host \u5373\u53ef\u6253\u5f00\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u76ee\u5f55\u6811\uff0c\u9009\u62e9\u6587\u4ef6\u5373\u53ef\u5728\u672c\u5730IDE\u4e2d\u5bf9\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u4fee\u6539\u5b8c\u6210\u540ePycharm\u4f1a\u51fa\u73b0\u63d0\u793a\u7a97\u63d0\u793a\u6587\u4ef6\u88ab\u4fee\u6539\u662f\u5426\u4e0a\u4f20\uff0c\u70b9\u51fb\u4e0a\u4f20\u5373\u53ef\u4fee\u6539\u8fdc\u7a0b\u670d\u52a1\u5668\u4e2d\u4ee3\u7801\u3002 \u4e0a\u4f20\u4ee3\u7801\u65f6\u8bf7\u65b0 clone \u4e00\u4e2a\u7eaf\u51c0\u7684\u9879\u76ee,\u4e0d\u8981\u628a virtualenv\u3001migrations\u3001media \u7b49\u672c\u5730\u6d4b\u8bd5\u7684\u65e0\u7528\u6587\u4ef6\u4e0a\u4f20\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u7279\u522b\u662f migrations \u6587\u4ef6\uff0c\u4e00\u65e6\u4e0a\u4f20\u81f3\u8fdc\u7a0b\u670d\u52a1\u5668\u5c06\u5bfc\u81f4\u8fdc\u7a0b\u670d\u52a1\u5668\u6570\u636e\u5e93\u811a\u672c node \u4e2d\u65ad\u800c\u65e0\u6cd5\u7ee7\u7eed\u8fc1\u79fb\u6570\u636e\u5e93\u3002 \u6bcf\u6b21 upload \u7684\u6587\u4ef6\u4e3a IDE \u5f53\u524d\u9009\u4e2d\u7684\u6587\u4ef6 \u5fc5\u987b\u6709\u9009\u4e2d\u7684\u6587\u4ef6\u6216\u8005\u6587\u4ef6\u5939,\u70b9\u51fb Tools -> Deployment \u624d\u53ef\u770b\u5230 upload to server_xxx \u9009\u9879\u4eae\u8d77,\u5426\u5219\u4e0d\u4f1a\u4eae\u8d77\uff01","title":"2 \u4f7f\u7528\u7b14\u8bb0"},{"location":"python/python/pycharm-ssh/#3-terminalssh","text":"\u4e3b\u83dc\u5355 Tools->Start SSH Session ,\u9009\u62e9\u9700\u8981ssh\u8fde\u63a5\u7684\u670d\u52a1\u5668\uff0c\u5373\u53ef\u5b9e\u73b0\u4e0e PuTTY \u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u65b9\u4fbf\u5feb\u6377\u3002 \u9ebb\u74dc\u7f16\u7a0b \u817e\u8baf\u89c6\u9891 \u77e5\u4e4e\u95ee\u9898","title":"3 \u5728Terminal\u4e2dssh\u76f4\u8fde\u670d\u52a1\u5668"},{"location":"python/python/pycharm/","text":"\u5e38\u7528\u5feb\u6377\u952e - Show Intention Actions \u5feb\u901f\u5bfc\u5165\u3001\u8865\u5168\u51fd\u6570 (alt+z) # \u5df2\u6539\u540d\u4e3a Show Context Actions - Reformat Code \u81ea\u52a8\u6574\u7406\u4ee3\u7801 (ctrl+tab) - Select Line at Caret \u9009\u62e9\u5f53\u524d\u884c ctrl+d - Alt+Shift+\u5411\u4e0a\u7bad\u5934\\\u5411\u4e0b\u7bad\u5934 \u79fb\u52a8\u672c\u884c\u4ee3\u7801 - Alt+\u4e0a\u4e0b\u7bad\u5934 \u79fb\u52a8\u5230\u672c\u6587\u4ef6\u5185\u7684\u4e0a\u4e00\u4e2a\u6216\u8005\u4e0b\u4e00\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u7684\u4f4d\u7f6e - # FIXME Bug\u63cf\u8ff0 - # TODO \u5f85\u505a\u4e8b\u9879 - ctrl+shift+F \u5168\u5c40\u67e5\u627e\u4e00\u4e2a\u53d8\u91cf \u4e00\u5b9a\u8981\u5728\u82f1\u6587\u8f93\u5165\u6cd5\u4e0b\u8c03\u7528\uff0c\u5426\u5219\u65e0\u6cd5\u6389\u51fa\u641c\u7d22\u9875\u9762\u3002 - Full Screen \u5168\u5c4f \u63a8\u8350\u6309\u952e`ctrl+Q` - Comment with Line Comment \u5355\u884c\u6ce8\u91ca\uff08ctrl+\\\uff09 \u63a8\u8350\u6309\u952eCtrl+Shift+C - Comment with Blick Comment \u533a\u5757\u6ce8\u91ca\uff08ctrl+shift+\\) - ctrl+shift+I \u67e5\u770b\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e - ctrl+alt+O Optimize Imports \u81ea\u52a8\u6574\u7406import - ctrl+alt+[] \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u6216\u8005\u4e0b\u4e00\u4e2a\u9879\u76ee\u7684\u7a97\u53e3 \u5728 Terminal \u4e2d ssh \u76f4\u8fde\u670d\u52a1\u5668 \u4e3b\u83dc\u5355 Tools->Start SSH Session ,\u9009\u62e9\u9700\u8981ssh\u8fde\u63a5\u7684\u670d\u52a1\u5668\uff0c\u5373\u53ef\u5b9e\u73b0\u4e0e PuTTY \u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u65b9\u4fbf\u5feb\u6377\u3002 Live Template \u4f7f\u7528\u5feb\u6377\u540d\u79f0\u5feb\u901f\u8865\u5168\u4ee3\u7801\u5757\uff0c\u4ee5\u63d0\u9ad8\u642c\u7816\u6548\u7387\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4ee5\u540e\u53ea\u9700\u8981\u5728 .py \u6587\u4ef6\u4e2d\u6253\u51fa model \u5373\u53ef\u9009\u62e9\u8fd9\u4e2a new model \u7684\u6a21\u677f\uff0c\u9009\u62e9\u540e\u5c06\u81ea\u52a8\u5c06 Template text \u8d34\u5165\u5f53\u524d\u4f4d\u7f6e\u3002 \u5f55\u5236\u5e38\u7528\u547d\u4ee4 \u9891\u7e41\u7684\u5728Terminal\u4e2d\u8f93\u5165`makemigrations\u3001migrate\u3001runserver`\u7b49\u547d\u4ee4\u6548\u7387\u6bd4\u8f83\u4f4e\uff0c\u91c7\u7528\u5f55\u5236\u547d\u4ee4\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4e00\u952e\u5b8c\u6210\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u65b9\u4fbf\u5feb\u6377\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a - Pycharm\u53f3\u4e0a\u89d2\u70b9\u51fb\u8fd0\u884c\u6309\u94ae\u5de6\u4fa7\u7684\u4e0b\u62c9\u6846\uff0c\u9009\u62e9`Edit Configurations`\u3002 ![](https://blog.dreamgotech.com/media/summer_note/20171108-174126-967.png) - \u8fdb\u5165\u5982\u56fe\u754c\u9762\uff1a![](https://blog.dreamgotech.com/media/summer_note/20171108-174139-124.png) * `Name`\uff1a\u8be5\u547d\u4ee4\u7684\u522b\u540d * `Script`:Django\u6839\u76ee\u5f55\u7684manage.py\u6587\u4ef6 * `Script Parameters`\uff1a\u5177\u4f53\u7684\u547d\u4ee4\uff0c\u4e0d\u5e26`python manage.py`\u8fd9\u90e8\u5206\uff0c\u5982`python manage.py makemigrations`\u53ea\u8f93\u5165`makemigrations`\u5373\u53ef\u3002 * `Python interpreter`:\u9879\u76ee\u5bf9\u5e94\u7684python\u73af\u5883\uff0c\u4f7f\u7528\u865a\u62df\u73af\u5883\u65f6\u8bf7\u9009\u62e9\u5230\u5bf9\u5e94\u7684\u865a\u62df\u73af\u5883\u3002 \u8bbe\u7f6e\u5b8c\u4e0a\u8ff0\u9009\u9879\uff0c\u4fdd\u5b58\u5373\u53ef\u3002 \u63d2\u4ef6 - CodeGlance \u4ee3\u7801\u9884\u89c8\u63d2\u4ef6 - JsonParser JSON\u89e3\u6790 - Rainbow Brackets \u9ad8\u4eae\u5339\u914d\u7b26 - Requirements \u7ba1\u7406\u4f9d\u8d56\uff0c\u53ef\u4ee5\u4e00\u952e\u81ea\u52a8\u751f\u6210 - String Manipulation \u5b57\u7b26\u4e32\u5927\u5c0f\u5199\u547d\u540d\u65b9\u5f0f\u8f6c\u6362 - Translation Google\u7ffb\u8bd1 - Grep Console Console\u5173\u952e\u5b57\u8fc7\u6ee4 \u7f16\u7801\u95ee\u9898 - log\u6587\u4ef6\u4e2d\u6587\u4e71\u7801 \u6253\u5f00\u8bbe\u7f6e\uff0c\u641c\u7d22File Encodings->\u4f7f\u7528BG18030\u7f16\u7801\u52a0\u8f7dlog\u6587\u4ef6 \u7248\u6743\u8bbe\u7f6e \u5728\u8bbe\u7f6e\u91cc\u641c\u7d22`File and Code Templates`,\u8bbe\u7f6e\u9ed8\u8ba4\u6a21\u677f\u4e3a\uff1a \"\"\" Created by ${USER} on ${DATE}. \"\"\" \u53ef\u4f7f\u7528\u7684\u53d8\u91cf\u8bf7\u53c2\u89c1[\u6b64\u5904](https://www.jetbrains.com/help/pycharm/file-template-variables.html)\u3002 \u76d7\u5f20\u4ecb\u7ecd\u56fe\uff0c\u51fa\u5904\u89c1\u6c34\u5370\uff1a \u5728pycharm\u4e2d\u4f7f\u7528sftp\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u6587\u4ef6\u4ea4\u4e92\u8bf7\u53c2\u8003 Pycharm\u4e2d\u5229\u7528ssh\u8fdc\u7a0b\u90e8\u7f72 \u3002\u8fdc\u7a0b\u90e8\u7f72\u63a8\u8350\u4f7f\u7528 Fabric\u90e8\u7f72\u3001\u7ef4\u62a4 \u3002 \u663e\u793a\u6216\u9690\u85cf __pychche__ \u6587\u4ef6\u5939 Setting->Editor->File Types->Ignore files and folders \u9ed8\u8ba4\uff1a *$py.class;*.hprof;*.rbc;*.yarb;*~;.DS_Store;.git;.hg;.svn;CVS;_svn;vssver.scc;vssver2.scc;__pycache__;","title":"Pycharm\u8c03\u6559"},{"location":"python/python/pycharm/#_1","text":"- Show Intention Actions \u5feb\u901f\u5bfc\u5165\u3001\u8865\u5168\u51fd\u6570 (alt+z) # \u5df2\u6539\u540d\u4e3a Show Context Actions - Reformat Code \u81ea\u52a8\u6574\u7406\u4ee3\u7801 (ctrl+tab) - Select Line at Caret \u9009\u62e9\u5f53\u524d\u884c ctrl+d - Alt+Shift+\u5411\u4e0a\u7bad\u5934\\\u5411\u4e0b\u7bad\u5934 \u79fb\u52a8\u672c\u884c\u4ee3\u7801 - Alt+\u4e0a\u4e0b\u7bad\u5934 \u79fb\u52a8\u5230\u672c\u6587\u4ef6\u5185\u7684\u4e0a\u4e00\u4e2a\u6216\u8005\u4e0b\u4e00\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u7684\u4f4d\u7f6e - # FIXME Bug\u63cf\u8ff0 - # TODO \u5f85\u505a\u4e8b\u9879 - ctrl+shift+F \u5168\u5c40\u67e5\u627e\u4e00\u4e2a\u53d8\u91cf \u4e00\u5b9a\u8981\u5728\u82f1\u6587\u8f93\u5165\u6cd5\u4e0b\u8c03\u7528\uff0c\u5426\u5219\u65e0\u6cd5\u6389\u51fa\u641c\u7d22\u9875\u9762\u3002 - Full Screen \u5168\u5c4f \u63a8\u8350\u6309\u952e`ctrl+Q` - Comment with Line Comment \u5355\u884c\u6ce8\u91ca\uff08ctrl+\\\uff09 \u63a8\u8350\u6309\u952eCtrl+Shift+C - Comment with Blick Comment \u533a\u5757\u6ce8\u91ca\uff08ctrl+shift+\\) - ctrl+shift+I \u67e5\u770b\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e - ctrl+alt+O Optimize Imports \u81ea\u52a8\u6574\u7406import - ctrl+alt+[] \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u6216\u8005\u4e0b\u4e00\u4e2a\u9879\u76ee\u7684\u7a97\u53e3","title":"\u5e38\u7528\u5feb\u6377\u952e"},{"location":"python/python/pycharm/#terminalssh","text":"\u4e3b\u83dc\u5355 Tools->Start SSH Session ,\u9009\u62e9\u9700\u8981ssh\u8fde\u63a5\u7684\u670d\u52a1\u5668\uff0c\u5373\u53ef\u5b9e\u73b0\u4e0e PuTTY \u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u65b9\u4fbf\u5feb\u6377\u3002","title":"\u5728Terminal\u4e2dssh\u76f4\u8fde\u670d\u52a1\u5668"},{"location":"python/python/pycharm/#live-template","text":"\u4f7f\u7528\u5feb\u6377\u540d\u79f0\u5feb\u901f\u8865\u5168\u4ee3\u7801\u5757\uff0c\u4ee5\u63d0\u9ad8\u642c\u7816\u6548\u7387\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4ee5\u540e\u53ea\u9700\u8981\u5728 .py \u6587\u4ef6\u4e2d\u6253\u51fa model \u5373\u53ef\u9009\u62e9\u8fd9\u4e2a new model \u7684\u6a21\u677f\uff0c\u9009\u62e9\u540e\u5c06\u81ea\u52a8\u5c06 Template text \u8d34\u5165\u5f53\u524d\u4f4d\u7f6e\u3002","title":"Live Template"},{"location":"python/python/pycharm/#_2","text":"\u9891\u7e41\u7684\u5728Terminal\u4e2d\u8f93\u5165`makemigrations\u3001migrate\u3001runserver`\u7b49\u547d\u4ee4\u6548\u7387\u6bd4\u8f83\u4f4e\uff0c\u91c7\u7528\u5f55\u5236\u547d\u4ee4\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4e00\u952e\u5b8c\u6210\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u65b9\u4fbf\u5feb\u6377\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a - Pycharm\u53f3\u4e0a\u89d2\u70b9\u51fb\u8fd0\u884c\u6309\u94ae\u5de6\u4fa7\u7684\u4e0b\u62c9\u6846\uff0c\u9009\u62e9`Edit Configurations`\u3002 ![](https://blog.dreamgotech.com/media/summer_note/20171108-174126-967.png) - \u8fdb\u5165\u5982\u56fe\u754c\u9762\uff1a![](https://blog.dreamgotech.com/media/summer_note/20171108-174139-124.png) * `Name`\uff1a\u8be5\u547d\u4ee4\u7684\u522b\u540d * `Script`:Django\u6839\u76ee\u5f55\u7684manage.py\u6587\u4ef6 * `Script Parameters`\uff1a\u5177\u4f53\u7684\u547d\u4ee4\uff0c\u4e0d\u5e26`python manage.py`\u8fd9\u90e8\u5206\uff0c\u5982`python manage.py makemigrations`\u53ea\u8f93\u5165`makemigrations`\u5373\u53ef\u3002 * `Python interpreter`:\u9879\u76ee\u5bf9\u5e94\u7684python\u73af\u5883\uff0c\u4f7f\u7528\u865a\u62df\u73af\u5883\u65f6\u8bf7\u9009\u62e9\u5230\u5bf9\u5e94\u7684\u865a\u62df\u73af\u5883\u3002 \u8bbe\u7f6e\u5b8c\u4e0a\u8ff0\u9009\u9879\uff0c\u4fdd\u5b58\u5373\u53ef\u3002","title":"\u5f55\u5236\u5e38\u7528\u547d\u4ee4"},{"location":"python/python/pycharm/#_3","text":"- CodeGlance \u4ee3\u7801\u9884\u89c8\u63d2\u4ef6 - JsonParser JSON\u89e3\u6790 - Rainbow Brackets \u9ad8\u4eae\u5339\u914d\u7b26 - Requirements \u7ba1\u7406\u4f9d\u8d56\uff0c\u53ef\u4ee5\u4e00\u952e\u81ea\u52a8\u751f\u6210 - String Manipulation \u5b57\u7b26\u4e32\u5927\u5c0f\u5199\u547d\u540d\u65b9\u5f0f\u8f6c\u6362 - Translation Google\u7ffb\u8bd1 - Grep Console Console\u5173\u952e\u5b57\u8fc7\u6ee4","title":"\u63d2\u4ef6"},{"location":"python/python/pycharm/#_4","text":"- log\u6587\u4ef6\u4e2d\u6587\u4e71\u7801 \u6253\u5f00\u8bbe\u7f6e\uff0c\u641c\u7d22File Encodings->\u4f7f\u7528BG18030\u7f16\u7801\u52a0\u8f7dlog\u6587\u4ef6","title":"\u7f16\u7801\u95ee\u9898"},{"location":"python/python/pycharm/#_5","text":"\u5728\u8bbe\u7f6e\u91cc\u641c\u7d22`File and Code Templates`,\u8bbe\u7f6e\u9ed8\u8ba4\u6a21\u677f\u4e3a\uff1a \"\"\" Created by ${USER} on ${DATE}. \"\"\" \u53ef\u4f7f\u7528\u7684\u53d8\u91cf\u8bf7\u53c2\u89c1[\u6b64\u5904](https://www.jetbrains.com/help/pycharm/file-template-variables.html)\u3002 \u76d7\u5f20\u4ecb\u7ecd\u56fe\uff0c\u51fa\u5904\u89c1\u6c34\u5370\uff1a \u5728pycharm\u4e2d\u4f7f\u7528sftp\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u6587\u4ef6\u4ea4\u4e92\u8bf7\u53c2\u8003 Pycharm\u4e2d\u5229\u7528ssh\u8fdc\u7a0b\u90e8\u7f72 \u3002\u8fdc\u7a0b\u90e8\u7f72\u63a8\u8350\u4f7f\u7528 Fabric\u90e8\u7f72\u3001\u7ef4\u62a4 \u3002","title":"\u7248\u6743\u8bbe\u7f6e"},{"location":"python/python/pycharm/#__pychche__","text":"Setting->Editor->File Types->Ignore files and folders \u9ed8\u8ba4\uff1a *$py.class;*.hprof;*.rbc;*.yarb;*~;.DS_Store;.git;.hg;.svn;CVS;_svn;vssver.scc;vssver2.scc;__pycache__;","title":"\u663e\u793a\u6216\u9690\u85cf__pychche__\u6587\u4ef6\u5939"},{"location":"python/python/python-note/","text":"\u95ed\u5305 \u5b9a\u4e49\uff1a\u5982\u679c\u5728\u4e00\u4e2a\u5185\u90e8\u51fd\u6570\u91cc\uff0c\u5bf9\u5728\u5916\u90e8\u4f5c\u7528\u57df\uff08\u4f46\u4e0d\u5728\u5168\u5c40\u4f5c\u7528\u57df\uff09\u7684\u53d8\u91cf\u8fdb\u884c\u5f15\u7528\uff0c\u90a3\u4e48\u5185\u90e8\u51fd\u6570\u5c31\u88ab\u8ba4\u4e3a\u662f\u95ed\u5305\uff08closure\uff09\u3002 \u793a\u4f8b\u4ee3\u78011\uff1a def addx ( x ): def adder ( y ): return x + y return adder c = addx ( 8 ) print ( c . __name__ , type ( c )) print ( c ( 10 )) print ( c ( 11 )) \u8f93\u51fa\uff1a adder <class 'function'> 18 19 \u9519\u8bef\u793a\u83032\uff1a def foo ( a ): def bar (): a += 1 return a [ 0 ] return bar d = foo ( 1 ) print ( d (), d (), d (), d ()) \u9519\u8bef\u63d0\u793a\uff1a File \"D:/PY_workspace/simple_code/closure.py\" , line 16 , in bar a += 1 UnboundLocalError : local variable 'a' referenced before assignment \u539f\u56e0\uff1a python\u6307\u5b9a\u6240\u6709\u8d4b\u503c\u8bed\u53e5\u5de6\u8fb9\u7684\u53d8\u91cf\u90fd\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u5728\u95ed\u5305\u51fd\u6570bar()\u4e2d\uff0c\u53d8\u91cfa\u88ab\u770b\u505a\u4e86\u5c40\u90e8\u53d8\u91cf\uff0c\u63a5\u4e0b\u6765\u6267\u884cprint\u65f6\uff0c\u7a0b\u5e8f\u8fd0\u884c\u81f3a += 1\u65f6\uff0c\u56e0\u4e3a\u5148\u524d\u5df2\u7ecf\u628aa\u770b\u6210\u4e86\u5c40\u90e8\u53d8\u91cf\uff0c\u73b0\u5728python\u53bbbar\u4e2d\u5bfb\u627e\u8d4b\u503c\u8bed\u53e5\u53f3\u8fb9\u7684a\u7684\u503c\u627e\u4e0d\u5230\u5219\u4f1a\u62a5\u9519\u3002 \u89e3\u51b3\u65b9\u6cd5\u4e3a\u5c06a\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5bb9\u5668\uff0c\u5982\u4e0b\uff1a def foo (): a = [ 1 ] def bar (): a [ 0 ] = a [ 0 ] + 1 return a [ 0 ] return bar d = foo () print ( d (), d (), d (), d ()) \u8f93\u51fa\uff1a 2 3 4 5 \u793a\u4f8b\u4ee3\u78013\uff1a origin = [ 0 , 0 ] # \u5750\u6807\u7cfb\u7edf\u539f\u70b9 legal_x = [ 0 , 50 ] # x\u8f74\u65b9\u5411\u7684\u5408\u6cd5\u5750\u6807 legal_y = [ 0 , 50 ] # y\u8f74\u65b9\u5411\u7684\u5408\u6cd5\u5750\u6807 def create ( pos = origin ): def player ( direction , step ): # \u8fd9\u91cc\u5e94\u8be5\u9996\u5148\u5224\u65ad\u53c2\u6570direction,step\u7684\u5408\u6cd5\u6027\uff0c\u6bd4\u5982direction\u4e0d\u80fd\u659c\u7740\u8d70\uff0cstep\u4e0d\u80fd\u4e3a\u8d1f\u7b49 # \u7136\u540e\u8fd8\u8981\u5bf9\u65b0\u751f\u6210\u7684x\uff0cy\u5750\u6807\u7684\u5408\u6cd5\u6027\u8fdb\u884c\u5224\u65ad\u5904\u7406\uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u60f3\u4ecb\u7ecd\u95ed\u5305\uff0c\u5c31\u4e0d\u8be6\u7ec6\u5199\u4e86\u3002 new_x = pos [ 0 ] + direction [ 0 ] * step new_y = pos [ 1 ] + direction [ 1 ] * step pos [ 0 ] = new_x pos [ 1 ] = new_y # \u6ce8\u610f\uff01\u6b64\u5904\u4e0d\u80fd\u5199\u6210 pos = [new_x, new_y]\uff0c\u539f\u56e0\u5728\u4e0a\u6587\u6709\u8bf4\u8fc7 return pos return player player = create () # \u521b\u5efa\u68cb\u5b50player\uff0c\u8d77\u70b9\u4e3a\u539f\u70b9 print ( player . __name__ ) print ( player ([ 1 , 0 ], 10 )) # \u5411x\u8f74\u6b63\u65b9\u5411\u79fb\u52a810\u6b65 print ( player ([ 0 , 1 ], 20 )) # \u5411y\u8f74\u6b63\u65b9\u5411\u79fb\u52a820\u6b65 print ( player ([ - 1 , 0 ], 10 )) # \u5411x\u8f74\u8d1f\u65b9\u5411\u79fb\u52a810\u6b65 \u8f93\u51fa\uff1a [ 10 , 0 ] [ 10 , 20 ] [ 0 , 20 ] \u95ed\u5305\u7684\u4f5c\u7528\uff1a 1 \u5f53\u95ed\u5305\u6267\u884c\u5b8c\u6210\u540e\uff0c\u4f9d\u65e7\u53ef\u4ee5\u4fdd\u6301\u4f4f\u5f53\u524d\u7684\u8fd0\u884c\u73af\u5883\u3002 2 \u95ed\u5305\u53ef\u4ee5\u66f4\u52a0\u5916\u90e8\u4f5c\u7528\u57df\u7684\u5c40\u90e8\u53d8\u91cf\u6765\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u8fd9\u70b9\u7c7b\u4f3c\u4e8e\u914d\u7f6e\u529f\u80fd\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u4fee\u6539\u5916\u90e8\u7684\u53d8\u91cf\uff0c\u95ed\u5305\u6839\u636e\u8fd9\u4e2a\u53d8\u91cf\u5c55\u73b0\u51fa\u4e0d\u540c\u7684\u529f\u80fd\u3002 Python\u4e2d\u7684\u95ed\u5305 \u4e00\u6b21\u68c0\u6d4b\u591a\u4e2akey\u662f\u5426\u4f4d\u4e8edict\u4e2d if all ( k in request . data for k in ( \"foo\" , \"bar\" )): print ( 'all in request.data' ) \u7236\u7c7b\u5f3a\u5236\u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7684\u65b9\u6cd5 class BaseSerializer ( Field ): def to_internal_value ( self , data ): raise NotImplementedError ( '`to_internal_value()` must be implemented.' ) def to_representation ( self , instance ): raise NotImplementedError ( '`to_representation()` must be implemented.' ) def update ( self , instance , validated_data ): raise NotImplementedError ( '`update()` must be implemented.' ) def create ( self , validated_data ): raise NotImplementedError ( '`create()` must be implemented.' ) \u5148\u5199\u4e00\u4e2a\u4f1a\u62a5 NotImplementedError \u7684\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u8981\u662f\u6ca1\u6709\u91cd\u5199\u8be5\u65b9\u6cd5\uff0c\u4f7f\u7528\u5230\u8be5\u65b9\u6cd5\u5c31\u4f1a\u629b\u51fa\u9519\u8bef\u3002 \u5e73\u884c\u8d4b\u503c \u300a\u6d41\u7545\u7684Python\u300b P64 city , year , pop , chg , area = ( 'Tokyo' , 2003 , 32450 , 0.66 , 8014 ) \u53e6\u5916\u4e00\u4e2a\u5f88\u4f18\u96c5\u7684\u5199\u6cd5\u5f53\u5c5e\u4e0d\u4f7f\u7528\u4e2d\u95f4\u53d8\u91cf\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\uff1a b , a = a , b \u5143\u7ec4\u62c6\u5305 \u5e73\u884c\u8d4b\u503c\u662f\u6700\u597d\u8fa8\u8ba4\u7684\u5143\u7ec4\u62c6\u5305\u5f62\u5f0f\u3002 \u300a\u6d41\u7545\u7684Python\u300b P65 >>> lax_coordinates = ( 33.9425 , - 118.408056 ) >>> latitude , longitude = lax_coordinates # \u5143\u7ec4\u62c6\u5305 \u5d4c\u5957\u5143\u7ec4\u62c6\u5305\uff1a metro_areas = [ ( 'Tokyo' , 'JP' , 36.933 ,( 35.689722 , 139.691667 )), ] for name , cc , pop , ( latitude , longitude ) in metro_areas : print ( name , cc , pop , latitude , longitude ) \u5177\u540d\u5143\u7ec4\uff1a Card = collections . namedtuple ( 'Card' , [ 'rank' , 'suit' ]) \u5207\u7247 \u4ee5\u7528 s[a:b:c]\u7684\u5f62\u5f0f\u5bf9 s \u5728 a \u548c b \u4e4b\u95f4\u4ee5 c \u4e3a\u95f4\u9694\u53d6\u503c\u3002 c \u7684\u503c\u8fd8\u53ef\u4ee5\u4e3a\u8d1f\uff0c\u8d1f\u503c\u610f\u5473\u7740\u53cd\u5411\u53d6\u503c\u3002 seq[start:stop:step] >>> s = 'bicycle' >>> s [:: 3 ] 'bye' >>> s [:: - 1 ] >>> s [:: - 2 ] 'eccb' \u53d8\u91cf\u547d\u540d `_` \u8868\u793a\u5ffd\u7565\u7684\u5143\u7d20\uff0c\u4f46\u5f53\u9879\u76ee\u9700\u8981\u56fd\u9645\u5316\u65f6\uff0c\u63a8\u8350\u4f7f\u7528`ign(ignore)`\u4ee3\u8868\u5ffd\u7565\u7684\u5143\u7d20\uff0c\u56e0\u4e3a`python`\u4e2d\u5e38\u7528 `_` \u8868\u793a\u7ffb\u8bd1\u51fd\u6570\u3002 \u65f6\u95f4\u3001\u65f6\u95f4\u95f4\u9694\u64cd\u4f5c pip install python - dateutil \u83b7\u53d6\u53d8\u957f\u65f6\u95f4\u95f4\u9694 \u5982\u4e0b\u5468\u4e00\uff1a from dateutil.relativedelta import relativedelta from datetime import datetime next_monday = datetime . now () + relativedelta ( weekday = 0 ) pip install mysql-python \u62a5\u9519\uff1a Microsoft Visual C ++ 14.0 is required \u5b89\u88c5C++ Build Tools\u9700\u89816G\u7684\u786c\u76d8\u7a7a\u95f4\uff0c\u653e\u5f03\u3002\u53ef\u884c\u65b9\u6cd5\uff1a easy_install http : // www . voidspace . org . uk / python / pycrypto - 2.6.1 / pycrypto - 2.6.1 . win32 - py2 .7 . exe How do I install PyCrypto on Windows? PIP\u6e90 \u5355\u6b21\u5207\u6362 pip install django -i https://pypi.douban.com/simple \u6c38\u4e45\u5207\u6362 \u5728 C:\\Users\\lenovo \u76ee\u5f55\u4e0b\u65b0\u5efa pip \u6587\u4ef6\u5939\uff08 lenovo \u662f\u4f60\u4e3b\u673a\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u540d\u79f0\uff09\uff0c\u6587\u4ef6\u5939\u5185\u65b0\u5efa\u6587\u4ef6 pip.ini\uff0c\u6587\u4ef6\u5185\u5bb9\uff1a [global] index-url = https://pypi.douban.com/simple \u7ecf\u5178\u7c7b\u3001\u65b0\u5f0f\u7c7b python2 \u9ed8\u8ba4\u4e3a\u7ecf\u5178\u7c7b\uff0c\u53ea\u6709\u663e\u5f0f\u7ee7\u627fobj\u624d\u662f\u65b0\u5f0f\u7c7b\uff0c\u5176\u591a\u7ee7\u627f\u5c5e\u6027\u7684\u641c\u7d22\u987a\u5e8f\u4e3a\uff1a\u5148\u6df1\u5165\u7ee7\u627f\u6811\u5de6\u4fa7\uff0c\u518d\u8fd4\u56de\uff0c\u65e2\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002 python3 \u9ed8\u8ba4\u4e3a\u65b0\u5f0f\u7c7b\uff0c\u591a\u7ee7\u627f\u5c5e\u6027\u7684\u641c\u7d22\u987a\u5e8f\u4e3a\uff1a\u5148\u6c34\u5e73\u641c\u7d22\u518d\u5411\u4e0a\u79fb\u52a8\uff0c\u65e2\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002 \u300c\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u300d\uff08Method Resolution Order\uff0c\u6216MRO\uff09 groupby Doc \u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5728\u4f7f\u7528groupby\u65b9\u6cd5\u53bb\u4e3a\u4e00\u4e2alist\u5206\u7ec4\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u4e0e\u5206\u7ec4\u7528\u7684\u76f8\u540c\u7684key\u5148\u53bb\u4e3alist\u6392\u5e8f\u3002 you are supposed to apply groupby to a list which is already sorted using the same key as groupby itself Python\u7248\uff1a from itertools import groupby queryset = self . filter_queryset ( self . get_queryset ()) . order_by ( 'category' ) data = [] original_data = sorted ( self . get_serializer ( queryset , many = True ) . data , key = lambda x : x [ 'category' ]) for k , g in groupby ( original_data , key = lambda x : x [ 'category' ]): records = list ( g ) data . append ({ 'category' : k , 'records' : records }) Django\u7248\uff1a from itertools import groupby queryset = self . filter_queryset ( self . get_queryset ()) . order_by ( 'category' ) data = [] for k , g in groupby ( self . get_serializer ( queryset , many = True ) . data , key = lambda x : x [ 'category' ]): records = list ( g ) data . append ({ 'category' : k , 'records' : records }) \u8bfb\u53d6\u5e26\u4e2d\u6587\u7684json\u6587\u4ef6\u81f3dict import json import codecs with codecs . open ( 'data.json' , 'r' , 'utf-8' ) as f : data = json . load ( f ) excel\u8bfb\u53d6 \u5b89\u88c5 xlrd pip install xlrd \u8bfb\u53d6\uff1a import xlrd def excel_table_by_name ( file_path , col_name_index = 0 , by_name = u 'Sheet1' ): \"\"\" :param work_book: :param col_name_index: \u8868\u5934\u5217\u540d\u6240\u5728\u884c\u7684\u7d22\u5f15 :param by_name: \u5de5\u4f5c\u533a\u540d\u79f0 :return: Excel\u8868\u683c\u4e2d\u7684\u6570\u636e \"\"\" try : table = xlrd . open_workbook ( file_path ) . sheet_by_name ( by_name ) rows = table . nrows # \u884c\u6570 col_names = table . row_values ( col_name_index ) # \u67d0\u4e00\u884c\u6570\u636e data = [] for row_num in range ( 1 , rows ): row_value = table . row_values ( row_num ) if row_value : app = {} for i in range ( len ( col_names )): app [ col_names [ i ]] = row_value [ i ] data . append ( app ) return data except Exception as e : return None tables = excel_table_by_name ( 'city_code.xlsx' , 0 , '\u5927\u9646\u7701\u5e02\u533a\u4e61\u9547\u5217\u8868' ) if tables : for row in tables : print ( row [ '\u57ce\u5e02\u4ee3\u7801' ], row [ '\u7701' ], row [ '\u5e02' ]) list\u5c5e\u4e8e\u53e6\u4e00\u4e2alist set ( list_one ) . issubset ( list_two ) sort \u6570\u7ec4\u7684sort\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u6570\u7ec4\uff0c\u4ec5\u4f1a\u5bf9\u6e90\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u3002 context [ 'fieldsets' ] . sort ( key = itemgetter ( 'title' )) any\u3001all re\u6b63\u5219 \u5206\u6bb5 import re data = '2018-05-09 10:17:23,966 [INFO]- \"OPTIONS /group/?page_size=0&search=1 HTTP/1.1\" 200 0' m = re . match ( r '^(.*)\\[(.*)]- (.*)$' , data ) print ( m . groups ()) print ( m . group ( 0 )) print ( m . group ( 1 ), m . group ( 2 ), m . group ( 3 )) \u8f93\u51fa\uff1a ('2018-05-09 10:17:23,966 ', 'INFO', '\"OPTIONS /group/?page_size=0&search=1 HTTP/1.1\" 200 0') 2018-05-09 10:17:23,966 [INFO]- \"OPTIONS /group/?page_size=0&search=1 HTTP/1.1\" 200 0 2018-05-09 10:17:23,966 INFO \"OPTIONS /group/?page_size=0&search=1 HTTP/1.1\" 200 0 \u622a\u53d6\u6570\u5b57 import re data = 'ab23cc3dd4' arr = re . split ( r '(\\d+)' , data ) print ( arr ) \u8f93\u51fa\uff1a ['ab', '23', 'cc', '3', 'dd', '4', ''] \u8d2a\u5a6a \uff08. \uff09\u8d2a\u5a6a\u5339\u914d \uff08. ?\uff09\u975e\u8d2a\u5a6a\u5339\u914d Python\u591a\u5c42for\u5faa\u73af\u5d4c\u5957 Python\u591a\u5c42for\u5faa\u73af\u5d4c\u5957\u65f6 \uff0c \u5185\u5c42\u5faa\u73af\u9700\u8981\u8df3\u51fa\u5230\u6700\u5916\u5c42for\u5faa\u73af\u4e2d \uff0c \u4f7f\u7528\u65b9\u6cd5\u662f\u9664\u4e86\u6700\u5916\u5c42for\u5faa\u73af\u5916 \uff0c \u6240\u6709\u7684\u5185\u5c42\u5faa\u73af\u5168\u90e8\u79fb\u52a8\u5230\u51fd\u6570\u4f53\u4e2d \uff0c \u4f7f\u7528return\u65b9\u6cd5\u8df3\u51fa\u5230\u6700\u5916\u5c42for\u5faa\u73af \u3002 def xxx (): for y in ( 'a' , 'b' , 'c' ): for z in ( 'x' , 'y' , 'z' ): if z == 'z' : return else : print ( ' {} {} {} ' . format ( x , y , z )) for x in range ( 1 , 3 ): xxx () 1 a x 1 a y 2 a x 2 a y list list\u65b9\u6cd5\u4e2d\uff0cappend\u662f\u6dfb\u52a0item,extend\u662f\u5c06\u4e00\u4e2alist\u62fc\u63a5\u5230\u5f53\u524dlist\u4e0a\u3002 sorted\u51fd\u6570\u7528\u6cd5 \u53ef\u4ee5\u4e3alist\u6216\u8005queryset\u6392\u5e8f sorted_list = sorted(self.queryset, key=lambda x: x.time()) permission_list = sorted(permission_list, key=lambda x: int(x['content_type'])) # \u8f6c\u6362\u4e3aint\u7c7b\u578b\u8fdb\u884c\u5bf9\u6bd4\u662f\u56e0\u4e3a\u6309\u7167str\u7c7b\u578b\u987a\u5e8f\u4e3a 1 11 12... 2 21... 3 \u4fee\u6539Decimal\u663e\u793a\u7cbe\u5ea6\u4f46\u4e0d\u6539\u53d8\u7c7b\u578b\uff08format\u65b9\u6cd5\u4f1a\u5c06Decimal\u6539\u53d8\u4e3astr\uff09 '{0:.2f}'.format(amount) # \u7c7b\u578b\u6539\u53d8\u4e3astr \u4f46\u662f\u53ef\u4ee5\u8fbe\u5230\u6539\u53d8\u663e\u793a\u683c\u5f0f\u7684\u76ee\u7684 >>> round(14.22222223, 2) 14.22 Python\u4e2d\u4f7f\u7528\u5e38\u91cf constants.py \u6587\u4ef6\uff1a class InExCategory ( object ): PurchaseCourses = 1 BalanceRecharge = 2 ClassHourExpense = 3 AdmissionDeduct = 4 RecommendDeduct = 5 BalanceWithdraw = 6 ReturnClassHour = 7 \u6216\u8005\u76f4\u63a5 PurchaseCourses = 1 BalanceRecharge = 2 ClassHourExpense = 3 AdmissionDeduct = 4 RecommendDeduct = 5 BalanceWithdraw = 6 ReturnClassHour = 7 \u4f7f\u7528\u7c7b\u662f\u4e3a\u4e86\u5f52\u7eb3\u533a\u5206\u5e38\u91cf\u7c7b\u578b \u5143\u7c7b mateclass \u7406\u89e3 StackOverFlow \u4e24\u4e2alist\u53d6\u5dee \u65b9\u6cd51 \uff1a s = set ( temp2 ) temp3 = [ x for x in temp1 if x not in s ] \u65b9\u6cd52 \uff1a list ( set ( temp1 ) - set ( temp2 )) Get difference between two lists \u4ee3\u7801\u4fdd\u62a4 \u4f7f\u7528 __pycache__ \u6587\u4ef6\u5939\u4e0b\u5bf9\u5e94\u7684 pyc \u6587\u4ef6\u91cd\u547d\u540d( views.cpython-35.pyc -> views.pyc )\u540e\u66ff\u4ee3\u539f\u5148\u7684 py \u6587\u4ef6\u5373\u53ef\u3002 python - m py_compile / path / to / \u9700\u8981\u751f\u6210 . pyc\u7684\u811a\u672c . py #\u82e5\u6279\u91cf\u5904\u7406.py\u6587\u4ef6 #\u5219\u66ff\u6362\u4e3a/path/to/{\u9700\u8981\u751f\u6210.pyc\u7684\u811a\u672c1,\u811a\u672c2,...}.py #\u6216\u8005/path/to/ import py_compile py_compile . compile ( r '/path/to/\u9700\u8981\u751f\u6210.pyc\u7684\u811a\u672c.py' ) #\u540c\u6837\u4e5f\u53ef\u4ee5\u662f\u5305\u542b.py\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84 #\u6b64\u5904\u5c3d\u53ef\u80fd\u4f7f\u7528raw\u5b57\u7b26\u4e32\uff0c\u4ece\u800c\u907f\u514d\u8f6c\u4e49\u7684\u9ebb\u70e6\u3002\u6bd4\u5982\uff0c\u8fd9\u91cc\u4e0d\u52a0\u201cr\u201d\u7684\u8bdd\uff0c\u4f60\u5c31\u5f97\u5bf9\u659c\u6760\u8fdb\u884c\u8f6c\u4e49 \u4fee\u6539 migrate \u8bb0\u5f55 delete from tisanems.django_migrations where id = 19 limit 1 mysql \u65b0\u589e unique=True \u9519\u8bef Q:`django.db.utils.OperationalError: (1061, \"Duplicate key name 'storage_allotapply_no_eb237ab5_uniq'\")` A:`mysql> DROP INDEX [index_name] ON [table_name];`\u65e2 use dbname; DROP INDEX storage_allotapply_no_eb237ab5_uniq ON storage_allotapply; # \u8981\u4e00\u6b21DROP\u5b8c\u6240\u6709\u7684 Django database migration error: duplicate key KeyError\u83b7\u53d6\u54ea\u4e2akey\u9519\u8bef try : except KeyError as e : return error_response ( 1 , '\u83b7\u53d6\u53c2\u6570 {} \u5931\u8d25' . format ( e . args [ 0 ])) Glossary \u672f\u8bed\u8868 BDFL Benevolent Dictator For Life \u7684\u7b80\u79f0\uff0c\u610f\u4e3a\u201c\u4ec1\u6148\u7684\u72ec\u88c1\u8005\u201d\u3002 CRUD Create\u3001 Read\u3001 Update\u3001 Delete \u7684\u9996\u5b57\u6bcd\u7f29\u5199\uff0c\u8fd9\u662f\u5b58\u50a8\u8bb0\u5f55\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u56db\u79cd\u57fa \u672c\u64cd\u4f5c\u3002 DRY Don't Repeat Yourself\uff08\u4e0d\u8981\u81ea\u6211\u91cd\u590d\uff09\u7684\u7f29\u5199\uff0c\u4e00\u79cd\u8f6f\u4ef6\u5de5\u7a0b\u539f\u5219\u3002 dunder \u9996\u5c3e\u6709\u4e24\u6761\u4e0b\u5212\u7ebf\u7684\u7279\u6b8a\u65b9\u6cd5\u548c\u5c5e\u6027\u7684\u7b80\u6d01\u8bfb\u6cd5\uff08\u5373\u628a len \u8bfb\u6210\u201cdunder len\u201d\uff09\u3002 EAFP \u201cit's easier to ask forgiveness than permission\u201d\uff08\u53d6\u5f97\u539f\u8c05\u6bd4\u83b7\u5f97\u8bb8\u53ef\u5bb9\u6613\uff09\u7684\u9996\u5b57\u6bcd\u7f29 \u5199\u3002\u4eba\u4eec\u8ba4\u4e3a\u8fd9\u53e5\u8bdd\u662f\u8ba1\u7b97\u673a\u5148\u9a71 Grace Hopper \u8bf4\u7684\uff0c Python\u7a0b\u5e8f\u5458\u4f7f\u7528\u8fd9\u4e2a\u7f29\u5199\u6307\u4ee3 \u4e00\u79cd\u52a8\u6001\u7f16\u7a0b\u65b9\u5f0f\uff0c\u4f8b\u5982\u8bbf\u95ee\u5c5e\u6027\u524d\u4e0d\u6d4b\u8bd5\u6709\u6ca1\u6709\u5c5e\u6027\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u6355\u83b7\u5f02\u5e38\u3002 hasattr \u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u662f\u8fd9\u6837\u63cf\u8ff0\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u7684\uff1a \u201c\u8c03\u7528 getattr(object, name)\uff0c\u7136\u540e\u6355\u83b7 AttributeError \u5f02\u5e38\u3002 LBYL \u4e09\u601d\u800c\u540e\u884c\uff08look before you leap\uff09\u3002\u8fd9\u79cd\u7f16\u7a0b\u98ce\u683c\u5728\u8c03\u7528\u51fd\u6570\u6216\u67e5\u627e\u5c5e\u6027\u6216\u952e \u4e4b\u524d\u663e\u5f0f\u6d4b\u8bd5\u524d\u63d0\u6761\u4ef6\u3002\u4e0e EAFP \u98ce\u683c\u76f8\u53cd\uff0c\u8fd9\u79cd\u98ce\u683c\u7684\u7279\u70b9\u662f\u4ee3\u7801\u4e2d\u6709\u5f88\u591a if \u8bed \u53e5\u3002\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\uff0c LBYL\u98ce\u683c\u53ef\u80fd\u4f1a\u5728\u201c\u68c0\u67e5\u201d\u548c\u201c\u884c\u4e8b\u201d\u7684\u7a7a\u5f53\u5f15\u5165\u6761\u4ef6\u7ade\u4e89\u3002\u4f8b \u5982\uff0c\u5bf9 if key in mapping: return mapping[key] \u8fd9\u6bb5\u4ee3\u7801\u6765\u8bf4\uff0c\u5982\u679c\u5728\u6d4b\u8bd5 \u4e4b\u540e\uff0c\u4f46\u5728\u67e5\u627e\u4e4b\u524d\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4ece\u6620\u5c04\u4e2d\u5220\u9664\u4e86\u90a3\u4e2a\u952e\uff0c\u90a3\u4e48\u8fd9\u6bb5\u4ee3\u7801\u5c31\u4f1a\u5931\u8d25\u3002 \u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u9501\u6216\u8005 EAFP \u98ce\u683c\u89e3\u51b3\u3002 ORM Object-Relational Mapper\uff08\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff09\u7684\u7f29\u5199\uff0c\u901a\u8fc7\u8fd9\u79cd API \u53ef\u4ee5\u4f7f\u7528 Python \u7c7b\u548c\u5bf9\u8c61\u8bbf\u95ee\u6570\u636e\u5e93\u4e2d\u7684\u8868\u548c\u8bb0\u5f55\uff0c\u800c\u4e14\u8c03\u7528\u65b9\u6cd5\u53ef\u4ee5\u6267\u884c\u6570\u636e\u5e93\u64cd\u4f5c\u3002 SQLAlchemy\u662f \u6d41\u884c\u7684\u72ec\u7acb Python ORM\uff0c Django \u548c Web2py\u81ea\u5e26\u4e86 ORM\u3002 PyPI Python \u5305\u7d22\u5f15\uff08https://pypi.python.org/\uff09\uff0c\u91cc\u9762\u6709\u8d85\u8fc7 60 000 \u4e2a\u5305\u53ef\u7528\u3002\u4e5f\u53eb\u5976\u916a\u5e97 \uff08\u53c2\u89c1\u5976\u916a\u5e97\u8bcd\u6761\uff09\u3002\u4e3a\u4e86\u9632\u6b62\u4e0e PyPy \u6df7\u6dc6\uff0c PyPI \u5e94\u8be5\u8bfb\u4f5c\u201cpie-P-eye\u201d\u3002 YAGNI You Ain't Gonna Need It\uff08\u4f60\u4e0d\u9700\u8981\u8fd9\u4e2a\uff09\u7684\u9996\u5b57\u6bcd\u7f29\u5199\uff0c\u8fd9\u4e2a\u53e3\u53f7\u7684\u610f\u601d\u662f\uff0c\u6839\u636e\u5bf9 \u672a\u6765\u9700\u6c42\u7684\u9884\u6d4b\uff0c\u4e0d\u8981\u5b9e\u73b0\u975e\u7acb\u5373\u9700\u8981\u7684\u529f\u80fd\u3002 monkey patching \u7334\u5b50\u8865\u4e01 \u5728\u8fd0\u884c\u65f6\u52a8\u6001\u4fee\u6539\u6a21\u5757\u3001\u7c7b\u6216\u51fd\u6570\uff0c\u901a\u5e38\u662f\u6dfb\u52a0\u529f\u80fd\u6216\u4fee\u6b63\u7f3a\u9677\u3002\u7334\u5b50\u8865\u4e01\u5728\u5185\u5b58\u4e2d \u53d1\u6325\u4f5c\u7528\uff0c\u4e0d\u4f1a\u4fee\u6539\u6e90\u7801\uff0c\u56e0\u6b64\u53ea\u5bf9\u5f53\u524d\u8fd0\u884c\u7684\u7a0b\u5e8f\u5b9e\u4f8b\u6709\u6548\u3002\u56e0\u4e3a\u7334\u5b50\u8865\u4e01\u7834\u574f\u4e86\u5c01 \u88c5\uff0c\u800c\u4e14\u5bb9\u6613\u5bfc\u81f4\u7a0b\u5e8f\u4e0e\u8865\u4e01\u4ee3\u7801\u7684\u5b9e\u73b0\u7ec6\u8282\u7d27\u5bc6\u8026\u5408\uff0c\u6240\u4ee5\u88ab\u89c6\u4e3a\u4e34\u65f6\u7684\u53d8\u901a\u65b9\u6848\uff0c\u4e0d \u662f\u96c6\u6210\u4ee3\u7801\u7684\u63a8\u8350\u65b9\u5f0f mixin method \u6df7\u5165\u65b9\u6cd5 \u62bd\u8c61\u57fa\u7c7b\u6216\u6df7\u5165\u7c7b\u4e2d\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u3002 mixin class \u6df7\u5165\u7c7b \u7528\u4e8e\u968f\u7740\u591a\u91cd\u7ee7\u627f\u7c7b\u6811\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u4e00\u8d77\u6269\u5c55\u7684\u7c7b\u3002\u6df7\u5165\u7c7b\u7edd\u4e0d\u80fd\u5b9e\u4f8b\u5316\uff0c\u5b83\u7684 \u5177\u4f53\u5b50\u7c7b\u4e5f\u5e94\u8be5\u662f\u5176\u4ed6\u975e\u6df7\u5165\u7c7b\u7684\u5b50\u7c7b\u3002 duck typing \u9e2d\u5b50\u7c7b\u578b \u591a\u6001\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u5728\u8fd9\u79cd\u5f62\u5f0f\u4e2d\uff0c\u4e0d\u7ba1\u5bf9\u8c61\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\uff0c\u4e5f\u4e0d\u7ba1\u58f0\u660e\u7684\u5177\u4f53\u63a5\u53e3\u662f\u4ec0 \u4e48\uff0c\u53ea\u8981\u5bf9\u8c61\u5b9e\u73b0\u4e86\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u51fd\u6570\u5c31\u53ef\u4ee5\u5728\u5bf9\u8c61\u4e0a\u6267\u884c\u64cd\u4f5c\u3002 decorator \u88c5\u9970\u5668 \u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61 A\uff0c\u8fd4\u56de\u53e6\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61 B\uff0c\u5728\u53ef\u8c03\u7528\u7684\u5bf9\u8c61 C \u7684\u5b9a\u4e49\u4f53\u4e4b\u524d \u4f7f\u7528\u53e5\u6cd5 @A \u8c03\u7528\u3002 Python \u89e3\u91ca\u5668\u8bfb\u53d6\u8fd9\u6837\u7684\u4ee3\u7801\u65f6\uff0c\u4f1a\u8c03\u7528 A(C)\uff0c\u628a\u8fd4\u56de\u7684 B \u7ed1\u5b9a\u7ed9\u4e4b \u524d\u8d4b\u4e88 C \u7684\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u628a C \u7684\u5b9a\u4e49\u4f53\u6362\u6210 B\u3002\u5982\u679c\u76ee\u6807\u53ef\u8c03\u7528\u5bf9\u8c61 C \u662f\u51fd\u6570\uff0c\u90a3\u4e48 A \u662f \u51fd\u6570\u88c5\u9970\u5668\uff1b\u5982\u679c C \u662f\u7c7b\uff0c\u90a3\u4e48 A \u662f\u7c7b\u88c5\u9970\u5668\u3002 IDLE An Integrated Development Environment for Python. IDLE is a basic editor and interpreter environment which ships with the standard distribution of Python. Zen of Python Listing of Python design principles and philo sophies that are helpful in understanding and using the language. The listing can be found by typing \u201cimport this\u201d at the interactive prompt. The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!","title":"Python\u7b14\u8bb0"},{"location":"python/python/python-note/#_1","text":"\u5b9a\u4e49\uff1a\u5982\u679c\u5728\u4e00\u4e2a\u5185\u90e8\u51fd\u6570\u91cc\uff0c\u5bf9\u5728\u5916\u90e8\u4f5c\u7528\u57df\uff08\u4f46\u4e0d\u5728\u5168\u5c40\u4f5c\u7528\u57df\uff09\u7684\u53d8\u91cf\u8fdb\u884c\u5f15\u7528\uff0c\u90a3\u4e48\u5185\u90e8\u51fd\u6570\u5c31\u88ab\u8ba4\u4e3a\u662f\u95ed\u5305\uff08closure\uff09\u3002 \u793a\u4f8b\u4ee3\u78011\uff1a def addx ( x ): def adder ( y ): return x + y return adder c = addx ( 8 ) print ( c . __name__ , type ( c )) print ( c ( 10 )) print ( c ( 11 )) \u8f93\u51fa\uff1a adder <class 'function'> 18 19 \u9519\u8bef\u793a\u83032\uff1a def foo ( a ): def bar (): a += 1 return a [ 0 ] return bar d = foo ( 1 ) print ( d (), d (), d (), d ()) \u9519\u8bef\u63d0\u793a\uff1a File \"D:/PY_workspace/simple_code/closure.py\" , line 16 , in bar a += 1 UnboundLocalError : local variable 'a' referenced before assignment \u539f\u56e0\uff1a python\u6307\u5b9a\u6240\u6709\u8d4b\u503c\u8bed\u53e5\u5de6\u8fb9\u7684\u53d8\u91cf\u90fd\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u5728\u95ed\u5305\u51fd\u6570bar()\u4e2d\uff0c\u53d8\u91cfa\u88ab\u770b\u505a\u4e86\u5c40\u90e8\u53d8\u91cf\uff0c\u63a5\u4e0b\u6765\u6267\u884cprint\u65f6\uff0c\u7a0b\u5e8f\u8fd0\u884c\u81f3a += 1\u65f6\uff0c\u56e0\u4e3a\u5148\u524d\u5df2\u7ecf\u628aa\u770b\u6210\u4e86\u5c40\u90e8\u53d8\u91cf\uff0c\u73b0\u5728python\u53bbbar\u4e2d\u5bfb\u627e\u8d4b\u503c\u8bed\u53e5\u53f3\u8fb9\u7684a\u7684\u503c\u627e\u4e0d\u5230\u5219\u4f1a\u62a5\u9519\u3002 \u89e3\u51b3\u65b9\u6cd5\u4e3a\u5c06a\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5bb9\u5668\uff0c\u5982\u4e0b\uff1a def foo (): a = [ 1 ] def bar (): a [ 0 ] = a [ 0 ] + 1 return a [ 0 ] return bar d = foo () print ( d (), d (), d (), d ()) \u8f93\u51fa\uff1a 2 3 4 5 \u793a\u4f8b\u4ee3\u78013\uff1a origin = [ 0 , 0 ] # \u5750\u6807\u7cfb\u7edf\u539f\u70b9 legal_x = [ 0 , 50 ] # x\u8f74\u65b9\u5411\u7684\u5408\u6cd5\u5750\u6807 legal_y = [ 0 , 50 ] # y\u8f74\u65b9\u5411\u7684\u5408\u6cd5\u5750\u6807 def create ( pos = origin ): def player ( direction , step ): # \u8fd9\u91cc\u5e94\u8be5\u9996\u5148\u5224\u65ad\u53c2\u6570direction,step\u7684\u5408\u6cd5\u6027\uff0c\u6bd4\u5982direction\u4e0d\u80fd\u659c\u7740\u8d70\uff0cstep\u4e0d\u80fd\u4e3a\u8d1f\u7b49 # \u7136\u540e\u8fd8\u8981\u5bf9\u65b0\u751f\u6210\u7684x\uff0cy\u5750\u6807\u7684\u5408\u6cd5\u6027\u8fdb\u884c\u5224\u65ad\u5904\u7406\uff0c\u8fd9\u91cc\u4e3b\u8981\u662f\u60f3\u4ecb\u7ecd\u95ed\u5305\uff0c\u5c31\u4e0d\u8be6\u7ec6\u5199\u4e86\u3002 new_x = pos [ 0 ] + direction [ 0 ] * step new_y = pos [ 1 ] + direction [ 1 ] * step pos [ 0 ] = new_x pos [ 1 ] = new_y # \u6ce8\u610f\uff01\u6b64\u5904\u4e0d\u80fd\u5199\u6210 pos = [new_x, new_y]\uff0c\u539f\u56e0\u5728\u4e0a\u6587\u6709\u8bf4\u8fc7 return pos return player player = create () # \u521b\u5efa\u68cb\u5b50player\uff0c\u8d77\u70b9\u4e3a\u539f\u70b9 print ( player . __name__ ) print ( player ([ 1 , 0 ], 10 )) # \u5411x\u8f74\u6b63\u65b9\u5411\u79fb\u52a810\u6b65 print ( player ([ 0 , 1 ], 20 )) # \u5411y\u8f74\u6b63\u65b9\u5411\u79fb\u52a820\u6b65 print ( player ([ - 1 , 0 ], 10 )) # \u5411x\u8f74\u8d1f\u65b9\u5411\u79fb\u52a810\u6b65 \u8f93\u51fa\uff1a [ 10 , 0 ] [ 10 , 20 ] [ 0 , 20 ] \u95ed\u5305\u7684\u4f5c\u7528\uff1a 1 \u5f53\u95ed\u5305\u6267\u884c\u5b8c\u6210\u540e\uff0c\u4f9d\u65e7\u53ef\u4ee5\u4fdd\u6301\u4f4f\u5f53\u524d\u7684\u8fd0\u884c\u73af\u5883\u3002 2 \u95ed\u5305\u53ef\u4ee5\u66f4\u52a0\u5916\u90e8\u4f5c\u7528\u57df\u7684\u5c40\u90e8\u53d8\u91cf\u6765\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u8fd9\u70b9\u7c7b\u4f3c\u4e8e\u914d\u7f6e\u529f\u80fd\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u4fee\u6539\u5916\u90e8\u7684\u53d8\u91cf\uff0c\u95ed\u5305\u6839\u636e\u8fd9\u4e2a\u53d8\u91cf\u5c55\u73b0\u51fa\u4e0d\u540c\u7684\u529f\u80fd\u3002 Python\u4e2d\u7684\u95ed\u5305","title":"\u95ed\u5305"},{"location":"python/python/python-note/#keydict","text":"if all ( k in request . data for k in ( \"foo\" , \"bar\" )): print ( 'all in request.data' )","title":"\u4e00\u6b21\u68c0\u6d4b\u591a\u4e2akey\u662f\u5426\u4f4d\u4e8edict\u4e2d"},{"location":"python/python/python-note/#_2","text":"class BaseSerializer ( Field ): def to_internal_value ( self , data ): raise NotImplementedError ( '`to_internal_value()` must be implemented.' ) def to_representation ( self , instance ): raise NotImplementedError ( '`to_representation()` must be implemented.' ) def update ( self , instance , validated_data ): raise NotImplementedError ( '`update()` must be implemented.' ) def create ( self , validated_data ): raise NotImplementedError ( '`create()` must be implemented.' ) \u5148\u5199\u4e00\u4e2a\u4f1a\u62a5 NotImplementedError \u7684\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u8981\u662f\u6ca1\u6709\u91cd\u5199\u8be5\u65b9\u6cd5\uff0c\u4f7f\u7528\u5230\u8be5\u65b9\u6cd5\u5c31\u4f1a\u629b\u51fa\u9519\u8bef\u3002","title":"\u7236\u7c7b\u5f3a\u5236\u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7684\u65b9\u6cd5"},{"location":"python/python/python-note/#_3","text":"\u300a\u6d41\u7545\u7684Python\u300b P64 city , year , pop , chg , area = ( 'Tokyo' , 2003 , 32450 , 0.66 , 8014 ) \u53e6\u5916\u4e00\u4e2a\u5f88\u4f18\u96c5\u7684\u5199\u6cd5\u5f53\u5c5e\u4e0d\u4f7f\u7528\u4e2d\u95f4\u53d8\u91cf\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\uff1a b , a = a , b","title":"\u5e73\u884c\u8d4b\u503c"},{"location":"python/python/python-note/#_4","text":"\u5e73\u884c\u8d4b\u503c\u662f\u6700\u597d\u8fa8\u8ba4\u7684\u5143\u7ec4\u62c6\u5305\u5f62\u5f0f\u3002 \u300a\u6d41\u7545\u7684Python\u300b P65 >>> lax_coordinates = ( 33.9425 , - 118.408056 ) >>> latitude , longitude = lax_coordinates # \u5143\u7ec4\u62c6\u5305 \u5d4c\u5957\u5143\u7ec4\u62c6\u5305\uff1a metro_areas = [ ( 'Tokyo' , 'JP' , 36.933 ,( 35.689722 , 139.691667 )), ] for name , cc , pop , ( latitude , longitude ) in metro_areas : print ( name , cc , pop , latitude , longitude ) \u5177\u540d\u5143\u7ec4\uff1a Card = collections . namedtuple ( 'Card' , [ 'rank' , 'suit' ])","title":"\u5143\u7ec4\u62c6\u5305"},{"location":"python/python/python-note/#_5","text":"\u4ee5\u7528 s[a:b:c]\u7684\u5f62\u5f0f\u5bf9 s \u5728 a \u548c b \u4e4b\u95f4\u4ee5 c \u4e3a\u95f4\u9694\u53d6\u503c\u3002 c \u7684\u503c\u8fd8\u53ef\u4ee5\u4e3a\u8d1f\uff0c\u8d1f\u503c\u610f\u5473\u7740\u53cd\u5411\u53d6\u503c\u3002 seq[start:stop:step] >>> s = 'bicycle' >>> s [:: 3 ] 'bye' >>> s [:: - 1 ] >>> s [:: - 2 ] 'eccb'","title":"\u5207\u7247"},{"location":"python/python/python-note/#_6","text":"`_` \u8868\u793a\u5ffd\u7565\u7684\u5143\u7d20\uff0c\u4f46\u5f53\u9879\u76ee\u9700\u8981\u56fd\u9645\u5316\u65f6\uff0c\u63a8\u8350\u4f7f\u7528`ign(ignore)`\u4ee3\u8868\u5ffd\u7565\u7684\u5143\u7d20\uff0c\u56e0\u4e3a`python`\u4e2d\u5e38\u7528 `_` \u8868\u793a\u7ffb\u8bd1\u51fd\u6570\u3002","title":"\u53d8\u91cf\u547d\u540d"},{"location":"python/python/python-note/#_7","text":"pip install python - dateutil \u83b7\u53d6\u53d8\u957f\u65f6\u95f4\u95f4\u9694 \u5982\u4e0b\u5468\u4e00\uff1a from dateutil.relativedelta import relativedelta from datetime import datetime next_monday = datetime . now () + relativedelta ( weekday = 0 )","title":"\u65f6\u95f4\u3001\u65f6\u95f4\u95f4\u9694\u64cd\u4f5c"},{"location":"python/python/python-note/#pip-install-mysql-python","text":"\u62a5\u9519\uff1a Microsoft Visual C ++ 14.0 is required \u5b89\u88c5C++ Build Tools\u9700\u89816G\u7684\u786c\u76d8\u7a7a\u95f4\uff0c\u653e\u5f03\u3002\u53ef\u884c\u65b9\u6cd5\uff1a easy_install http : // www . voidspace . org . uk / python / pycrypto - 2.6.1 / pycrypto - 2.6.1 . win32 - py2 .7 . exe How do I install PyCrypto on Windows?","title":"pip install mysql-python"},{"location":"python/python/python-note/#pip","text":"\u5355\u6b21\u5207\u6362 pip install django -i https://pypi.douban.com/simple \u6c38\u4e45\u5207\u6362 \u5728 C:\\Users\\lenovo \u76ee\u5f55\u4e0b\u65b0\u5efa pip \u6587\u4ef6\u5939\uff08 lenovo \u662f\u4f60\u4e3b\u673a\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u540d\u79f0\uff09\uff0c\u6587\u4ef6\u5939\u5185\u65b0\u5efa\u6587\u4ef6 pip.ini\uff0c\u6587\u4ef6\u5185\u5bb9\uff1a [global] index-url = https://pypi.douban.com/simple","title":"PIP\u6e90"},{"location":"python/python/python-note/#_8","text":"python2 \u9ed8\u8ba4\u4e3a\u7ecf\u5178\u7c7b\uff0c\u53ea\u6709\u663e\u5f0f\u7ee7\u627fobj\u624d\u662f\u65b0\u5f0f\u7c7b\uff0c\u5176\u591a\u7ee7\u627f\u5c5e\u6027\u7684\u641c\u7d22\u987a\u5e8f\u4e3a\uff1a\u5148\u6df1\u5165\u7ee7\u627f\u6811\u5de6\u4fa7\uff0c\u518d\u8fd4\u56de\uff0c\u65e2\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002 python3 \u9ed8\u8ba4\u4e3a\u65b0\u5f0f\u7c7b\uff0c\u591a\u7ee7\u627f\u5c5e\u6027\u7684\u641c\u7d22\u987a\u5e8f\u4e3a\uff1a\u5148\u6c34\u5e73\u641c\u7d22\u518d\u5411\u4e0a\u79fb\u52a8\uff0c\u65e2\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002 \u300c\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u300d\uff08Method Resolution Order\uff0c\u6216MRO\uff09","title":"\u7ecf\u5178\u7c7b\u3001\u65b0\u5f0f\u7c7b"},{"location":"python/python/python-note/#groupby","text":"Doc \u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5728\u4f7f\u7528groupby\u65b9\u6cd5\u53bb\u4e3a\u4e00\u4e2alist\u5206\u7ec4\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u4e0e\u5206\u7ec4\u7528\u7684\u76f8\u540c\u7684key\u5148\u53bb\u4e3alist\u6392\u5e8f\u3002 you are supposed to apply groupby to a list which is already sorted using the same key as groupby itself Python\u7248\uff1a from itertools import groupby queryset = self . filter_queryset ( self . get_queryset ()) . order_by ( 'category' ) data = [] original_data = sorted ( self . get_serializer ( queryset , many = True ) . data , key = lambda x : x [ 'category' ]) for k , g in groupby ( original_data , key = lambda x : x [ 'category' ]): records = list ( g ) data . append ({ 'category' : k , 'records' : records }) Django\u7248\uff1a from itertools import groupby queryset = self . filter_queryset ( self . get_queryset ()) . order_by ( 'category' ) data = [] for k , g in groupby ( self . get_serializer ( queryset , many = True ) . data , key = lambda x : x [ 'category' ]): records = list ( g ) data . append ({ 'category' : k , 'records' : records })","title":"groupby"},{"location":"python/python/python-note/#jsondict","text":"import json import codecs with codecs . open ( 'data.json' , 'r' , 'utf-8' ) as f : data = json . load ( f )","title":"\u8bfb\u53d6\u5e26\u4e2d\u6587\u7684json\u6587\u4ef6\u81f3dict"},{"location":"python/python/python-note/#excel","text":"\u5b89\u88c5 xlrd pip install xlrd \u8bfb\u53d6\uff1a import xlrd def excel_table_by_name ( file_path , col_name_index = 0 , by_name = u 'Sheet1' ): \"\"\" :param work_book: :param col_name_index: \u8868\u5934\u5217\u540d\u6240\u5728\u884c\u7684\u7d22\u5f15 :param by_name: \u5de5\u4f5c\u533a\u540d\u79f0 :return: Excel\u8868\u683c\u4e2d\u7684\u6570\u636e \"\"\" try : table = xlrd . open_workbook ( file_path ) . sheet_by_name ( by_name ) rows = table . nrows # \u884c\u6570 col_names = table . row_values ( col_name_index ) # \u67d0\u4e00\u884c\u6570\u636e data = [] for row_num in range ( 1 , rows ): row_value = table . row_values ( row_num ) if row_value : app = {} for i in range ( len ( col_names )): app [ col_names [ i ]] = row_value [ i ] data . append ( app ) return data except Exception as e : return None tables = excel_table_by_name ( 'city_code.xlsx' , 0 , '\u5927\u9646\u7701\u5e02\u533a\u4e61\u9547\u5217\u8868' ) if tables : for row in tables : print ( row [ '\u57ce\u5e02\u4ee3\u7801' ], row [ '\u7701' ], row [ '\u5e02' ])","title":"excel\u8bfb\u53d6"},{"location":"python/python/python-note/#listlist","text":"set ( list_one ) . issubset ( list_two )","title":"list\u5c5e\u4e8e\u53e6\u4e00\u4e2alist"},{"location":"python/python/python-note/#sort","text":"\u6570\u7ec4\u7684sort\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u6570\u7ec4\uff0c\u4ec5\u4f1a\u5bf9\u6e90\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u3002 context [ 'fieldsets' ] . sort ( key = itemgetter ( 'title' ))","title":"sort"},{"location":"python/python/python-note/#anyall","text":"","title":"any\u3001all"},{"location":"python/python/python-note/#re","text":"","title":"re\u6b63\u5219"},{"location":"python/python/python-note/#_9","text":"import re data = '2018-05-09 10:17:23,966 [INFO]- \"OPTIONS /group/?page_size=0&search=1 HTTP/1.1\" 200 0' m = re . match ( r '^(.*)\\[(.*)]- (.*)$' , data ) print ( m . groups ()) print ( m . group ( 0 )) print ( m . group ( 1 ), m . group ( 2 ), m . group ( 3 )) \u8f93\u51fa\uff1a ('2018-05-09 10:17:23,966 ', 'INFO', '\"OPTIONS /group/?page_size=0&search=1 HTTP/1.1\" 200 0') 2018-05-09 10:17:23,966 [INFO]- \"OPTIONS /group/?page_size=0&search=1 HTTP/1.1\" 200 0 2018-05-09 10:17:23,966 INFO \"OPTIONS /group/?page_size=0&search=1 HTTP/1.1\" 200 0","title":"\u5206\u6bb5"},{"location":"python/python/python-note/#_10","text":"import re data = 'ab23cc3dd4' arr = re . split ( r '(\\d+)' , data ) print ( arr ) \u8f93\u51fa\uff1a ['ab', '23', 'cc', '3', 'dd', '4', ''] \u8d2a\u5a6a","title":"\u622a\u53d6\u6570\u5b57"},{"location":"python/python/python-note/#_11","text":"","title":"\uff08.\uff09\u8d2a\u5a6a\u5339\u914d \uff08.?\uff09\u975e\u8d2a\u5a6a\u5339\u914d"},{"location":"python/python/python-note/#pythonfor","text":"Python\u591a\u5c42for\u5faa\u73af\u5d4c\u5957\u65f6 \uff0c \u5185\u5c42\u5faa\u73af\u9700\u8981\u8df3\u51fa\u5230\u6700\u5916\u5c42for\u5faa\u73af\u4e2d \uff0c \u4f7f\u7528\u65b9\u6cd5\u662f\u9664\u4e86\u6700\u5916\u5c42for\u5faa\u73af\u5916 \uff0c \u6240\u6709\u7684\u5185\u5c42\u5faa\u73af\u5168\u90e8\u79fb\u52a8\u5230\u51fd\u6570\u4f53\u4e2d \uff0c \u4f7f\u7528return\u65b9\u6cd5\u8df3\u51fa\u5230\u6700\u5916\u5c42for\u5faa\u73af \u3002 def xxx (): for y in ( 'a' , 'b' , 'c' ): for z in ( 'x' , 'y' , 'z' ): if z == 'z' : return else : print ( ' {} {} {} ' . format ( x , y , z )) for x in range ( 1 , 3 ): xxx () 1 a x 1 a y 2 a x 2 a y","title":"Python\u591a\u5c42for\u5faa\u73af\u5d4c\u5957"},{"location":"python/python/python-note/#list","text":"list\u65b9\u6cd5\u4e2d\uff0cappend\u662f\u6dfb\u52a0item,extend\u662f\u5c06\u4e00\u4e2alist\u62fc\u63a5\u5230\u5f53\u524dlist\u4e0a\u3002","title":"list"},{"location":"python/python/python-note/#sorted","text":"\u53ef\u4ee5\u4e3alist\u6216\u8005queryset\u6392\u5e8f sorted_list = sorted(self.queryset, key=lambda x: x.time()) permission_list = sorted(permission_list, key=lambda x: int(x['content_type'])) # \u8f6c\u6362\u4e3aint\u7c7b\u578b\u8fdb\u884c\u5bf9\u6bd4\u662f\u56e0\u4e3a\u6309\u7167str\u7c7b\u578b\u987a\u5e8f\u4e3a 1 11 12... 2 21... 3","title":"sorted\u51fd\u6570\u7528\u6cd5"},{"location":"python/python/python-note/#decimalformatdecimalstr","text":"'{0:.2f}'.format(amount) # \u7c7b\u578b\u6539\u53d8\u4e3astr \u4f46\u662f\u53ef\u4ee5\u8fbe\u5230\u6539\u53d8\u663e\u793a\u683c\u5f0f\u7684\u76ee\u7684 >>> round(14.22222223, 2) 14.22","title":"\u4fee\u6539Decimal\u663e\u793a\u7cbe\u5ea6\u4f46\u4e0d\u6539\u53d8\u7c7b\u578b\uff08format\u65b9\u6cd5\u4f1a\u5c06Decimal\u6539\u53d8\u4e3astr\uff09"},{"location":"python/python/python-note/#python","text":"constants.py \u6587\u4ef6\uff1a class InExCategory ( object ): PurchaseCourses = 1 BalanceRecharge = 2 ClassHourExpense = 3 AdmissionDeduct = 4 RecommendDeduct = 5 BalanceWithdraw = 6 ReturnClassHour = 7 \u6216\u8005\u76f4\u63a5 PurchaseCourses = 1 BalanceRecharge = 2 ClassHourExpense = 3 AdmissionDeduct = 4 RecommendDeduct = 5 BalanceWithdraw = 6 ReturnClassHour = 7 \u4f7f\u7528\u7c7b\u662f\u4e3a\u4e86\u5f52\u7eb3\u533a\u5206\u5e38\u91cf\u7c7b\u578b","title":"Python\u4e2d\u4f7f\u7528\u5e38\u91cf"},{"location":"python/python/python-note/#mateclass","text":"StackOverFlow","title":"\u5143\u7c7bmateclass\u7406\u89e3"},{"location":"python/python/python-note/#list_1","text":"\u65b9\u6cd51 \uff1a s = set ( temp2 ) temp3 = [ x for x in temp1 if x not in s ] \u65b9\u6cd52 \uff1a list ( set ( temp1 ) - set ( temp2 )) Get difference between two lists","title":"\u4e24\u4e2alist\u53d6\u5dee"},{"location":"python/python/python-note/#_12","text":"\u4f7f\u7528 __pycache__ \u6587\u4ef6\u5939\u4e0b\u5bf9\u5e94\u7684 pyc \u6587\u4ef6\u91cd\u547d\u540d( views.cpython-35.pyc -> views.pyc )\u540e\u66ff\u4ee3\u539f\u5148\u7684 py \u6587\u4ef6\u5373\u53ef\u3002 python - m py_compile / path / to / \u9700\u8981\u751f\u6210 . pyc\u7684\u811a\u672c . py #\u82e5\u6279\u91cf\u5904\u7406.py\u6587\u4ef6 #\u5219\u66ff\u6362\u4e3a/path/to/{\u9700\u8981\u751f\u6210.pyc\u7684\u811a\u672c1,\u811a\u672c2,...}.py #\u6216\u8005/path/to/ import py_compile py_compile . compile ( r '/path/to/\u9700\u8981\u751f\u6210.pyc\u7684\u811a\u672c.py' ) #\u540c\u6837\u4e5f\u53ef\u4ee5\u662f\u5305\u542b.py\u6587\u4ef6\u7684\u76ee\u5f55\u8def\u5f84 #\u6b64\u5904\u5c3d\u53ef\u80fd\u4f7f\u7528raw\u5b57\u7b26\u4e32\uff0c\u4ece\u800c\u907f\u514d\u8f6c\u4e49\u7684\u9ebb\u70e6\u3002\u6bd4\u5982\uff0c\u8fd9\u91cc\u4e0d\u52a0\u201cr\u201d\u7684\u8bdd\uff0c\u4f60\u5c31\u5f97\u5bf9\u659c\u6760\u8fdb\u884c\u8f6c\u4e49","title":"\u4ee3\u7801\u4fdd\u62a4"},{"location":"python/python/python-note/#migrate","text":"delete from tisanems.django_migrations where id = 19 limit 1","title":"\u4fee\u6539migrate\u8bb0\u5f55"},{"location":"python/python/python-note/#mysqluniquetrue","text":"Q:`django.db.utils.OperationalError: (1061, \"Duplicate key name 'storage_allotapply_no_eb237ab5_uniq'\")` A:`mysql> DROP INDEX [index_name] ON [table_name];`\u65e2 use dbname; DROP INDEX storage_allotapply_no_eb237ab5_uniq ON storage_allotapply; # \u8981\u4e00\u6b21DROP\u5b8c\u6240\u6709\u7684 Django database migration error: duplicate key","title":"mysql\u65b0\u589eunique=True\u9519\u8bef"},{"location":"python/python/python-note/#keyerrorkey","text":"try : except KeyError as e : return error_response ( 1 , '\u83b7\u53d6\u53c2\u6570 {} \u5931\u8d25' . format ( e . args [ 0 ]))","title":"KeyError\u83b7\u53d6\u54ea\u4e2akey\u9519\u8bef"},{"location":"python/python/python-note/#glossary","text":"BDFL Benevolent Dictator For Life \u7684\u7b80\u79f0\uff0c\u610f\u4e3a\u201c\u4ec1\u6148\u7684\u72ec\u88c1\u8005\u201d\u3002 CRUD Create\u3001 Read\u3001 Update\u3001 Delete \u7684\u9996\u5b57\u6bcd\u7f29\u5199\uff0c\u8fd9\u662f\u5b58\u50a8\u8bb0\u5f55\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u56db\u79cd\u57fa \u672c\u64cd\u4f5c\u3002 DRY Don't Repeat Yourself\uff08\u4e0d\u8981\u81ea\u6211\u91cd\u590d\uff09\u7684\u7f29\u5199\uff0c\u4e00\u79cd\u8f6f\u4ef6\u5de5\u7a0b\u539f\u5219\u3002 dunder \u9996\u5c3e\u6709\u4e24\u6761\u4e0b\u5212\u7ebf\u7684\u7279\u6b8a\u65b9\u6cd5\u548c\u5c5e\u6027\u7684\u7b80\u6d01\u8bfb\u6cd5\uff08\u5373\u628a len \u8bfb\u6210\u201cdunder len\u201d\uff09\u3002 EAFP \u201cit's easier to ask forgiveness than permission\u201d\uff08\u53d6\u5f97\u539f\u8c05\u6bd4\u83b7\u5f97\u8bb8\u53ef\u5bb9\u6613\uff09\u7684\u9996\u5b57\u6bcd\u7f29 \u5199\u3002\u4eba\u4eec\u8ba4\u4e3a\u8fd9\u53e5\u8bdd\u662f\u8ba1\u7b97\u673a\u5148\u9a71 Grace Hopper \u8bf4\u7684\uff0c Python\u7a0b\u5e8f\u5458\u4f7f\u7528\u8fd9\u4e2a\u7f29\u5199\u6307\u4ee3 \u4e00\u79cd\u52a8\u6001\u7f16\u7a0b\u65b9\u5f0f\uff0c\u4f8b\u5982\u8bbf\u95ee\u5c5e\u6027\u524d\u4e0d\u6d4b\u8bd5\u6709\u6ca1\u6709\u5c5e\u6027\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u6355\u83b7\u5f02\u5e38\u3002 hasattr \u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u662f\u8fd9\u6837\u63cf\u8ff0\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u7684\uff1a \u201c\u8c03\u7528 getattr(object, name)\uff0c\u7136\u540e\u6355\u83b7 AttributeError \u5f02\u5e38\u3002 LBYL \u4e09\u601d\u800c\u540e\u884c\uff08look before you leap\uff09\u3002\u8fd9\u79cd\u7f16\u7a0b\u98ce\u683c\u5728\u8c03\u7528\u51fd\u6570\u6216\u67e5\u627e\u5c5e\u6027\u6216\u952e \u4e4b\u524d\u663e\u5f0f\u6d4b\u8bd5\u524d\u63d0\u6761\u4ef6\u3002\u4e0e EAFP \u98ce\u683c\u76f8\u53cd\uff0c\u8fd9\u79cd\u98ce\u683c\u7684\u7279\u70b9\u662f\u4ee3\u7801\u4e2d\u6709\u5f88\u591a if \u8bed \u53e5\u3002\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\uff0c LBYL\u98ce\u683c\u53ef\u80fd\u4f1a\u5728\u201c\u68c0\u67e5\u201d\u548c\u201c\u884c\u4e8b\u201d\u7684\u7a7a\u5f53\u5f15\u5165\u6761\u4ef6\u7ade\u4e89\u3002\u4f8b \u5982\uff0c\u5bf9 if key in mapping: return mapping[key] \u8fd9\u6bb5\u4ee3\u7801\u6765\u8bf4\uff0c\u5982\u679c\u5728\u6d4b\u8bd5 \u4e4b\u540e\uff0c\u4f46\u5728\u67e5\u627e\u4e4b\u524d\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4ece\u6620\u5c04\u4e2d\u5220\u9664\u4e86\u90a3\u4e2a\u952e\uff0c\u90a3\u4e48\u8fd9\u6bb5\u4ee3\u7801\u5c31\u4f1a\u5931\u8d25\u3002 \u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u9501\u6216\u8005 EAFP \u98ce\u683c\u89e3\u51b3\u3002 ORM Object-Relational Mapper\uff08\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff09\u7684\u7f29\u5199\uff0c\u901a\u8fc7\u8fd9\u79cd API \u53ef\u4ee5\u4f7f\u7528 Python \u7c7b\u548c\u5bf9\u8c61\u8bbf\u95ee\u6570\u636e\u5e93\u4e2d\u7684\u8868\u548c\u8bb0\u5f55\uff0c\u800c\u4e14\u8c03\u7528\u65b9\u6cd5\u53ef\u4ee5\u6267\u884c\u6570\u636e\u5e93\u64cd\u4f5c\u3002 SQLAlchemy\u662f \u6d41\u884c\u7684\u72ec\u7acb Python ORM\uff0c Django \u548c Web2py\u81ea\u5e26\u4e86 ORM\u3002 PyPI Python \u5305\u7d22\u5f15\uff08https://pypi.python.org/\uff09\uff0c\u91cc\u9762\u6709\u8d85\u8fc7 60 000 \u4e2a\u5305\u53ef\u7528\u3002\u4e5f\u53eb\u5976\u916a\u5e97 \uff08\u53c2\u89c1\u5976\u916a\u5e97\u8bcd\u6761\uff09\u3002\u4e3a\u4e86\u9632\u6b62\u4e0e PyPy \u6df7\u6dc6\uff0c PyPI \u5e94\u8be5\u8bfb\u4f5c\u201cpie-P-eye\u201d\u3002 YAGNI You Ain't Gonna Need It\uff08\u4f60\u4e0d\u9700\u8981\u8fd9\u4e2a\uff09\u7684\u9996\u5b57\u6bcd\u7f29\u5199\uff0c\u8fd9\u4e2a\u53e3\u53f7\u7684\u610f\u601d\u662f\uff0c\u6839\u636e\u5bf9 \u672a\u6765\u9700\u6c42\u7684\u9884\u6d4b\uff0c\u4e0d\u8981\u5b9e\u73b0\u975e\u7acb\u5373\u9700\u8981\u7684\u529f\u80fd\u3002 monkey patching \u7334\u5b50\u8865\u4e01 \u5728\u8fd0\u884c\u65f6\u52a8\u6001\u4fee\u6539\u6a21\u5757\u3001\u7c7b\u6216\u51fd\u6570\uff0c\u901a\u5e38\u662f\u6dfb\u52a0\u529f\u80fd\u6216\u4fee\u6b63\u7f3a\u9677\u3002\u7334\u5b50\u8865\u4e01\u5728\u5185\u5b58\u4e2d \u53d1\u6325\u4f5c\u7528\uff0c\u4e0d\u4f1a\u4fee\u6539\u6e90\u7801\uff0c\u56e0\u6b64\u53ea\u5bf9\u5f53\u524d\u8fd0\u884c\u7684\u7a0b\u5e8f\u5b9e\u4f8b\u6709\u6548\u3002\u56e0\u4e3a\u7334\u5b50\u8865\u4e01\u7834\u574f\u4e86\u5c01 \u88c5\uff0c\u800c\u4e14\u5bb9\u6613\u5bfc\u81f4\u7a0b\u5e8f\u4e0e\u8865\u4e01\u4ee3\u7801\u7684\u5b9e\u73b0\u7ec6\u8282\u7d27\u5bc6\u8026\u5408\uff0c\u6240\u4ee5\u88ab\u89c6\u4e3a\u4e34\u65f6\u7684\u53d8\u901a\u65b9\u6848\uff0c\u4e0d \u662f\u96c6\u6210\u4ee3\u7801\u7684\u63a8\u8350\u65b9\u5f0f mixin method \u6df7\u5165\u65b9\u6cd5 \u62bd\u8c61\u57fa\u7c7b\u6216\u6df7\u5165\u7c7b\u4e2d\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u3002 mixin class \u6df7\u5165\u7c7b \u7528\u4e8e\u968f\u7740\u591a\u91cd\u7ee7\u627f\u7c7b\u6811\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u4e00\u8d77\u6269\u5c55\u7684\u7c7b\u3002\u6df7\u5165\u7c7b\u7edd\u4e0d\u80fd\u5b9e\u4f8b\u5316\uff0c\u5b83\u7684 \u5177\u4f53\u5b50\u7c7b\u4e5f\u5e94\u8be5\u662f\u5176\u4ed6\u975e\u6df7\u5165\u7c7b\u7684\u5b50\u7c7b\u3002 duck typing \u9e2d\u5b50\u7c7b\u578b \u591a\u6001\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u5728\u8fd9\u79cd\u5f62\u5f0f\u4e2d\uff0c\u4e0d\u7ba1\u5bf9\u8c61\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\uff0c\u4e5f\u4e0d\u7ba1\u58f0\u660e\u7684\u5177\u4f53\u63a5\u53e3\u662f\u4ec0 \u4e48\uff0c\u53ea\u8981\u5bf9\u8c61\u5b9e\u73b0\u4e86\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u51fd\u6570\u5c31\u53ef\u4ee5\u5728\u5bf9\u8c61\u4e0a\u6267\u884c\u64cd\u4f5c\u3002 decorator \u88c5\u9970\u5668 \u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61 A\uff0c\u8fd4\u56de\u53e6\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u5bf9\u8c61 B\uff0c\u5728\u53ef\u8c03\u7528\u7684\u5bf9\u8c61 C \u7684\u5b9a\u4e49\u4f53\u4e4b\u524d \u4f7f\u7528\u53e5\u6cd5 @A \u8c03\u7528\u3002 Python \u89e3\u91ca\u5668\u8bfb\u53d6\u8fd9\u6837\u7684\u4ee3\u7801\u65f6\uff0c\u4f1a\u8c03\u7528 A(C)\uff0c\u628a\u8fd4\u56de\u7684 B \u7ed1\u5b9a\u7ed9\u4e4b \u524d\u8d4b\u4e88 C \u7684\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u628a C \u7684\u5b9a\u4e49\u4f53\u6362\u6210 B\u3002\u5982\u679c\u76ee\u6807\u53ef\u8c03\u7528\u5bf9\u8c61 C \u662f\u51fd\u6570\uff0c\u90a3\u4e48 A \u662f \u51fd\u6570\u88c5\u9970\u5668\uff1b\u5982\u679c C \u662f\u7c7b\uff0c\u90a3\u4e48 A \u662f\u7c7b\u88c5\u9970\u5668\u3002 IDLE An Integrated Development Environment for Python. IDLE is a basic editor and interpreter environment which ships with the standard distribution of Python. Zen of Python Listing of Python design principles and philo sophies that are helpful in understanding and using the language. The listing can be found by typing \u201cimport this\u201d at the interactive prompt. The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!","title":"Glossary \u672f\u8bed\u8868"},{"location":"python/python/python-venv/","text":"Python2: pip install virtual virtualenv environment #\u65b0\u5efa\u865a\u62df\u7a7a\u95f4 virtualenv environment --python=python3.5 #\u6307\u5b9apython\u7248\u672c Python36\u4ee5\u4e0a: python -m venv venv_name \u6fc0\u6d3b\u865a\u62df\u73af\u5883\uff1a source environment/bin/activate #linux\u4e0b\u6fc0\u6d3b\u865a\u62df\u73af\u5883 \u5173\u95ed\u865a\u62df\u73af\u5883 deactivate \u5b98\u65b9\u6587\u6863","title":"Virtualenv"},{"location":"python/python/python-venv/#python2","text":"pip install virtual virtualenv environment #\u65b0\u5efa\u865a\u62df\u7a7a\u95f4 virtualenv environment --python=python3.5 #\u6307\u5b9apython\u7248\u672c","title":"Python2:"},{"location":"python/python/python-venv/#python36","text":"python -m venv venv_name","title":"Python36\u4ee5\u4e0a:"},{"location":"python/python/python-venv/#_1","text":"source environment/bin/activate #linux\u4e0b\u6fc0\u6d3b\u865a\u62df\u73af\u5883","title":"\u6fc0\u6d3b\u865a\u62df\u73af\u5883\uff1a"},{"location":"python/python/python-venv/#_2","text":"deactivate \u5b98\u65b9\u6587\u6863","title":"\u5173\u95ed\u865a\u62df\u73af\u5883"},{"location":"python/python/rw-excel/","text":"openpyxl\u8bfb\u5199Excel \u8bfb\u53d6Excel\u5185\u5bb9 from openpyxl import load_workbook wb = load_workbook ( filename = 'test.xlsx' ) ws = wb [ 'Sheet1' ] for row in ws . rows : print ( row \uff0c row [ 0 ] . value ) \u82e5\u60f3\u6309\u884c\u6807\u8bfb\u53d6\uff1a from openpyxl import load_workbook wb = load_workbook ( filename = 'test.xlsx' ) ws = wb [ 'Sheet1' ] rows = list ( ws . rows ) for index in range ( start , end ): row = rows [ index ] \u5185\u5bb9\u5199\u5165Excel from openpyxl import load_workbook wb = load_workbook ( filename = 'test.xlsx' ) ws = wb [ 'Sheet1' ] ws . cell ( row = 1 , column = 1 ) . value = 'new value' wb . save ( 'new_test.xlsx' ) wb . close () xlrd\u3001xlwt\u8bfb\u5199Excel \u8bfb\u53d6Excel\u5185\u5bb9 \u8bfb\u53d6excel\u4f7f\u7528\u5e93xlrd\uff0c\u76f4\u63a5pip\u5b89\u88c5\u5373\u53ef\uff0c\u793a\u4f8b\u4ee3\u7801\uff1a import xlrd data = xlrd . open_workbook ( 'text.xls' ) def excel_table_by_name ( col_name_index = 0 , by_name = u 'Sheet1' ): \"\"\" \u6839\u636e\u540d\u79f0\u83b7\u53d6Excel\u8868\u683c\u4e2d\u7684\u6570\u636e :param col_name_index: \u8868\u5934\u5217\u540d\u6240\u5728\u884c\u7684\u7d22\u5f15 :param by_name: Sheet\u540d\u79f0 :return: \"\"\" try : table = data . sheet_by_name ( by_name ) rows = table . nrows # \u884c\u6570 col_names = table . row_values ( col_name_index ) # \u67d0\u4e00\u884c\u6570\u636e lst = [] for row_num in range ( 1 , rows ): row = table . row_values ( row_num ) if row : app = {} for i in range ( len ( col_names )): app [ col_names [ i ]] = row [ i ] lst . append ( app ) return lst except Exception as e : return None tables = excel_table_by_name ( 0 , 'Sheet1' ) if tables : for row in tables : print ( row [ '\u540d\u79f0' ]) \u4f7f\u7528xlrd\u8bfb\u53d6\u7684\u884c\u4e2d\u5305\u542b\u65e5\u671f\u65f6\u95f4\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u8f6c\u5316\uff1a from datetime import datetime tables = excel_table_by_name ( 0 , 'Sheet1' ) if tables : for row in tables : date_values = xlrd . xldate_as_tuple ( row [ '\u65f6\u95f4' ], data . datemode ) print ( date_values , type ( date_values )) print ( datetime ( * date_values )) \u5185\u5bb9\u5199\u5165Excel xlrd \u5e93\u5bf9\u5e94\u6709\u4e00\u4e2a xlwt \u5e93\uff0c\u652f\u6301\u5199\u5165\u5185\u5bb9\u5230Excel\u3002\u5f53\u8bfb\u53d6\u548c\u5199\u5165\u7684\u662f\u540c\u4e00\u4e2aExcel\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u5bf9\u8bfb\u53d6\u7684Excel\u6587\u4ef6\u8fdb\u884c\u62f7\u8d1d\uff0c\u7136\u540e\u5c06\u53d8\u66f4\u7684\u5185\u5bb9\u5199\u5165\u62f7\u8d1d\u7684Excel\u6587\u4ef6\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from xlutils.copy import copy from xlrd import open_workbook rb = open_workbook ( 'test.xlsx' ) wb = copy ( rb ) w_sheet = wb . get_sheet ( 0 ) w_sheet . write ( 1 , 1 , 'test' ) wb . save ( 'new_test.xlsx' ) \u4f46\u662f xlwt \u6700\u591a\u53ef\u5199\u516565500\u884c\u6570\u636e\u3002 writing-to-existing-workbook-using-xlwt","title":"python\u8bfb\u5199Excel"},{"location":"python/python/rw-excel/#openpyxlexcel","text":"","title":"openpyxl\u8bfb\u5199Excel"},{"location":"python/python/rw-excel/#excel","text":"from openpyxl import load_workbook wb = load_workbook ( filename = 'test.xlsx' ) ws = wb [ 'Sheet1' ] for row in ws . rows : print ( row \uff0c row [ 0 ] . value ) \u82e5\u60f3\u6309\u884c\u6807\u8bfb\u53d6\uff1a from openpyxl import load_workbook wb = load_workbook ( filename = 'test.xlsx' ) ws = wb [ 'Sheet1' ] rows = list ( ws . rows ) for index in range ( start , end ): row = rows [ index ]","title":"\u8bfb\u53d6Excel\u5185\u5bb9"},{"location":"python/python/rw-excel/#excel_1","text":"from openpyxl import load_workbook wb = load_workbook ( filename = 'test.xlsx' ) ws = wb [ 'Sheet1' ] ws . cell ( row = 1 , column = 1 ) . value = 'new value' wb . save ( 'new_test.xlsx' ) wb . close ()","title":"\u5185\u5bb9\u5199\u5165Excel"},{"location":"python/python/rw-excel/#xlrdxlwtexcel","text":"","title":"xlrd\u3001xlwt\u8bfb\u5199Excel"},{"location":"python/python/rw-excel/#excel_2","text":"\u8bfb\u53d6excel\u4f7f\u7528\u5e93xlrd\uff0c\u76f4\u63a5pip\u5b89\u88c5\u5373\u53ef\uff0c\u793a\u4f8b\u4ee3\u7801\uff1a import xlrd data = xlrd . open_workbook ( 'text.xls' ) def excel_table_by_name ( col_name_index = 0 , by_name = u 'Sheet1' ): \"\"\" \u6839\u636e\u540d\u79f0\u83b7\u53d6Excel\u8868\u683c\u4e2d\u7684\u6570\u636e :param col_name_index: \u8868\u5934\u5217\u540d\u6240\u5728\u884c\u7684\u7d22\u5f15 :param by_name: Sheet\u540d\u79f0 :return: \"\"\" try : table = data . sheet_by_name ( by_name ) rows = table . nrows # \u884c\u6570 col_names = table . row_values ( col_name_index ) # \u67d0\u4e00\u884c\u6570\u636e lst = [] for row_num in range ( 1 , rows ): row = table . row_values ( row_num ) if row : app = {} for i in range ( len ( col_names )): app [ col_names [ i ]] = row [ i ] lst . append ( app ) return lst except Exception as e : return None tables = excel_table_by_name ( 0 , 'Sheet1' ) if tables : for row in tables : print ( row [ '\u540d\u79f0' ]) \u4f7f\u7528xlrd\u8bfb\u53d6\u7684\u884c\u4e2d\u5305\u542b\u65e5\u671f\u65f6\u95f4\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u8f6c\u5316\uff1a from datetime import datetime tables = excel_table_by_name ( 0 , 'Sheet1' ) if tables : for row in tables : date_values = xlrd . xldate_as_tuple ( row [ '\u65f6\u95f4' ], data . datemode ) print ( date_values , type ( date_values )) print ( datetime ( * date_values ))","title":"\u8bfb\u53d6Excel\u5185\u5bb9"},{"location":"python/python/rw-excel/#excel_3","text":"xlrd \u5e93\u5bf9\u5e94\u6709\u4e00\u4e2a xlwt \u5e93\uff0c\u652f\u6301\u5199\u5165\u5185\u5bb9\u5230Excel\u3002\u5f53\u8bfb\u53d6\u548c\u5199\u5165\u7684\u662f\u540c\u4e00\u4e2aExcel\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u5bf9\u8bfb\u53d6\u7684Excel\u6587\u4ef6\u8fdb\u884c\u62f7\u8d1d\uff0c\u7136\u540e\u5c06\u53d8\u66f4\u7684\u5185\u5bb9\u5199\u5165\u62f7\u8d1d\u7684Excel\u6587\u4ef6\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a from xlutils.copy import copy from xlrd import open_workbook rb = open_workbook ( 'test.xlsx' ) wb = copy ( rb ) w_sheet = wb . get_sheet ( 0 ) w_sheet . write ( 1 , 1 , 'test' ) wb . save ( 'new_test.xlsx' ) \u4f46\u662f xlwt \u6700\u591a\u53ef\u5199\u516565500\u884c\u6570\u636e\u3002 writing-to-existing-workbook-using-xlwt","title":"\u5185\u5bb9\u5199\u5165Excel"},{"location":"python/python/sf-express/","text":"\u987a\u4e30\u4e30\u6865\u5bf9\u63a5\u7b14\u8bb0 \u4e0b\u5355\u3001\u7b5b\u5355\u3001\u8def\u7531\u67e5\u8be2\u3001\u8fd0\u5355\u6253\u5370 city_code.json \uff08 \u70b9\u6211\u4e0b\u8f7d \uff09 import os import json import codecs import base64 import requests import hashlib from xml.etree import ElementTree from xml.etree.ElementTree import Element , SubElement from django.conf import settings from user.models import Image from django.core.files.base import ContentFile # logger import logging logger = logging . getLogger ( \"info\" ) class Singleton ( type ): def __init__ ( cls , name , bases , dict ): super ( Singleton , cls ) . __init__ ( name , bases , dict ) cls . instance = None def __call__ ( cls , * args , ** kw ): if cls . instance is None : cls . instance = super ( Singleton , cls ) . __call__ ( * args , ** kw ) return cls . instance class SF ( metaclass = Singleton ): domain = 'https://bsp-oisp.sf-express.com/bsp-oisp/sfexpressService' client_code = '' check_word = '' city_data = None def call_service ( self , xml ): # \u62fc\u63a5\u6821\u9a8c\u7801 combine_str = xml + self . check_word # md5 md5 = hashlib . md5 () md5 . update ( combine_str . encode ( 'utf-8' )) md5_str = md5 . digest () # base64 verify_code = base64 . b64encode ( md5_str ) . decode ( 'utf-8' ) # call service data = { \"xml\" : xml , \"verifyCode\" : verify_code } response = requests . post ( self . domain , data = data ) return response def order_create ( self , order_id , month_card , province , city , district , detailed_address , company , contact , tel , paster , packet ): \"\"\" \u5feb\u901f\u4e0b\u5355 \u8fd4\u56de\u53c2\u6570\u4f9d\u6b21\u4e3a \u53d1\u8d27\u72b6\u6001 \u5feb\u9012\u5355\u53f7 \u9519\u8bef\u4fe1\u606f \"\"\" root = Element ( 'Request' , service = 'OrderService' , lang = \"zh-CN\" ) head = SubElement ( root , 'Head' ) head . text = self . client_code body = SubElement ( root , 'Body' ) order_attributes = { 'orderid' : order_id , 'is_gen_bill_no' : '1' , 'express_type' : '2' , # 'j_province': '\u6c5f\u82cf\u7701', # 'j_city': '\u5357\u4eac\u5e02', # 'j_company': '\u96e8\u82b1\u53f0\u533a', 'j_address' : '\u8f6f\u4ef6\u8c37\u79d1\u521b\u57ceD2\u5357' , 'j_contact' : '\u6bb7\u5148\u751f' , 'j_tel' : '17749503263' , 'd_province' : province , 'd_city' : city , 'd_county' : district , 'd_address' : detailed_address , 'd_company' : company , 'd_contact' : contact , 'd_tel' : tel , 'parcel_quantity' : '1' , 'custid' : month_card , 'pay_method' : '1' , 'customs_batchs' : '' } order = SubElement ( body , 'Order' , attrib = order_attributes ) SubElement ( order , 'Cargo' , attrib = { 'name' : '\u4e2d\u836f(\u5e16)' , 'count' : str ( paster ), 'unit' : '\u5e16' }) SubElement ( order , 'Cargo' , attrib = { 'name' : '\u4e2d\u836f(\u5305)' , 'count' : str ( packet ), 'unit' : '\u5305' }) xml = ElementTree . tostring ( root , encoding = 'utf8' ) . decode () response = self . call_service ( xml ) if response . status_code == 200 : et = ElementTree . fromstring ( response . text ) head = et . find ( 'Head' ) . text if head == 'OK' : return True , et . find ( 'Body' ) . find ( 'OrderResponse' ) . attrib [ 'mailno' ] else : return False , et . find ( 'ERROR' ) . text else : return False , '\u987a\u4e30\u670d\u52a1\u5668\u65e0\u54cd\u5e94' def order_filter ( self , province , city , district , address , tel ): \"\"\"\u7b5b\u5355 \u9700\u8981\u5f00\u542f\u8ba2\u5355\u7b5b\u9009\u63a5\u53e3 \u5224\u65ad\u5224\u65ad\u5ba2\u6237\u7684\u6536\u3001\u6d3e\u5730\u5740\u662f\u5426\u5c5e\u4e8e\u987a\u4e30\u7684\u6536\u6d3e\u8303\u56f4\"\"\" root = Element ( 'Request' , service = 'OrderFilterService' , lang = \"zh-CN\" ) head = SubElement ( root , 'Head' ) head . text = self . client_code body = SubElement ( root , 'Body' ) SubElement ( body , 'OrderFilter' , attrib = { 'filter_type' : '2' , 'd_address' : address }) SubElement ( body , 'OrderFilterOption' , attrib = { 'd_country' : '\u4e2d\u56fd' , 'd_province' : province , 'd_city' : city , 'd_county' : district , 'd_tel' : tel }) xml = ElementTree . tostring ( root , encoding = 'utf8' ) . decode () response = self . call_service ( xml ) if response . status_code == 200 : et = ElementTree . fromstring ( response . text ) head = et . find ( 'Head' ) . text if head == 'OK' : return et . find ( 'Body' ) . find ( 'OrderFilterResponse' ) . attrib [ 'filter_result' ] return None def router_query ( self , order_id ): \"\"\"\u8def\u7531\u67e5\u8be2 \u5feb\u9012\u4fe1\u606f\u67e5\u8be2\"\"\" root = Element ( 'Request' , service = 'RouteService' , lang = \"zh-CN\" ) head = SubElement ( root , 'Head' ) head . text = self . client_code body = SubElement ( root , 'Body' ) SubElement ( body , 'RouteRequest' , attrib = { 'tracking_type' : '2' , 'tracking_number' : order_id , 'method_type' : '1' }) xml = ElementTree . tostring ( root , encoding = 'utf8' ) . decode () response = self . call_service ( xml ) if response . status_code == 200 : et = ElementTree . fromstring ( response . text ) head = et . find ( 'Head' ) . text if head == 'OK' : routers = et . find ( 'Body' ) . find ( 'RouteResponse' ) . findall ( 'Route' ) data = [] for router in routers : router_data = {} for attr in router . attrib : router_data [ attr ] = router . attrib [ attr ] data . append ( router_data ) return data return None def city_to_code ( self , city ): \"\"\"\u57ce\u5e02\u8f6c\u987a\u4e30\u7f16\u7801\"\"\" if self . city_data is None : path = os . path . join ( settings . BASE_DIR , 'common/city_code.json' ) with codecs . open ( path , 'r' , 'utf-8' ) as f : self . city_data = json . load ( f ) for x in self . city_data : if x [ 'city' ] == city : return x [ 'code' ] return None def waybill ( self , mail_no , month_card , province , city , district , detailed_address , company , contact , tel , paster , packet ): \"\"\"\u7535\u5b50\u8fd0\u5355\u56fe\u7247\u4e0b\u8f7d\"\"\" data = { 'mailNo' : mail_no , 'expressType' : 2 , 'payMethod' : 1 , 'returnTrackingNo' : None , 'monthAccount' : month_card , 'orderNo' : None , 'zipCode' : self . city_to_code ( '\u5357\u4eac\u5e02' ), 'destCode' : self . city_to_code ( city ), 'payArea' : None , # \u5bc4\u4ef6\u4eba\u4fe1\u606f 'deliverCompany' : '\u5357\u4eac\u8bd7\u8fdc\u542f\u79d1\u6280\u6709\u9650\u516c\u53f8' , 'deliverName' : '\u6bb7\u5148\u751f' , 'deliverMobile' : '17749503263' , 'deliverTel' : None , 'deliverProvince' : '\u6c5f\u82cf\u7701' , 'deliverCity' : '\u5357\u4eac\u5e02' , 'deliverCounty' : '\u96e8\u82b1\u53f0\u533a' , 'deliverAddress' : '\u5927\u5468\u8def\u8f6f\u4ef6\u8c37\u79d1\u521b\u57ceD2\u5357' , 'deliverShipperCode' : None , # \u6536\u4ef6\u4eba\u4fe1\u606f 'consignerCompany' : company , 'consignerName' : contact , 'consignerMobile' : tel , 'consignerTel' : None , 'consignerProvince' : province , 'consignerCity' : city , 'consignerCounty' : district , 'consignerAddress' : detailed_address , 'consignerShipperCode' : None , # logo\u76f8\u5173 'logo' : None , 'sftelLogo' : None , 'topLogo' : None , 'topsftelLogo' : None , # \u5176\u4ed6\u4fe1\u606f 'totalFee' : None , 'appId' : '\u5fc5\u586b' , 'appKey' : '\u5fc5\u586b' , 'electric' : 'E' , 'insureValue' : None , 'insureFee' : None , 'codValue' : None , 'codMonthAccount' : None , # \u4e30\u5bc6\u8fd0\u5355\u76f8\u5173\u914d\u7f6e 'abFlag' : None , 'xbFlag' : None , 'proCode' : None , 'destRouteLabel' : None , 'destTeamCode' : None , 'codingMapping' : None , 'codingMappingOut' : None , 'sourceTransferCode' : None , 'printIcon' : None , 'qrcode' : None , # \u52a0\u5bc6 'encryptMobile' : False , 'encryptCustName' : False , # \u8d27\u7269\u4fe1\u606f 'cargoInfoDtoList' : [ { 'cargo' : '\u4e2d\u836f(\u5e16)' , 'parcelQuantity' : None , 'cargoCount' : paster , 'cargoUnit' : '\u5e16' , 'cargoWeight' : None , 'cargoAmount' : None , 'cargoTotalWeight' : None , 'remark' : '\u5185\u6709\u6db2\u4f53 \u5c0f\u5fc3\u8f7b\u653e' , 'sku' : None }, { 'cargo' : '\u4e2d\u836f(\u5305)' , 'parcelQuantity' : None , 'cargoCount' : packet , 'cargoUnit' : '\u5305' , 'cargoWeight' : None , 'cargoAmount' : None , 'cargoTotalWeight' : None , 'remark' : '' , 'sku' : None } ] } url = 'http://localhost:4040/sf/waybill/print?type=V2.1_poster_100mm150mm&output=image' response = requests . post ( url , data = '[ {} ]' . format ( json . dumps ( data ))) if response . json ()[ 'code' ] == 'SYS_CODE_QIAO_0200' : images = [] for image_base64 in response . json ()[ 'result' ]: _image = ContentFile ( base64 . b64decode ( image_base64 ), name = 'express_waybill.jpg' ) image = Image . objects . create ( image = _image , purpose = 2 ) images . append ( image ) return images return None Ubuntu14.04\u5b89\u88c5JDK1.7 \u5b98\u7f51\u4e0b\u8f7d\u5b89\u88c5\u5305 \u524d\u5f80 \u5b98\u7f51 \u4e0b\u8f7d\u5b89\u88c5\u5305\uff0c\u5c06\u5b89\u88c5\u5305\u62f7\u8d1d\u81f3\u4e3b\u673a\u5f85\u7528\u3002 \u521b\u5efa\u6587\u4ef6\u5939\u3001\u89e3\u538b\u6587\u4ef6 \u521b\u5efa\u6587\u4ef6\u5939 sudo mkdir /usr/lib/java \u89e3\u538b\u538b\u7f29\u5305\u81f3\u6587\u4ef6\u5939 sudo tar zxvf jdk-7u80-linux-x64.tar.gz -C /usr/lib/java \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf sudo nano /etc/profile \u6587\u4ef6\u7ed3\u5c3e\u52a0\u5165\u73af\u5883\u53d8\u91cf\u5185\u5bb9\uff1a #set java environment export JAVA_HOME=/usr/lib/java/jdk1.7.0_80 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH \u8bbe\u7f6e\u5b8c\u73af\u5883\u53d8\u91cf\u4e4b\u540e\u6267\u884c\u547d\u4ee4\u8ba9\u8bbe\u7f6e\u751f\u6548 source /etc/profile \u8bbe\u7f6e\u9ed8\u8ba4\u7684JDK sudo update-alternatives --install /usr/bin/java java /usr/lib/java/jdk1.7.0_80/bin/java 300 sudo update-alternatives --install /usr/bin/javac javac /usr/lib/java/jdk1.7.0_80/bin/javac 300 \u68c0\u67e5Ubuntu\u7684JDK\u7248\u672c dreamgo@dreamgo:/usr/lib/java$ java -version java version \"1.7.0_80\" Java(TM) SE Runtime Environment (build 1.7.0_80-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode) \u8fd0\u5355\u9762\u5355\u81ea\u52a9\u6253\u5370SDK \u8fd0\u884c\u670d\u52a1 \u62f7\u8d1d csim_waybill_print_service_V1.0.5.jar \u81f3\u670d\u52a1\u5668 chmod -R 777 csim_waybill_print_service_V1.0.5.jar \u5bf9\u6587\u4ef6\u6388\u6743\uff0c\u4ee5\u786e\u4fdd\u8be5jar\u80fd\u6b63\u786e\u751f\u6210\u65e5\u5fd7\u6587\u4ef6\u3002 sudo java -jar csim_waybill_print_service_V1.0.5.jar 8888 #\u7aef\u53e3\u53f7\u4e0d\u586b\u65f6\u9ed8\u8ba4\u4e3a4040\uff0c\u8bf7\u68c0\u67e5\u9632\u706b\u5899\u72b6\u6001\u3002\uff08\u591a\u6b21\u53cd\u590d\u542f\u52a8\\\u5173\u95ed\u4f1a\u5bfc\u81f4\u670d\u52a1\u5f00\u542f\u662f\u5361\u5728\u7b2c3\u6b65\uff0c\u5df2\u63d0\u4ea4\u987a\u4e30\u6280\u672f\uff0c\u7b49\u5f85\u9a8c\u8bc1\u89e3\u51b3\u3002\uff09 python\u8bf7\u6c42\u63a5\u53e3 \u4f7f\u7528\u7684100x150mm,\u8f6cbase64\u7684\u63a5\u53e3\uff0c\u4ee3\u7801\u53c2\u89c1\u6700\u4e0a\u65b9\u3002\u53ef\u7ed3\u5408\u9700\u6c42\u548cnodejs\u4ee5\u53cajava\u7248\u672cdemo\u81ea\u884c\u4fee\u6539\u3002 \u5b89\u88c5\u5b57\u4f53 \u5b89\u88c5\u5b57\u4f53\u662f\u4e3a\u4e86\u89e3\u51b3\u5728Linux\u7cfb\u7edf\u4e0a\uff0c\u751f\u6210\u7684\u5feb\u9012\u9762\u5355\u65e0\u6cd5\u6b63\u5e38\u663e\u793a\u76ee\u7684\u5730\u7f16\u7801\u7684\u95ee\u9898\u3002 \u4e0b\u8f7d\u5b57\u4f53 \u5b57\u4f53\u5305 simhei.ttf \u53ef\u5728 SF-CSIM-PRINTER-SDK-V1.0.5 \u538b\u7f29\u5305\u4e2d\u7684 linux\u7cfb\u7edf\u542f\u52a8\u6ce8\u610f\u4e8b\u9879 \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002 \u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u4e2d\u5df2\u5b89\u88c5\u7684\u4e2d\u6587\u5b57\u4f53 fc-list :lang=zh \u590d\u5236 simsun.ttf \u5b57\u4f53\u6587\u4ef6 mkdir -p /usr/share/fonts/my_fonts \u62f7\u8d1d\u5b57\u4f53\u6587\u4ef6\u81f3\u8be5\u6587\u4ef6\u5939 cd /usr/share/fonts/my_fonts apt-get install xfonts-utils mkfontscale mkfontdir #\u6ce8\u610f \u662f mkfontdir \u4e0d\u662f mkfontsdir\uff0c\u6b64\u5904\u987a\u4e30\u6587\u6863\u6709\u9519\u8bef\u3002 ll # \u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u5bf9\u5e94\u7684fonts.dir \u548c fonts.scale\u6587\u4ef6 \u518d\u6b21\u67e5\u770b\u5df2\u5b89\u88c5\u7684\u5b57\u4f53 fc-list :lang=zh \u81ea\u52a8\u5f00\u542f\u81ea\u52a9\u9762\u5355\u6253\u5370\u670d\u52a1 supervisord fengqiao.conf : [program:feng_qiao] command=java -jar csim_waybill_print_service_V1.0.5.jar directory=/django/fengqiao stdout_logfile=/django/fengqiao/out.log stderr_logfile=/django/fengqiao/error.log autostart=true autorestart=true user=root startsecs=10 \u7528\u6237 user \u5fc5\u987b\u662f root \uff0c\u8d85\u7ba1\u540d\u79f0\u4e0d\u662f root \u7684\u4e5f\u5199 root \uff0c\u4e0d\u7136\u4f1a\u6743\u9650\u4e0d\u8db3\u3002 supervisord \u76f8\u5173\u64cd\u4f5c\uff0c\u90e8\u7f72\u8bf7\u53c2\u8003 Supervisor\u4f7f\u7528\u7b14\u8bb0\u53cacelery\u751f\u4ea7\u90e8\u7f72 \u3002 \u4f5c\u4e3a\u670d\u52a1 \u6682\u672a\u6d4b\u8bd5\u901a\u8fc7 #!/bin/sh SERVICE_NAME = fengqiao PATH_TO_JAR = /django/fengqiao/csim_waybill_print_service_V1.0.5.jar PID_PATH_NAME = /tmp/fengqiao-pid case $1 in start ) echo \"Starting $SERVICE_NAME ...\" if [ ! -f $PID_PATH_NAME ] ; then nohup java -jar $PATH_TO_JAR /tmp 2 >> /dev/null >> /dev/null & echo $! > $PID_PATH_NAME echo \" $SERVICE_NAME started ...\" else echo \" $SERVICE_NAME is already running ...\" fi ;; stop ) if [ -f $PID_PATH_NAME ] ; then PID = $( cat $PID_PATH_NAME ) ; echo \" $SERVICE_NAME stoping ...\" kill $PID ; echo \" $SERVICE_NAME stopped ...\" rm $PID_PATH_NAME else echo \" $SERVICE_NAME is not running ...\" fi ;; restart ) if [ -f $PID_PATH_NAME ] ; then PID = $( cat $PID_PATH_NAME ) ; echo \" $SERVICE_NAME stopping ...\" ; kill $PID ; echo \" $SERVICE_NAME stopped ...\" ; rm $PID_PATH_NAME echo \" $SERVICE_NAME starting ...\" nohup java -jar $PATH_TO_JAR /tmp 2 >> /dev/null >> /dev/null & echo $! > $PID_PATH_NAME echo \" $SERVICE_NAME started ...\" else echo \" $SERVICE_NAME is not running ...\" fi ;; esac","title":"\u987a\u4e30\u4e30\u6865\u5bf9\u63a5\u7b14\u8bb0"},{"location":"python/python/sf-express/#_1","text":"","title":"\u987a\u4e30\u4e30\u6865\u5bf9\u63a5\u7b14\u8bb0"},{"location":"python/python/sf-express/#_2","text":"city_code.json \uff08 \u70b9\u6211\u4e0b\u8f7d \uff09 import os import json import codecs import base64 import requests import hashlib from xml.etree import ElementTree from xml.etree.ElementTree import Element , SubElement from django.conf import settings from user.models import Image from django.core.files.base import ContentFile # logger import logging logger = logging . getLogger ( \"info\" ) class Singleton ( type ): def __init__ ( cls , name , bases , dict ): super ( Singleton , cls ) . __init__ ( name , bases , dict ) cls . instance = None def __call__ ( cls , * args , ** kw ): if cls . instance is None : cls . instance = super ( Singleton , cls ) . __call__ ( * args , ** kw ) return cls . instance class SF ( metaclass = Singleton ): domain = 'https://bsp-oisp.sf-express.com/bsp-oisp/sfexpressService' client_code = '' check_word = '' city_data = None def call_service ( self , xml ): # \u62fc\u63a5\u6821\u9a8c\u7801 combine_str = xml + self . check_word # md5 md5 = hashlib . md5 () md5 . update ( combine_str . encode ( 'utf-8' )) md5_str = md5 . digest () # base64 verify_code = base64 . b64encode ( md5_str ) . decode ( 'utf-8' ) # call service data = { \"xml\" : xml , \"verifyCode\" : verify_code } response = requests . post ( self . domain , data = data ) return response def order_create ( self , order_id , month_card , province , city , district , detailed_address , company , contact , tel , paster , packet ): \"\"\" \u5feb\u901f\u4e0b\u5355 \u8fd4\u56de\u53c2\u6570\u4f9d\u6b21\u4e3a \u53d1\u8d27\u72b6\u6001 \u5feb\u9012\u5355\u53f7 \u9519\u8bef\u4fe1\u606f \"\"\" root = Element ( 'Request' , service = 'OrderService' , lang = \"zh-CN\" ) head = SubElement ( root , 'Head' ) head . text = self . client_code body = SubElement ( root , 'Body' ) order_attributes = { 'orderid' : order_id , 'is_gen_bill_no' : '1' , 'express_type' : '2' , # 'j_province': '\u6c5f\u82cf\u7701', # 'j_city': '\u5357\u4eac\u5e02', # 'j_company': '\u96e8\u82b1\u53f0\u533a', 'j_address' : '\u8f6f\u4ef6\u8c37\u79d1\u521b\u57ceD2\u5357' , 'j_contact' : '\u6bb7\u5148\u751f' , 'j_tel' : '17749503263' , 'd_province' : province , 'd_city' : city , 'd_county' : district , 'd_address' : detailed_address , 'd_company' : company , 'd_contact' : contact , 'd_tel' : tel , 'parcel_quantity' : '1' , 'custid' : month_card , 'pay_method' : '1' , 'customs_batchs' : '' } order = SubElement ( body , 'Order' , attrib = order_attributes ) SubElement ( order , 'Cargo' , attrib = { 'name' : '\u4e2d\u836f(\u5e16)' , 'count' : str ( paster ), 'unit' : '\u5e16' }) SubElement ( order , 'Cargo' , attrib = { 'name' : '\u4e2d\u836f(\u5305)' , 'count' : str ( packet ), 'unit' : '\u5305' }) xml = ElementTree . tostring ( root , encoding = 'utf8' ) . decode () response = self . call_service ( xml ) if response . status_code == 200 : et = ElementTree . fromstring ( response . text ) head = et . find ( 'Head' ) . text if head == 'OK' : return True , et . find ( 'Body' ) . find ( 'OrderResponse' ) . attrib [ 'mailno' ] else : return False , et . find ( 'ERROR' ) . text else : return False , '\u987a\u4e30\u670d\u52a1\u5668\u65e0\u54cd\u5e94' def order_filter ( self , province , city , district , address , tel ): \"\"\"\u7b5b\u5355 \u9700\u8981\u5f00\u542f\u8ba2\u5355\u7b5b\u9009\u63a5\u53e3 \u5224\u65ad\u5224\u65ad\u5ba2\u6237\u7684\u6536\u3001\u6d3e\u5730\u5740\u662f\u5426\u5c5e\u4e8e\u987a\u4e30\u7684\u6536\u6d3e\u8303\u56f4\"\"\" root = Element ( 'Request' , service = 'OrderFilterService' , lang = \"zh-CN\" ) head = SubElement ( root , 'Head' ) head . text = self . client_code body = SubElement ( root , 'Body' ) SubElement ( body , 'OrderFilter' , attrib = { 'filter_type' : '2' , 'd_address' : address }) SubElement ( body , 'OrderFilterOption' , attrib = { 'd_country' : '\u4e2d\u56fd' , 'd_province' : province , 'd_city' : city , 'd_county' : district , 'd_tel' : tel }) xml = ElementTree . tostring ( root , encoding = 'utf8' ) . decode () response = self . call_service ( xml ) if response . status_code == 200 : et = ElementTree . fromstring ( response . text ) head = et . find ( 'Head' ) . text if head == 'OK' : return et . find ( 'Body' ) . find ( 'OrderFilterResponse' ) . attrib [ 'filter_result' ] return None def router_query ( self , order_id ): \"\"\"\u8def\u7531\u67e5\u8be2 \u5feb\u9012\u4fe1\u606f\u67e5\u8be2\"\"\" root = Element ( 'Request' , service = 'RouteService' , lang = \"zh-CN\" ) head = SubElement ( root , 'Head' ) head . text = self . client_code body = SubElement ( root , 'Body' ) SubElement ( body , 'RouteRequest' , attrib = { 'tracking_type' : '2' , 'tracking_number' : order_id , 'method_type' : '1' }) xml = ElementTree . tostring ( root , encoding = 'utf8' ) . decode () response = self . call_service ( xml ) if response . status_code == 200 : et = ElementTree . fromstring ( response . text ) head = et . find ( 'Head' ) . text if head == 'OK' : routers = et . find ( 'Body' ) . find ( 'RouteResponse' ) . findall ( 'Route' ) data = [] for router in routers : router_data = {} for attr in router . attrib : router_data [ attr ] = router . attrib [ attr ] data . append ( router_data ) return data return None def city_to_code ( self , city ): \"\"\"\u57ce\u5e02\u8f6c\u987a\u4e30\u7f16\u7801\"\"\" if self . city_data is None : path = os . path . join ( settings . BASE_DIR , 'common/city_code.json' ) with codecs . open ( path , 'r' , 'utf-8' ) as f : self . city_data = json . load ( f ) for x in self . city_data : if x [ 'city' ] == city : return x [ 'code' ] return None def waybill ( self , mail_no , month_card , province , city , district , detailed_address , company , contact , tel , paster , packet ): \"\"\"\u7535\u5b50\u8fd0\u5355\u56fe\u7247\u4e0b\u8f7d\"\"\" data = { 'mailNo' : mail_no , 'expressType' : 2 , 'payMethod' : 1 , 'returnTrackingNo' : None , 'monthAccount' : month_card , 'orderNo' : None , 'zipCode' : self . city_to_code ( '\u5357\u4eac\u5e02' ), 'destCode' : self . city_to_code ( city ), 'payArea' : None , # \u5bc4\u4ef6\u4eba\u4fe1\u606f 'deliverCompany' : '\u5357\u4eac\u8bd7\u8fdc\u542f\u79d1\u6280\u6709\u9650\u516c\u53f8' , 'deliverName' : '\u6bb7\u5148\u751f' , 'deliverMobile' : '17749503263' , 'deliverTel' : None , 'deliverProvince' : '\u6c5f\u82cf\u7701' , 'deliverCity' : '\u5357\u4eac\u5e02' , 'deliverCounty' : '\u96e8\u82b1\u53f0\u533a' , 'deliverAddress' : '\u5927\u5468\u8def\u8f6f\u4ef6\u8c37\u79d1\u521b\u57ceD2\u5357' , 'deliverShipperCode' : None , # \u6536\u4ef6\u4eba\u4fe1\u606f 'consignerCompany' : company , 'consignerName' : contact , 'consignerMobile' : tel , 'consignerTel' : None , 'consignerProvince' : province , 'consignerCity' : city , 'consignerCounty' : district , 'consignerAddress' : detailed_address , 'consignerShipperCode' : None , # logo\u76f8\u5173 'logo' : None , 'sftelLogo' : None , 'topLogo' : None , 'topsftelLogo' : None , # \u5176\u4ed6\u4fe1\u606f 'totalFee' : None , 'appId' : '\u5fc5\u586b' , 'appKey' : '\u5fc5\u586b' , 'electric' : 'E' , 'insureValue' : None , 'insureFee' : None , 'codValue' : None , 'codMonthAccount' : None , # \u4e30\u5bc6\u8fd0\u5355\u76f8\u5173\u914d\u7f6e 'abFlag' : None , 'xbFlag' : None , 'proCode' : None , 'destRouteLabel' : None , 'destTeamCode' : None , 'codingMapping' : None , 'codingMappingOut' : None , 'sourceTransferCode' : None , 'printIcon' : None , 'qrcode' : None , # \u52a0\u5bc6 'encryptMobile' : False , 'encryptCustName' : False , # \u8d27\u7269\u4fe1\u606f 'cargoInfoDtoList' : [ { 'cargo' : '\u4e2d\u836f(\u5e16)' , 'parcelQuantity' : None , 'cargoCount' : paster , 'cargoUnit' : '\u5e16' , 'cargoWeight' : None , 'cargoAmount' : None , 'cargoTotalWeight' : None , 'remark' : '\u5185\u6709\u6db2\u4f53 \u5c0f\u5fc3\u8f7b\u653e' , 'sku' : None }, { 'cargo' : '\u4e2d\u836f(\u5305)' , 'parcelQuantity' : None , 'cargoCount' : packet , 'cargoUnit' : '\u5305' , 'cargoWeight' : None , 'cargoAmount' : None , 'cargoTotalWeight' : None , 'remark' : '' , 'sku' : None } ] } url = 'http://localhost:4040/sf/waybill/print?type=V2.1_poster_100mm150mm&output=image' response = requests . post ( url , data = '[ {} ]' . format ( json . dumps ( data ))) if response . json ()[ 'code' ] == 'SYS_CODE_QIAO_0200' : images = [] for image_base64 in response . json ()[ 'result' ]: _image = ContentFile ( base64 . b64decode ( image_base64 ), name = 'express_waybill.jpg' ) image = Image . objects . create ( image = _image , purpose = 2 ) images . append ( image ) return images return None","title":"\u4e0b\u5355\u3001\u7b5b\u5355\u3001\u8def\u7531\u67e5\u8be2\u3001\u8fd0\u5355\u6253\u5370"},{"location":"python/python/sf-express/#ubuntu1404jdk17","text":"","title":"Ubuntu14.04\u5b89\u88c5JDK1.7"},{"location":"python/python/sf-express/#_3","text":"\u524d\u5f80 \u5b98\u7f51 \u4e0b\u8f7d\u5b89\u88c5\u5305\uff0c\u5c06\u5b89\u88c5\u5305\u62f7\u8d1d\u81f3\u4e3b\u673a\u5f85\u7528\u3002","title":"\u5b98\u7f51\u4e0b\u8f7d\u5b89\u88c5\u5305"},{"location":"python/python/sf-express/#_4","text":"\u521b\u5efa\u6587\u4ef6\u5939 sudo mkdir /usr/lib/java \u89e3\u538b\u538b\u7f29\u5305\u81f3\u6587\u4ef6\u5939 sudo tar zxvf jdk-7u80-linux-x64.tar.gz -C /usr/lib/java","title":"\u521b\u5efa\u6587\u4ef6\u5939\u3001\u89e3\u538b\u6587\u4ef6"},{"location":"python/python/sf-express/#_5","text":"sudo nano /etc/profile \u6587\u4ef6\u7ed3\u5c3e\u52a0\u5165\u73af\u5883\u53d8\u91cf\u5185\u5bb9\uff1a #set java environment export JAVA_HOME=/usr/lib/java/jdk1.7.0_80 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH \u8bbe\u7f6e\u5b8c\u73af\u5883\u53d8\u91cf\u4e4b\u540e\u6267\u884c\u547d\u4ee4\u8ba9\u8bbe\u7f6e\u751f\u6548 source /etc/profile","title":"\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf"},{"location":"python/python/sf-express/#jdk","text":"sudo update-alternatives --install /usr/bin/java java /usr/lib/java/jdk1.7.0_80/bin/java 300 sudo update-alternatives --install /usr/bin/javac javac /usr/lib/java/jdk1.7.0_80/bin/javac 300","title":"\u8bbe\u7f6e\u9ed8\u8ba4\u7684JDK"},{"location":"python/python/sf-express/#ubuntujdk","text":"dreamgo@dreamgo:/usr/lib/java$ java -version java version \"1.7.0_80\" Java(TM) SE Runtime Environment (build 1.7.0_80-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)","title":"\u68c0\u67e5Ubuntu\u7684JDK\u7248\u672c"},{"location":"python/python/sf-express/#sdk","text":"","title":"\u8fd0\u5355\u9762\u5355\u81ea\u52a9\u6253\u5370SDK"},{"location":"python/python/sf-express/#_6","text":"\u62f7\u8d1d csim_waybill_print_service_V1.0.5.jar \u81f3\u670d\u52a1\u5668 chmod -R 777 csim_waybill_print_service_V1.0.5.jar \u5bf9\u6587\u4ef6\u6388\u6743\uff0c\u4ee5\u786e\u4fdd\u8be5jar\u80fd\u6b63\u786e\u751f\u6210\u65e5\u5fd7\u6587\u4ef6\u3002 sudo java -jar csim_waybill_print_service_V1.0.5.jar 8888 #\u7aef\u53e3\u53f7\u4e0d\u586b\u65f6\u9ed8\u8ba4\u4e3a4040\uff0c\u8bf7\u68c0\u67e5\u9632\u706b\u5899\u72b6\u6001\u3002\uff08\u591a\u6b21\u53cd\u590d\u542f\u52a8\\\u5173\u95ed\u4f1a\u5bfc\u81f4\u670d\u52a1\u5f00\u542f\u662f\u5361\u5728\u7b2c3\u6b65\uff0c\u5df2\u63d0\u4ea4\u987a\u4e30\u6280\u672f\uff0c\u7b49\u5f85\u9a8c\u8bc1\u89e3\u51b3\u3002\uff09","title":"\u8fd0\u884c\u670d\u52a1"},{"location":"python/python/sf-express/#python","text":"\u4f7f\u7528\u7684100x150mm,\u8f6cbase64\u7684\u63a5\u53e3\uff0c\u4ee3\u7801\u53c2\u89c1\u6700\u4e0a\u65b9\u3002\u53ef\u7ed3\u5408\u9700\u6c42\u548cnodejs\u4ee5\u53cajava\u7248\u672cdemo\u81ea\u884c\u4fee\u6539\u3002","title":"python\u8bf7\u6c42\u63a5\u53e3"},{"location":"python/python/sf-express/#_7","text":"\u5b89\u88c5\u5b57\u4f53\u662f\u4e3a\u4e86\u89e3\u51b3\u5728Linux\u7cfb\u7edf\u4e0a\uff0c\u751f\u6210\u7684\u5feb\u9012\u9762\u5355\u65e0\u6cd5\u6b63\u5e38\u663e\u793a\u76ee\u7684\u5730\u7f16\u7801\u7684\u95ee\u9898\u3002","title":"\u5b89\u88c5\u5b57\u4f53"},{"location":"python/python/sf-express/#_8","text":"\u5b57\u4f53\u5305 simhei.ttf \u53ef\u5728 SF-CSIM-PRINTER-SDK-V1.0.5 \u538b\u7f29\u5305\u4e2d\u7684 linux\u7cfb\u7edf\u542f\u52a8\u6ce8\u610f\u4e8b\u9879 \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002","title":"\u4e0b\u8f7d\u5b57\u4f53"},{"location":"python/python/sf-express/#_9","text":"fc-list :lang=zh","title":"\u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u4e2d\u5df2\u5b89\u88c5\u7684\u4e2d\u6587\u5b57\u4f53"},{"location":"python/python/sf-express/#simsunttf","text":"mkdir -p /usr/share/fonts/my_fonts \u62f7\u8d1d\u5b57\u4f53\u6587\u4ef6\u81f3\u8be5\u6587\u4ef6\u5939 cd /usr/share/fonts/my_fonts apt-get install xfonts-utils mkfontscale mkfontdir #\u6ce8\u610f \u662f mkfontdir \u4e0d\u662f mkfontsdir\uff0c\u6b64\u5904\u987a\u4e30\u6587\u6863\u6709\u9519\u8bef\u3002 ll # \u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u5bf9\u5e94\u7684fonts.dir \u548c fonts.scale\u6587\u4ef6","title":"\u590d\u5236simsun.ttf\u5b57\u4f53\u6587\u4ef6"},{"location":"python/python/sf-express/#_10","text":"fc-list :lang=zh","title":"\u518d\u6b21\u67e5\u770b\u5df2\u5b89\u88c5\u7684\u5b57\u4f53"},{"location":"python/python/sf-express/#_11","text":"","title":"\u81ea\u52a8\u5f00\u542f\u81ea\u52a9\u9762\u5355\u6253\u5370\u670d\u52a1"},{"location":"python/python/sf-express/#supervisord","text":"fengqiao.conf : [program:feng_qiao] command=java -jar csim_waybill_print_service_V1.0.5.jar directory=/django/fengqiao stdout_logfile=/django/fengqiao/out.log stderr_logfile=/django/fengqiao/error.log autostart=true autorestart=true user=root startsecs=10 \u7528\u6237 user \u5fc5\u987b\u662f root \uff0c\u8d85\u7ba1\u540d\u79f0\u4e0d\u662f root \u7684\u4e5f\u5199 root \uff0c\u4e0d\u7136\u4f1a\u6743\u9650\u4e0d\u8db3\u3002 supervisord \u76f8\u5173\u64cd\u4f5c\uff0c\u90e8\u7f72\u8bf7\u53c2\u8003 Supervisor\u4f7f\u7528\u7b14\u8bb0\u53cacelery\u751f\u4ea7\u90e8\u7f72 \u3002","title":"supervisord"},{"location":"python/python/sf-express/#_12","text":"#!/bin/sh SERVICE_NAME = fengqiao PATH_TO_JAR = /django/fengqiao/csim_waybill_print_service_V1.0.5.jar PID_PATH_NAME = /tmp/fengqiao-pid case $1 in start ) echo \"Starting $SERVICE_NAME ...\" if [ ! -f $PID_PATH_NAME ] ; then nohup java -jar $PATH_TO_JAR /tmp 2 >> /dev/null >> /dev/null & echo $! > $PID_PATH_NAME echo \" $SERVICE_NAME started ...\" else echo \" $SERVICE_NAME is already running ...\" fi ;; stop ) if [ -f $PID_PATH_NAME ] ; then PID = $( cat $PID_PATH_NAME ) ; echo \" $SERVICE_NAME stoping ...\" kill $PID ; echo \" $SERVICE_NAME stopped ...\" rm $PID_PATH_NAME else echo \" $SERVICE_NAME is not running ...\" fi ;; restart ) if [ -f $PID_PATH_NAME ] ; then PID = $( cat $PID_PATH_NAME ) ; echo \" $SERVICE_NAME stopping ...\" ; kill $PID ; echo \" $SERVICE_NAME stopped ...\" ; rm $PID_PATH_NAME echo \" $SERVICE_NAME starting ...\" nohup java -jar $PATH_TO_JAR /tmp 2 >> /dev/null >> /dev/null & echo $! > $PID_PATH_NAME echo \" $SERVICE_NAME started ...\" else echo \" $SERVICE_NAME is not running ...\" fi ;; esac","title":"\u4f5c\u4e3a\u670d\u52a1 \u6682\u672a\u6d4b\u8bd5\u901a\u8fc7"},{"location":"tags/","text":"\u6807\u7b7e \u6587\u7ae0\u5217\u8868: CSS Selenium HTML5 Selenium JavaScript Selenium Other Selenium","title":"\u6807\u7b7e"},{"location":"tags/#_1","text":"\u6587\u7ae0\u5217\u8868:","title":"\u6807\u7b7e"},{"location":"tags/#css","text":"Selenium","title":"CSS"},{"location":"tags/#html5","text":"Selenium","title":"HTML5"},{"location":"tags/#javascript","text":"Selenium","title":"JavaScript"},{"location":"tags/#other","text":"Selenium","title":"Other"}]}